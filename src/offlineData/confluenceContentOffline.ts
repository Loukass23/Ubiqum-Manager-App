export const confluenceContentOffine = [
  {
    "title": "Web Development Students Home",
    "content": "<ac:layout><ac:layout-section ac:type=\"single\"><ac:layout-cell><p class=\"auto-cursor-target\">Welcome to the Student's Space!</p><p><br /></p></ac:layout-cell></ac:layout-section><ac:layout-section ac:type=\"two_equal\"><ac:layout-cell><h2>Recent space activity</h2><p><ac:structured-macro ac:name=\"recently-updated\" ac:schema-version=\"1\" ac:macro-id=\"a615744d-28fc-4e13-ab88-945d556ea1db\"><ac:parameter ac:name=\"types\">page, comment, blogpost</ac:parameter><ac:parameter ac:name=\"max\">5</ac:parameter><ac:parameter ac:name=\"hideHeading\">true</ac:parameter><ac:parameter ac:name=\"theme\">social</ac:parameter></ac:structured-macro></p></ac:layout-cell><ac:layout-cell><h2>Space contributors</h2><p><ac:structured-macro ac:name=\"contributors\" ac:schema-version=\"1\" ac:macro-id=\"9352e9d9-ecc8-4570-8bb7-89f78cf808b4\"><ac:parameter ac:name=\"mode\">list</ac:parameter><ac:parameter ac:name=\"scope\">descendants</ac:parameter><ac:parameter ac:name=\"limit\">5</ac:parameter><ac:parameter ac:name=\"showLastTime\">true</ac:parameter><ac:parameter ac:name=\"order\">update</ac:parameter></ac:structured-macro></p></ac:layout-cell></ac:layout-section><ac:layout-section ac:type=\"single\"><ac:layout-cell><p><br /></p></ac:layout-cell></ac:layout-section></ac:layout>",
    "conflPageId": "426041",
    "conflChildrenId": [

    ]
  },
  {
    "title": "JAVA Battleship Project",
    "content": "<p><a href=\"https://codeacademy.ubiqum.com/mc/poa?productID=5708&amp;taskID=3009#introduction\">INTRODUCTION</a><br /><span style=\"color: rgb(35,31,32);\">You've been asked to build a web-based multi-player game application. Your first task is to implement and display a database of players. The structure of the web application is more than just HTML pages. There needs to be</span></p><ul><li><span style=\"color: rgb(35,31,32);\">a database table with player data</span></li><li><span style=\"color: rgb(35,31,32);\">a web service that can send a list of those players, in JSON form, in response to the URL&nbsp;<strong>/players</strong></span></li><li><span style=\"color: rgb(35,31,32);\">a web page that can display&nbsp;the desired list in a readable way, using JavaScript to get the data and construct the HTML</span></li></ul><p><span style=\"color: rgb(35,31,32);\"><strong>DON'T PANIC!</strong>&nbsp;There's are many things mentioned in the email that are probably completely mysterious to you. That's normal, especially at the start of a new project. It's not expected you know or understand all these terms and concepts. This is where you get to learn them.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Java</span></h2><p><span style=\"color: rgb(35,31,32);\">Java is an object-oriented programming language used for many purposes, but especially useful for creating the back end for web applications. The email refers to a number of Java concepts.&nbsp;<strong>Classes</strong>&nbsp;are a way to&nbsp;organize Java code. Classes specify how and where data should be stored. Classes also define&nbsp;<strong>methods</strong>&nbsp;for manipulating that data. When a Java program runs, it creates&nbsp;<strong>instances</strong>&nbsp;of those classes to hold particular data values. You'll be learning a lot about Java in each task. The&nbsp;<strong>Resources</strong>&nbsp;tab above has links to get you started.</span></p><h2><span style=\"color: rgb(153,153,153);\">Java Development Kit (JDK)</span></h2><p><span style=\"color: rgb(35,31,32);\">The Java Development Kit, also sometimes called the Java System Development Kit (SDK), refers to a set of programs that&nbsp;compile and run Java code. There are quite a few programs but here are the most important:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">The Java Runtime Engine (JRE) &ndash; this is the program that executes compiled Java programs.</span><ul><li><span style=\"color: rgb(35,31,32);\">The JRE&nbsp;must be installed to run Java.</span></li><li><span style=\"color: rgb(35,31,32);\">Most systems used to install the JRE by default, because web browsers used it. Because of security issues, this is no longer true.</span></li><li><span style=\"color: rgb(35,31,32);\">If you install the JDK, you may end up&nbsp;with&nbsp;two copies of the JRE, one installed on its own for browsers, and one installed by the JDK. This is not a problem.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">The Java Compiler &ndash; this is a program that compiles Java source code into compiled&nbsp;Java.</span><ul><li><span style=\"color: rgb(35,31,32);\">This is only installed if you have the JDK.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">The Java Archive tool &ndash; this is a program that assembles compiled Java files into a runnable program, called a JAR file.</span></li></ul><h2><span style=\"color: rgb(153,153,153);\">Integrated Development Environment (IDE)</span></h2><p><span style=\"color: rgb(35,31,32);\">The JDK does not include an editor. You can edit Java source code with any plain text editor, even&nbsp;<strong>Notepad</strong>, though this is not recommended. At the very least you want a programmer editor. There are many lists of such editors, e.g.,&nbsp;</span><a href=\"https://www.elegantthemes.com/blog/resources/the-11-best-code-editors-available-in-2015\"><span style=\"color: rgb(51,122,183);\">this one</span></a><span style=\"color: rgb(35,31,32);\">.</span><br /><span style=\"color: rgb(35,31,32);\">For Java, it's more common to install an integrated development environment (IDE) that includes</span></p><ul><li><span style=\"color: rgb(35,31,32);\">a text editor, with syntax coloring and indentation customized for Java code</span></li><li><span style=\"color: rgb(35,31,32);\">a file management system, so you can open and edit many files in a project at once</span></li><li><span style=\"color: rgb(35,31,32);\">compile and run tools, so it takes just one button click to save files, run the compiler, run the JAR tool, then run the final program</span></li><li><span style=\"color: rgb(35,31,32);\">debugging tools so that you can tell Java to pause execution at certain points in the code so that you can inspect the values of variables</span></li></ul><p><a href=\"http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/keplersr1\"><span style=\"color: rgb(51,122,183);\">Eclipse</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;and&nbsp;</span><a href=\"https://netbeans.org/features/java/\"><span style=\"color: rgb(51,122,183);\">Netbeans</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;are two popular, mature, free Java IDEs. Increasingly popular and very similar to Eclipse and Netbeans is&nbsp;</span><a href=\"https://www.jetbrains.com/idea/\"><span style=\"color: rgb(51,122,183);\">Intellij IDEA</span></a><span style=\"color: rgb(35,31,32);\">. Google selected Intellij IDEA to be the basis of&nbsp;</span><a href=\"http://developer.android.com/tools/studio/index.html\"><span style=\"color: rgb(51,122,183);\">Android Studio</span></a><span style=\"color: rgb(35,31,32);\">,&nbsp;their IDE for&nbsp;Android Java development.</span><br /><span style=\"color: rgb(35,31,32);\">You wil be using the&nbsp;<strong>Community</strong>&nbsp;editon of Intellij IDEA. The Community edition is free, but&nbsp;lacks some of the advanced features of the commercial version.</span></p><h2><span style=\"color: rgb(153,153,153);\">Gradle</span></h2><p><span style=\"color: rgb(35,31,32);\">Most modern&nbsp;programs, in any language, are a combination of many source code files plus libraries of pre-written code from other sources. Building such&nbsp;programs involves a number of steps, such as</span></p><ul><li><span style=\"color: rgb(35,31,32);\">setting various options needed for properly compiling files, including specifying which directories have the project code</span></li><li><span style=\"color: rgb(35,31,32);\">downloading any library files needed that are not currently present</span></li><li><span style=\"color: rgb(35,31,32);\">detecting which files have changed and re-compiling them</span></li><li><span style=\"color: rgb(35,31,32);\">moving compiled files and other resources to special directories, e.g., a web server's application area</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The steps needed to build an application are&nbsp;kept in&nbsp;a&nbsp;project build file. &nbsp;Most IDEs have their own internal format, but there are also&nbsp;standard systems for managing Java projects that are independent of specific IDEs. Two popular ones are&nbsp;</span><a href=\"https://maven.apache.org/\"><span style=\"color: rgb(51,122,183);\">Maven</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;and&nbsp;</span><a href=\"http://gradle.org/\"><span style=\"color: rgb(51,122,183);\">Gradle</span></a><span style=\"color: rgb(35,31,32);\">. One of the nice features of these systems is that you can re-build someone else's Java project by just downloading the code directory, which includes a Maven (or Gradle) file. Simply running Maven (or Gradle) will then download all the other files you need, compile the source code, and build the program.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Most Java IDEs let you import and use a Maven or Gradle file, making it easy to edit and run the project. Intellij IDEA can import either.</span></p><h2><span style=\"color: rgb(153,153,153);\">JavaScript</span></h2><p><span style=\"color: rgb(35,31,32);\">JavaScript &ndash; no relation at all to Java &ndash; is a scripting language, available for use on web pages in&nbsp;all modern&nbsp;browsers. A very common use of JavaScript on web pages these days is to respond to user interactions with a web page, fetch data from a back-end web service, and construct HTML to display that data to the user.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">JavaScript Object Notation (JSON)</span></h2><p><span style=\"color: rgb(35,31,32);\">When computers need to pass data to each other, it helps to have a standard format for representing that data. Programs may have very complicated data, e.g., a scoreboard with a list of players and how many games they've won, lost, or drawn. Therefore it helps to have a data format that is simple, clear, and general enough to hold any structured information.&nbsp;<strong>JSON</strong>&nbsp;is one such notation that has become very popular. It is based on a data format that was developed for JavaScript. There are libraries for creating and using&nbsp;JSON for all modern programming languages. &nbsp;JSON is a modern alternative to the&nbsp;<strong>eXtensible Markup Language (XML)</strong>, an HTML-like format that was very general, but suffered from being more complicated.</span></p><h2><span style=\"color: rgb(153,153,153);\">REST and RESTful Web Services</span></h2><p><span style=\"color: rgb(35,31,32);\">REST is not a programming language or library, though there are many libraries to help do REST. REST is an approach to designing web application interfaces. The key idea is to think of a web application as a collection of documents, i.e., resources. This seems obvious when talking about HTML files, images, sound files, and so on. It becomes less obvious when thinking about a shopping site or a game.</span><br /><span style=\"color: rgb(35,31,32);\">Many people approached such dynamic applications as &quot;remote procedure calls,&quot; i.e., a client program would send a command, in URL form, to a server, and wait for a response. Roy Fielding, in his doctoral dissertation, pointed out that this was not a scalable way to build services. It also led to unbookmarkable web sites with no &quot;back&quot; button support and many other user-unfriendly features.</span><br /><span style=\"color: rgb(35,31,32);\">Fielding proposed making resources the central concept in any web service, no matter how dynamic.&nbsp;A shopping site has a shopping cart resource. A game has a game view. All resources can be gotten with&nbsp;unique unchanging URLs. Some URLs can be used to send&nbsp;requests to modify a&nbsp;resource.</span></p><h2><span style=\"color: rgb(153,153,153);\">Spring and Spring Boot</span></h2><p><span style=\"color: rgb(35,31,32);\"><strong>Spring</strong>&nbsp;is a large set of libraries for Java to make it easier to build modern Java web applications and RESTful web services.&nbsp;<strong>Spring Boot</strong>&nbsp;is a set of tools to make it easier to use&nbsp;<strong>Spring</strong>.</span><br /><ac:structured-macro ac:name=\"anchor\" ac:schema-version=\"1\" ac:macro-id=\"e03eefbe-19d8-44d2-b8ee-d64dd658018d\"><ac:parameter ac:name=\"\">_GoBack</ac:parameter></ac:structured-macro></p>",
    "conflPageId": "524352",
    "conflChildrenId": [
      "260997121",
      "260472849"
    ]
  },
  {
    "title": "NYSL Project",
    "content": "<ac:layout><ac:layout-section ac:type=\"two_right_sidebar\"><ac:layout-cell><h1><span style=\"color: rgb(0,0,0);\"><strong>About This Project...</strong></span></h1><h2><span style=\"color: rgb(0,0,0);\"><strong><ac:image ac:border=\"true\" ac:width=\"500\"><ri:attachment ri:filename=\"NYSL banner.png\" ri:version-at-save=\"1\" /></ac:image></strong></span></h2><h2><span style=\"color: rgb(0,0,0);\">NYSL Website</span></h2><p>Welcome!</p><p>In this course, you are an independent contractor who develops custom websites for small organizations. The Northside Youth Soccer League (NYSL) has hired you to develop a website for their soccer teams. You will work on this website on your own and will learn to use modern HTML and CSS to produce an attractive, informative multi-page website based on the client's requirements.</p><p>To do this, you'll work through a series of tasks designed by experts in programming and web development to help you create a robust and useful website, and to reflect real challenges that arise during the website development process.</p><h2>Course Resources</h2><p>This project consists of two one-week sprints (&quot;sprints&quot; are a term to describe short, intense work periods per the Agile Methodology. You'll learn more about this soon!). Each sprint is described briefly below. Click the links to view that sprint's Resources.</p><h4><strong><a href=\"https://ubiqum.atlassian.net/wiki/spaces/STUDENTS/pages/222625843/Getting+Started\">Getting Started &gt;</a></strong></h4><p>Before you start coding, read this introduction the basics of website development with HTML and CSS.</p><h4><strong><a href=\"https://ubiqum.atlassian.net/wiki/spaces/STUDENTS/pages/221413402/NYSL+Project+Sprint+1\">Sprint 1 &gt;</a></strong></h4><p>You will use HTML to build the first three webpages for NYSL, a youth football league, and learn how to apply some basic styles with CSS.&nbsp;</p><h4><ac:link><ri:page ri:content-title=\"NYSL Project Sprint 2\" ri:version-at-save=\"10\" /><ac:plain-text-link-body><![CDATA[Sprint 2 >]]></ac:plain-text-link-body></ac:link></h4><p>Learn some more advanced HTML/CSS techniques to create and style interactive website elements, like forms and menus.</p><h2>Essential Skills</h2><p>In this project you will learn the following skills of coding and development:</p><ul><li>Creating basic webpages with HTML</li><li>Adding styles with CSS</li><li>Reading and interpreting requirements</li><li>Applying basic html/css syntax standards</li><li>Creating lists and tables with HTML/CSS</li><li>Building interactive form elements with HTML/CSS</li><li>Using I-frames to embed external elements onto webpages</li><li>Storing projects using Git and Github</li><li>Participating in code reviews and product demos</li></ul><p><br /></p></ac:layout-cell><ac:layout-cell><h2>FAQs</h2><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"2db88199-c07c-44c0-9568-abe7f11c9033\"><ac:parameter ac:name=\"title\">What is website development?</ac:parameter><ac:rich-text-body><p>Website Development is the process of creating a website. The web development process includes:</p><ul><li>Gathering the information to display on the website</li><li>Deciding on a look and feel for the website</li><li>Coding the web pages using HTML and CSS</li><li>Validating that the HTML and CSS coding is correct and follows industry standards</li><li>Testing that the web pages work as specified, on multiple browsers</li></ul><p><br /></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"71e9be22-0ea0-491b-b91a-4961217d4ab8\"><ac:parameter ac:name=\"title\">What's the difference between HTML and CSS?</ac:parameter><ac:rich-text-body><p>The simplest way to think about the difference between HTML and CSS is that HTML is the content and CSS the design/style of a webpage. If you understand that, and only that, you already know enough to begin building webpages. But if you want to dig a little bit deeper, check out the infographic in the article below:</p><p><a href=\"https://www.codingdojo.com/blog/html-vs-css-inforgraphic\">HTML vs CSS Infographic</a></p><p><br /></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"e23ea93b-4cee-4a21-9cbc-b10f9a0200cf\"><ac:parameter ac:name=\"title\">Do I have to build the NYSL website or can I build my own?</ac:parameter><ac:rich-text-body><p>For now, you should build the NYSL project as it is designed to allow you to build the elements that are essential to learning the basics of webpage development. However, if you have time left over at the end of the project or want to apply your work on NYSL to your own project outside of class, go for it!</p><p><br /></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"b60b905b-dfbd-476f-b119-c1a2a25109c8\"><ac:parameter ac:name=\"title\">What are &quot;requirements&quot;?</ac:parameter><ac:rich-text-body><p>&quot;Requirements&quot; are what you will build as a developer. They are often communicated via text and &quot;wireframes&quot;, which are simple, low fidelity product designs. There are 3 types of requirements:</p><p><strong>Business requirements</strong>: what is the impact of what your building on the client's business?</p><p><strong>User requirements</strong>: how will your end users interact with your product? What are the most common &quot;stories&quot; for what they will do and why?</p><p><strong>Functional requirements</strong>: what technically is happening when users interact with the system? For example, let's say a user fills out a form. Their information typically won't just sit in the browser...so when they submit it, where it goes and how it gets there are examples of functional requirements.</p><p><br /></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"10cc7325-8180-42e8-bd42-28e289451766\"><ac:parameter ac:name=\"title\">What is &quot;Agile&quot;?</ac:parameter><ac:rich-text-body><p>Agile is a modern method of project management that emphasizes iteration and adaption in place of extensive, highly detailed planning. It is the standard for nearly all modern technology development projects.&nbsp;&nbsp;</p><p>We will conduct multiple workshops thoughout the duration of the program but if you would like to read more now, this website offers a nice, simple overview:</p><p><a href=\"http://www.agilenutshell.com/\">http://www.agilenutshell.com/</a></p><p><br /></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p></ac:layout-cell></ac:layout-section></ac:layout>",
    "conflPageId": "221413398",
    "conflChildrenId": [
      "222625843",
      "221413402",
      "228425766",
      "222363670"
    ]
  },
  {
    "title": "NYSL Project Sprint 1",
    "content": "<h2>Overview Of Your Task</h2><p>You have been asked by League Director, Tom Denton, to create a website for NYSL. Tom's sketch shows three web pages:</p><ul><li>A Home Page to be the main page for the website.</li><li>An About NYSL Page with general information on NYSL.</li><li>A Contact Page with general contact information for the league.</li></ul><p>There are two parts to this task:</p><ol><li>Entering the content.</li><li>Creating a look that matches the design sketch.</li></ol><p>A good practice is to complete the first part, and get approval from the client that the material is correct, before completing the second part. That way, the client can add information they forgot and remove material that no longer looks that important before the effort is spent on designing the layout. So for this task, focus on the <strong>content</strong> shown in the sketch (i.e., text, images, and links), the <strong>organization</strong> shown in the sketch (i.e., headers and paragraphs) and the <strong>steps</strong> here and in your Trello board that outlines one way to get the content in place. Don't worry yet about layout and indentation. You will do that in the next task.</p><h2>Epic 1:&nbsp;<span style=\"color: rgb(61,71,77);\">Install and configure the web development toolkit</span></h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"595e8797-2294-42d1-a331-a052105610e9\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources...</ac:parameter><ac:rich-text-body><h4>Task 1:&nbsp;Install and set up your web development tools</h4><p>The tools you need for web development are pretty simple. See Shay Howe's site <a href=\"https://learn.shayhowe.com/\">Learn to Code HTML &amp; CSS: Develop &amp; Style Websites</a>, which discusses tools in Lesson 1.</p><ol><li>A modern browser. We recommend Chrome.</li><li>Visual Studio Code:&nbsp;<a href=\"https://code.visualstudio.com/?wt.mc_id=vscom_freedevoffers\">https://code.visualstudio.com/?wt.mc_id=vscom_freedevoffers</a>&nbsp;<ul><li>Also, you can install the Live Server plugin for Visual Studio Code, here's a <a href=\"https://www.youtube.com/watch?v=8pOv1V4w3N8\">link </a>that can help you with the setup.</li></ul></li></ol><p><strong>Task 2:&nbsp;Use a text editor to create basic.html</strong></p><p>Use your text editor to create basic.html with the HTML for the &quot;Most basic web page in the world&quot; example from Lloyd's book. Alternatively, you could use the &quot;Hello World&quot; example from Howe's site. (Note: .html is the standard file extension for HTML code.)</p><ul><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> Make sure the file is not called basic.html.txt!</span></li></ul><p>After saving the file, in your operating system's file manager (Windows Explorer on a PC or Finder on a Mac), double-click on basic.html.</p><p><strong>Task 3:&nbsp;Verify that your page looks like it should</strong></p><p>Your default browser should open and display your web page.</p><ul><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> If your text editor opens when you double-click the file, then close the file and start up your browser. Use the File | Open File command in your browser to open your file.</span></li></ul><p>Make sure the page looks the way you expected it to from Howe's site.</p></ac:rich-text-body></ac:structured-macro><h2><span style=\"color: rgb(61,71,77);\"><span style=\"color: rgb(61,71,77);\">Epic 2: Create About Us, Home, and Contact pages</span></span></h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"ba020ada-dd4a-43e8-b7c7-d428562aa9f5\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources...</ac:parameter><ac:rich-text-body><p><strong>Task 1: Create about.html</strong></p><p>This is a good starting point for working on HTML with text. The page has a lot of text and some headers.</p><p>First, call the file &quot;about.html&quot;. Use HTML skeleton code as a template:</p><p style=\"margin-left: 30.0px;\">&lt;!DOCTYPE html&gt;</p><p style=\"margin-left: 30.0px;\">&lt;html lang=&quot;en&quot;&gt;</p><p style=\"margin-left: 30.0px;\">&lt;head&gt;</p><p style=\"margin-left: 60.0px;\">&lt;meta charset=&quot;utf-8&quot;&gt;</p><p style=\"margin-left: 60.0px;\">&lt;title&gt;Hello World&lt;/title&gt;</p><p style=\"margin-left: 30.0px;\">&lt;/head&gt;</p><p style=\"margin-left: 30.0px;\">&lt;body&gt;</p><p style=\"margin-left: 60.0px;text-align: left;\">&lt;h1&gt;Hello World&lt;/h1&gt;</p><p style=\"margin-left: 60.0px;\">&lt;p&gt;This is a web page.&lt;/p&gt;</p><p style=\"margin-left: 30.0px;\">&lt;/body&gt;</p><p style=\"margin-left: 30.0px;\">&lt;/html&gt;</p><p><strong>Task 2: Add title and page body text to About Us</strong></p><p>Next, title the page &quot;About NYSL&quot;. (This is the name of the Tab, this title goes within the &lt;head&gt;)</p><p>Just work on the paragraphs, headers, and text that will eventually become links. You can ignore the images for now. And don't worry about underlining the links. That will happen when you turn them into real links later.</p><p>Work in small steps:</p><ul><li>Add paragraphs and headings one at a time.</li><li>Save and view in a browser after each addition.</li><li>If something looks wrong, stop, figure out why, and fix.</li></ul><p><strong>Task 3: Create home.html</strong></p><p><strong>Task 4: Add title and page body text to Home</strong></p><p>Follow the process you used for the About NYSL page to create the text content for the Home and Contact pages. Use titles that are short but distinctive.</p><ul><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> Titles identify each page in a browser's history. &quot;Home&quot; and &quot;Contact&quot; are not helpful titles in a history list.</span></li></ul><p>It's also important to use filenames that are short but distinctive.</p><ul><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> Avoid spaces, punctuation, capitalization, etc. Such files may not work properly when moved to a web server with a different operating system.</span></li><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> Special case: Use index.html for a Home Page. This is the standard name for any website's home (or starting) page.</span></li></ul><p><strong>Task 5: Create contact.html</strong></p><p><strong>Task 6: Add title and page body text to Contact Us</strong></p></ac:rich-text-body></ac:structured-macro><h2><span style=\"color: rgb(61,71,77);\"><span style=\"color: rgb(61,71,77);\"><span style=\"color: rgb(61,71,77);\">Epic 3: Add images to your pages and link them together</span></span></span></h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"420f9fb3-8650-4b63-a642-c2cda591cf30\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources...</ac:parameter><ac:rich-text-body><p><strong>Task 1: Add images to all 3 pages</strong></p><p>Add the images and logo to the web pages as indicated in the design sketch. See Howe's site for guidance on adding images.&nbsp;</p><p>Then, test the pages to ensure the images appear and are correctly positioned.</p><ul><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> It is helpful to specify both the height and width attributes for an image. When these are set, space is automatically reserved for the image on the web page.</span></li></ul><p><strong>Task 2: Review and resize as necessary</strong></p><p>Make sure all of your images are scaling correctly and look normal. If you want to take a slightly different approach from the initial wireframes with the size and position of your images, you can try it now.&nbsp;&nbsp;</p><p><strong>Task 3: Add links to each page that link them together</strong></p><p>Time to make those links at the top of each page work. Lesson 2 of Howe's site provides a nice overview of this.</p><ul><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> Do not make a link from a page to itself! While harmless, this is an example of poor &quot;ux design&quot;, which means that it is probably confusing to your users. (Howe's directions do link a page to itself, so you'll need to modify. You'll come back to this common problem in Task 2.)</span></li></ul><p>Test to be sure that each link on each page goes to the right place.</p><p><strong>Task 4: Add a link to the Contact page that opens an email window</strong></p><p>On the Contact Page, turn the email address into a link that when clicked, opens the user's email client. Test by clicking on the email in your browser. Your email application should open up with the email address from the link in the To field.</p><p><strong>Task 5: Test and validate HTML</strong></p><p>Run your HTML code through the <a href=\"https://validator.w3.org/\">validator</a>. Once it's clean it's time to move onto CSS!</p></ac:rich-text-body></ac:structured-macro><h2><span style=\"color: rgb(61,71,77);\"><span style=\"color: rgb(61,71,77);\"><span style=\"color: rgb(61,71,77);\"><span style=\"color: rgb(61,71,77);\">Epic 4: Add CSS styles to your website</span></span></span></span></h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"1adcd1e1-0de2-474b-aa80-78b7c35b1365\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources...</ac:parameter><ac:rich-text-body><p><strong>Task 1: Create your root folders</strong></p><p>Note: We&rsquo;ll call the folder where your HTML files are located your root folder. Everything for your website should be in this folder.</p><p>In the root folder, create a new subfolder called &quot;styles&quot;.</p><p><strong>Task 2: Create .css files and save</strong></p><p>In your text editor, create a new file with no text or code in it. Save the file under the styles directory, and name it &quot;nysl_1.css&quot;.</p><p>Create two more files the same way.</p><ul><li>Name one file &quot;nysl_2.css&quot;.</li><li>Name the other file &quot;nysl_3.css&quot;.</li></ul><p><strong>Task 3: Link your CSS stylesheet to the HTML pages</strong></p><p>In the HEAD section of each of your HTML pages, create a link to the nysl_1.css stylesheet, using the syntax shown in Lesson 1 of Howe's site.</p><p>Test each web page to make sure nothing visible on the page has been altered.</p><ul><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> An empty stylesheet should have no effect on your web pages.</span></li></ul><p><strong>Task 4: Write CSS to create design 1</strong></p><p>Use your text editor to add the CSS needed to match the first design sketch. Chapters 3-5 of Howe's site can help you. For help on images, see Lesson 9 of Howe's site.</p><p>Add the CSS to nysl_1.css to make the HTML elements in your HTML pages, e.g., fonts and headings, closely match the first design sketch.</p><p>Test the stylesheet. Reload your pages in your browser to see how they look.</p><ul><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> Be sure to save both your HTML and CSS files!</span></li><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> If the styles you've selected do not display, check to make sure the filename and style link in your HTML pages match exactly.</span></li></ul><p><strong>Task 5: Write CSS to implement design 2</strong></p><p>Change your HTML files to link to nysl_2.css,&nbsp; then verify that the HTML pages now look unstyled.</p><p>Edit nysl_2.css to have the CSS for the look and feel of the second design sketch.</p><p>Test the stylesheet.</p><ul><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> Reloading the pages in your browser should show the new styles.</span></li></ul><p><strong>Task 6:&nbsp;Create your own original design and build it out</strong></p><p>Repeat the steps from Task 5 for the file nysl_3.css.</p><p>Browse the Internet to find pages you like for inspiration. Then, create a design that you think the client will like. We've included some links to sites for inspiration that you can find in the External Resources page.&nbsp;&nbsp;</p><p>Don't forget to test the stylesheet!</p><p><strong>Task 7: Validate your HTML <a href=\"https://validator.w3.org/\">validator</a>&nbsp;and CSS&nbsp;<a href=\"https://jigsaw.w3.org/css-validator/\">validator</a></strong></p></ac:rich-text-body></ac:structured-macro><h2><span style=\"color: rgb(61,71,77);\"><span style=\"color: rgb(61,71,77);\"><span style=\"color: rgb(61,71,77);\"><span style=\"color: rgb(61,71,77);\">Extra: Trello Board</span></span></span></span></h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"74c43cca-6322-4e4f-9366-c8133c23e295\"><ac:parameter ac:name=\"title\">View</ac:parameter><ac:rich-text-body><p><ac:structured-macro ac:name=\"trello-board\" ac:schema-version=\"1\" ac:macro-id=\"e220cacd-d3aa-4905-87c6-493dfd61bd79\"><ac:parameter ac:name=\"url\">https://trello.com/b/Hg9ZgOrA</ac:parameter></ac:structured-macro></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><h2>Extra: Email Attachments</h2><p class=\"auto-cursor-target\"><a href=\"https://drive.google.com/open?id=1djpTxqV5UMFI8JcfFfwWR8wYY3L0XJNj\"><br /></a></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"357fd131-2f39-4c53-a9ac-444b917f5a8f\"><ac:rich-text-body><p><a href=\"https://drive.google.com/open?id=1djpTxqV5UMFI8JcfFfwWR8wYY3L0XJNj\">Sprint</a><a href=\"https://drive.google.com/open?id=1djpTxqV5UMFI8JcfFfwWR8wYY3L0XJNj\">&nbsp;1 attachments</a></p><p><a href=\"https://drive.google.com/open?id=1UNpO6-XL64XeudWgMyFjq8HARLujCpKB\">Sprint 2 attachments</a></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><p><br /></p>",
    "conflPageId": "221413402",
    "conflChildrenId": [

    ]
  },
  {
    "title": "External Resources",
    "content": "<p><span style=\"color: rgb(255,0,0);\"><strong>PRO TIP: Create a folder in your browser called something like &quot;HTML/CSS Resources&quot; and bookmark the webpages linked below!</strong></span></p><h2>HTML</h2><ul><li><a href=\"https://learn.shayhowe.com/\">Learn to Code HTML &amp; CSS: Develop &amp; Style Websites</a> by Shay Howe<ul><li>TIP: You'll come back to using CSS on the NYSL site in a later task.</li><li>Lessons discuss concepts first, then demonstrate them in practice through building a sample site.</li><li><a href=\"https://learn.shayhowe.com/html-css/building-your-first-web-page/\">Lesson 1</a> introduces HTML and CSS basics, text editors, and sets up the structure of a simple web page, including using CSS to style it (minimally).</li><li><a href=\"https://learn.shayhowe.com/html-css/getting-to-know-html/\">Lesson 2</a> gets more into HTML, which you'll need to structure the NYSL site, and how to set up multiple pages, linked to each other.</li><li><a href=\"https://learn.shayhowe.com/html-css/adding-media/\">Lesson 9</a> introduces adding images.</li></ul></li></ul><h2>HTML Validator</h2><ul><li><a href=\"http://validator.w3.org/#validate_by_input\">The W3C HTML Validator</a> - This website will scan your HTML and report on everything incorrect, incomplete, or non-standard.<ul><li>Because your web pages are not available on a server, you'll need to use the provided interactive form, where you can copy and paste your entire HTML code.</li></ul></li></ul><h2>Web Browser</h2><p>You need at least one up-to-date version of one of the more popular browsers, such as Internet Explorer 9+, Mozilla Firefox 38+, Google Chrome 43+, Opera 20+, Safari 7+.</p><p><br /></p>",
    "conflPageId": "222363670",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Getting Started",
    "content": "<h2>Background</h2><p>The magic of web pages is that they use nothing more than plain text files. Plain text files have no fancy fonts, no colors, no pictures, no clickable links, and no animations. How then do web pages appear with all these things? With markup. Markup means that some of the text in a web page file is code that describes what to do with other text in the file. This code can say &quot;make the following text be blue and bold&quot; or &quot;display the image that is in the following file.&quot;</p><p>There are two important coding languages used to do this. HTML and CSS.</p><p>HTML stands for Hypertext Markup Language. Hypertext refers to the fact that HTML web pages can have links, i.e., text that when you click on it, you jump to another web page. This markup lets us hyperlink HTML files together into the web of documents we know so well today. HTML is used to label what different pieces of content are for, such as titles, the sections, links, lists, tables, and images.</p><h2>A Quick Demonstration</h2><p>You can see for yourself how HTML works. There is a neat web site called JS Bin where you can create, run, and share little snippets of web page code.</p><p><a href=\"https://jsbin.com/?html,output\">Open JS Bin</a>&nbsp;</p><p><ac:image ac:border=\"true\" ac:height=\"315\" ac:width=\"600\"><ri:attachment ri:filename=\"jsbin-home.png\" ri:version-at-save=\"1\" /></ac:image></p><p>Click the big X in the upper left to close the big banner. (If you want to get it back later, click on the small bin icon in the upper left.)</p><p>On the left, there is some HTML. This is boilerplate, i.e., HTML that every page has to have. The things between angle brackets, like &lt;head&gt; and &lt;body&gt;, are HTML instructions. They aren't displayed on a web page, but they can affect how things will look. You will learn what this HTML does very soon.</p><p>Let's add some HTML to show something.</p><p><ac:image><ri:attachment ri:filename=\"htmlJSBin.png\" ri:version-at-save=\"1\" /></ac:image></p><p>This is HTML code that says &quot;make a paragraph (p) containing the text 'Hello, World!' and label this paragraph 'test'. You'll see what the label is for in a second.</p><p>Copy the lines of HTML code above, switch to JS Bin, click on the line between &lt;body&gt; and &lt;/body&gt;, and paste the copied HTML.</p><p>As soon as you enter or change the HTML on the left, JS Bin displays the results that a browser would show on the right. Your screen should look like this now.</p><p><ac:image ac:border=\"true\" ac:width=\"600\"><ri:attachment ri:filename=\"jsbin-html-results.png\" ri:version-at-save=\"1\" /></ac:image></p><p>Congratulations! You just ran your first bit of working HTML code.</p><p>It is pretty plain though. HTML is all you need to make a readable web page, but it won't make a very pretty one. To make a page pretty, you use CSS.</p><p>CSS stands for Cascading Style Sheets. CSS is a language that lets you specify fonts, colors, indentation, positioning, table formats, and many other visual aspects of an HTML page.</p><p>Let's use CSS to make our HTML on JS Bin much more interesting. In JS Bin, click on the tab at the top that says CSS. This will open a box where you can enter CSS code. (You can open or close any JS Bin box by clicking on the appropriate tab.)</p><p><ac:image ac:border=\"true\" ac:width=\"600\"><ri:attachment ri:filename=\"jsbin-css-blank.png\" ri:version-at-save=\"1\" /></ac:image></p><p>Copy the lines of CSS code below and paste them into the CSS box.</p><p><ac:image><ri:attachment ri:filename=\"cssJSBin.png\" ri:version-at-save=\"1\" /></ac:image></p><p>You'll learn soon enough what all these things mean. For now, here's a quick summary of what each line of this CSS is telling a web browser to do:</p><ul><li><u>#test</u>: apply this styling information to the HTML item that has the ID test</li><li><u>background</u>: use a picture of the moon as the background; the picture is in a file at Flickr</li><li><u>background-size</u>: resize the picture to exactly cover the paragraph box</li><li><u>color</u>: make the text light green (here's a <a href=\"https://drafts.csswg.org/css-color-3/#svg-color\">list of CSS color names</a>)</li><li><u>font</u>: use a bold 14 pixel Arial font (a pixel is a standard tiny unit of size)</li><li><u>width</u> and <u>height</u>: make the paragraph box 140 pixels wide and high</li><li><u>border</u>: put a 2-pixel gray border around the paragraph</li></ul><p>If you copied all of the above CSS correctly, JS Bin should now look like this:</p><p><ac:image ac:width=\"600\"><ri:attachment ri:filename=\"jsbin-css-results.png\" ri:version-at-save=\"1\" /></ac:image></p><p><span style=\"color: rgb(35,31,32);\">Sweet! You've mixed text and graphics, using HTML and CSS.</span></p><h2>Browsers, Servers and HTTP</h2><p>The web works because of programs running on computers on the Internet send HTML and CSS files to each other, and display those files to you.</p><p>A <strong>web browser</strong> is a program you run on your computer that reads HTML and CSS and creates the visual display so familiar to web surfers. Web browsers are very complicated programs, but HTML and CSS files are comparatively quite simple.</p><p>A <strong>web server</strong> is a program running on some other computer that sends HTML and other types of files over a network to web browsers. It does this when it gets a request for a file. Those requests are themselves written in a language called <strong>HTTP</strong>, which stands for <strong>HyperText Transfer Protocol</strong>. You don't need to know what HTTP looks like to create web pages.</p><p>A web server and network connection are not required to see what an HTML file looks like. A web browser can open an HTML file you have on your own computer. This makes initial development and testing of web pages very easy.</p><p>A very useful tool when creating and testing web pages is an <strong>HTML validator</strong>. This is a program that checks your HTML for bad HTML syntax, from punctuation problems to the use of outdated HTML tags. The fact that a page looks OK in your browser is not a good test of your HTML. Browsers try to handle bad HTML, but they do so in different ways. A page with bad HTML might look fine in Firefox and completely broken in Internet Explorer. Fortunately, the <strong>World Wide Web Consortium (W3C)</strong> provides a free online HTML validator.&nbsp;</p><p><br /></p><p><br /></p><p><br /></p>",
    "conflPageId": "222625843",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Calendlys",
    "content": "<h2><strong>Barcelona</strong></h2><h3>Web Development</h3><ul><li><a href=\"https://calendly.com/lluis-ubiqum/barcelona\">Llu&iacute;s Garc&iacute;a</a>&nbsp;</li><li><a href=\"https://calendly.com/vasil-ubiqum/appointment-java\">Vasil Markov</a></li><li><a href=\"https://calendly.com/carolina-ubiqum/barcelona\">Carolina Garcia-Loygorri</a></li><li><a href=\"http://www.calendly.com/rj-ubiqum\">RJ Macasaet</a>&nbsp;(Part-Time Course, 6-10pm, Tuesdays and Wednesdays)</li></ul><h3>Data analytics</h3><ul><li><a href=\"https://calendly.com/ubiqum_gabriel/15min\">Gabriel Ristow</a></li><li><a href=\"https://calendly.com/ubiqum_giammarco/15min\">Giammarco Quaglia</a></li><li><a href=\"https://calendly.com/ubiqum_val\">Val&eacute;rian Virmaux</a></li><li><a href=\"https://calendly.com/ubiqum_dani/appointment-data\">Daniel Castej&oacute;n</a></li></ul><h2><strong>Berlin</strong></h2><p><a href=\"https://docs.google.com/presentation/d/1erQ1pDxq44DCJvjr9ava13XZljrzAGUt7YXVxr4lEOc/edit?usp=sharing\"><strong>Organisational&nbsp;</strong><strong>Chart</strong></a></p><h3>Web Development</h3><ul><li><a href=\"https://calendly.com/lucas-ubiqum\">Lucas Dupias</a></li><li><a href=\"https://calendly.com/ottavia-ubiqum/berlin\">Ottavia Feletig</a></li></ul><h3>Data analytics</h3><ul><li><a href=\"https://calendly.com/guillem-ubiqum-berlin/15min\">Guillem Perdig&oacute;</a></li><li><a href=\"https://calendly.com/shekhar_ubiqum\">Shekhar Biswas</a></li></ul><h2><strong>Amsterdam</strong></h2><h3>Web Development</h3><ul><li><a href=\"https://calendly.com/pol-ubiqum/appointment-java\">Pol Benedito</a></li><li><a href=\"https://calendly.com/ray-ubiqum-amsterdam/15min\">Ray Woolman</a></li></ul><h3>Data analytics</h3><ul><li><a href=\"https://calendly.com/joanclave/15min\">Joan Claverol</a></li></ul><ul><li><a href=\"https://calendly.com/pbeirao/15min\">Pericles Beirao</a></li></ul><h2><strong>Madrid</strong></h2><h3>Web Development</h3><ul><li><a href=\"https://calendly.com/gonzalo-ubiqum\">Gonzalo Fern&aacute;ndez</a></li></ul><p>Data analytics</p><ul><li><a href=\"https://calendly.com/ubiqum_ignacio/mentoring\">Ignacio Soteras</a></li></ul><h2><strong>Lisbon</strong></h2><h3>Web Development</h3><ul><li><a href=\"https://calendly.com/lucas-souza-ubiqum-lisbon/mern-appointment\">Lucas Souza</a></li></ul>",
    "conflPageId": "226328603",
    "conflChildrenId": [

    ]
  },
  {
    "title": "NYSL Project Sprint 2",
    "content": "<h2>Overview Of Your Task</h2><p>You have been asked by League Director, Tom Denton, to add two pages to the website:</p><ol><li>A Game Information Page for members to find out logistical information about each game.</li><li>A Rules &amp; Policies Page for members to read about the rules of play and the policies that NYSL follows.</li><li>Add a Registration Page for members to register to play on a team.</li><li>Update the Game Information Page with maps to show the various game locations.</li></ol><p>The following steps outline one way to break down the creation of the Game Information Page and the Rules &amp; Policies Page into small testable steps. Here&rsquo;s what you need to include in the web pages:</p><ul><li>Tables to present the game information data that Tom provided in a nice tabular fashion.</li><li>Lists and sublists to present the rules that Tom provided in a readable and organized way.</li><li>Create an HTML form that matches the Registration Form provided by Tom.</li><li>Create a testing page that displays the information entered on the Registration Form when the form's submit button is clicked.</li><li>Update the Game Info page to include maps for each of the game locations.</li><li>Links to all your new pages in the navigation bar.</li></ul><p><span style=\"color: rgb(255,0,0);\"><strong>TIP:&nbsp;</strong></span>As you develop each page, remember to:</p><ol><li>Update your CSS stylesheet as needed for the list and table styles, as well as any other formatting needs for the page.</li><li>Validate the HTML and CSS by using the <a href=\"https://validator.w3.org/#validate_by_input\">W3C HTML Validator</a> and the <a href=\"http://jigsaw.w3.org/css-validator/#validate_by_input\">W3C CSS Validator</a>.</li><li>Test all changes in a browser to ensure everything still looks and functions correctly.</li></ol><p><strong>Deliverables</strong></p><p>At the end of this Sprint, you will present the website and the code for all of the pages explained above, as well as your code from Sprint 1.&nbsp;&nbsp;</p><h2>Epic 1:&nbsp;Create the Rules &amp; Policies page</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"595e8797-2294-42d1-a331-a052105610e9\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources...</ac:parameter><ac:rich-text-body><p>The Rules &amp; Policies Page is simpler to do than the Game Info; so start with that. It involves creating HTML elements called Lists.&nbsp;Lists (and tables, which you'll create in the next Epic) are relatively easy HTML concepts to learn. The main mistake novices make is not using them appropriately. Tables and lists convey semantic information about the text they contain. They should not be used for visual effect. That's the job of CSS.</p><p>One rule of thumb for semantically well-formed HTML is whether the page makes sense when CSS styles are turned off.</p><p>Before you build the page, check out:&nbsp;<a href=\"https://learn.shayhowe.com/html-css/creating-lists/\">https://learn.shayhowe.com/html-css/creating-lists/</a></p><h4>Task 1:&nbsp;Create rules.html</h4><p>When you're ready to begin, create a rules.html page to display the Rules &amp; Policies that Tom provided. Title it: &quot;<strong>Rules of Play &amp; Policies</strong>&quot;. Test to make sure the page displays correctly.</p><p><strong><em>Proper use of lists</em> </strong></p><p>DO NOT use lists just to indent some text. Use BLOCKQUOTE or CSS styled paragraphs for that.</p><p>DO use lists for things like a navigation bar. Even though CSS may make the navigation bar look like a set of tabs, really you have a list of links. If the CSS went away, a list would be the best way to show those links. Use numbered (OL) lists when order matters, like steps in a recipe. Use unordered lists (UL) when you have a list of points but the order is not critical.</p><h4>Task 2: Add standard paragraph content</h4><p>Add the content from the Rules &amp; Policies document that Tom sent, one paragraph at a time. Start with the top headings. Then, save and view the page.</p><h4>Task 3:&nbsp;Create list with Rules content</h4><p>Next, add the Sportsmanship heading and paragraph, which is a list with one bullet. Save, test, and view.</p><p>Repeat for the FIFA Field Regulations, a numbered list. Because this list is so long, do one major item at a time. Save and view after each item.</p><p><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> </span>Note which lists are numbered and what kinds of numbers are used. Don&rsquo;t generate the number by hand! Let HTML do it for you automatically.</p><p><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> </span>If something appears to be indented too much, it means a list was not closed. A common mistake is using the wrong closing element, e.g., trying to close a numbered OL list with a UL closing tag.</p><h4>Task 4: Validate HTML&nbsp;</h4><p>Check your page in the validator before moving to the next Epic!</p></ac:rich-text-body></ac:structured-macro><h2><span style=\"color: rgb(61,71,77);\"><span style=\"color: rgb(61,71,77);\">Epic 2: Create the Game Info page</span></span></h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"ba020ada-dd4a-43e8-b7c7-d428562aa9f5\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources...</ac:parameter><ac:rich-text-body><p><strong>Task 1:&nbsp;Create game_info.html</strong></p><p>Create a page, game_info.html, to display the Game Information that Tom provided. Title the page: &quot;<strong>Game Information</strong>&quot;. Put in just the headings. Save and view.</p><p><strong>Task 2:&nbsp;Build table 1 and add content</strong></p><p><a href=\"https://learn.shayhowe.com/html-css/organizing-data-with-tables/\">https://learn.shayhowe.com/html-css/organizing-data-with-tables/</a></p><p>Try making a table for just the dates.</p><p><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong></span> Leave borders showing until you've made all your tables. Borders can help pinpoint table structure problems.</p><p>Save and view. Do the right number of columns appear with data in the right place? When it's working, add the remaining rows of the first table. Save and view.</p><p><em>Proper Use of Tables</em></p><ul><li>Do not use tables for page layout, e.g., to arrange things into columns. For this, you should use DIVs and CSS.</li><li>Do use tables for tabular data, e.g., a schedule or a list of scores.</li><li>Use TH for column and row headers. Don't use CSS to make TD elements look like headers.</li></ul><p><strong>Task 3: Add CSS to table 1</strong></p><p>Now, define the CSS for the tables so that they look like the page Tom provided. Your tables should meet these 3 criteria:</p><ol><li>No borders.</li><li>Text alignment as shown.</li><li>Fonts similar to what's shown.</li></ol><p><span style=\"color: rgb(255,0,0);\"><strong>TIPS:</strong></span></p><ul><li>Use TH for all header cells, and TD for data cells. Style the cells as needed using CSS.</li><li>Do not use TD for the header cells, and then style them to look like headers using CSS.</li><li>In addition, proper use of TH will help screen reading software, such as the validators, work better.</li></ul><p>Test the page to make sure the content displays as intended.</p><p><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> </span>Look for rows with missing or extra elements.</p><p><strong>Task 4: Build remaining tables and add content and CSS</strong></p><p>Repeat the above steps for at least one of the remaining tables from Tom's document.</p><p><strong>Task 5: Validate HTML &amp; CSS</strong></p></ac:rich-text-body></ac:structured-macro><h2>Epic 3: Create the Registration page</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"420f9fb3-8650-4b63-a642-c2cda591cf30\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources...</ac:parameter><ac:rich-text-body><p>There are two key parts to understanding an HTML form:</p><ol><li>The FORM itself</li><li>The form widgets, i.e., the interactive elements like buttons and textboxes</li></ol><p>The original purpose of a form was to allow users to enter information onto a web page and then submit that information to a web server. The action attribute of a form gives the URL to submit the information to. The method attribute of a form specifies one of two ways the data can be submitted. The differences are beyond the scope of this task, but in order for you to be able to test your form without a web server, you need to specify the GET method for the form.</p><p>Most form widgets have name and value attributes. For text fields, the value is whatever the user enters into the field, if anything. For drop-down menus, the name is on the SELECT element, and the value is on the OPTION element inside the menu that the user selects. Checkboxes, radio buttons, and submit buttons have name and value attributes.</p><p>When a form is submitted, the browser does not send the entire form you see on screen. It only sends:</p><ul><li>The name and text of non-empty text fields</li><li>The name and value of checked checkboxes and radio buttons</li><li>The name and selected value of drop-down menus</li><li>The name and value of the submit button that was clicked</li><li>Elements that are not checked, selected, or filled, or that have no name or value, are ignored.</li></ul><p>Before getting started with Task 1 make sure to check out:&nbsp;<a href=\"https://learn.shayhowe.com/html-css/building-forms/\">https://learn.shayhowe.com/html-css/building-forms/</a></p><p><strong>Task 1:&nbsp;Download show_data.txt and save as show_data.html in your root folder</strong></p><p>Create registration.html and title it: <strong>Registration Form</strong>&quot;. Then, download show_data.txt and save as show_data.html in your root folder</p><p><ac:structured-macro ac:name=\"view-file\" ac:schema-version=\"1\" ac:macro-id=\"09a4bc6a-2bd0-4e30-b05c-ede69c3f5c47\"><ac:parameter ac:name=\"name\"><ri:attachment ri:filename=\"show_data.txt\" ri:version-at-save=\"1\" /></ac:parameter><ac:parameter ac:name=\"height\">150</ac:parameter></ac:structured-macro></p><p><strong>Task 2:&nbsp;Build form element: 'text field' and test it</strong></p><p>Let's create the field where a player can enter their first name:</p><ol><li>Add an empty FORM element to the page.</li><li>Inside the form put:<ol><li>The label for the Player&rsquo;s First Name</li><li>A text input field with the name &quot;first_name&quot;</li><li>A Submit button</li></ol></li><li>Set the<span>&nbsp;</span><strong>action</strong><span>&nbsp;</span>attribute of the form to &ldquo;show_data.html.&rdquo;</li><li>Set the<span>&nbsp;</span><strong>method</strong><span>&nbsp;</span>attribute of the form to &quot;GET.&quot;</li></ol><p>Now, let's test it to make sure that it works:</p><ol><li>Open registration.html in your browser.</li><li>Make sure that the form looks reasonable, with a labeled text field for the Player&rsquo;s First Name and a submit button at the bottom labeled Submit.</li><li>Enter something in the name field and click Submit.</li><li>Verify that the show_data.html page appears with the name you entered displayed as the value of the &quot;first_name&quot; field.</li></ol><p><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> </span>If the information you entered does not display on the show_data.html page, then verify JavaScript is turned on in your browser. Exactly how you do this depends on your browser, but it&rsquo;s usually in the Options or Preferences settings under the Tools menu.</p><p><strong>Task 3: Build remaining text fields and test them</strong></p><p>Create text fields for the following information with their appropriate internal form names:</p><ul><li>Last Name</li><li>Street Address</li><li>City</li><li>Zip Code</li><li>Birth Date</li><li>Parent/Guardian</li><li>Contact Phone</li><li>Contact E-mail</li></ul><p>Test!</p><p><strong>Task 4: Build form elements: 'drop down menu' and test them</strong></p><p>Since there is only one choice for the closest and second closest school, a drop-down menu is the best choice here. Create a SELECT menu in the form for both drop-downs (closest school and second closest school). Enter in the school names.</p><p>Test! Select two schools and verify that they show up correctly in show_data.html.</p><p><strong>Task 6: Build form elements: 'checkbox' and 'radio button' and test each</strong></p><p>Use radio buttons (or drop-down menus) when it doesn't make sense to pick more than one option. Use checkboxes when multiple options do make sense.</p><p>Enter the appropriate labeled options for each set of buttons.</p><p>Test! Try clicking various checkboxes and radio buttons. Verify that the options you selected are passed correctly to show_data.html. Make sure only one option in each radio button set can be selected.</p><p><strong>Task 8: Apply correct input to each field: email, phone number, date</strong></p><p><strong>Task 9: Validate HTML and CSS</strong></p></ac:rich-text-body></ac:structured-macro><h2>Epic 4: Add maps to the Game Info page</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"1adcd1e1-0de2-474b-aa80-78b7c35b1365\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources...</ac:parameter><ac:rich-text-body><p><strong>Task 1:&nbsp;Implement Google Maps on your page</strong></p><p>Add maps to the Game Information Page to show each game location.</p><p>To add each map, follow the steps in the <a href=\"https://support.google.com/maps/answer/144361?hl=enation/staticmaps/index&amp;visit_id=636938781544184264-1339397471&amp;rd=1\">Google Maps Guide</a>. You also may want to check out Howe's tutorial on adding i-frames:&nbsp;<a href=\"https://learn.shayhowe.com/html-css/adding-media/#adding-iframes\">https://learn.shayhowe.com/html-css/adding-media/#adding-iframes</a>.</p><p>Do one map and test. Does the map appear? Is it in the right location on the page?</p><p>(Optional): If you have time and want to embed some additional maps on your page, go for it!</p><p><strong><strong>Task 2:&nbsp;Add styling to the map(s)</strong></strong></p><p>Take a few minutes to play around with the CSS for your maps to get them to look how you want.&nbsp;</p><p><strong>Task 3: Validate your HTML and CSS</strong></p></ac:rich-text-body></ac:structured-macro><h2>Epic 5: Cleanup, post code, refactor and demo your website</h2><p><br /></p><h2>Extra: Trello Board</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"63f00783-909e-4c2a-aa86-37754dac1d16\"><ac:parameter ac:name=\"title\">View</ac:parameter><ac:rich-text-body><p><ac:structured-macro ac:name=\"trello-board\" ac:schema-version=\"1\" ac:macro-id=\"4f193b26-70b3-470f-b2ec-23a62ae2ace8\"><ac:parameter ac:name=\"url\">https://trello.com/b/4ycSGzJt</ac:parameter></ac:structured-macro></p></ac:rich-text-body></ac:structured-macro><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p>",
    "conflPageId": "228425766",
    "conflChildrenId": [

    ]
  },
  {
    "title": "TGIF Sprint 1",
    "content": "<h1><strong>Your Task</strong></h1><p>You have been asked to create a demo web app displaying Congressional data from the ProPublica&nbsp;Congress API on an HTML page. Specifically, you need to create three pages, Home, and one each for the Senate and one for the House of Representatives. Both will look very similar. You should try to avoid duplicating code as much as possible.</p><p>There are several steps to this task divided in 4 epics:</p><ul><li>Set up your environment and get API data</li><li>Build Senate and House web pages</li><li>Build Home page and connect them together</li></ul><h2>Epic 1: Set up your environment and get API data&nbsp;</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"afcb0448-c2ab-4b6f-97fc-850172ae01fb\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources...</ac:parameter><ac:rich-text-body><h4>Task 1: Register your API Key</h4><h5>API Keys</h5><p>Web services that return data in JSON or XML form have become very popular. They allow a<span>&nbsp;</span><strong>data consumer</strong><span>&nbsp;</span>web site A to get data from a<span>&nbsp;</span><strong>data producer</strong><span>&nbsp;</span>web site B (or several web sites), manipulate that data, and display it to end users. One concern for the producer is that some consumers may overwhelm the producer&rsquo;s servers with frequent requests for large amounts of data.</p><p>To control this, many web services require that all requests include an<span>&nbsp;</span><strong>API key</strong>. This is a long sequence of characters that you need to include in every call to the data producer. You can often get an API key for free. The producer uses the key to track who is asking for data. The producer can easily limit how often you can ask for data and how much data you can get in one call. The producer may allow a consumer to pay for increased access.</p><h5>JSON</h5><p>JSON (JavaScript Object Notation) is a format for representing complex data in plain text form. As the name suggests, the format originated with JavaScript, but Douglas Crockford proposed using it as a general data exchange format instead of the more verbose XML (Extensible Markup Language). While XML was very general, powerful and popular, JSON quickly became more popular, because it was easier to code with and was comparatively more compact.</p><h5>Get a ProPublica Congress API Key</h5><ol><li>Go to<span>&nbsp;</span><a style=\"text-decoration: none;\" href=\"https://projects.propublica.org/api-docs/congress-api/\">the ProPublica site</a>. There's a link there to a form for requesting an API key. This is free.</li><li>Wait for the API key to be emailed&nbsp;to you.</li><ol><li>Be patient. This can take a day, perhaps more on weekends.</li><li>If you don't receive a key within a day, check your email spam folder.&nbsp;Automated emails of this sort often trigger spam filters.</li></ol></ol><h4>Task 2: Create your local project folder structure</h4><h4>Task 3: Setup your tools (VS code or Bracket)</h4><h4>Task 4: Add extensions and plugins to your IDE</h4><p>Code faster and easier by only adding some extensions directly from your integrated development environment (IDE) such as:</p><ul><li><strong>Emmet</strong> for quick code template generation from keywords</li><li>&nbsp;<strong>Beautify</strong> or <strong>Prettier</strong> for code auto formatting&nbsp;</li></ul><h4>Task 5: Create new GitHub repository for your local Git</h4><h4>Task 6: Get the JSON data and convert to JS</h4><p>For developing and testing your code, it's best&nbsp;to have a local copy of some real data.</p><ul><li>Testing will be faster</li><li>You won't bother the ProPublica server.&nbsp;</li></ul><p>To get a local copy, make one AJAX call to get the JSON you need, save that data in a JavaScript file, then use the JavaScript file. In a later task, it will be easy to switch to using live data.</p><ol><li>Go to&nbsp;<a style=\"text-decoration: none;\" href=\"http://static.socraticarts.com/AjaxTester/\">our AjaxTester web page</a><ol><li>AjaxTester&nbsp;is a general form that can be used to&nbsp;test&nbsp;AJAX JSON web APIs.</li></ol></li><li>Construct a URL for the ProPublica Congress web service to get the members of the Senate for the<span>&nbsp;</span><span style=\"text-decoration: underline;\">113th</span><span>&nbsp;</span>Congress.<ol><li>Use<span>&nbsp;</span><a style=\"text-decoration: none;\" href=\"https://projects.propublica.org/api-docs/congress-api/members/\">this&nbsp;page</a>&nbsp;to see what that looks like.&nbsp;</li></ol></li><li>Enter the URL in the<span>&nbsp;</span><strong>Endpoint</strong><span>&nbsp;</span>field of<span>&nbsp;</span><strong>AjaxTester</strong>.</li><li>Click the&nbsp;<strong>+ Add header</strong><span>&nbsp;</span>button.</li><li>Enter<span>&nbsp;</span><strong>X-API-Key</strong>&nbsp;as the header name.</li><li>Put your API key as the header value.</li><li>Click&nbsp;the<span>&nbsp;</span><strong>Ajax request</strong>&nbsp;button. If the URL and key are correct, JSON should appear in the textbox on the right.</li><ul><li>You will get an HTTP 0 error if you have an incorrect URL or invalid&nbsp;API key.</li></ul><li>When you have JSON in the textbox, click on it and hit control-A (Windows and Linux) or command-A (Macintosh), to select the entire JSON text.</li><li>Open the text editor you use for programming, create a new file, paste the JSON into it, and save under a clear name, e.g., pro<span class=\"tt2015\">-Congress-113-senate.json</span></li><li>Repeat the above steps, but for the House of Representatives. Since this has almost 10 times as much data, it will take a little longer to appear.&nbsp; Save in another file, e.g., pro<span class=\"tt2015\">-congress-113-house.json</span></li></ol><h5><span class=\"tt2015\">Convert JSON to JavaScript</span></h5><ul><li>Although you&rsquo;ll use these JSON files in later tasks, to create a standalone demo you need files that are executable JavaScript code. If you try to load the JSON in HTML with<span>&nbsp;</span><span class=\"tt2015\">&lt;script src=&quot;pro-congress-113-senate.json&quot;&gt;&lt;/script&gt;</span>, you will get a syntax error. A JSON object is not executable code. Fortunately, it&rsquo;s easy to fix.</li></ul><ol><li>Open your JSON Senate file in your editor, and insert<br /><span class=\"tt2015\">var data =<br /></span>at the very start. This is JavaScript for &quot;save the JSON object in the variable named data.&quot;&nbsp;<em>Save this as a new file</em><span>&nbsp;</span>with the same name but the extension<span>&nbsp;</span><span class=\"tt2015\">.js</span>, for JavaScript.</li><li>Repeat with your JSON House file.</li></ol><p><br /></p></ac:rich-text-body></ac:structured-macro><h2 class=\"auto-cursor-target\">Epic 2: Build Senate and House web pages</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"1b1c2016-e932-4100-804d-a98cd4085965\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources...</ac:parameter><ac:rich-text-body><h4>Task 1: Verify that files are connected and log into the console</h4><p>Confirm that you can load the JSON data from your JavaScript files into a web page.</p><ol><li>Using the basic html file provided in the email, create an HTML page<span>&nbsp;</span><span class=\"tt2015\">senate-data.html</span><span>&nbsp;</span>with the following elements</li><ul><li>a PRE element with the ID &quot;senate-data&quot;</li><li>a SCRIPT element that loads the JavaScript file you previously saved with Senate data</li><li>a SCRIPT element that has source code that puts the value of the variable data (pulled from the JavaScript file you loaded) into the PRE element</li></ul></ol><div class=\"tipLabel2015\"><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> </span>Do not <span style=\"color: rgb(255,0,0);\">put</span> SCRIPT tags in the HEAD, in the middle of the BODY, and at the end of the BODY.&nbsp; Middle is definitely not good.&nbsp; Common practice these days is to<span>&nbsp;</span><a style=\"text-decoration: none;\" href=\"http://stackoverflow.com/questions/143486/unobtrusive-javascript-script-at-the-top-or-the-bottom-of-the-html-code\">bottom-load scripts</a>.</div><div class=\"tipLabel2015\"><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong></span> To make the data variable's contents a string (easier to read), use the<span>&nbsp;</span><a style=\"text-decoration: none;\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">stringify method</a>:&nbsp;<span class=\"tt2015\">JSON.stringify(data,null,2)</span></div><p>2. In order to write JavaScript that stores text into an HTML element, you can use getElementbyId. You can check Resources for more information.</p><p>Example:</p><pre class=\"language-javascript\"><code class=\"language-javascript\" style=\"text-align: left;\">document<span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">.</span><span class=\"token function\" style=\"color: rgb(221,74,104);\">getElementById</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">(</span><span class=\"token string\" style=\"color: rgb(102,153,0);\">&quot;senate-data&quot;</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">)</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">.</span>innerHTML <span class=\"token operator\" style=\"color: rgb(166,127,89);\">= </span>JSON<span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">.</span><span class=\"token function\" style=\"color: rgb(221,74,104);\">stringify</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">(</span>data<span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">,</span><span class=\"token keyword\" style=\"color: rgb(0,119,170);\">null</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">,</span><span class=\"token number\" style=\"color: rgb(153,0,85);\">2</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">)</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">;</span></code></pre><p>3. Open the HTML page in your browser.</p><p>4. If you see the JSON data, go on to the next step. If you don&rsquo;t, open your browser&rsquo;s Developer Console, reload the page, and look for error messages.</p><h4>Task 2: Format the Senate data as a table</h4><p>Once you are successfully getting the JSON data into your page, you can focus on displaying that data in a user-friendly HTML table.</p><ol><li>Replace the PRE element on your page with a TABLE element with the same ID.</li><li>The<span>&nbsp;</span><span class=\"tt2015\">data</span><span>&nbsp;</span>variable contains a<span>&nbsp;</span><span class=\"tt2015\">results</span><span>&nbsp;</span>field. The<span>&nbsp;</span><span class=\"tt2015\">results&nbsp;</span>field contains an array of members of the Senate.</li><li>Change your JavaScript code to be a loop over that array. (This code will be in place of the code you had in the last step that put content into the PRE element.) The loop should construct a string of HTML using an approach such as the following:<ul><li>full name, built from the array element fields for last, first, and middle names</li><li>party (D, R, or I)</li><li>state (two letter code)</li><li>seniority (years in the office they currently hold)</li><li>percentage of votes with party, with a % added</li></ul></li><ul><li>For each element of the array, it should build a TR element. Within that TR element, it should create strings with TD elements, filled with the following data from the array element:</li></ul><li>After building the string, the JavaScript should store the HTML in the TABLE element. See<span>&nbsp;</span><em>Resources</em><span>&nbsp;</span>for review material on arrays, loops, and using both to construct and display a string combining data and HTML markup.</li><li>Open the page in your browser. If the page looks correct, go to the next step. If not, open the Developer Console and look for error messages.</li></ol><p class=\"tip2015\"><br /></p><div class=\"tipLabel2015\"><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> </span>Do not put SCRIPT tags in the HEAD, in the middle of the BODY, and at the end of the BODY.&nbsp; Middle is definitely not good.&nbsp; Common practice these days is to<span>&nbsp;</span><a style=\"text-decoration: none;\" href=\"http://stackoverflow.com/questions/143486/unobtrusive-javascript-script-at-the-top-or-the-bottom-of-the-html-code\">bottom-load scripts</a>.</div><div class=\"tipLabel2015\"><strong><span style=\"color: rgb(255,0,0);\">TIP:</span></strong> Use (... || &quot;&quot;) to avoid null's in the table, like the middle name.</div><h4>Task 3: Style Page with Bootstrap</h4><p>Style/build out page per wireframes included in the email. Check the <a href=\"https://getbootstrap.com/\">Bootstrap documentation</a> for help.</p><ol><li>Add code to load the Bootstrap 3 CSS file.</li><li>Add the appropriate elements and attributes to your HTML to build out the navigation bar with dropdown menu.</li><li>Add the appropriate elements and attributes to your HTML to build out the page body and footer per the wireframes.</li><li>Add the appropriate elements and attributes to your HTML to use the default Bootstrap table styling. The table styling will not have borders, which is what our client prefers.</li><li>Check your page in the browser</li></ol><h4>Task 4: Repeat for House Data</h4><p>Do the same process for the House data starting with creating an HTML page named<span>&nbsp;</span><span class=\"tt2015\">house-data.html</span>. When you're through, this will be a much longer page than the Senate page, but you should have very little new work to do.</p><p><br /></p></ac:rich-text-body></ac:structured-macro><h2 class=\"auto-cursor-target\">Epic 3: Build Home page and connect them together</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"451184db-a523-4c55-8330-3f600d3e50db\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources...</ac:parameter><ac:rich-text-body><h4>Task 1: Create Home page and load CSS</h4><p>Using the basic html file provided in the email, create an HTML page (home<span class=\"tt2015\">.html</span>).</p><h4>Task 2: Apply universal page elements (navbar, page body, footer)</h4><p>Build out the navigation bar,&nbsp;the page body, and the footer like you did for the House and the Senate pages</p><h4>Task 3: Add logo to your page</h4><p>Select an image for the TGIF Logo and an image for the Home page.</p><p>Call these images in your HTML file and format with Bootstrap per the wireframes.</p><h4>Task 4: Interlink all your current pages</h4><p>Now update your displayed content with helpful links (to the Senators' home pages) and descriptions of your table's contents (with headers).</p><ol><li>Change your code so that when it constructs the HTML, the name is a link to the Senator's official home page, as given by the URL field in the results array.&nbsp;</li><li>Open the page, and test several of the links. Make sure they go to the right web page.</li><li>Add headers for your table to describe the contents of each column (e.g. 'Senator', 'Party Affiliation').&nbsp;</li></ol><h4>Task 5: Build accordion UI element</h4><p>Add the appropriate elements and attributes to your HTML to use the Bootstrap Accordion feature. &nbsp;</p><p>The content on the home page should expand out when a link or button is clicked.&nbsp; For help on using&nbsp;Bootstrap&rsquo;s classes to create an accordion feature consult the&nbsp;<a href=\"https://getbootstrap.com/docs/4.0/components/collapse/\">Bootstrap Documentation</a>.</p><h4>Task 6: Post to GitHub&nbsp;</h4></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><h2 class=\"auto-cursor-target\">Extra: Trello Board</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"abc6bb4e-1a4c-4da6-b256-db8e4a1223b7\"><ac:parameter ac:name=\"title\">View</ac:parameter><ac:rich-text-body><p><ac:structured-macro ac:name=\"trello-board\" ac:schema-version=\"1\" ac:macro-id=\"2c9f6941-752b-46ae-961c-9159957d6d24\"><ac:parameter ac:name=\"url\">https://trello.com/b/dlJCIejL</ac:parameter></ac:structured-macro></p></ac:rich-text-body></ac:structured-macro><p><br /></p><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "228425875",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Getting started with JavaScript",
    "content": "<h2>Background</h2><p>HTML and CSS are the languages for describing the content and visual appearance of web pages. They let you make very beautiful and useful web sites. But if you want to make an interactive web application, like a game or an interactive data display, you need<span>&nbsp;</span><strong>JavaScript</strong>.</p><p>Every web browser knows how to run JavaScript code. With JavaScript, you can</p><ul><li>make parts of&nbsp;web pages&nbsp;appear, disappear, and move around</li><li>respond to mouse clicks, finger taps, drag and drop, and keyboard entry</li><li>calculate complex mathematical formulas</li><li>repeat operations in loops that can run hundreds or thousands of times</li></ul><p>Basically, with JavaScript on a web page, you can do anything you can do in any other programming language, with one exception.JavaScript in a web page is not allow to read or&nbsp;write files on your computer. It is&nbsp;prevented from doing that&nbsp;so that hackers can't write web pages that steal information from you or damage your computer files.</p><h2>A Quick Demonstration</h2><p>You can use&nbsp;<strong>JS Bin</strong>&nbsp;to see what JavaScript can do.&nbsp;</p><ol><li>Click on&nbsp;<a style=\"text-decoration: none;\" href=\"https://jsbin.com/?html,css,js,output\">this JS Bin&nbsp;link</a>&nbsp;to open a new JS Bin&nbsp;window. This link has been defined so that you should see boxes for entering HTML, CSS, and JavaScript.</li><li>Copy and paste the HTML below into the HTML box.<pre class=\"language-markup\"><code class=\"language-markup\" style=\"text-align: left;\"><span class=\"token tag\" style=\"color: rgb(153,0,85);\"><span class=\"token tag\" style=\"color: rgb(153,0,85);\"><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">&lt;</span>p</span> <span class=\"token attr-name\" style=\"color: rgb(102,153,0);\">id</span><span class=\"token attr-value\" style=\"color: rgb(0,119,170);\"><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">=</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">'</span>test<span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">'</span></span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">&gt;</span></span>\nHello, Moon!\n<span class=\"token tag\" style=\"color: rgb(153,0,85);\"><span class=\"token tag\" style=\"color: rgb(153,0,85);\"><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">&lt;/</span>p</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">&gt;</span></span></code></pre></li><li>Copy and paste the CSS below into the CSS box:<pre class=\"language-css\"><code class=\"language-css\" style=\"text-align: left;\"><span class=\"token selector\" style=\"color: rgb(102,153,0);\">#test</span> <span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">{</span>\n  <span class=\"token property\" style=\"color: rgb(153,0,85);\">background</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">:</span> <span class=\"token url\" style=\"color: rgb(166,127,89);\">url(https://c1.staticflickr.com/9/8500/8315697815_69cb2a99ba_b.jpg)</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">;</span>\n  <span class=\"token property\" style=\"color: rgb(153,0,85);\">background-size</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">:</span> cover<span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">;</span>\n  <span class=\"token property\" style=\"color: rgb(153,0,85);\">color</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">:</span> lightgreen<span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">;</span>\n  <span class=\"token property\" style=\"color: rgb(153,0,85);\">font</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">:</span> bold 14px arial<span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">;</span>\n  <span class=\"token property\" style=\"color: rgb(153,0,85);\">width</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">:</span> 140px<span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">;</span>\n  <span class=\"token property\" style=\"color: rgb(153,0,85);\">height</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">:</span> 140px<span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">;</span>\n  <span class=\"token property\" style=\"color: rgb(153,0,85);\">border</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">:</span> 2px solid #999999<span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">;</span>\n<span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">}</span></code></pre></li><li>Make sure that the Moon image URL&nbsp;<a style=\"text-decoration: none;\" href=\"https://c1.staticflickr.com/9/8500/8315697815_69cb2a99ba_b.jpg\">https://c1.staticflickr.com/9/8500/8315697815_69cb2a99ba_b.jpg</a>&nbsp;still works. Pictures come and go from the Internet all the time. If this one is gone, use your search engine to find another comparable small picture of the Moon and use that URL instead.<br /><br />JS Bin should automatically display this HTML and CSS for you.&nbsp;<br /><br /></li><li>So far, this is just&nbsp;HTML and CSS. Now let's add some JavaScript so that something happens when we click on the Moon image.&nbsp; For this code to work though, you have&nbsp;to tell JS Bin&nbsp;to include the jQuery library.&nbsp; &nbsp;Click on&nbsp;<strong>Add Library</strong>&nbsp;in the upper left and&nbsp;select a current version of&nbsp;<strong>jQuery</strong>.&nbsp;<br /><br />After you do this, you should now see some extra code added to your HTML on the left that loads the jQuery library you selected.<br /><br /></li><li>Now copy and paste this JavaScript code into the&nbsp;JavaScript box on the right.<pre class=\"language-javascript\"><code class=\"language-javascript\" style=\"text-align: left;\"><span class=\"token function\" style=\"color: rgb(221,74,104);\">$</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">(</span><span class=\"token string\" style=\"color: rgb(102,153,0);\">'#test'</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">)</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">.</span><span class=\"token function\" style=\"color: rgb(221,74,104);\">on</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">(</span><span class=\"token string\" style=\"color: rgb(102,153,0);\">'click'</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">,</span> <span class=\"token keyword\" style=\"color: rgb(0,119,170);\">function</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">(</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">)</span> <span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">{</span>\n  <span class=\"token function\" style=\"color: rgb(221,74,104);\">$</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">(</span><span class=\"token keyword\" style=\"color: rgb(0,119,170);\">this</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">)</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">.</span><span class=\"token function\" style=\"color: rgb(221,74,104);\">text</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">(</span><span class=\"token string\" style=\"color: rgb(102,153,0);\">'Goodbye, Moon!'</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">)</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">.</span><span class=\"token function\" style=\"color: rgb(221,74,104);\">fadeOut</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">(</span><span class=\"token number\" style=\"color: rgb(153,0,85);\">4000</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">)</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">;</span>\n<span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">}</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">)</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">;</span></code></pre></li><li>Your JS Bin should look like this:<br /><span><ac:image ac:height=\"250\"><ri:attachment ri:filename=\"jsbin-js-entered.png\" ri:version-at-save=\"1\" /></ac:image>&nbsp;</span><br /><br />Briefly, this JavaScript code says<br /><br /><ul><li>When the user&nbsp;clicks on the HTML element with the ID&nbsp;<span class=\"tt2015\">test</span>...</li><li>Change the text of that element to say &quot;Goodbye, Moon!&quot;...</li><li>Then take 4 seconds (4000 milliseconds) to make the element fade away.<br /><br />This code does quite a bit in a few lines, because it uses functions defined in&nbsp;a very popular library called&nbsp;<strong>jQuery</strong>. It could be written with plain JavaScript, but would take about twice as much code and be much harder to read. You will learn how to use&nbsp;jQuery later on.<br /><br /></li></ul></li><li>Now click on the Hello, Moon image in the&nbsp;<strong>Output</strong>&nbsp;box. The text on the image should immediately change to &quot;Goodbye, Moon!&quot; Then the image and text should fade away after several seconds.</li></ol><p>Congratulations! You just wrote and ran your first JavaScript!</p><h2>Video Tutorials</h2><p>Code along videos are a good way to learn coding. As everyone has his own preferences, it is up to you to find your preferred code along tutor! For instance here is Net Ninja's code along for JavaScript beginners:&nbsp;<a href=\"https://www.youtube.com/playlist?list=PL4cUxeGkcC9i9Ae2D9Ee1RvylH38dKuET\">Net Ninja YouTube</a></p><p><br /></p>",
    "conflPageId": "228491341",
    "conflChildrenId": [

    ]
  },
  {
    "title": "TGIF Project",
    "content": "<ac:layout><ac:layout-section ac:type=\"two_right_sidebar\"><ac:layout-cell><h2><strong>Welcome!</strong></h2><p>In this course, you are a developer at<span>&nbsp;</span><strong>Code of the Web</strong>, a small software shop that creates custom JavaScript-based web applications.<span>&nbsp;</span><strong>Transparent Government in Fact</strong><span>&nbsp;</span>(TGIF), a non-partisan non-profit organization working to increase&nbsp;the public&rsquo;s involvement in government, has hired you to develop a Congressional tracking web site for them. You will work on this web application using modern JavaScript technologies, including AJAX, JSON, and RESTful APIs.</p><p>To do this, you'll work through a series of tasks designed by experts in programming and web app development&nbsp;to help you create a robust and useful web application.</p><h2>Course Resources</h2><p>The TGIF project consists of three Sprints. Click the links to view each Sprint's Resources. (Note: Sprint resources will become available as you work through the project requirements).</p><p><ac:link><ri:page ri:content-title=\"Getting started with JavaScript\" ri:version-at-save=\"5\" /><ac:plain-text-link-body><![CDATA[Getting started with JavaScript >]]></ac:plain-text-link-body></ac:link></p><p><a href=\"https://ubiqum.atlassian.net/wiki/spaces/STUDENTS/pages/234389544/JavaScript+Practice+Exercises\">JavaScript Practice Exercises &gt;</a></p><p><a href=\"https://ubiqum.atlassian.net/wiki/spaces/STUDENTS/pages/228425875/TGIF+Sprint+1\">Sprint 1 &gt;</a></p><p><a href=\"https://ubiqum.atlassian.net/wiki/spaces/STUDENTS/pages/228622497/TGIF+Sprint+2\">Sprint 2 &gt;</a></p><p><a href=\"https://ubiqum.atlassian.net/wiki/spaces/STUDENTS/pages/233635841/TGIF+Sprint+3\">Sprint 3 &gt;</a></p><p><br /></p></ac:layout-cell><ac:layout-cell><h2>FAQs</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"d96f3fa6-2b6c-4552-a56e-020ec4d2e02c\"><ac:parameter ac:name=\"title\">What is Web Application Development?</ac:parameter><ac:rich-text-body><p>Web application development is the process of creating a web site that acts like an application program. Web applications collect, manipulate, calculate and display data, using the same programming constructs as apps you download and install. But unlike apps, there is nothing to install. The code is run within your browser, using data collected on demand from web services.</p><p>Modern web applications use the following key technologies and organizing frameworks:</p><ul><li>JavaScript and sophisticated JavaScript libraries, such as AngularJS</li><li>AJAX (Asynchronous JavaScript and XML) to communicate directly with web services from a web page</li><li>JSON (JavaScript Object Notation) to encode complex data in a portable compact human-readable format</li><li>RESTful (Representational State Transfer) APIs (Application Program Interfaces) to standardize the messages used to get JSON objects with AJAX calls</li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p></ac:layout-cell></ac:layout-section></ac:layout>",
    "conflPageId": "228524142",
    "conflChildrenId": [
      "228491341",
      "234389544",
      "228425875",
      "228622497",
      "233635841",
      "238419984"
    ]
  },
  {
    "title": "TGIF Sprint 2",
    "content": "<h1><strong>Your Task</strong></h1><p>You have been asked to create two pages with statistics on the Senate and the House. This will involve:</p><ul><li>looping over the data about the members of the two houses, counting and adding as you go</li><li>constructing an HTML table to display the final results with clear labels and properly formatted numbers</li></ul><p>Each statistic requires different logic to calculate. Some are simple counts, others are complex. The best way to organize such code is to define a function to calculate each statistic. Each function may in turn call other functions.</p><p>Best practice also suggests separating the calculation of the statistics from the construction of the HTML. This is called separating the<span>&nbsp;</span><strong>model</strong><span>&nbsp;</span>from the<span>&nbsp;</span><strong>view</strong>. That way your calculation code can be written and tested separately from the HTML code. Also, the calculation code could more easily be reused in future programs.</p><p>So the steps in this Plan of Attack&nbsp;first focus on creating a JSON object to hold all the statistics. We'll refer to this JSON object as the<span>&nbsp;</span><em>statistics</em><span>&nbsp;</span>object.</p><p>You'll create an HTML page for the Senate, but you won't&nbsp;worry about the HTML itself at first. Just write the JavaScript to do the statistics you need, and use the Developer Console to test how your code works.</p><p>Once the JSON statistics object is constructed correctly,<span>&nbsp;</span><em>then</em>&nbsp;you'll add the code to create the HTML to display the JSON, just as you did in a previous task with the JSON returned by the Congress API.&nbsp;</p><p>This sprint is divided into 5 EPICS:</p><ul><li>Build the Senate at a glance table</li><li>Build Senator Attendance page</li><li>Build Senator Party Loyalty page</li><li>Build House Attendance and Party Loyalty Pages</li><li>Implement Checkbox filters into your website</li></ul><h2>Epic 1: Build Senate at a glance table</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"8a33b54b-84bb-4490-97f9-c60163d2ed8c\"><ac:parameter ac:name=\"title\">View Tasks &amp; Ressources...</ac:parameter><ac:rich-text-body><h4>Task 1: Create your JavaScript object to store the statistics</h4><p>To hold your calculation results, you need a JavaScript object, which we'll call the<span>&nbsp;</span><em>statistics</em><span>&nbsp;</span>object.</p><p>The statistics object will have a<span>&nbsp;</span><strong>key</strong><span>&nbsp;</span>for each statistic, e.g., &quot;Number of Democrats&quot;, and the<span>&nbsp;</span><strong>value</strong><span>&nbsp;</span>for that statistic. Use strings for the keys that are what you will want printed on the web page. The values you will calculate in later steps.</p><ol><li>Open the Attendance starter HTML file. &nbsp;Create a Senate Attendance statistics page from this file.</li><li>Create a new JavaScript file that is going to contain all your statistic functionalities and instantiate an object named statistics.&nbsp;</li><li>In the statistics object, include fields for all the statistics the client has requested (e.g., &quot;Number of Democrats&quot;). For now, initialize each value to zero.</li></ol><p>When you create the statistic object, remember that you will read from that same object to build table. A good structure of the object would facilitation the task!</p><p><strong><em>To get the number of members in each party...</em></strong></p><p>There are two obvious ways to do this.</p><ul><li>Go through the list of all members in one of the chambers and count the Democrats, Republicans, and Independents<br />OR</li><li>Make three lists, one for each party, and get the length</li></ul><p>If all you needed was the counts, the first approach would be more efficient for that task. But since some of the other statistics will need lists of party members, the second approach will be more efficient overall. So:</p><ol><li>Open your Senate Attendance HTML file.</li><li>Write code to create and fill three variables, one for a list of the Democrat objects, one for the Republican objects, and one for the Independents.</li><li>Then update&nbsp;your statistics object with the number of members in each party, e.g. for the key &quot;Number of Democrats&quot; replace the default value of zero with the length of the list of Democrat objects.</li><li>Use<span>&nbsp;</span><span class=\"tt2015\">console.log()</span><span>&nbsp;</span>to print your updated statistics&nbsp;object to the Developer Console so that you can inspect it to verify that it contains the correct answers. See<span>&nbsp;</span><em>Resources&nbsp;</em>for help with<span>&nbsp;</span><span class=\"tt2015\">console.log()</span></li><li>Open your Senate Party Loyalty HTML file. &nbsp;In order to be DRY (Don't Repeat Yourself), move your statistics object code to a separate javascript file and load&nbsp;it in both the Senate Attendance page and the Part Loyalty Page.&nbsp;</li></ol><h4>Task 2: Calculate the average &quot;votes with party&quot; for each party</h4><ol><li>Open your statistics javascript file.</li><li>To get an average of an array of data, you first sum up the relevant numbers from that array, then divide by the size of the array. Do that with the list of Democrats, using the percent party votes for each member.</li><li>Store the result in your statistics object.</li><li>Repeat for the list of Republicans.</li><li>Call your results in your Senate Party Loyalty HTML file. &nbsp;</li><li>Use console.log to print this object to the Developer Console so that you can inspect and verify it contains the correct answers.&nbsp;</li></ol><h4>Task 3: Build the Senate at a Glance table for Senators</h4><p>Since you've already built a table in the previous sprint, you should have a pretty good idea how to represent this data in a table based on the wireframes from the client.&nbsp;</p></ac:rich-text-body></ac:structured-macro><h2>Epic 2: Build Senator Attendance Page</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"545bdadf-2cad-474e-a57d-b7c6e29a7cc9\"><ac:parameter ac:name=\"title\"> View Tasks &amp; Resources...</ac:parameter><ac:rich-text-body><h4>Task 1: Calculate least engaged based on missed votes data for bottom 10%</h4><ol><li><span style=\"color: rgb(0,0,0);\">Open the Party Loyalty starter HTML file. </span></li><li><span style=\"color: rgb(0,0,0);\">Create the Senate Party Loyalty statistics page from this file. &nbsp;</span></li><li><span style=\"color: rgb(0,0,0);\">Repeat steps 2-3 that you did to calculate the average votes with party, only do the calculation for missed votes</span></li></ol><h4>Task 2: Display top 10% least engaged in the table, sort, and handle duplicate data points</h4><p><span style=\"color: rgb(0,0,0);\">Since you've done a similar data sorting task in the previous epics, the real challenge now is to generalize your code into a few functions that can get these answers, with as little repeated code as possible. Can you come up with one function that, given the appropriate parameters, can do all these statistics?<br /></span></p><p><span style=\"color: rgb(0,0,0);\">When you are happy with your results, collect and store them in your statistics object with the appropriate keys. Call the results in Senate Party Attendance HTML file and in the Senate Attendance HTML file.</span></p><h4>Task 3: Calculate most engaged based on missed votes data for top 10%</h4><p>Now, execute the same process only for the opposite problem...which Senators missed the FEWEST number of votes?&nbsp;</p><h4>Task 4: Display top 10% most engaged in table and sort</h4><p><span style=\"color: rgb(34,34,34);\"><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong></span> Don't forget to consider missed votes! As Paula explains in the email, you should include all the Senators (and Representatives in the later epic) with the same attendance. Just taking 10% might remove some members who actually attended the same percentage of sessions as ones that you included.&nbsp;</span></p></ac:rich-text-body></ac:structured-macro><h2>Epic 3: Build Senator Party Loyalty page</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"3faa7457-3ba7-4582-a5a4-c8a7e82ab972\"><ac:parameter ac:name=\"title\">View Tasks &amp; Ressources...</ac:parameter><ac:rich-text-body><h4>Task 1: Build Least Loyal table by calculating and displaying top 10% of Senators who didn't vote with party</h4><p>This is a non-trivial problem, and there are multiple ways to solve it, some simpler than others.</p><ol><li>Think about the problem in general, which is<ul><li>Example: 100 values, with duplicates, and you want to find the 10% of those values that are&nbsp;the smallest values in the set.</li></ul><ul><li>Example: The smallest value in the set is 84.2%, and that value occurs 3 times.</li></ul><ul><li>Example: 3/100 is not greater than or equal to 10% so repeat for the next smallest value:</li><ul><li>The next smallest value is 84.5%, and that value occurs 2 times.</li><li>Now you have the 5 smallest values.</li><li>5/100 is still not greater than or equal to 10% so choose the next smallest value and repeat again.</li><li>Stop when your set of smallest values represents 10%&nbsp;or more of the total.</li></ul></ul></li><ul><li>Given a list of N numbers, with duplicates and a percentage K</li><li>Find the<span>&nbsp;</span><em>smallest</em><span>&nbsp;</span>value X such that there are M numbers less than or equal to X</li><li>M / N is greater than or equal to K</li></ul><li>Develop and test code to solve this problem, then apply it to the data on voting with one's party. Your goal is to generate a list of the names of the 10% of Senators who vote least often with their party.</li><li>Call your code in the Senate Party Loyalty HTML file and use console.log to check your answers on different test data.</li></ol><h4>Task 2: Build Most Loyal table by calculating and displaying to 10% Senators who didn't vote with party.</h4><p>Again, follow the steps only for Senators who voted most often with their party.</p></ac:rich-text-body></ac:structured-macro><h2>Epic 4: Build House Attendance and Party Loyalty Pages</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"00153301-8182-4212-9c74-2527ec4f8a51\"><ac:parameter ac:name=\"title\">View Tasks &amp; Ressources</ac:parameter><ac:rich-text-body><h4>Task 1: Build House At A Glance table</h4><p>Follow the steps you executed for the Senate data only apply it to the larger data set of the House members.&nbsp;</p><p><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong></span> there are 100 members of the Senate and 435 members of the House of Representatives.</p><h4>Task 2: Build House Attendance page</h4><h4>Task 3: Build House Party Loyalty page</h4></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><h2 class=\"auto-cursor-target\">Epic 5: Implement Checkbox filters into your website</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"ee6e5b49-ee0b-4ed2-8ad2-60eb716d4dab\"><ac:parameter ac:name=\"title\">View Tasks &amp; Ressources...</ac:parameter><ac:rich-text-body><h4>Task 1: Build checkbox that triggers a function to filter for Senate Democrats only</h4><p><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong>&nbsp;<span style=\"color: rgb(0,0,0);\">Do not use &quot;onClick&quot; property on the HTML tags, use .addEventListener() on the JS file instead.</span></span></p><h4>Task 2: Build check-boxes that trigger functions to filter for Senate Republicans and Independants</h4><h5>Add Filter by Party Checkboxes</h5><p>Add three checkboxes to filter the data table by party (Democrat, Republican, and Independent).&nbsp;Look at checkbox examples&nbsp;in&nbsp;<em>Resources</em>.</p><ol><li>Open the senate HTML file.</li><li>Create checkbox input section with three checkboxes and the appropriate labels.</li><li>Write the javascript code that will filter the data by party:</li><ol><li>Get checked box values and put them into an array.</li><li>Use that array to filter the list of members to pass to your function to create the&nbsp;table.&nbsp;&nbsp;</li><li>Call this code whenever a checkbox is changed, i.e., use an&nbsp;<em>onchanged</em><span>&nbsp;</span>event listener.</li></ol><li>Open the page in your browser. If the checkboxes filter the table correctly, go to the next step. If not, open the Developer Console and look for error messages.</li></ol><h4>Task 3: Build functionality to allow users to filter by multiple checkboxes</h4><h4>Task 4: Repeat for House data</h4><p><br /></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><h2 class=\"auto-cursor-target\">Extra: Trello Board</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"dd20a35f-f0f6-48cf-8e93-994b6e6bd6e6\"><ac:parameter ac:name=\"title\">View</ac:parameter><ac:rich-text-body><p><ac:structured-macro ac:name=\"trello-board\" ac:schema-version=\"1\" ac:macro-id=\"bac8a1f3-f1a1-423c-9882-af8534e233e2\"><ac:parameter ac:name=\"url\">https://trello.com/b/xMkTNOAu</ac:parameter></ac:structured-macro></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "228622497",
    "conflChildrenId": [

    ]
  },
  {
    "title": "TGIF Sprint 3",
    "content": "<h2><span style=\"color: rgb(61,71,77);\">Epic 1: Implement dropdown filters into your website and integrate</span></h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"5433445d-5264-4957-825f-815c10470d2f\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources</ac:parameter><ac:rich-text-body><h4><span>Task 1: Create dropdown selector to&nbsp;filter Senate members by State<br /></span></h4><p>Add a dropdown menu&nbsp;to filter the data table by state.&nbsp;The filter default state should show all the data.&nbsp;Look at dropdown filter examples&nbsp;in&nbsp;<em>Resources</em>.</p><ol><li>Open the senate HTML file.</li><li>Create dropdown input section with the appropriate labels and options.</li><li>Write the javascript code that will filter the data by state:</li><ol><li>Get the selected value. &nbsp;</li><li>Use the same approach to filtering&nbsp;that you did with the party checkboxes.</li></ol><li>Open the page in your browser. If the dropdown&nbsp;filters the table correctly, go to the next step. If not, open the Developer Console and look for error messages.</li></ol><p>Some random HTML and JavaScript coding tips:</p><ul><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong></span> You will have two distinct filters on this page. You definitely don't want the checkboxes and drop down to have the same name. Use content-based names like party-filter and state-filter.</li><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong></span> Use separate functions to handle changes on party and state. All each function should do is update the relevant variable, e.g., what parties and state(s) are selected. Then each can call the same createTable() function to draw the updated table.</li><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong></span> When setting up the state dropdown menu, make sure that one of the options is &quot;all states&quot;.</li></ul><h4>Task 2: Define every different scenario of filtering possible</h4><p><span>Think about every different ways that the filters can be used in combination to render different results. If needed, your mentors will discuss this task with you and then lead a spike to share the different scenarios.</span></p><h4><span>Task 3: Code integrated filtering by party and state</span></h4><p><span>Now that you've defined your scenarios for using multiple filters, code it to achieve your expected results.&nbsp;</span></p><h4><span>Task 4: Repeat for House members</span></h4><p>Do the same process to create filters (checkboxes to filter by party and a dropdown to filter by state) for the House data by repeating the steps from task 1. This will be a much longer page than the Senate page, but you should have very little new work to do.</p></ac:rich-text-body></ac:structured-macro><h2><span style=\"color: rgb(61,71,77);\">Epic 2: Use AJAX to call ProPublica data<br /></span></h2><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"5845e402-d84e-4deb-b762-141d33156153\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources</ac:parameter><ac:rich-text-body><h4>Task 1: Fetch JSON data from ProPublica server</h4><p>You have been asked to upgrade the code you have to use live data with AJAX.</p><p>The first important change you'll make will be to replace the code that gets the test data from local files with AJAX calls using <strong>fetch()</strong> to get real data from the ProPublica site instead. The second change is to follow best practices and clean up the JavaScript and HTML code.</p><p><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong></span> it's a good practice to move most of the JavaScript from the HTML file over into its own .js file.&nbsp;</p><p><strong>AJAX and Browser Security</strong></p><p>AJAX gives code on a web page the ability to send information to another web server. This raises security concerns. A malicious or hacked web page might contain code that sends your personal information wherever it pleases. To be safe, therefore, by default browsers only allow a web page to send AJAX if:</p><ul><li>It is running on a web server, under some domain, e.g., <a href=\"http://superior.widgets.com\">superior.widgets.com</a></li><li>The AJAX is sending information to a URL in the same domain, or</li><li>The web service on the other domain implements cross-origin resource sharing (CORS)</li></ul><p><strong>DRY</strong><br />You always want to avoid duplicating code. Duplicated code means that when you find a bug or see a way to improve something, you have to make the same change in multiple places. In software development, this is called being DRY (Don't Repeat Yourself).</p><p>In JavaScript, one technique to avoid duplication is to refactor the bits that make code different into a data object. Then you write one body of code, and pass it different data objects for different situations.</p><p>For example, suppose you have several pages where some part of each page is to be filled in with data from an AJAX call, and then stored/rendered with Vue. A DRY solution would define a function, call it <strong>renderRemoteData()</strong>, that is called on each page with code like this:</p><p><ac:image><ri:attachment ri:filename=\"getLiveData03.png\" ri:version-at-save=\"1\" /></ac:image></p><p>Here, the target is the ID for elements on the page where the Vue data appears, and the URL gives the function the information it needs to make the AJAX call. Just one code file to define <strong>renderRemoteData()</strong> and its subfunctions is needed.</p><h4>Task 2: Refactor code so that it can handle asynchronous behavior</h4><p>Now, refactor your code so the functions are able to use the data from the fetch call. As you refactor, think about why it matters to use asynchronous fetching instead of local static data.&nbsp;</p><h4>Task 3: Add loaders</h4><p>Add a loader to your website while the data is being fetched, so users know they&nbsp;have to wait for the page to load.</p></ac:rich-text-body></ac:structured-macro><h2><span style=\"color: rgb(61,71,77);\">Epic 3: Refactor to merge JS files<br /></span></h2><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"217ec306-5ed1-4365-8ebb-9afeb12a5b63\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources</ac:parameter><ac:rich-text-body><h4>Task 1: Refactor your code down to 1-2 JS files</h4><p>Now you should have about 4 JS files. These files contain functions that are quite similar. An excellent practice is to refactor your code so that these functions, that operate in the exact same way but with different data, all exist within the same JS file(s). Review your files and create a plan for how to merge your code so that there is only ONE or TWO JS files. When you have come up with a strategy for your refactoring, check your plan with a mentor and then execute.&nbsp;</p><h4>Task 2: Submit your code to GitHub&nbsp;</h4><p>You should already have a dedicated repository for the TGIF project, but if not please create one now.&nbsp;</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><h2 class=\"auto-cursor-target\">(Optional but recommended) Epic 4: Incorporate VUE into your project</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"4eef7fa1-28e9-4cd3-9ae8-f3ea2b6a8f94\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources</ac:parameter><ac:rich-text-body><p><strong>HTML Templating</strong></p><p>Constructing HTML by concatenating strings is simple at first, but rapidly gets very hard to maintain as the HTML and CSS gets more complex. Therefore, virtually all web programming frameworks include templating libraries that let you define HTML patterns, in HTML files, and then combine those patterns with data to create the actual HTML on the final pages.</p><p>Vue is a JavaScript framework for building user interfaces. It lets you write the HTML you want to use, and add attributes and {{ value }} forms to insert data and repeat forms.</p><p>For example, suppose we want to display a simple list of links to employees. Here's how you could write that in your HTML file using Vue:</p><p><ac:image><ri:attachment ri:filename=\"getLiveData01.png\" ri:version-at-save=\"1\" /></ac:image></p><p>This is nice and readable, and much easier to edit than JavaScript concatenating strings. Vue adds a few special notations for your HTML. The ones shown here are:</p><ul><li>{{ expression }} to insert the value of a JavaScript expression into HTML text</li><li>v-bind:attribute=&quot;expression&quot; to insert the value of a JavaScript expression into a tag attribute</li><li>&lt;tag v-for=&quot;var in expression&quot;&gt;...&lt;/tag&gt; to repeat some HTML element for every item in the list returned by a JavaScript expression. var will be set to each item in turn, just like a JavaScript for loop.</li></ul><p>For Vue annotations to work requires a few additional steps:</p><ul><li>Put the HTML that you want Vue to scan and change inside an HTML element with some distinct ID. The ID app is often used but not required.</li><li>Load the Vue JavaScript library.</li><li>Add JavaScript code to create a Vue object that connects the HTML with the data.</li><li>Set the data.</li></ul><p>Here's an outline of how that might work here:</p><p><ac:image ac:width=\"1000\"><ri:attachment ri:filename=\"getLIveData02.png\" ri:version-at-save=\"1\" /></ac:image></p><p>The Vue object is a place to store data to be displayed. Only when you want to update the display should you update the Vue data. Internally Vue is smart about checking to see what needs to be changed on the page. More complex calculations should be done in JavaScript when preparing the data to pass to the HTML.</p><p><strong>CDN (Content Distribution Networks)</strong></p><p>Strictly speaking, a Content Distribution Network (CDN) is a network of web servers that contain duplicated content, placed at various locations around the world to reduce congestion and long-distance network traffic. The term has informally been extended to refer to web sites that host commonly needed web resources, such as JavaScript libraries.</p><p><br /></p><p><br /></p><p><br /></p></ac:rich-text-body></ac:structured-macro><h2 class=\"auto-cursor-target\">Extra: Trello Board</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"6320f7e5-82f8-48f1-86b4-656821b0d61c\"><ac:parameter ac:name=\"title\">View</ac:parameter><ac:rich-text-body><p><ac:structured-macro ac:name=\"trello-board\" ac:schema-version=\"1\" ac:macro-id=\"945e518b-2604-4f13-b57a-30c6ec46d67c\"><ac:parameter ac:name=\"url\">https://trello.com/b/S9SsHB5U</ac:parameter></ac:structured-macro></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "233635841",
    "conflChildrenId": [

    ]
  },
  {
    "title": "JavaScript Practice Exercises",
    "content": "<p>While your boss, Paula Davis, is working with the client let's do some practice exercises to understand some of the basic practices of coding in JavaScript.</p><h2>JavaScript Basics</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"50cb2a5b-5f4c-4eb4-b3ad-83601c960ff0\"><ac:parameter ac:name=\"title\">View Explanation &amp; Exercises...</ac:parameter><ac:rich-text-body><h4>Part 1: Set up a JavaScript playground</h4><p>Since you''ll be learning to write JavaScript for web pages, the best way to experiment is by making a very simple web page that loads and runs some JavaScript. You may find this page useful when testing out ideas in later tasks.</p><ol><li>Create a directory for your code, e.g., playground.</li><li>Inside that directory, create an HTML file, e.g., index.html.</li><li>In the HTML file, put some simple HTML to show some text that will let you know you''re looking at the right file. Be sure to include &lt;!DOCTYPE HTML&gt; at the top.</li><li>Add a script element to this file to load JavaScript from the file main.js. See this example for the syntax. Use the version listed for HTML5.</li><li>In the same directory, create the file main.js.</li><li>In the JavaScript file, add a line into your JavaScript file to print the following text in the console: &quot;Starting javascript...&quot;.<br /><ol><li>In programming, printing to some console window is often called &quot;logging&quot;. Hence the function to use in JavaScript is console.log.</li></ol></li><li>Open your HTML file in a browser.</li><li>Open the developer console. Is your message there? If not, try reloading the file.</li></ol><p><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong></span> If you still don't see the message, check your HTML and JavaScript file for typos. Make sure file names match exactly, including case. Make sure the JavaScript file is in the same directory as the HTML file.</p><p><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong></span> As you do the exercises below, keep adding new code to do what each exercise asks for. At the end, you''ll be asked to submit all the JavaScript for mentor feedback.</p><h4>Part 2: Writing expressions with variables</h4><p>To get started, here are some simple exercises to create and use variables and expressions. Variables are how you store data and results of calculations. Expressions are how you calculate values.</p><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 1: </strong></span></p><p>In your JavaScript file create a variable called myName with your name as the value. Put your name inside string quotes, e.g., &quot;my name&quot;. Then add a line of code to print the variable name to the console after the previous message.</p><p>Save your JavaScript file in your editor. Reload the HTML page in your browser. You should see your name printed. If not, investigate and fix.</p><p><strong><span style=\"color: rgb(0,0,255);\">Exercise 2: </span></strong></p><p>Create a variable called age with a number that is your age. Do not use string quotes for numbers.</p><p>Add a line to print that variable in the console. Save the file and reload the page. You should see your name, and your age.</p><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 3: </strong></span></p><p>Create a variable called ignasiAge with a value 32. Create another variable called ageDiff and set it to an expression that calculates your age minus Ignasi''s age. Print the value of ageDiff.</p><p>Save the file and reload the page. You should see your age, and the difference. If you are younger than Ignasi, you should see a negative number.</p><h4>Part 3: Writing code with conditionals</h4><p>Conditionals are forms used programming to tell the computer to do different things, depending on some test, e.g., &quot;if the user is logged in, say &quot;Hi&quot; else say &quot;Please log in.&quot;</p><p>The most basic conditional form is the if...then...else.... See the ebook for a discussion.</p><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 4: </strong></span></p><p>Write a conditional that compares the variable with your age with the number 21. It should print either &quot;You are older than 21&quot; or &quot;You are not older than 21&quot;, appropriately, depending on your age.</p><p>Save your JavaScript file and reload the page. Make sure you see the correct message. Try changing your age in the JavaScript file to make sure the other message prints when it should.</p><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 5: </strong></span></p><p>Write a conditional that compares your age with Ignasi''s age. This conditional will need to test if you are older, younger, or the same age, and print, appropriately, either &quot;Ignasi is older than you&quot;, Ignasi is younger than you&quot;, or &quot;You have the same age as Ignasi&quot;.</p><p>Save your changes and reload the file.</p><p><br /></p></ac:rich-text-body></ac:structured-macro><h2>JavaScript Array Functions&nbsp;</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"fb63068d-0f5c-4d6c-a210-1a52db4c561c\"><ac:parameter ac:name=\"title\">View Explanation &amp; Exercises...</ac:parameter><ac:rich-text-body><h4><span style=\"color: rgb(51,51,51);\"><strong>Sorting an Array</strong></span></h4><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 1:</strong></span><span>&nbsp;</span></p><p>Create an array with all the names of your class (including mentors).&nbsp; Sort the array alphabetically.&nbsp; Print the first element of the array&nbsp;in the console.&nbsp; Print the last element of the array in the console.&nbsp; Print all the elements of the array in the console.&nbsp; Use a &quot;for&quot; loop.</p><p>Save the file and reload the page. You should see the first element of the sorted array, the last element of the sorted array, and a list of all the elements in order in the array in the console.</p><h4>Looping Over an Array</h4><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 2:</strong>&nbsp;</span></p><p>Create an array with all the ages of the students in your class.&nbsp; Iterate the array using a while loop, and then print every age in the console.&nbsp; Add a conditional inside the while loop to only print even numbers.&nbsp; Change the loop to use a &quot;for&quot; loop instead of a &quot;while&quot; loop.</p><p>Save your changes to your JavaScript file. Reload the HTML page in your browser. You should see every age printed, then only the even numbers printed.&nbsp; If not,&nbsp;investigate&nbsp;and fix.</p><h4><strong style=\"font-size: 1.0em;\">Functions that Use Arrays</strong></h4><p>For&nbsp;the following&nbsp;exercises, you cannot sort your array. Be sure your solution works for any array that it is passed!</p><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 3:</strong>&nbsp;</span></p><p>Write a function which receives an array as a parameter and prints the lowest number in the array to the console.</p><p>Save&nbsp;the changes to your JavaScript file. Reload the HTML page in your browser. You should see the lowest number in the array printed in the console.&nbsp; If not,&nbsp;investigate&nbsp;and fix.</p><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 4:</strong>&nbsp;</span></p><p>Write a function which receives an array as a parameter and prints the biggest number in the array to the console.</p><p>Save&nbsp;the&nbsp;changes to your JavaScript file. Reload the HTML page in your browser. You should see the&nbsp;biggest number in the array printed in the console.&nbsp; If not,&nbsp;investigate&nbsp;and fix.</p><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 5:</strong>&nbsp;</span></p><p>Write a function which receives two parameters, an array and an index.&nbsp; The function will print the value of the element at the given position (one-based) to the console.</p><p>For example, given the following array and index, the function will print '6'.&nbsp;&nbsp;</p><pre class=\"language-markup\"><code class=\"language-markup\" style=\"text-align: left;\">var array = [3,6,67,6,23,11,100,8,93,0,17,24,7,1,33,45,28,33,23,12,99,100];\nvar index = 1;\n</code></pre><p>Save&nbsp;the&nbsp;changes to your JavaScript file&nbsp;and check your browser console.&nbsp; You should see the number at the correct index printed in the console.&nbsp; If not,&nbsp;investigate&nbsp;and fix.</p><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 6:</strong>&nbsp;</span></p><p>Write a function which receives an array and only prints the values that repeat.&nbsp;&nbsp;</p><ul><li>For example, given the following array and index, the function will print '6,23,33,100'.<br /><pre class=\"language-markup\"><code class=\"language-markup\" style=\"text-align: left;\">var array = [3,6,67,6,23,11,100,8,93,0,17,24,7,1,33,45,28,33,23,12,99,100]; </code></pre></li></ul><p>Save&nbsp;the&nbsp;changes to your JavaScript file. Reload the HTML page in your browser. You should see an array of the repeated numbers printed in the console.&nbsp; If not,&nbsp;investigate&nbsp;and fix.</p><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 7:</strong>&nbsp;</span></p><p>Write a simple JavaScript function to join all elements of the following array into a string.&nbsp;</p><pre class=\"language-markup\"><code class=\"language-markup\" style=\"text-align: left;\">myColor = [&quot;Red&quot;, &quot;Green&quot;, &quot;White&quot;, &quot;Black&quot;];</code></pre><p>Save&nbsp;the&nbsp;changes to your JavaScript file. Reload the HTML page in your browser. You should see&nbsp;the following in your console:</p><p>&quot;Red&quot;, &quot;Green&quot;, &quot;White&quot;, &quot;Black&quot;</p><p>&nbsp;If not,&nbsp;investigate&nbsp;and fix.&nbsp;</p><p><br /></p></ac:rich-text-body></ac:structured-macro><h2 class=\"auto-cursor-target\">JavaScript String Functions</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"b6c1453a-5f6e-423f-8cd8-968cd1df3b85\"><ac:parameter ac:name=\"title\">View Explanation &amp; Exercises...</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 1:</strong>&nbsp;</span></p><p>Write a<span>&nbsp;</span>JavaScript&nbsp;function that reverses a number.&nbsp;For example, if x = 32443 then the output should be 34423.</p><p>Save your JavaScript file and reload the page. Make sure you see the correct output.&nbsp;&nbsp;If not,&nbsp;investigate&nbsp;and fix.</p><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 2:</strong>&nbsp;</span></p><p>Write a JavaScript function that returns a string in alphabetical order.&nbsp;For example, if x = 'webmaster' then the output should be&nbsp;'abeemrstw'.&nbsp; Punctuation and numbers aren't passed in the string.</p><p>Save your JavaScript file and reload the page. Make sure you see the correct output.&nbsp;&nbsp;If not,&nbsp;investigate&nbsp;and fix.</p><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 3:</strong>&nbsp;</span></p><p>Write a JavaScript function that converts the first letter of every word to uppercase.&nbsp;For example, if x = &quot;prince of persia&quot; then the output should be &quot;Prince Of Persia&quot;.</p><p>Save your JavaScript file and reload the page. Make sure you see the correct output.&nbsp;&nbsp;If not,&nbsp;investigate&nbsp;and fix.</p><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 4:</strong>&nbsp;</span></p><p>Write a JavaScript function that finds the longest word in a phrase.&nbsp;For example, if x = &quot;Web Development Tutorial&quot;, then the output should be &quot;Development&quot;.</p><p>Save your JavaScript file and reload the page. Make sure you see the correct output.&nbsp;&nbsp;If not,&nbsp;investigate&nbsp;and fix.</p><p><br /></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><h2 class=\"auto-cursor-target\">Extra: More Functions Exercises (optional)</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"bb080f64-f2e3-4274-82ae-266b3d17a6d4\"><ac:parameter ac:name=\"title\">View More Exercises</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 1:</strong>&nbsp;</span></p><p>Write a<span>&nbsp;</span>JavaScript function that returns nothing and has no parameters. This function should print the result of multiply two number (the numbers that you want).&nbsp;</p><p><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong>Exercise 2:</strong>&nbsp;</span></strong><br /></span></p><p><span style=\"color: rgb(0,0,255);\"><span style=\"color: rgb(0,0,0);\">Write a<span>&nbsp;</span>JavaScript function with no parameters. This function should return the result of multiply two number (the numbers that you want), and in your main program, you should print the result.&nbsp;&nbsp;</span><br /></span></p><p><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong>Exercise 3:</strong> <br /></span></span></strong></span></p><p><span style=\"color: rgb(0,0,255);\"><span style=\"color: rgb(0,0,0);\">Write a<span>&nbsp;</span>JavaScript function two parameters. These parameters are the numbers that have to be multiplied. The function should return the result of multiply both numbers (the numbers that you want), and in your main program, you should print the result. Test the function with 3 examples. <br /></span></span></p><p><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong>Exercise 4:</strong> </span></span></strong></span></strong></span></span></strong></span></strong><br /></span></span></strong></span></strong></span></span></strong></span></p><p><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,0);\">Write a function that determines the type of a triangle given the length of its three sides.</span></span></span></p><p><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong>Exercise 5:</strong> </span></span></strong></span></strong></span></span></strong></span></p><p><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\" style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\">Write a function that receives as a parameter an array of characters and replaces all a by a '1'. e.g.: casa &rarr; c1s1</span></span></span><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><br /></span></strong></span></strong></span></span></strong></span></strong></span></span></strong></span></p><p><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\" style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong>Exercise 6:</strong> </span></span></strong></span></strong></span></span></strong></span></span></span></span></span></p><p><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\" style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\" style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\">Write two functions. The first one should return the sum of all the elements of an array and the second one should return the smallest number in the array. Print&nbsp; the result in the main program.</span></span></span><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><br /></span></strong></span></strong></span></span></strong></span></strong></span></span></strong></span></span></span></span></span></p><p><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\" style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\" style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong>Exercise 7:</strong> </span></span></strong></span></strong></span></span></strong></span></span></span></span></span></span></span></strong></span></strong></span></span></strong></span></span></span></span></span></p><p><span style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\">Write a function that adds the even numbers of an array. For example, the array: <ac:link><ri:page ri:content-title=\"1 2 8 3 2\" /><ac:plain-text-link-body><![CDATA[1 2 8 3 2]]></ac:plain-text-link-body></ac:link> would result in the sum of 2 + 8 + 2, since they are even numbers. Return the result and print it in the main program.<br /></span></span></span></span></span></span></span></p><p><span style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\" style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\" style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong>Exercise 8:</strong> </span></span></strong></span></strong></span></span></strong></span></span></span></span></span></span></span></strong></span></strong></span></span></strong></span></span></span></span></span></span></span></span></span></span></span></span></p><p><span style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\">Write a function that adds the even positions of an array. For example, the array: <ac:link><ri:page ri:content-title=\"1 2 8 3 2\" /><ac:plain-text-link-body><![CDATA[1 2 8 3 2 3 4]]></ac:plain-text-link-body></ac:link> would result in the sum of 8 + 2 + 4 since they are even positions of the array(position 2,4,6). Return the result and print it in the main program.</span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><span style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\" style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\" style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong>Exercise 9:</strong> </span></span></strong></span></strong></span></span></strong></span></span></span></span></span></span></span></strong></span></strong></span></span></strong></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><span style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\">Write a function that by sending a number as parameter, tells you all the even numbers previous to it. For example, if you send to the function the number 9, it should print 2,4,6,8.<br /></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><span style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\" style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\" style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong>Exercise 10:</strong> </span></span></strong></span></strong></span></span></strong></span></span></span></span></span></span></span></strong></span></strong></span></span></strong></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\" style=\"color: rgb(0,0,0);\">Write a function that by sending two numbers as parameters, it tells you the odd numbers between these. For instance, if you send it the numbers&nbsp; 1 and the 13 as parameters, it should print 1,3,5,7,9,11,13.</span><strong><span class=\"c-message__body\"><br /></span></strong></span></p><p><br /></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "234389544",
    "conflChildrenId": [

    ]
  },
  {
    "title": "JSON exercise: Bookstore",
    "content": "<h3 class=\"sectionedit1\">Hey developers, I have a new task for you! A regular customer has requested a provisional version for one of his latest projects: a bookstore. At the moment it does not need to be an actual store but later on it will be. We just need to show the books on screen, preferably with a search bar. These are the requested requirements:</h3><div class=\"level3\"><ul class=\"fix-media-list-overlap\"><li class=\"level1\"><div class=\"li\">The technologies used will be:<span>&nbsp;</span>HTML,<span>&nbsp;</span>CSS<span>&nbsp;</span>and JavaScript.</div></li><li class=\"level1\"><div class=\"li\">To achieve the flip card effect, you can either use pure CSS or use the library FancyBox (find links below). If you have not worked with them, take a look.&nbsp;</div></li><li class=\"level1\"><div class=\"li\">The project must be finished IN TWO DAYS because he will ask me to show it to him.</div></li><li class=\"level1\"><div class=\"li\">The books data are hosted on a remote JSON. You must access without downloading it since the client can modify the content without modifying the structure and the project should work without touching anything on the web page.</div></li><li class=\"level1\"><div class=\"li\">Books should be displayed with a little responsive behaviour. No need to fight with media queries, only a little adaptation with Bootstrap or plain flexbox would be enough.</div></li><li class=\"level1\"><div class=\"li\">(OPTIONAL) It would be interesting to include a search engine to search for any field in the book. Whether it be title, description or any other.</div></li><li class=\"level1\"><div class=\"li\">The logo (look for one in the web) should be on the top left and the search field (optional) on the top right.</div></li><li class=\"level1\"><div class=\"li\">When doing HOVER on each of the covers, it must be rotated to show the title, the description and a &ldquo;More Info&rdquo; button (This effect is just<span>&nbsp;</span>CSS. Google is your friend). This button will take you to a more detailed image (&ldquo;detalle&rdquo; in the json) of the cover (not the same image) that should be shown in a LIGHTBOX (popup/modal) and NOT in another website (use FancyBox).</div></li></ul><p>RESOURCES: Here are the links for the library:</p><ul class=\"fix-media-list-overlap\"><li class=\"level1\"><div class=\"li\">FancyBox -<span>&nbsp;</span><a class=\"urlextern\" style=\"text-decoration: none;\" title=\"http://fancyapps.com/fancybox/3/\" href=\"http://fancyapps.com/fancybox/3/\" rel=\"nofollow\">http://fancyapps.com/fancybox/3/</a></div></li><li class=\"level1\">With pure&nbsp; CSS :&nbsp;<a href=\"https://www.w3schools.com/howto/howto_css_flip_card.asp\">https://www.w3schools.com/howto/howto_css_flip_card.asp</a></li><li class=\"level1\"><div class=\"li\">And here is the JSON:<span>&nbsp;</span></div><ul><li class=\"level1\"><div class=\"li\"><a href=\"https://api.myjson.com/bins/1h3vb3\">https://api.myjson.com/bins/1h3vb3</a><span>&nbsp;</span>(Spanish version),&nbsp;</div></li><li class=\"level1\"><div class=\"li\"><a href=\"https://api.myjson.com/bins/zyv02\">https://api.myjson.com/bins/zyv02</a>&nbsp;(English version)</div></li></ul></li></ul><div class=\"li\"><br /><br />P.S - The customer just sent me a video with a possible solution. You decide if you want to make it look like this.&nbsp;<a class=\"urlextern\" title=\"https://drive.google.com/file/d/0B7MuB9FR6W82MF9rVFI4QTlvVmc/view\" href=\"https://drive.google.com/file/d/0B7MuB9FR6W82MF9rVFI4QTlvVmc/view\" rel=\"nofollow\">https://drive.google.com/file/d/0B7MuB9FR6W82MF9rVFI4QTlvVmc/view</a></div></div>",
    "conflPageId": "238026826",
    "conflChildrenId": [

    ]
  },
  {
    "title": "STRESS test",
    "content": "",
    "conflPageId": "238125072",
    "conflChildrenId": [
      "238026826",
      "296976386"
    ]
  },
  {
    "title": "TGIF External Resources",
    "content": "<h2>ProPublica API</h2><p><a href=\"https://projects.propublica.org/api-docs/congress-api/\">The ProPublica Congress API home page</a></p><p>Walks you through getting your API key and provides Terms of Use for accessing the data, along with FAQs.</p><h2>JSON</h2><p><a href=\"https://gbstool.learningbydoingtools.com/ebooks/item?id=53\">How to represent data in JavaScript</a></p><ul><li><p>A brief introduction to numbers, strings, and JavaScript objects</p></li></ul><p><a href=\"https://gbstool.learningbydoingtools.com/ebooks/item?id=53#stringify\">How to convert JSON data to a string</a></p><ul><li>Useful for showing JSON data during development and debugging</li></ul><p><a href=\"https://www.elated.com/json-basics/\">JSON Basics: What You Need to Know</a></p><ul><li>An introduction to the JSON data format, including how to create and read JSON strings in JavaScript. (Don''t worry about the sections on XML and PHP.)</li></ul><h2>JavaScript</h2><p><a href=\"https://javascript.info/\">The Modern JavaScript Tutorial</a></p><ul><li>For JavaScript fundamentals: scripts, objects, events, methods<br /><ul><li>JavaScript in an HTML page: how to load JavaScript from an external .js file, how to write JavaScript directly into an HTML file</li><li>JavaScript fundamentals: statements, comments, variables, data types, arrays, operators</li><li>JavaScript to get an HTML element with a specific ID and replace its contents</li></ul></li><li>For JavaScript fundamentals: functions, scope, methods, objects, built-in objects (including DOM)<br /><ul><li>Storing Data, Arrays are Objects for help with accessing specific information within an array</li></ul></li><li>JavaScript fundamentals: decision-making (e.g. comparison, if-else), loops<br /><ul><li>NOTE: a better way to write loops is with forEach() and map(). See <a href=\"https://gbstool.learningbydoingtools.com/ebooks/item?id=55\">here</a>.</li><li><strong><span style=\"color: rgb(255,0,0);\">TIP:</span>&nbsp;</strong>Also see <a href=\"https://www.w3schools.com/js/js_loop_for.asp\">JavaScript For Loops</a> for a very basic, but interactive introduction to for loops in JavaScript</li></ul></li><li>JavaScript to build a string of HTML by looping through an array, and then displaying the final result</li></ul><h2>CSS Styling with Bootstrap</h2><p><a href=\"https://www.w3schools.com/bootstrap/default.asp\">Bootstrap 3 Tutorial</a></p><ul><li>Comprehensive tutorial on the Bootstrap 3 front-end framework. Allows you to play with code samples directly in the tutorial website. Of especial note:<br /><ul><li><a href=\"https://www.w3schools.com/bootstrap/bootstrap_get_started.asp\">Bootstrap Get Started</a>: Goes over how to set up an HTML page to use Bootstrap</li><li><a href=\"https://www.w3schools.com/bootstrap/bootstrap_tables.asp\">Bootstrap Tables</a>: An introduction to the basic classes Bootstrap provides for styling tables</li><li><a href=\"https://www.w3schools.com/bootstrap/bootstrap_ref_css_tables.asp\">Bootstrap CSS Tables Reference</a>: A more comprehensive listing of Bootstrap-provided classes for styling tables</li><li><a href=\"https://www.w3schools.com/bootstrap/bootstrap_collapse.asp\">Bootstrap Accordion/Collapse</a>: Goes over how to hide/show content with Bootstrap</li></ul></li></ul><h2>JSFiddle</h2><p><a href=\"https://jsfiddle.net/\">JSFiddle</a> provides a custom environment to test your JavaScript, HTML, and CSS code right inside your browser. The many features provided by the JSFiddle interface makes it relevant to almost all Web application developers. The main section of the site is divided into four areas:</p><ol><li>CSS: Enter CSS to be applied to the HTML used in your tests.</li><li>HTML: This area allows you to enter HTML to be used in your tests.</li><li>JavaScript: JavaScript source is entered in this area.</li><li>Output: The results of executing the CSS, HTML, and JavaScript.</li></ol><p>To learn more go <a href=\"https://www.techrepublic.com/blog/software-engineer/jsfiddle-an-online-playground-for-your-javascript-html-css/\">here</a>.</p><h2>Debugging</h2><p><a href=\"https://javascript.info/\">The Modern JavaScript</a></p><ul><li>Search 'Debugging'</li></ul><h2>Displaying JavaScript data as HTML</h2><p>Once you have data in JSON form, you can use JavaScript to construct HTML that presents that data in a readable form to users. Typically, only a dozen lines of code, more or less, will be needed to do this, but those lines will involve many of the basic programming concepts in JavaScript. Of especial relevance are</p><ul><li><a href=\"https://gbstool.learningbydoingtools.com/ebooks/item?id=53\">arrays and JSON objects</a></li><li><a href=\"https://gbstool.learningbydoingtools.com/ebooks/item?id=54\">anonymous functions</a></li><li><a href=\"https://gbstool.learningbydoingtools.com/ebooks/item?id=55\">looping over array data</a> using map() with anonymous functions</li><li><a href=\"https://gbstool.learningbydoingtools.com/ebooks/item?id=1458\">using loops to construct HTML</a></li></ul><p>JavaScript Display Possibilities - <a href=\"http://www.w3schools.com/js/js_output.asp\">http://www.w3schools.com/js/js_output.asp</a></p><p><br /></p>",
    "conflPageId": "238419984",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Mobile App - Task 1 Resources",
    "content": "<h1><span style=\"color: rgb(128,130,133);\">Background</span></h1><h2><span style=\"color: rgb(128,130,133);\">User experience design</span></h2><p><span style=\"color: rgb(35,31,32);\">Designing a good user interface is not about being artistic. A good sense of color and spacing helps, but what matters most is&nbsp;<strong>simplicity</strong>&nbsp;and&nbsp;<strong>usability</strong>. Google's&nbsp;search page is the epitome of simplicity: a text field and a search button. Apple has won kudos and customers over and over again, not by&nbsp;having tons of buttons on its devices and interfaces, but by having just one or two.&nbsp;</span><br /><span style=\"color: rgb(255,255,255);\"><strong>Expert Advice</strong></span><br /><span class=\"confluence-embedded-file-wrapper confluence-embedded-manual-size\"><ac:image ac:height=\"102\" ac:width=\"180\"><ri:attachment ri:filename=\"worddave45b4be992df0cc2870de9ceb550384e.png\" ri:version-at-save=\"1\" /></ac:image></span><br /><span style=\"color: rgb(255,255,255);\"><strong>The one-button app</strong></span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Simplicity though can't come from hiding things. Modern&nbsp;digital watches are super simple: just&nbsp;2 or 3 buttons. But how you have to use those buttons to set the time, set the date, set an alarm, and so on, is impossible to figure out without a manual. An interface has to communicate what you can do with it. The best interfaces communicate this with very little clutter and very few words.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">An interface should also be efficient. The most common tasks should take as few steps to accomplish as possible. Apple's Mail program, for example, has no single command to go from one unread message to the next, which is probably the most common action anyone does.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">The key to designing effective user interfaces is to develop&nbsp;<strong>personas&nbsp;</strong>and&nbsp;write&nbsp;<strong>scenarios</strong>. Personas are well-specified fictional people rather than generalizations of classes of people.&nbsp;A scenario is a story of someone using an&nbsp;application in a given context to solve a real problem, e.g., someone sending an &quot;I'm on the way&quot; message while riding a bus, someone checking for flight status in an airport, someone checking how far they've run while jogging, and so on. Through these scenarios, you can determine how the person in each scenario may want to interact with your app's interface to accomplish his or her goal.</span></p><h2><span style=\"color: rgb(128,130,133);\">Interface diagrams</span></h2><p><span style=\"color: rgb(35,31,32);\">Most interface designers think visually, which doesn't mean you have to be an artist. It just implies that the most critical early designs are simple sketches.</span><br /><span style=\"color: rgb(35,31,32);\">Two particularly important types of sketches in the initial design phases are:</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong>User flow diagrams</strong>, also called&nbsp;<strong>the information architecture;</strong></span></li><li><span style=\"color: rgb(35,31,32);\">And&nbsp;<strong>mockups</strong>.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Examples of both types of sketches can be found in&nbsp;<em>Resources</em>.</span></p><h2><span style=\"color: rgb(128,130,133);\">User Flow Diagrams</span></h2><p><span style=\"color: rgb(35,31,32);\">A&nbsp;<strong>user flow diagram</strong>&nbsp;is an overview of how the app being designed will work. The diagram contains small, very simple sketches of the different screens a user will see.&nbsp;For each possible user action on a given screen, there is an arrow&nbsp;labeled with that action leading to&nbsp;the next screen the user would see. For example, in a calendar app:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">One screen might show a sketch of a month view.</span></li><li><span style=\"color: rgb(35,31,32);\">An arrow labeled &quot;user taps a day square&quot; leads from that screen to another showing a list of events for a day.</span></li><li><span style=\"color: rgb(35,31,32);\">An arrow labeled &quot;user taps event&quot; leads from that screen to another showing event details (time, place, attendees).</span></li><li><span style=\"color: rgb(35,31,32);\">An arrow labeled &quot;done&quot; leads from the event detail screen back to the day screen.</span></li><li><span style=\"color: rgb(35,31,32);\">Another arrow labeled &quot;done&quot; leads from the day screen to the month screen.&nbsp;</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The user diagram is sufficient to allow discussion about what screens and options there should be, what actions should trigger transitions, and where the transitions should lead to.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">User diagrams should be tested to see how well they support your scenarios. For example, one&nbsp;calendar scenario is &quot;Joe wants to see who he's meeting with&nbsp;on Tuesday morning.&quot; Doing that scenario with the above example sketch shows that Joe would have to tap on Tuesday, and then tap on the first meeting to see who the attendees are. Then, Joe would have to tap done, tap the next meeting, tap done, tap the next meeting, and so on. The&nbsp;diagram makes it clear there's no way to go directly from an event to the next event on the same day. If the scenario is an important one for our users, our interface needs improving.</span></p><h2><span style=\"color: rgb(128,130,133);\">Mockup</span></h2><p><span style=\"color: rgb(35,31,32);\">A&nbsp;<strong>mockup</strong>&nbsp;is a more detailed drawing of a specific screen. Here you are concerned with color and layout. The first purpose of a mockup is to&nbsp;verify that&nbsp;it's feasible to include all the options desired on a single screen. The second purpose is to do&nbsp;<strong>lo-fi&nbsp;paper prototype user testing</strong>, in which you<strong>&nbsp;</strong>give users examples of tasks to do and show them printed copies of the screens, and see if they understand what to do. Do the mockups only after you've worked out a good user flow for your key scenarios.</span></p><h1><span style=\"color: rgb(128,130,133);\">Required Resources</span></h1><h2><span style=\"color: rgb(128,130,133);\">Mobile Web Programming Concepts</span></h2><ul><li><span style=\"color: rgb(35,31,32);\"><em>Build Mobile Websites and Apps for Smart Devices</em>&nbsp;by Earle Castledine, Myles Eftos, Max Wheeler</span><ul><li><span style=\"color: rgb(35,31,32);\">Chapter 1 discusses options for delivering content in a mobile-friendly way- native apps, mobile web, responsive design, alternate websites.</span></li><li><span style=\"color: rgb(35,31,32);\">Chapter 2 covers design issues.</span></li><li><span style=\"color: rgb(35,31,32);\">Chapter 3 covers how to style with CSS and HTML for mobile devices.</span><ul><li><span style=\"color: rgb(35,31,32);\">Note: Only skim the pictures in Chapter 3 at this time to get an idea of the graphic options available.&nbsp;</span></li></ul></li></ul></li></ul><h2><span style=\"color: rgb(128,130,133);\">Personas</span></h2><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.smashingmagazine.com/2014/08/a-closer-look-at-personas-part-1/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">A Closer Look at Personas</span></span></a><span style=\"color: rgb(35,31,32);\">&ndash; What personas are and why they are important in the design process.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://uxmastery.com/create-ux-personas/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to Create UX Personas</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- A video tutorial on how a business would create personas to guide software development</span></li></ul><h2><span style=\"color: rgb(128,130,133);\">Scenarios</span></h2><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.slideshare.net/KimGoodwin/storytelling-by-design-scenarios-talk-at-confab-2011\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Storytelling by Design</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;by Kim Goodwin &ndash; Great slides on how to approach designing an app, but the title should be &quot;design by story telling!&quot;</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.usability.gov/how-to-and-tools/methods/scenarios.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Scenarios</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- An overview of what scenarios are, with examples</span></li></ul><h2><span style=\"color: rgb(128,130,133);\">User Interface Flow Diagrams</span></h2><p><span style=\"color: rgb(35,31,32);\">No specific format is required for your deliverable other than a box for each distinct screen, and&nbsp;arrows from one screen to the next clearly labeled with the user action for that arrow. More important is to make sure your diagram handles all steps in your intended scenarios, including cases such as canceling an action. The references below all include examples. The later ones get into more depth on how these fit into the design process.</span></p><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.agilemodeling.com/artifacts/uiFlowDiagram.htm\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">User Interface Flow Diagrams</span></span></a></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://signalvnoise.com/posts/1926-a-shorthand-for-designing-ui-flows\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">A shorthand for designing UI flows</span></span></a></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.startuprocket.com/blog/how-to-create-a-user-experience-flow-chart-ux-flow-chart\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to create a UX flow chart</span></span></a></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://conversionxl.com/how-to-design-user-flow/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to design user flow</span></span></a></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.uxbooth.com/articles/designing-for-mobile-part-1-information-architecture/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Design for Mobile, Part I: Information Architecture</span></span></a></li></ul><h1><span style=\"color: rgb(128,130,133);\">Additional Resources</span></h1><h2><span style=\"color: rgb(128,130,133);\">Color Scheme Picker</span></h2><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://colorschemedesigner.com/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Color Scheme Designer</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Provides tools to help you select a color scheme for your app.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.colorcombos.com/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">ColorCombos</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Helps you find the perfect color combination for your app.</span></li></ul><h2><span style=\"color: rgb(128,130,133);\">Mobile Design</span></h2><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.nngroup.com/articles/ten-usability-heuristics/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">10 Usability Heuristics for User Interface Design</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;by&nbsp;Jakob&nbsp;Nielsen --&nbsp;Provides the 10 most general principles in interaction design.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.smashingmagazine.com/guidelines-for-mobile-web-development/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Guidelines for Mobile Web Development from Smashing Magazine</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Provides more links on mobile design than you can shake a&nbsp;stylus&nbsp;at.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.creativebloq.com/mobile/10-principles-mobile-interface-design-4122910\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">The 10 Principles of Mobile Interface Design</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;by Jonathan Stark - A succinct list of important design considerations for mobile interfaces, including the importance of more content, less chrome.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://www.webdesignerdepot.com/2012/02/common-mobile-web-design-mistakes/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Common Mobile Web Design Mistakes</span></span></a></li></ul>",
    "conflPageId": "260472845",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java 2 - Welcome",
    "content": "<h1><span style=\"color: rgb(86,86,86);\">Welcome!</span></h1><p><span style=\"color: rgb(51,51,51);\">In this course, your team of developers continues development of the&nbsp;<strong>Salvo&nbsp;</strong>game. Now that the basic architecture is in place, it's time to implement actual game play!</span><br /><span style=\"color: rgb(51,51,51);\">In this phase of development, you will write code so that players can:</span></p><ul><li><span style=\"color: rgb(51,51,51);\">initiate new games, or join games another player has initiated</span></li><li><span style=\"color: rgb(51,51,51);\">place ships at the start of a game</span></li><li><span style=\"color: rgb(51,51,51);\">fire salvos at other player's ships and receive visual displays of the results</span></li><li><span style=\"color: rgb(51,51,51);\">see the scores for the game, and a leaderboard of scores for all players</span></li></ul><p><span style=\"color: rgb(51,51,51);\">The emphasis is now on implementing the algorithms needed for the Salvo&nbsp;<strong>game engine.</strong></span></p><h1><span style=\"color: rgb(86,86,86);\">What is Algorithm Development?</span></h1><p><span style=\"color: rgb(51,51,51);\">What makes computer programs interesting and userful are the algorithms that they implement. Algorithms are procedures for taking data, calculating values, and making decisions. The field of computer science is focused on the development of algorithms to do things that currently can't be done, or can't be done fast enough. Algorithms are how search engines can find a web page for you from millions of pages in a fractions of a second, how a space probe can be launched from Earth and rendezvous with a comet millions of miles away, and so on.</span><br /><span style=\"color: rgb(51,51,51);\">In this course, you'll learn to develop and implement in Java some simple but non-trivial algorithms for:</span></p><ul><li><span style=\"color: rgb(51,51,51);\">Identifying legal and illegal places where a user can place ships</span></li><li><span style=\"color: rgb(51,51,51);\">Calculating hits and misses</span></li><li><span style=\"color: rgb(51,51,51);\">Determining when a game is ready to begin, when a turn is complete, and when a game is finished</span></li><li><span style=\"color: rgb(51,51,51);\">Calculating final scores, best and worst scores, and so on</span></li></ul><h1><span style=\"color: rgb(51,51,51);\">&nbsp;</span><br /><span style=\"color: rgb(86,86,86);\">What reference materials will I need?</span></h1><p><span style=\"color: rgb(51,51,51);\">The primary resources for this course are available online. Since many of these resources assume a knowledge of Java basics, you may find it handy to have a Java reference book available:</span></p><ul><li><span style=\"color: rgb(51,51,51);\">Burd, Barry.&nbsp;<em>Beginning Programming with Java For Dummies<strong>&nbsp;</strong></em>4th Edition (ISBN-10: 1118407814)</span></li></ul><p><br /></p>",
    "conflPageId": "260472849",
    "conflChildrenId": [
      "263716926",
      "263913599",
      "263913608",
      "263716938",
      "263716943",
      "263716948"
    ]
  },
  {
    "title": "Task 6 - Resources",
    "content": "<h1 style=\"\"><span style=\"color: rgb(128,130,133);\">Background</span></h1><p style=\"\"><span style=\"color: rgb(35,31,32);\"><strong>PhoneGap</strong>&nbsp;is a popular&nbsp;<strong>hybrid app</strong>&nbsp;platform. That means, it creates native apps, but you write code in HTML, CSS, and JavaScript.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Note:&nbsp;PhoneGap&nbsp;is the original product name. It's&nbsp;owned by Adobe. Adobe gave the code to the Apache Foundation, where it is called&nbsp;<strong>Cordova</strong>. We will use the name&nbsp;PhoneGap&nbsp;here, but you will see Cordova in much of the online documentation.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">The basic idea is simple. It turns out that the native apps on&nbsp;iOS, Android, and other devices can display a browser-like web viewer on screen. Normally, this is for viewing external websites, but the&nbsp;PhoneGap&nbsp;developers realized it could be used to show HTML files stored on the device. So they created small&nbsp;native apps for each platform that&nbsp;display a local website. The&nbsp;same app code can be reused for different applications by simply changing the lines that title the app. All the real user interface and application code is in HTML, CSS and JavaScript.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">On its own, there would be no advantage to doing this, but the native apps also include code that extends JavaScript to include functions to access mobile device functionality, such as the camera and contact list. The same web code can be packaged with little or no&nbsp;change inside an&nbsp;iOS PhoneGap app, an Android PhoneGap app, and so on.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Typically, porting a web app to&nbsp;PhoneGap&nbsp;requires:</span></p><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\">Installing the system development kit (SDK)&nbsp;for the intended device, e.g.,</span><ul><li><span style=\"color: rgb(35,31,32);\">Xcode&nbsp;and Objective-C for&nbsp;iOS</span></li><li><span style=\"color: rgb(35,31,32);\">Eclipse or&nbsp;Xcode&nbsp;and Java for Android</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">Installing the&nbsp;PhoneGap&nbsp;tools and framework code</span></li><li><span style=\"color: rgb(35,31,32);\">Creating a&nbsp;PhoneGap&nbsp;project in the SDK</span></li><li><span style=\"color: rgb(35,31,32);\">Copying the web app files into that project</span></li><li><span style=\"color: rgb(35,31,32);\">Compiling the&nbsp;native app and deploying (i.e., installing) it on devices</span></li></ul><p style=\"\"><span style=\"color: rgb(35,31,32);\">Because a&nbsp;PhoneGap&nbsp;app is a native app, all the requirements of native apps apply. For&nbsp;iOS, you must have an&nbsp;iOS&nbsp;developer license ($100 / year), and Apple must approve your app before it can appear on their app store. Android developers do not need developer licenses.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Required resources</strong></span><span>&nbsp;</span></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"c85cbf56-f1de-4de4-a71b-d13a5cafc7cf\"><ac:parameter ac:name=\"title\">PhoneGap </ac:parameter><ac:rich-text-body><p style=\"\"><br /></p><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\">Chapter 7 of&nbsp;<em>Build Mobile Websites and Apps for Smart Devices</em>&nbsp;by Earle Castledine, Myles Eftos, Max Wheeler &ndash; Introduces PhoneGap.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://docs.phonegap.com/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">The PhoneGap Developer Page</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Provides guides and other documentation on getting started and using PhoneGap.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://github.com/apache/cordova-plugin-camera#module_camera\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Cordova/PhoneGap Camera API</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- PhoneGap documentation on how to access the camera on a mobile device.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://github.com/apache/cordova-plugin-file\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Cordova/PhoneGap File Plugin</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- PhoneGap documentation on how to read file path and turn image files into a blob (this format is needed to send images to Firebase storage).&nbsp;&nbsp;</span></li></ul><p style=\"\"><br /></p></ac:rich-text-body></ac:structured-macro><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"51659550-5c1d-4a98-9ce6-01bee577a46d\"><ac:parameter ac:name=\"title\">Firebase</ac:parameter><ac:rich-text-body><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">JavaScript + Firebase</span></h2><ul style=\"\"><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://firebase.google.com/docs/storage/web/upload-files\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Firebase Upload Image File Example</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- example&nbsp;app code that uploads files to Firebase.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://github.com/firebase/quickstart-js/tree/master/storage\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Firebase quickstart guide</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;for storage of files.</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "260472952",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Mobile App - Task 5",
    "content": "<p><a class=\"external-link\" style=\"text-decoration: underline;\" href=\"https://gbstool.learningbydoingtools.com/mc/poa?productID=4978&amp;taskID=1738#introduction\" rel=\"nofollow\"><span style=\"color: rgb(38,34,98);\">INTRODUCTION</span></a></p><h1><span style=\"color: rgb(128,130,133);\">Your Task</span></h1><p><span style=\"color: rgb(35,31,32);\">You have been asked by League Director, Tom Denton, to update the web app&nbsp;to use the following features specific to a mobile device:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Location awareness</span></li><li><span style=\"color: rgb(35,31,32);\">Local storage for game data, including posts, to support use while disconnected</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The steps given in this Plan of Attack outline&nbsp;one way to update the web app. They can be completed in any order.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>As part of this task, you will submit the following for review:&nbsp;</strong></span></p><ul><li><span style=\"color: rgb(35,31,32);\">For Mentor Review:</span><ul><li><span style=\"color: rgb(35,31,32);\">The HTML, CSS and&nbsp;JavaScript you changed so that users could see where they are on a game map.</span></li><li><span style=\"color: rgb(35,31,32);\">The HTML, CSS and&nbsp;JavaScript you changed so that users can still use as much of the app as possible when the Internet connection is lost.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">For Client Deliverable: the URL of the updated mobile web app, with notes on: what was built, any changes made to other parts of the web app,&nbsp;and any known issues or limitations.</span><ul><li><span style=\"color: rgb(35,31,32);\">Your mentor will&nbsp;advise you as to when you are ready to submit this package to the client.&nbsp;</span></li></ul></li></ul><p><br /></p><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"a166e1ec-5bd9-4609-8e15-442940b3445d\"><ac:parameter ac:name=\"title\">Step 1 - Show the User's Location</ac:parameter><ac:rich-text-body><p class=\"auto-cursor-target\"><br /></p><div><div class=\"sc-TOsTZ hghlyc\"><div><div class=\"page view\"><div class=\"wiki-content\"><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Enable users to see their own current location on the map on the game details page.</strong></span><ol><li><span style=\"color: rgb(35,31,32);\">Follow the code examples for doing this&nbsp;in&nbsp;<em>Resources</em>.</span><ol><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:&nbsp;</strong></span>If you try opening your index.html file in a browser to test your code you will not be able to access the&nbsp;user location per this&nbsp;<a class=\"external-link\" href=\"http://stackoverflow.com/questions/6181379/w3c-geolocation-api-not-working-in-chrome\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">question/explanation</span></span></a><span style=\"color: rgb(35,31,32);\">. You will need to&nbsp;deploy to Firebase and test your geolocation code from there instead.</span></li><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:&nbsp;</strong></span>Remember to clear your cache and refresh when testing in Firebase. &nbsp;You may also need to click on the icons that appear&nbsp;in the browser URL bar to allow scripts/geolocation to run for your app.</li></ol></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong></span><ol><li><span style=\"color: rgb(35,31,32);\">Since you are probably not located&nbsp;where the client's games are being played, you will need to do two different tests.</span><ol><li><span style=\"color: rgb(35,31,32);\">First, verify that your code is getting the true location of a user.</span></li><li><span style=\"color: rgb(35,31,32);\">Second, verify that your code to place the user on the game maps works correctly, using sample location values.</span><ol><li><span style=\"color: rgb(35,31,32);\">Set a fictional field location near your (the&nbsp;user's)&nbsp;location (<em>temporarily</em>&nbsp;overwrite one&nbsp;field's&nbsp;location code). &nbsp;Then see if both&nbsp;appear in the proper location on the map. &nbsp;Remember to return the field code back to the correct location after you have tested it. &nbsp;</span><ul><li><span style=\"color: rgb(35,31,32);\"><em>Resources</em>&nbsp;has a link to a tool for&nbsp;converting addresses to&nbsp;latitude&nbsp;and longitude.</span></li></ul></li></ol></li></ol></li></ol></li><li><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:&nbsp;</strong></span><strong style=\"color: rgb(35,31,32);\">Submit&nbsp;your modified HTML, CSS and JavaScript&nbsp;</strong><span style=\"color: rgb(35,31,32);\">for mentor review.&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">(Optional)&nbsp;<strong>Enable users to see directions/path from their current location on the map to the game location on the game details page.</strong></span><ol><li><span style=\"color: rgb(35,31,32);\">Follow the code examples for doing this&nbsp;in&nbsp;<em>Resources</em>.</span></li></ol></li></ol></div></div></div></div></div></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"4d10f92e-1e08-4fba-9a3d-b22bdd5e6588\"><ac:parameter ac:name=\"title\">Step 2- Add Cache Manifest </ac:parameter><ac:rich-text-body><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Add a cache manifest to your&nbsp;web app.</strong></span><ol><li><span style=\"color: rgb(35,31,32);\">Collect a list of all resources used by your web app.</span></li><li><span style=\"color: rgb(35,31,32);\">Create a cache.manifest file with this list.</span></li><li><span style=\"color: rgb(35,31,32);\">See the reference in&nbsp;<em>Resources&nbsp;</em>for specific details and an example.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Turn off your network and see if you can use all of the web app features.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Add code to queue posted messages when offline</strong>.</span><ol><li><span style=\"color: rgb(35,31,32);\">Just store them for now. We'll worry about automatically sending them later.</span></li><li><span style=\"color: rgb(35,31,32);\">Put this code in the failure callback of the Firebase&nbsp;function that posts the message.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Verify that if the network is not available, messages are put into local storage.</span></li></ol></ac:rich-text-body></ac:structured-macro><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"05f90ad6-0258-4a9b-957f-dad910181abd\"><ac:parameter ac:name=\"title\">Step 3 - Queue messages when offline</ac:parameter><ac:rich-text-body><ol><li><span style=\"color: rgb(35,31,32);\"><strong>When a message has to be queued, create&nbsp;a JavaScript timer&nbsp;</strong>to try posting again in 1 minute, i.e., 60,000 milliseconds.</span><ol><li><span style=\"color: rgb(35,31,32);\">JavaScript&nbsp;</span><span>&nbsp;</span><span style=\"color: rgb(35,31,32);\"><strong>setTimeOut()</strong>&nbsp;should be sufficient, as long as the function that the timer calls to try posting messages contains code to set yet another timer if the posting fails.</span></li><li><span style=\"color: rgb(35,31,32);\">Be careful! If you use&nbsp;<strong>setInterval()</strong>&nbsp;or some other timer function, be sure the timer is cleared when there are no messages to post, to avoid needless network activity.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Verify that if you restore the network connection, queued messages are sent.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Add a user preference to control queuing posted messages.</strong></span><ol><li><span style=\"color: rgb(35,31,32);\">Queue Messages Preference</span><ul><li><span style=\"color: rgb(35,31,32);\">Add an HTML form that allows user to select the option to queue messages for later posting (e.g., with a checkbox)</span></li><li><span style=\"color: rgb(35,31,32);\">Add a key value pair to local storage to store whether this feature (message queuing) is turned on or off with&nbsp;the checkbox&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">Add a key value pair to local storage in which to save queued messages when user selects that option.</span></li><li><span style=\"color: rgb(35,31,32);\">Add code that runs whenever the page is loaded to get the local storage value for the message queuing feature and check or uncheck the checkbox appropriately. No value stored is the same as false.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">Check Network Frequency Preference</span><ul><li><span style=\"color: rgb(35,31,32);\">Add HTML so user can select&nbsp;how often the app should check the network and try to post messages (e.g. dropdown select or text input) This selection needs to be stored in local storage.</span></li><li><span style=\"color: rgb(35,31,32);\">Modify your message queuing code to use the check network frequency selection appropriately. &nbsp;Add a key value pair to local storage to control how often the app should try to post queued messages.</span></li></ul></li><li>&nbsp;As needed, Update HTML&nbsp;to create&nbsp;a user preference screen with&nbsp;the&nbsp;HTML form to set these values.<ol><li><span style=\"color: rgb(35,31,32);\">For example:</span><ol><li><span style=\"color: rgb(35,31,32);\">A checkbox to turn queuing on and off</span></li><li><span style=\"color: rgb(35,31,32);\">A text input field&nbsp;to specify how often to try re-posting, in minutes.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\">Be sure to alert the user of&nbsp;special cases and let them cancel an operation. For example:</span><ol><li><span style=\"color: rgb(35,31,32);\">Disabling queuing when queued messages exist;</span></li><li><span style=\"color: rgb(35,31,32);\">Or, setting the wait time to 0.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\">Add a settings icon at the top of your web app screens to access the preferences screen.</span></li></ol></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Verify that when you change the settings, the queuing of posted messages responds appropriately, including the cases requiring alerts.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Deploy to Firebase and verify everything works from there.</span></li><li><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:&nbsp;</strong></span><strong style=\"color: rgb(35,31,32);\">Submit your modified HTML, CSS and JavaScript&nbsp;</strong><span style=\"color: rgb(35,31,32);\">for mentor review.</span></li></ol></ac:rich-text-body></ac:structured-macro><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"fa6bb1cb-ef12-44ce-bdca-48dd9225111f\"><ac:parameter ac:name=\"title\">Step 4- Submit your client deliverables</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\"><strong>Submit your client deliverable.</strong></span><span style=\"color: rgb(9,30,66);\"><span>&nbsp;</span></span><span style=\"color: rgb(35,31,32);\">In plain text, send the URL of the web app, plus a brief&nbsp;write-up&nbsp;of what you did.</span><span style=\"color: rgb(9,30,66);\"><span>&nbsp;</span></span><span style=\"color: rgb(35,31,32);\">The mentor will tell you when you are ready to do this.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "260505710",
    "conflChildrenId": [
      "261226631"
    ]
  },
  {
    "title": "Mobile App - Task 6",
    "content": "<h1 style=\"\"><span style=\"color: rgb(128,130,133);\">Introduction</span></h1><h1 style=\"\"><span style=\"color: rgb(128,130,133);\">Your Task</span></h1><p style=\"\"><span style=\"color: rgb(35,31,32);\">You have been asked by League Director, Tom Denton, to add the ability to take pictures in the web app.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">This turns out to require a major change. You will need to transform the web app into a&nbsp;hybrid app in order to gain access to the camera.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">The steps outlined in this Plan of Attack&nbsp;are one way to port the web app to PhoneGap and add the required picture functionality.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\"><strong>As part of this task, you will submit the following for review:&nbsp;</strong></span></p><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\">For Mentor Review: The HTML, CSS and&nbsp;JavaScript you changed so that users could take, post, and display pictures in messages.</span></li><li><span style=\"color: rgb(35,31,32);\">For Client Deliverable: A zip file of your PhoneGap project and a brief write-up (in a plain text file) on what you did.</span><ul><li><span style=\"color: rgb(35,31,32);\">Your mentor will&nbsp;advise you as to when you are ready to submit this package to the client.</span></li></ul></li></ul><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"55a29a90-3c99-4e6c-8bae-dc9682d17314\"><ac:parameter ac:name=\"title\">Step 1 - Port web app to PhoneGap</ac:parameter><ac:rich-text-body><ol style=\"\"><li>&nbsp;<strong>Install&nbsp;PhoneGap for Android.</strong><ol><li>Follow the instructions at&nbsp;PhoneGap. Refer to the references in&nbsp;<em>Resources</em>&nbsp;for guidance.</li><li>Be sure to follow the instructions for your platform, e.g., Windows or MacOS.</li></ol></li><li><strong>Test!</strong>&nbsp;Create one of the simple&nbsp;PhoneGap&nbsp;examples and make sure it works on an emulator and/or mobile device.</li><li><strong>Create a new project for the&nbsp;NYSL&nbsp;app.</strong><ol><li>Move the web app files into the appropriate subdirectory.</li><li>Set up the native app wrapper, as described in the references in&nbsp;<em>Resources.</em></li></ol></li><li><strong>Test!</strong>&nbsp;Make sure your web app performs as before.<ol><li>You may need to adjust permissions in the Android or&nbsp;iOS&nbsp;project settings to allow for communication with <a href=\"http://Firebase.com\">Firebase.com</a>.</li></ol></li></ol><p class=\"auto-cursor-target\"><br /></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"42d3f39e-e359-4756-b764-41a1adaa9412\"><ac:parameter ac:name=\"title\">Step 2 -Add ability to take pictures</ac:parameter><ac:rich-text-body><div class=\"table-wrap\" style=\"\"><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Add a button to take a picture</strong>&nbsp;on the game messages page.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Add the JavaScript code to take a picture</strong>&nbsp;and let the user save it to the phone.</span><ol><li><span style=\"color: rgb(35,31,32);\">Set the quality to 50 or less to reduce how much memory the picture uses.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Verify you can take and save a picture.</span></li><li><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span></li></ol></div><div class=\"table-wrap\" style=\"\"><span style=\"color: rgb(35,31,32);\"><strong>Submit&nbsp;your code for taking pictures&nbsp;</strong>to the mentor for review.</span>&nbsp;</div><p class=\"auto-cursor-target\"><br /></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"76122646-5f7d-496d-994f-c3eaa39e91a0\"><ac:parameter ac:name=\"title\">Step 3 - Add ability to post pictures</ac:parameter><ac:rich-text-body><ol style=\"\"><li><span style=\"color: rgb(35,31,32);\"><strong>Modify the picture taking screen to offer the option to post the picture</strong>&nbsp;just taken.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Add code to upload a picture file to Firebase</strong>&nbsp;as a message.</span><ol><li><span style=\"color: rgb(35,31,32);\">The advantage of key-value databases is that you just need to add a new key, e.g.,&nbsp;<strong>picture</strong>, to your existing Firebase&nbsp;message object.</span></li><li><span style=\"color: rgb(35,31,32);\">Users should still be able to include text with the&nbsp;message.</span></li><li><span style=\"color: rgb(35,31,32);\">Messages with pictures should be queued, if queuing is enabled.</span></li><li><span style=\"color: rgb(35,31,32);\">Whether posted or not, save the picture to the phone so that the user has a copy.</span></li></ol></li></ol><p style=\"\"><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br /><span style=\"color: rgb(35,31,32);\">You will need to install the cordova file plugin, and use the functions it offers to read and format your image file into a blob.&nbsp; Firebase storage will only accept image files formatted into blobs.</span></p><ol style=\"\"><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Verify that messages with pictures are uploaded.</span><ol><li><span style=\"color: rgb(35,31,32);\">Use the Firebase&nbsp;web data browser to see what's been uploaded.</span></li><li><span style=\"color: rgb(35,31,32);\">Verify that queued messages with pictures work.</span></li></ol></li><li><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span></li></ol><p style=\"\"><span style=\"color: rgb(35,31,32);\"><strong>Submit</strong>&nbsp;<strong>your new&nbsp;code for posting pictures</strong>&nbsp;to the mentor for review.</span><span>&nbsp;</span></p><p class=\"auto-cursor-target\"><br /></p></ac:rich-text-body></ac:structured-macro><p><br /></p><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"a5126635-96d1-44da-97bc-2624455e91e5\"><ac:parameter ac:name=\"title\">Step 4 - Display pictures on the message screens</ac:parameter><ac:rich-text-body><ol style=\"\"><li><span style=\"color: rgb(35,31,32);\"><strong>Add code to display small picture thumbnails&nbsp;</strong>in the message list.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Add code so that tapping the thumbnail shows a larger view&nbsp;</strong>of the picture.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Verify the pictures you've uploaded appear in the&nbsp;message&nbsp;display.</span></li><li><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span></li></ol><p style=\"\"><span style=\"color: rgb(35,31,32);\"><strong>Submit&nbsp;your new code</strong>&nbsp;for mentor review.</span></p><p class=\"auto-cursor-target\"><br /></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"8cdb4f61-6017-453e-ab96-87df05c7584e\"><ac:parameter ac:name=\"title\">Step 5 - Submit your client deliverable</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br style=\"\" /><span style=\"color: rgb(35,31,32);\"><strong>Submit your client deliverable.</strong></span><span style=\"color: rgb(9,30,66);\"><span>&nbsp;</span></span><span style=\"color: rgb(35,31,32);\">In plain text, send the URL of the web app, plus a brief&nbsp;write-up&nbsp;of what you did.</span><span style=\"color: rgb(9,30,66);\"><span>&nbsp;</span></span><span style=\"color: rgb(35,31,32);\">The mentor will tell you when you are ready to do this.</span></p></ac:rich-text-body></ac:structured-macro><p><br /></p><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "260735073",
    "conflChildrenId": [
      "260472952",
      "260833290"
    ]
  },
  {
    "title": "Mobile App - Task 3",
    "content": "<p style=\"\"><a class=\"external-link\" style=\"text-decoration: underline;\" href=\"https://gbstool.learningbydoingtools.com/mc/poa?productID=4978&amp;taskID=1736#introduction\" rel=\"nofollow\"><span style=\"color: rgb(38,34,98);\">INTRODUCTION</span></a></p><h1 style=\"\"><span style=\"color: rgb(128,130,133);\">Your Task</span></h1><p style=\"\"><span style=\"color: rgb(35,31,32);\">You have been asked by League Director, Tom Denton, to make the following improvements to the mobile web app:</span></p><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\">Change the layout in landscape orientation to take advantage of the greater width</span></li><li><span style=\"color: rgb(35,31,32);\">Instant or near-instant page transitions</span></li></ul><p style=\"\"><span style=\"color: rgb(35,31,32);\">These two improvements primarily involve restructuring the HTML and CSS to make a single-page responsive design, and adding JavaScript to handle page transitions.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">The steps outlined in the Plan of Attack&nbsp;are one way to update the web app. These steps&nbsp;could be done in any order, but we recommend starting with the responsive web design first, because it introduces just a few new concepts and coding. Doing a single page web app, however, requires getting up to speed with JavaScript and restructuring all of your existing HTML into one file.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\"><strong>As part of this task, you will submit the following for review:&nbsp;</strong></span></p><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\">For Mentor Review:</span><ul><li><span style=\"color: rgb(35,31,32);\">Relevant sections of your CSS and&nbsp;HTML code related to implementing a&nbsp;landscape versus portrait responsive layout.</span></li><li><span style=\"color: rgb(35,31,32);\">JavaScript and relevant fragments of HTML used to implement the page transitions.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">For Client Deliverable: the URL of the updated mobile web app, with notes on any other changes made to the web app,&nbsp;or&nbsp;known issues.</span><ul><li><span style=\"color: rgb(35,31,32);\">Your mentor will&nbsp;advise you as to when you are ready to submit this package to the client.</span></li></ul></li></ul><p style=\"\"><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br /><span style=\"color: rgb(35,31,32);\">When submitting fragments of your CSS and HTML code for mentor review, be sure to clearly label the source file (i.e. give the filename, including folder) for each&nbsp;fragment.</span></p><p style=\"\"><br /></p><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"bcddd0c6-41d0-47ad-ba0b-a3a32ca0bfc9\"><ac:parameter ac:name=\"title\">Step 1 - Make web app responsive </ac:parameter><ac:rich-text-body><div style=\"\"><div class=\"sc-TOsTZ hghlyc\"><div><div class=\"page view\"><div class=\"wiki-content\"><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Migrate to Twitter Bootstrap.&nbsp;</strong></span><ol><li><span style=\"color: rgb(35,31,32);\">Add a LINK in the HEAD section to load the Bootstrap CSS. See&nbsp;<em>Resources</em>&nbsp;for the link.</span><ol><li><span style=\"color: rgb(35,31,32);\">The Bootstrap JavaScript is optional. If you use it, you must also load the jQuery JavaScript library.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\">Update your HTML to use the Bootstrap CSS classes.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Make sure your local pages still look the way you want with every change.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Deploy an updated page to Firebase&nbsp;and verify it still looks as desired there.</span></li><li><span style=\"color: rgb(35,31,32);\">Remove any old CSS you are no longer using.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong></span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Sketch a new layout for landscape</strong>&nbsp;orientation.</span><ol><li><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span></li></ol></li></ol><p><span style=\"color: rgb(35,31,32);\"><strong>Submit</strong>&nbsp;this sketch to your mentor for review.</span></p><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Implement the new layout</strong>.</span><ol><li><span style=\"color: rgb(35,31,32);\">Add CSS media queries to select portrait vs. landscape layouts.</span></li><li><span style=\"color: rgb(35,31,32);\">Add CSS for the landscape layout.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong></span></li></ol><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><strong>After you are done testing, submit&nbsp;your changed HTML and CSS</strong>&nbsp;to your mentor for review.<br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br /><span style=\"color: rgb(35,31,32);\">When submitting fragments of your CSS and HTML code for mentor review, be sure to clearly label the source file (i.e. give the filename, including folder) for each&nbsp;fragment.</span></p></div></div></div></div></div></ac:rich-text-body></ac:structured-macro><p style=\"\"><br /></p><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"5a0d0f6c-d7c7-402c-a937-68c942c5b0c0\"><ac:parameter ac:name=\"title\">Step 2 - Make the web app a single page</ac:parameter><ac:rich-text-body><div style=\"\"><div class=\"sc-TOsTZ hghlyc\"><div><div class=\"page view\"><div class=\"wiki-content\"><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Create a new HTML file combining your current separate HTML files.</strong></span><ol><li><span style=\"color: rgb(35,31,32);\">Don't include the HEAD sections of the old HTML.</span></li><li><span style=\"color: rgb(35,31,32);\">Put each page into a DIV&nbsp;with the appropriate classes to represent a page. Refer to the book for how to do this.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Open the file and make sure you see everything &ndash; no broken images, bad fonts, etc.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Add CSS to make pages hidden by default.&nbsp;</strong>Refer to the book for how to do this.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Add JavaScript for page transitions.&nbsp;</strong>Refer to the book.</span><ol><li><span style=\"color: rgb(35,31,32);\">Work on one layout at a time, i.e., portrait then landscape, or vice versa.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!&nbsp;</strong>Check how your local pages are looking frequently.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!&nbsp;</strong>When one orientation seems correct, deploy it to Firebase&nbsp;and check.</span></li></ol></li></ol><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><strong>Submit your changed HTML, CSS, and JavaScript</strong>&nbsp;for mentor review.&nbsp;<br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />When submitting fragments of your CSS and HTML code for mentor review, be sure to clearly label the source file (i.e. give the filename, including folder) for each&nbsp;fragment.</p></div></div></div></div></div></ac:rich-text-body></ac:structured-macro><p style=\"\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"10ae7a5e-963b-412b-809a-059c9be8a134\"><ac:parameter ac:name=\"title\">Step 3 - Submit your client deliverable</ac:parameter><ac:rich-text-body><div style=\"\"><div class=\"sc-TOsTZ hghlyc\"><div><div class=\"page view\"><div class=\"wiki-content\"><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><strong>Submit your client deliverable.</strong><span>&nbsp;</span>In plain text, send the URL of the web app, plus a brief&nbsp;write-up&nbsp;of what you did. The mentor will tell you when you are ready to do this.<br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span></p></div></div></div></div></div></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "260767861",
    "conflChildrenId": [
      "260997172"
    ]
  },
  {
    "title": "Mobile App Test Page",
    "content": "<p><a href=\"https://gbstool.learningbydoingtools.com/mc/poa?productID=4978&amp;taskID=1737#introduction\"><span style=\"color: rgb(38,34,98);\">INTRODUCTION</span></a></p>\n<h1><span style=\"color: rgb(128,130,133);\">Your Task</span></h1>\n<p><span style=\"color: rgb(35,31,32);\">You have been asked by League Director, Tom Denton, to add the following major capability to&nbsp;the mobile web app: a user can post messages visible to other users of the web app.</span><br />\n<span style=\"color: rgb(35,31,32);\">This requires adding several&nbsp;new back-end elements to the system:</span></p>\n<ul>\n\t<li><span style=\"color: rgb(35,31,32);\">User accounts</span></li>\n\t<li><span style=\"color: rgb(35,31,32);\">A database of sample messages</span></li>\n\t<li><span style=\"color: rgb(35,31,32);\">Dynamically constructed HTML pages</span></li>\n\t<li><span style=\"color: rgb(35,31,32);\">JSON data objects</span></li>\n</ul>\n\n\n<p><span style=\"color: rgb(35,31,32);\">The steps below are one way to update the web app. The ordering is to make it easier to test as you go along.</span><br />\n<span style=\"color: rgb(35,31,32);\">Here are the high-level steps to follow. Continue through the Plan of Attack for more detailed guidance.</span></p>\n<ol>\n\t<li><span style=\"color: rgb(35,31,32);\">Get an example app running and see how to use:</span>\n\t<ul>\n\t\t<li><span style=\"color: rgb(35,31,32);\">HTML/JavaScript to add&nbsp;user signup and login</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\">HTML/JavaScript to add a form to post messages</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\">HTML templates for getting and displaying&nbsp;messages</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\">JavaScript for displaying messages retrieved from&nbsp;Firebase</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\">JavaScript for posting a new message</span></li>\n\t</ul>\n\t</li>\n\t<li><span style=\"color: rgb(35,31,32);\">Modify the CSS/HTML/JavaScript to create&nbsp;the&nbsp;UI flow for the new functionality per&nbsp;your design.</span></li>\n\t<li><span style=\"color: rgb(35,31,32);\">Modify the JavaScript for your specific app data (to get the game data and display it).</span></li>\n\t<li><span style=\"color: rgb(35,31,32);\">Use&nbsp;JavaScript to give the app the client requested UI features.&nbsp;</span></li>\n</ol>\n\n\n<p><span style=\"color: rgb(35,31,32);\"><strong>As part of this task, you will submit the following for review:&nbsp;</strong></span></p>\n<ul>\n\t<li><span style=\"color: rgb(35,31,32);\">For Mentor Review:</span>\n\t<ul>\n\t\t<li><span style=\"color: rgb(35,31,32);\">Screen mockup and UI flow diagram for the new functionality</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\">JavaScript and relevant fragments of HTML and HTML templates for getting and displaying&nbsp;messages</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\">JavaScript for displaying messages that are retrieved from&nbsp;Firebase</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\">JavaScript for posting a new message</span></li>\n\t</ul>\n\t</li>\n\t<li><span style=\"color: rgb(35,31,32);\">For Client Deliverable: the URL of the updated mobile web app, with notes on: what was built, changes made to other parts of the web app,&nbsp;and any known issues or limitations</span>\n\t<ul>\n\t\t<li><span style=\"color: rgb(35,31,32);\">Your mentor will&nbsp;advise you as to when you are ready to submit this package to the client.</span></li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />\n<span style=\"color: rgb(35,31,32);\">When submitting fragments of your CSS and HTML code for mentor review, be sure to clearly label the source file (i.e. give the filename, including folder) for each&nbsp;fragment.</span>\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" /></p>\n<h2><span style=\"color: rgb(128,130,133);\"><strong>Get&nbsp;example code working in your&nbsp;app (learn how it works)</strong></span></h2>\n<ol>\n\t<li><a href=\"https://github.com/firebase/quickstart-js/tree/master/database\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">This quickstart guide</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;contains code that&nbsp;allows users to sign in and post messages. &nbsp;We will get the&nbsp;example&nbsp;app working and then modify it for our specific use case. &nbsp;<strong>Copy and paste</strong>&nbsp;</span><a href=\"https://github.com/firebase/quickstart-js/blob/master/database/index.html\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">from the example code</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;into your app.</span></li>\n\t<li><span style=\"color: rgb(35,31,32);\">*Add&nbsp;main.js file:*</span>\n\t<ol>\n\t\t<li><span style=\"color: rgb(35,31,32);\">Create a&nbsp;folder called 'js' within your app folder. &nbsp;Add the&nbsp;</span><a href=\"https://github.com/firebase/quickstart-js/blob/master/database/scripts/main.js\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">main.js file from&nbsp;the quickstart example</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;to the 'js' folder you just created.&nbsp;(This file will be called in your index.html to communicate with firebase.)</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Open your index.html file and check the console to see if main.js is loading correctly.</span></li>\n\t</ol>\n\t</li>\n\t<li><span style=\"color: rgb(35,31,32);\"><strong>Enable</strong>&nbsp;<strong>authentication</strong></span>\n\t<ol>\n\t\t<li><span style=\"color: rgb(35,31,32);\">Go to firebase dashboard for your app</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\">Click 'Auth' on the left, then go to the 'Sign In Method' tab. &nbsp;Select 'Google', 'enable', and 'save'.</span></li>\n\t</ol>\n\t</li>\n\t<li><span style=\"color: rgb(35,31,32);\"><strong>Add security/validation rules</strong></span>\n\t<ul>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Background</strong>: By default, anyone who knows the URL of your Firebase app can change any data any way they want, either intentionally or by accident. &nbsp;To prevent this, you need to add security and validation rules. Here is a simple set of rules that will make sure someone has to be logged in to post, and has to submit minimally valid data.&nbsp;</span>  <span style=\"color: rgb(35,31,32);\">These rules say</span>\n\t\t<ul>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">The&nbsp;<strong>&quot;.read&quot;: true</strong>&nbsp;at the root says that anyone can read anything. They don't even have to log in.</span></li>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">The&nbsp;<strong>&quot;.write&quot;</strong>&nbsp;rule under&nbsp;<strong>$noteid</strong>&nbsp;says that a note object is allowed only if the user is logged in and the user ID they are logged in under matches the one in the note object.</span></li>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">The&nbsp;<strong>&quot;.validate&quot;</strong>&nbsp;rule under&nbsp;<strong>$noteid</strong>&nbsp;says that a note object is valid only if it contains non-empty author and text values.</span></li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n\t<li>{</li>\n\t<li>&quot;.read&quot;: true,</li>\n\t<li>&quot;notes&quot;: {</li>\n\t<li>&quot;$noteid&quot;: {</li>\n\t<li>&quot;.write&quot;: &quot;auth.uid == newData.child('uid').val()&quot;,</li>\n\t<li>&quot;.validate&quot;: &quot;newData.hasChildren(['author', 'text'])</li>\n\t<li>&amp;&amp; newData.child('author').val().length &gt; 0</li>\n\t<li>&amp;&amp; newData.child('text').val().length &gt; 0&quot;</li>\n\t<li>}</li>\n\t<li>}</li>\n\t<li>}</li>\n\t<li><br class=\"atl-forced-newline\" />\n\t<ol>\n\t\t<li><span style=\"color: rgb(35,31,32);\">&nbsp;To install these rules:</span>\n\t\t<ul>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">Go to your app dashboard at Firebase.</span></li>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">Click on&nbsp;<strong>Database</strong>&nbsp;and select the<strong>&nbsp;Rules</strong>&nbsp;tab.</span></li>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">Replace the entire set of rules at Firebase with the rules above.</span></li>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">Click&nbsp;<strong>Publish</strong>. Firebase will tell you if the rules are accepted.</span></li>\n\t\t</ul>\n\t\t</li>\n\t</ol>\n\t</li>\n</ol>\n\n\n<p><span style=\"color: rgb(35,31,32);\">It's best to test that these rules work. Firebase provides a&nbsp;<strong>simulator</strong>&nbsp;web page to test which read and write operations are allowed with different authentications. The interface is simple but tedious to use. At the very least, it helps to make a table of test cases that you can copy and paste into the simulator.</span></p>\n<ol>\n\t<li><span style=\"color: rgb(35,31,32);\"><strong>Deploy and Test</strong></span>\n\t<ol>\n\t\t<li><span style=\"color: rgb(35,31,32);\">use&nbsp;<strong>firebase</strong>&nbsp;<strong>deploy</strong>&nbsp;command in app folder from terminal</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Got to firebase app URL and try your new 'Team Notes' section:</span>\n\t\t<ol>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">Sign up a user</span></li>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">Post a note for the new user</span></li>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">Check that user appears in the 'Auth' section of your firebase app dashboard</span></li>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">Check that new note data appears in 'data' section of your firebase app dashboard</span></li>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">If not, debug.</span></li>\n\t\t</ol>\n\t\t</li>\n\t</ol>\n\t</li>\n\t<li><span style=\"color: rgb(35,31,32);\"><strong>Update code</strong>&nbsp;by removing unnecessary code from index.html and main.js. &nbsp;</span>\n\t<ol>\n\t\t<li><span style=\"color: rgb(35,31,32);\">Remove code that doesn't apply to your app. &nbsp;Deploy and Test.</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\">Use&nbsp;</span><a href=\"https://github.com/firebase/quickstart-js/blob/master/auth/email.html\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">another quickstart example</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;as a guide. &nbsp;Write code to set up email/password auth.</span></li>\n\t\t<li><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span></li>\n\t</ol>\n\t</li>\n</ol>\n\n\n<p><span style=\"color: rgb(35,31,32);\">Remember to enable email/password as a sign in method from the Firebase console.</span></p>\n<ol>\n\t<li><span style=\"color: rgb(35,31,32);\"><strong>Deploy and Test</strong>.</span></li>\n</ol>\n\n\n<p><br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<span style=\"color: rgb(35,31,32);\">In this step you will create the messages display screen design and HTML/JS/CSS code fragments (with placeholders for future game information). &nbsp;At this point, all messages in the database will be listed(per the example) and no dynamic game information will be included. &nbsp;In a later step, we will pass the game information to the database and filter the messages based on which game detail page is clicked.</span></p>\n<ol>\n\t<li><span style=\"color: rgb(35,31,32);\"><strong>Add a message display screen, with a button to it from the game detail screen.</strong>&nbsp;&nbsp;Using your layout sketch, design the CSS and HTML for displaying the list of messages.</span>\n\t<ol>\n\t\t<li><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span></li>\n\t</ol>\n\t</li>\n</ol>\n\n\n<p><span style=\"color: rgb(35,31,32);\">Submit your UI mockup and flow diagram to your mentor for review.</span></p>\n<ol>\n\t<li><span style=\"color: rgb(35,31,32);\">In your web app HTML:</span>\n\t<ol>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Add any additional HTML needed</strong>&nbsp;for your design.</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Add to your stylesheet the CSS needed</strong>&nbsp;for your design.</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Add CSS to make the list of messages 'page' hidden by default.</strong>&nbsp;&nbsp;Refer to the book for how to do this. &nbsp;(As you did previously when you converted your app from multi-page to single-page)</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Add JavaScript for the page transition.</strong>&nbsp;&nbsp;Refer to the book. &nbsp;(Again, as you did before.)</span>\n\t\t<ol>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">Work on one layout at a time, i.e., portrait then landscape, or vice cersa. (In landscape, for example, you may want to take advantage of the additional room to show both some game detail data&nbsp;<em>and</em>&nbsp;the messages list.)</span></li>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Check how your local pages are looking frequently.</span></li>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Test!&nbsp;</strong>When one orientation seems correct, deploy it to Firebase and check.</span></li>\n\t\t</ol>\n\t\t</li>\n\t\t<li><span style=\"color: rgb(35,31,32);\">On the game details screen,&nbsp;<strong>add a button to show game messages</strong>.</span>\n\t\t<ol>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">Add JavaScript so that when the button is tapped, the message display screen is shown.</span>\n\t\t\t<ol>\n\t\t\t\t<li><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span></li>\n\t\t\t</ol>\n\t\t\t</li>\n\t\t</ol>\n\t\t</li>\n\t</ol>\n\t</li>\n</ol>\n\n\n<p><span style=\"color: rgb(35,31,32);\">A&nbsp;couple options are: 1. This button/link could go to a popup, or 2. The link/button could&nbsp;open the form/messages in the Game Details portion of the page.</span></p>\n<ol>\n\t<li>\n\t<ol>\n\t\t<li>\n\t\t<ol>\n\t\t\t<li>\n\t\t\t<ol>\n\t\t\t\t<li><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span></li>\n\t\t\t</ol>\n\t\t\t</li>\n\t\t</ol>\n\t\t</li>\n\t</ol>\n\t</li>\n</ol>\n\n\n<p><span style=\"color: rgb(35,31,32);\">Refer to the book and your previous work- this is similar to what you did to click on a game from a list and pull up its detail 'page' (actually a DIV)</span></p>\n<ol>\n\t<li>\n\t<ol>\n\t\t<li>\n\t\t<ol>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Make sure the messages appear the way you want on your local page.</span></li>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Deploy to Firebase and make sure everything still works.</span></li>\n\t\t\t<li><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span></li>\n\t\t</ol>\n\t\t</li>\n\t</ol>\n\t</li>\n</ol>\n\n\n<p><span style=\"color: rgb(35,31,32);\">Submit for mentor review the HTML, CSS and JavaScript code you added to display a list of messages.</span><br />\n<span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />\nWhen submitting fragments of your CSS and HTML code for mentor review, be sure to clearly label the source file (i.e. give the filename, including folder) for each fragment.\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" /></p>\n<ol>\n\t<li><span style=\"color: rgb(35,31,32);\"><strong>Write Javascript&nbsp;to get and pass game information to database&nbsp;</strong>when form submitted.</span>\n\t<ol>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Plan</strong>. Decide what game information will be passed to the database. &nbsp;What will it be called? &nbsp;What kind of input will it be? (i.e. gameId, gameName, gameTime, gameInfo?)</span>\n\t\t<ol>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">When that form is submitted, JavaScript should save a Firebase&nbsp;message object with the time, user, game and message.</span></li>\n\t\t</ol>\n\t\t</li>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Add input field(s)&nbsp;</strong>for game information&nbsp;in HTML form.&nbsp;</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Capture specific game information&nbsp;</strong>(from HTML&nbsp;of game detail page) and&nbsp;<strong>pass it to the new form input&nbsp;</strong>with JavaScript.&nbsp;</span>\n\t\t<ol>\n\t\t\t<li><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span></li>\n\t\t</ol>\n\t\t</li>\n\t</ol>\n\t</li>\n</ol>\n\n\n<p><span style=\"color: rgb(35,31,32);\">See&nbsp;</span><a href=\"http://stackoverflow.com/questions/7764154/pass-a-javascript-variable-value-into-input-type-hidden-value\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">example</span></span></a><span style=\"color: rgb(35,31,32);\">. &nbsp;You can add JavaScript code that stores the game in question (in a variable) when a user pushes the &quot;Messages&quot; button from a game's detail screen.</span></p>\n<ol>\n\t<li>\n\t<ol>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Update the main.js methods</strong>&nbsp;so that&nbsp;game information inputs will be sent and saved to firebase database. &nbsp;</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Update HTML&nbsp;to show all game&nbsp;</strong>data with Mustache.js similar to:</span></li>\n\t</ol>\n\t</li>\n</ol>\n\n\n<p><span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">li</span><span style=\"color: rgb(153,153,153);\">&gt;</span>(<code>gameId</code>) <code>author</code> said: <code>text</code> <span style=\"color: rgb(153,153,153);\">&lt;/</span><span style=\"color: rgb(153,0,85);\">li</span><span style=\"color: rgb(153,153,153);\">&gt;</span></p>\n<ul>\n\t<li>\n\t<ul>\n\t\t<li>\n\t\t<ul>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">Review simple&nbsp;</span><a href=\"http://www.lynda.com/articles/introduction-to-javascript-templating-using-mustache-js\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Javascript templating tutorial</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;with Mustache.js</span>\n\t\t\t<ul>\n\t\t\t\t<li><span style=\"color: rgb(35,31,32);\">Look for how they load the needed libraries from online sources, create dynamic HTML using the templating engine Mustache, and then fill the dynamic HTML with JSON data from a separate file. We will be doing the same below.</span></li>\n\t\t\t</ul>\n\t\t\t</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t<ol>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Deploy and Test!</strong>&nbsp;Remove&nbsp;the old notes generated in previous tests from the 'data' section of firebase app dashboard. Create new notes from your firebase app and check 'data' that they have the correct game information.</span></li>\n\t</ol>\n\t</li>\n</ul>\n<ol>\n\t<li><span style=\"color: rgb(35,31,32);\"><strong>Show only the messages for the specific game clicked. &nbsp;</strong></span>\n\t<ol>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Update the code in main.js&nbsp;</strong>to&nbsp;use the game information variable created when a user pushes the &quot;Messages&quot; button&nbsp;(i.e. gameId) to show only the messages for that game. &nbsp;See&nbsp;</span><a href=\"https://firebase.google.com/docs/database/web/retrieve-data#next_steps\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">examples,</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;specifically filtering data&nbsp;to&nbsp;retrieve data from Firebase.&nbsp;<strong>&nbsp;</strong></span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Set up two test accounts per client email:&nbsp;</strong>denton@example.com with password nysl123, and&nbsp;parent@example.com with password soccer89, and put in a couple of posts from each for the first game on the schedule.</span></li>\n\t</ol>\n\t</li>\n\t<li><span style=\"color: rgb(35,31,32);\">Update HTML game information placeholders so specific game information&nbsp;appears dynamically (see&nbsp;</span><a href=\"http://www.w3schools.com/js/js_htmldom_html.asp\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">example</span></span></a><span style=\"color: rgb(35,31,32);\">).</span>\n\t<ol>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Make sure your page is showing the messages from Firebase&nbsp;and that they are displaying correctly.</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Test!&nbsp;</strong>Deploy to Firebase&nbsp;and verify the web app still works.</span></li>\n\t</ol>\n\t<ul>\n\t\t<li><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span></li>\n\t</ul>\n\t</li>\n</ol>\n\n\n<p><span style=\"color: rgb(35,31,32);\">Submit&nbsp;for mentor review the HTML and JavaScript code you&nbsp;added to display a list of messages retrieved from Firebase.</span>\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" /></p>\n<ol>\n\t<li><span style=\"color: rgb(35,31,32);\">Use JavaScript to update the UI so that...</span>\n\t<ol>\n\t\t<li><span style=\"color: rgb(35,31,32);\">The post message button&nbsp;only appears on the game messages page if the user has logged in.</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\">When the post message button is tapped, the HTML form opens that lets the user enter a message.</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\">When the form is submitted, a message object is still saved to Firebase&nbsp;and the message appears in the correct game detail page.</span></li>\n\t</ol>\n\t</li>\n\t<li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Verify that you can only post if you are logged in and that posted messages appear on the appropriate game messages screen.</span></li>\n\t<li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Deploy to Firebase&nbsp;and verify everything still works.</span></li>\n\t<li><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span></li>\n</ol>\n\n\n<p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />\n<span style=\"color: rgb(35,31,32);\"><strong>Submit your changed HTML, CSS, and JavaScript</strong>&nbsp;for&nbsp;mentor review.</span>  <span style=\"color: rgb(35,31,32);\">When submitting fragments of your CSS and HTML code for mentor review, be sure to clearly label the source file (i.e. give the filename, including folder) for each&nbsp;fragment.</span><br />\n<ac:structured-macro ac:name=\"anchor\" ac:schema-version=\"1\" ac:macro-id=\"e8c5bdf5-9628-4cf4-9f31-f3892e36a4e3\"><ac:parameter ac:name=\"\">_GoBack</ac:parameter></ac:structured-macro></p>",
    "conflPageId": "260833290",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Task 4 - Resources",
    "content": "<h1><span style=\"color: rgb(128,130,133);\">Background</span></h1><h2><span style=\"color: rgb(128,130,133);\">Persist data with Firebase</span></h2><p><span style=\"color: rgb(35,31,32);\">To implement posting game messages, you need a form where a user can type a message, and a place to store those messages. The first part can be done with a simple HTML form. The second part used to require building&nbsp;a web server program, written in Java, PHP, Python, C#, Ruby on Rails, or some other language, and a database server.</span></p><p><br /><span style=\"color: rgb(35,31,32);\">However, recently, some companies have begun offering an alternative that's especially attractive for mobile apps. &nbsp;They provide a database service that's accessible over the web. They take care of running the server, managing backups,&nbsp;and other administrative work. You just&nbsp;write code for the mobile device to store and retrieve data from the data service. Your code can be native code for the mobile device or JavaScript in a web page.</span><br /><span style=\"color: rgb(35,31,32);\">These companies also sometimes provide hosting for the web pages, and a command line tool to transfer web site assets, i.e., HTML, CSS, JavaScript, and image files, from your local machine to their site. This is an independent service, but convenient,&nbsp;because then you only need one web service account.</span></p><p><br /><span style=\"color: rgb(35,31,32);\">One of those services&nbsp;is&nbsp;<strong>Firebase,</strong>&nbsp;run by Google. Another service,&nbsp;<strong>Parse</strong>, run by Facebook, was very popular but is being shut down. There are several others, but&nbsp;<strong>Firebase</strong>&nbsp;is free and fairly simple to understand, so it's the obvious choice to use here.</span></p><p><br /><span style=\"color: rgb(35,31,32);\"><strong>Firebase</strong>, unlike some of these services, does not store data in tables. Instead, you create one big&nbsp;<strong>JSON</strong>&nbsp;object to hold all your application data.&nbsp;<strong>JSON</strong>&nbsp;stand for&nbsp;<strong>JavaScript Object Notation</strong>.&nbsp;This is a syntax for representing complex data, e.g., a user with a name, a list of email addresses, and a mailing&nbsp;address, which is itself an object with parts like street address, city, state and country. For example, here's one possible way to represent a user in JSON:</span></p><p style=\"margin-left: 60.0px;\"><br /><span style=\"color: rgb(153,153,153);\">{</span></p><p style=\"margin-left: 120.0px;\"><br /><span style=\"color: rgb(102,153,0);\">&quot;name&quot;</span><span style=\"color: rgb(153,153,153);\">:</span><span>&nbsp;</span><span style=\"color: rgb(102,153,0);\">&quot;Herman Munster&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;emails&quot;</span><span style=\"color: rgb(153,153,153);\">:</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">[</span><br /><span style=\"color: rgb(102,153,0);\">&quot;hmunster@<a href=\"http://aowl.com\">aowl.com</a>&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;hermanm@<a href=\"http://wahoo.com\">wahoo.com</a>&quot;</span><br /><span style=\"color: rgb(153,153,153);\">],</span><br /><span style=\"color: rgb(102,153,0);\">&quot;address&quot;</span><span style=\"color: rgb(153,153,153);\">:</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">{</span></p><p style=\"margin-left: 120.0px;\"><span style=\"color: rgb(102,153,0);\">&quot;street&quot;</span><span style=\"color: rgb(153,153,153);\">:</span><span>&nbsp;</span><span style=\"color: rgb(102,153,0);\">&quot;1313 Mockingbird Lane&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;city&quot;</span><span style=\"color: rgb(153,153,153);\">:</span><span>&nbsp;</span><span style=\"color: rgb(102,153,0);\">&quot;Mockingbird Heights&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;state&quot;</span><span style=\"color: rgb(153,153,153);\">:</span><span>&nbsp;</span><span style=\"color: rgb(102,153,0);\">&quot;California&quot;</span></p><p style=\"margin-left: 90.0px;\"><span style=\"color: rgb(153,153,153);\">}</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(153,153,153);\">}</span></p><p><br /><span style=\"color: rgb(35,31,32);\">If the above object is in a variable&nbsp;<strong>user</strong>, then it's easy to get the various pieces of data, using JavaScript's&nbsp;<strong>dot operator</strong>:</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong><a href=\"http://user.name\">user.name</a></strong>&nbsp;returns &quot;Herman Munster&quot;</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>user.address</strong>&nbsp;returns the object&nbsp;{ &quot;street&quot;: &quot;1313 Mockingbird Lane&quot;,&nbsp;&quot;city&quot;: &quot;Mockingbird Heights&quot;,&nbsp;&quot;state&quot;: &quot;California&quot;&nbsp;}</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>user.address.city</strong>&nbsp;returns&nbsp;&quot;Mockingbird Heights&quot;</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>user.emails</strong>&nbsp;returns the array&nbsp;[&nbsp;&quot;hmunster@<a href=\"http://aowl.com\">aowl.com</a>&quot;,&nbsp;&quot;hermanm@<a href=\"http://wahoo.com\">wahoo.com</a>&quot;&nbsp;]</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>user.emails[0]</strong>&nbsp;returns&nbsp;&quot;hmunster@<a href=\"http://aowl.com\">aowl.com</a>&quot;</span></li></ul><p><span style=\"color: rgb(35,31,32);\">JSON&nbsp;objects are a core part of&nbsp;JavaScript objects but the notation is&nbsp;now used as a way to put arbitrary objects into strings for sending over the Internet for all modern programming platforms.</span><br /><span style=\"color: rgb(35,31,32);\">To transfer data back and forth with Firebase, you use&nbsp;<strong>AJAX</strong>.&nbsp;<strong>AJAX&nbsp;</strong>stands for<strong>&nbsp;Asynchronous JavaScript and XML</strong>. Originally data was transferred in a data format called XML, but these days JSON is used instead.&nbsp;Modern browsers have added an object called&nbsp;<strong>XMLHttpRequest</strong>&nbsp;to JavaScript that lets JavaScript code get data from a server without reloading the current page, or causing the page to freeze up while waiting for the data to be returned. Various libraries, including jQuery, provide functions that&nbsp;are simpler to use than XMLHttpRequest.</span></p><h2><span style=\"color: rgb(128,130,133);\">User authentication with Firebase</span></h2><p><span style=\"color: rgb(35,31,32);\">User authentication, i.e., allowing users to sign up to get access to your web app, and then log in to access certain features, is both a common feature of most web apps and a common headache. This is not something you want to get wrong. Hackers constantly&nbsp;run tools to scan new websites for security holes.</span><br /><span style=\"color: rgb(35,31,32);\">Fortunately, Firebase&nbsp;provides functions in JavaScript that can be used to sign up and log in users, using an email address and some password. Firebase manages the database of users for you. You don't need to keep it in your JSON data.</span></p><h2><span style=\"color: rgb(128,130,133);\">HTML templating</span></h2><p><span style=\"color: rgb(35,31,32);\">Once you have data in a JSON object,&nbsp;it's not hard to write JavaScript to create the HTML to display the data. For example, given a variable&nbsp;<strong>user</strong>&nbsp;with the example JSON above,&nbsp;the following JavaScript would put into a web page&nbsp;the HTML to&nbsp;display the user's emails&nbsp;as an unordered list:</span><br />document<span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(221,74,104);\">write</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(102,153,0);\">&quot;&lt;ul&gt;&quot;</span><span style=\"color: rgb(153,153,153);\">);</span><br /><span style=\"color: rgb(0,119,170);\">for</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(0,119,170);\">var</span><span>&nbsp;</span>i<span>&nbsp;</span><span style=\"color: rgb(166,127,89);\">=</span><span>&nbsp;</span><span style=\"color: rgb(153,0,85);\">0</span><span style=\"color: rgb(153,153,153);\">;</span><span>&nbsp;</span>i<span>&nbsp;</span><span style=\"color: rgb(166,127,89);\">&lt;</span><span>&nbsp;</span>user<span style=\"color: rgb(153,153,153);\">.</span>emails<span style=\"color: rgb(153,153,153);\">.</span>length<span style=\"color: rgb(153,153,153);\">;</span><span>&nbsp;</span><span style=\"color: rgb(166,127,89);\">++</span>i<span style=\"color: rgb(153,153,153);\">)</span><span>&nbsp;</span>{color:#999999}{<br />document.<span style=\"color: rgb(221,74,104);\">write</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(102,153,0);\">&quot;&lt;li&gt;&quot;</span><span>&nbsp;</span><span style=\"color: rgb(166,127,89);\">+</span><span>&nbsp;</span>user<span style=\"color: rgb(153,153,153);\">.</span>emails<span style=\"color: rgb(153,153,153);\">[</span>i<span style=\"color: rgb(153,153,153);\">]</span><span>&nbsp;</span><span style=\"color: rgb(166,127,89);\">+</span><span>&nbsp;</span><span style=\"color: rgb(102,153,0);\">&quot;&lt;/li&gt;&quot;</span><span style=\"color: rgb(153,153,153);\">);</span><br /><span style=\"color: rgb(153,153,153);\">}</span><br />document<span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(221,74,104);\">write</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(102,153,0);\">&quot;&lt;/ul&gt;&quot;</span><span style=\"color: rgb(153,153,153);\">);</span><br /><span style=\"color: rgb(35,31,32);\">But this quickly becomes hard to maintain for large amounts of HTML. It is also not very readable to web designers who know HTML but not JavaScript.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">For this reason, a large number of HTML&nbsp;<strong>templating</strong>&nbsp;libraries have been developed. They let you write HTML, either in a hidden DIV or inside a SCRIPT element. Certain parts of the HTML are marked with labels to indicate where data should go. Then, you call a library function that takes a template, a data object, and a location in the current document. The function combines the template and data to generate the actual HTML to insert into the document at the location indicated. One popular and simple to use templating library is called Mustache. See&nbsp;<em>Resources</em>&nbsp;for information on Mustache.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span></p><h1><span style=\"color: rgb(128,130,133);\">Required Resources</span></h1><h2><span style=\"color: rgb(128,130,133);\">Mobile Web Programming Concepts</span></h2><ul><li><span style=\"color: rgb(35,31,32);\">Chapter 4 of&nbsp;<em>Build Mobile Websites and Apps for Smart Devices</em>&nbsp;by Earle Castledine, Myles Eftos, Max Wheeler --&nbsp;The last half of this chapter discusses getting JSON data with AJAX and feeding it into a template.</span></li><li><span style=\"color: rgb(35,31,32);\">jQuery-Mustache &ndash; We will use the Mustache template&nbsp;framework because it is more popular than the&nbsp;framework described in the book.</span><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.lynda.com/articles/introduction-to-javascript-templating-using-mustache-js\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Templating with Mustache</span></span></a><span style=\"color: rgb(35,31,32);\">- simple, clear example to study before you try this.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://plugins.jquery.com/mustache/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">jquery-Mustache download page</span></span></a></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://github.com/jonnyreeves/jquery-Mustache\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">github&nbsp;documentation page</span></span></a></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://mustache.github.io/mustache.5.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Mustache examples and syntax</span></span></a><span style=\"color: rgb(35,31,32);\">- to help you write HTML templates with Mustache syntax</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">Modern browsers have a developer console where error messages can be seen and JavaScript code can be tried out.</span><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://webmasters.stackexchange.com/questions/8525/how-to-open-the-javascript-console-in-different-browsers\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to Open the JavaScript Console</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- A cheat sheet for many different browsers.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://javascript.info/tutorial/development\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Browser Developer's Tools</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Although all the developer consoles do basically the same thing, the interfaces vary slightly; this link is a good starting point to find the instructions for the browser you use.</span></li></ul></li></ul><h2><span style=\"color: rgb(128,130,133);\">JSON</span></h2><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://scotch.io/tutorials/how-to-use-the-javascript-fetch-api-to-get-data\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to use JavaScript Fetch to get Data</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- also shows how to send data with POST</span></li></ul><h2><span style=\"color: rgb(128,130,133);\">Using Firebase&nbsp;with JavaScript</span></h2><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://gbstool.learningbydoingtools.com/ebooks/item?ebookID=12\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Introduction to Firebase</span></span></a></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://github.com/firebase/quickstart-js/blob/master/database/index.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">QuickStart Example App</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp; &ndash; &nbsp;This is a minimal note-posting web app in HTML/CSS/JavaScript using the new Firebase interface.</span></li><li>[<span>&nbsp;</span><span class=\"confluence-embedded-file-wrapper confluence-embedded-manual-size\"><ac:image ac:height=\"16\" ac:width=\"16\"><ri:attachment ri:filename=\"worddave05abcfe3cc312c4edfb96e3e31e5821.png\" ri:version-at-save=\"1\" /></ac:image></span><span>&nbsp;</span><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">&nbsp;TeamNotes Example App</span></span>|<a href=\"https://s3.amazonaws.com/gbstool/courses/481/docs/teamnotes.zip?AWSAccessKeyId=AKIAJBIZLMJQ2O6DKIAA&amp;Expires=1560416400&amp;Signature=e%2B%2Bn%2BEKLCTw9FarglvyC9%2FRKZRo%3D\">https://s3.amazonaws.com/gbstool/courses/481/docs/teamnotes.zip?AWSAccessKeyId=AKIAJBIZLMJQ2O6DKIAA&amp;Expires=1560416400&amp;Signature=e%2B%2Bn%2BEKLCTw9FarglvyC9%2FRKZRo%3D</a>]<span style=\"color: rgb(35,31,32);\">&nbsp; &ndash; This is a minimal note-posting web app in HTML/CSS/JavaScript using the Legacy Fireabase, heavily commented for pedagogical purposes. &nbsp;Although this example WILL NOT WORK with the new Firebase, there is a lot of information that can be learned by reading through its files.</span><ul><li><span style=\"color: rgb(35,31,32);\">After downloading and extracting the files, open the file&nbsp;<strong>TeamNotes/public/docs/index.html</strong>&nbsp;in a browser for an overview.</span></li><li><span style=\"color: rgb(35,31,32);\">Included in the&nbsp;<strong>docs</strong>&nbsp;directory is&nbsp;<strong>glossary.html</strong>&nbsp;with definitions of many programming terms in JavaScript and Firebase.</span></li></ul></li></ul><h1><span style=\"color: rgb(128,130,133);\">Additional Resources</span></h1><h2><span style=\"color: rgb(128,130,133);\">JSON</span></h2><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.json.org/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">JSON&nbsp;Syntax</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Provides a list of syntax code for JSON.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.copterlabs.com/blog/json-what-it-is-how-it-works-how-to-use-it/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">JSON: What It Is, How It Works, and How to Use It</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Describes how to use JSON.</span></li></ul><h2><span style=\"color: rgb(128,130,133);\">HTML Templating&nbsp;Frameworks</span></h2><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://engineering.linkedin.com/frontend/client-side-templating-throwdown-mustache-handlebars-dustjs-and-more\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Client-side Templating&nbsp;Throwdown</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- An overview of the many different JavaScript libraries for HTML templates.</span></li></ul>",
    "conflPageId": "260833348",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java - Task 1",
    "content": "<h2><span style=\"color: rgb(153,153,153);\">Introduction</span></h2><p><span style=\"color: rgb(35,31,32);\">You've been asked to build a web-based multi-player game application. Your first task is to implement and display a database of players. The structure of the web application is more than just HTML pages. There needs to be</span></p><ul><li><span style=\"color: rgb(35,31,32);\">a database table with player data</span></li><li><span style=\"color: rgb(35,31,32);\">a web service that can send a list of those players, in JSON form, in response to the URL&nbsp;<strong>/players</strong></span></li><li><span style=\"color: rgb(35,31,32);\">a web page that can display&nbsp;the desired list in a readable way, using JavaScript to get the data and construct the HTML</span></li></ul><p><span style=\"color: rgb(35,31,32);\"><strong>DON'T PANIC!</strong>&nbsp;There's are many things mentioned in the email that are probably completely mysterious to you. That's normal, especially at the start of a new project. It's not expected you know or understand all these terms and concepts. This is where you get to learn them.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Java</span></h2><p><span style=\"color: rgb(35,31,32);\">Java is an object-oriented programming language used for many purposes, but especially useful for creating the back end for web applications. The email refers to a number of Java concepts.&nbsp;<strong>Classes</strong>&nbsp;are a way to&nbsp;organize Java code. Classes specify how and where data should be stored. Classes also define&nbsp;<strong>methods</strong>&nbsp;for manipulating that data. When a Java program runs, it creates&nbsp;<strong>instances</strong>&nbsp;of those classes to hold particular data values. You'll be learning a lot about Java in each task. The&nbsp;<strong>Resources</strong>&nbsp;tab above has links to get you started.</span></p><h2><span style=\"color: rgb(153,153,153);\">Java Development Kit (JDK)</span></h2><p><span style=\"color: rgb(35,31,32);\">The Java Development Kit, also sometimes called the Java System Development Kit (SDK), refers to a set of programs that&nbsp;compile and run Java code. There are quite a few programs but here are the most important:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">The Java Runtime Engine (JRE) &ndash; this is the program that executes compiled Java programs.</span><ul><li><span style=\"color: rgb(35,31,32);\">The JRE&nbsp;must be installed to run Java.</span></li><li><span style=\"color: rgb(35,31,32);\">Most systems used to install the JRE by default, because web browsers used it. Because of security issues, this is no longer true.</span></li><li><span style=\"color: rgb(35,31,32);\">If you install the JDK, you may end up&nbsp;with&nbsp;two copies of the JRE, one installed on its own for browsers, and one installed by the JDK. This is not a problem.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">The Java Compiler &ndash; this is a program that compiles Java source code into compiled&nbsp;Java.</span><ul><li><span style=\"color: rgb(35,31,32);\">This is only installed if you have the JDK.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">The Java Archive tool &ndash; this is a program that assembles compiled Java files into a runnable program, called a JAR file.</span></li></ul><h2><span style=\"color: rgb(153,153,153);\">Integrated Development Environment (IDE)</span></h2><p><span style=\"color: rgb(35,31,32);\">The JDK does not include an editor. You can edit Java source code with any plain text editor, even&nbsp;<strong>Notepad</strong>, though this is not recommended. At the very least you want a programmer editor. There are many lists of such editors, e.g.,&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://www.elegantthemes.com/blog/resources/the-11-best-code-editors-available-in-2015\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">this one</span></a><span style=\"color: rgb(35,31,32);\">.</span><br /><span style=\"color: rgb(35,31,32);\">For Java, it's more common to install an integrated development environment (IDE) that includes</span></p><ul><li><span style=\"color: rgb(35,31,32);\">a text editor, with syntax coloring and indentation customized for Java code</span></li><li><span style=\"color: rgb(35,31,32);\">a file management system, so you can open and edit many files in a project at once</span></li><li><span style=\"color: rgb(35,31,32);\">compile and run tools, so it takes just one button click to save files, run the compiler, run the JAR tool, then run the final program</span></li><li><span style=\"color: rgb(35,31,32);\">debugging tools so that you can tell Java to pause execution at certain points in the code so that you can inspect the values of variables</span></li></ul><p><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/keplersr1\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Eclipse</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;and&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://netbeans.org/features/java/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Netbeans</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;are two popular, mature, free Java IDEs. Increasingly popular and very similar to Eclipse and Netbeans is&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://www.jetbrains.com/idea/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Intellij IDEA</span></a><span style=\"color: rgb(35,31,32);\">. Google selected Intellij IDEA to be the basis of&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://developer.android.com/tools/studio/index.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Android Studio</span></a><span style=\"color: rgb(35,31,32);\">,&nbsp;their IDE for&nbsp;Android Java development.</span><br /><span style=\"color: rgb(35,31,32);\">You wil be using the&nbsp;<strong>Community</strong>&nbsp;editon of Intellij IDEA. The Community edition is free, but&nbsp;lacks some of the advanced features of the commercial version.</span></p><h2><span style=\"color: rgb(153,153,153);\">Gradle</span></h2><p><span style=\"color: rgb(35,31,32);\">Most modern&nbsp;programs, in any language, are a combination of many source code files plus libraries of pre-written code from other sources. Building such&nbsp;programs involves a number of steps, such as</span></p><ul><li><span style=\"color: rgb(35,31,32);\">setting various options needed for properly compiling files, including specifying which directories have the project code</span></li><li><span style=\"color: rgb(35,31,32);\">downloading any library files needed that are not currently present</span></li><li><span style=\"color: rgb(35,31,32);\">detecting which files have changed and re-compiling them</span></li><li><span style=\"color: rgb(35,31,32);\">moving compiled files and other resources to special directories, e.g., a web server's application area</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The steps needed to build an application are&nbsp;kept in&nbsp;a&nbsp;project build file. &nbsp;Most IDEs have their own internal format, but there are also&nbsp;standard systems for managing Java projects that are independent of specific IDEs. Two popular ones are&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://maven.apache.org/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Maven</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;and&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://gradle.org/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Gradle</span></a><span style=\"color: rgb(35,31,32);\">. One of the nice features of these systems is that you can re-build someone else's Java project by just downloading the code directory, which includes a Maven (or Gradle) file. Simply running Maven (or Gradle) will then download all the other files you need, compile the source code, and build the program.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Most Java IDEs let you import and use a Maven or Gradle file, making it easy to edit and run the project. Intellij IDEA can import either.</span></p><h2><span style=\"color: rgb(153,153,153);\">JavaScript</span></h2><p><span style=\"color: rgb(35,31,32);\">JavaScript &ndash; no relation at all to Java &ndash; is a scripting language, available for use on web pages in&nbsp;all modern&nbsp;browsers. A very common use of JavaScript on web pages these days is to respond to user interactions with a web page, fetch data from a back-end web service, and construct HTML to display that data to the user.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">JavaScript Object Notation (JSON)</span></h2><p><span style=\"color: rgb(35,31,32);\">When computers need to pass data to each other, it helps to have a standard format for representing that data. Programs may have very complicated data, e.g., a scoreboard with a list of players and how many games they've won, lost, or drawn. Therefore it helps to have a data format that is simple, clear, and general enough to hold any structured information.&nbsp;<strong>JSON</strong>&nbsp;is one such notation that has become very popular. It is based on a data format that was developed for JavaScript. There are libraries for creating and using&nbsp;JSON for all modern programming languages. &nbsp;JSON is a modern alternative to the&nbsp;<strong>eXtensible Markup Language (XML)</strong>, an HTML-like format that was very general, but suffered from being more complicated.</span></p><h2><span style=\"color: rgb(153,153,153);\">REST and RESTful Web Services</span></h2><p><span style=\"color: rgb(35,31,32);\">REST is not a programming language or library, though there are many libraries to help do REST. REST is an approach to designing web application interfaces. The key idea is to think of a web application as a collection of documents, i.e., resources. This seems obvious when talking about HTML files, images, sound files, and so on. It becomes less obvious when thinking about a shopping site or a game.</span><br /><span style=\"color: rgb(35,31,32);\">Many people approached such dynamic applications as &quot;remote procedure calls,&quot; i.e., a client program would send a command, in URL form, to a server, and wait for a response. Roy Fielding, in his doctoral dissertation, pointed out that this was not a scalable way to build services. It also led to unbookmarkable web sites with no &quot;back&quot; button support and many other user-unfriendly features.</span><br /><span style=\"color: rgb(35,31,32);\">Fielding proposed making resources the central concept in any web service, no matter how dynamic.&nbsp;A shopping site has a shopping cart resource. A game has a game view. All resources can be gotten with&nbsp;unique unchanging URLs. Some URLs can be used to send&nbsp;requests to modify a&nbsp;resource.</span></p><h2><span style=\"color: rgb(153,153,153);\">Spring and Spring Boot</span></h2><p><span style=\"color: rgb(35,31,32);\"><strong>Spring</strong>&nbsp;is a large set of libraries for Java to make it easier to build modern Java web applications and RESTful web services.&nbsp;<strong>Spring Boot</strong>&nbsp;is a set of tools to make it easier to use&nbsp;<strong>Spring</strong>.</span></p><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"956fc2a4-f1d6-4d4c-b7a5-9f7a0fe4fe83\"><ac:parameter ac:name=\"title\">Step 1 - Install the JDK</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(153,153,153);\">Download the JDK</span></h2><p><span style=\"color: rgb(35,31,32);\">Go to&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">the Oracle site</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;to get the current version of Java.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">You want the latest version of Java 8 (Not Java 9!).</span></li><li><span style=\"color: rgb(35,31,32);\">You want the Java JDK (Java Development Kit), not Netbeans.</span></li><li><span style=\"color: rgb(35,31,32);\">You want Java SE (Standard Edition) not Java EE (Enterprise Edition)</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Select the version of Java appropriate for your machine and operating system:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">For Linux and Windows, choose the&nbsp;<strong>x86</strong>&nbsp;version for older 32bit operating systems, and&nbsp;<strong>x64</strong>&nbsp;for newer 64bit&nbsp;operating systems.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">There may be several versions of the JDK available.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">At the time of this writing, you could select version&nbsp;<strong>8u101</strong>&nbsp;or&nbsp;<strong>8u102</strong>.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Select the&nbsp;larger numbered, more recent one.</span><br /><span style=\"color: rgb(35,31,32);\">You must accept the License Agreement before you can download the JDK&nbsp;for your machine.</span></p><h2><span style=\"color: rgb(153,153,153);\">Install the JDK</span></h2><p><span style=\"color: rgb(35,31,32);\">Double-click the file that you downloaded to run the installer.</span><br /><span style=\"color: rgb(35,31,32);\">This will install a number of Java tools, the most important of which are</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong>java</strong>&nbsp;-- this is the program that runs compiled Java programs.&nbsp;</span><ul><li><span style=\"color: rgb(35,31,32);\">This is the only tool provided by the Java Runtime Engine (JRE) package.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\"><strong>javac</strong>&nbsp;-- this is the Java compiler, that turns Java source code into runnable code.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>jar</strong>&nbsp;-- this is the program that combines compiled Java code into one application</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Although installed on your computer now, some&nbsp;operating systems require a&nbsp;few extra steps to make these tools available to&nbsp;you, your development environment, and your web server. These steps are documented at&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/install/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">the Oracle installation guide</span></span></a><span style=\"color: rgb(35,31,32);\">.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">We recommend that you set the environment variable&nbsp;<strong>JAVA_HOME</strong>&nbsp;(upper case and underbar) to the location of your installed Java.&nbsp;This used to be required by many Java tools. It's also a good way for you to learn where your Java compiler is.</span></p><ol><li><span style=\"color: rgb(35,31,32);\">For Windows:</span><ol><li><span style=\"color: rgb(35,31,32);\">Right click My Computer and select Properties.</span></li><li><span style=\"color: rgb(35,31,32);\">On the Advanced tab, select Environment Variables, and then edit JAVA_HOME to point to where the JDK software is located, for example, C:\\Program Files\\Java\\jdk1.8.0_02.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\">For Mac:</span><ol><li><span style=\"color: rgb(35,31,32);\">Add the following line to the start of&nbsp;the file&nbsp;<strong>~/.bashrc</strong>&nbsp;using a text editor, e.g., the built-in TextEdit. Put this:&nbsp;</span><ol><li><strong><span style=\"color: rgb(35,31,32);\">export JAVA_HOME=&quot;$(/usr/libexec/java_home)&quot;</span></strong></li></ol></li></ol></li></ol><p><span style=\"color: rgb(35,31,32);\">&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Test your JDK</span></h2><p><span style=\"color: rgb(35,31,32);\">Open new Terminal.</span></p><ol><li><span style=\"color: rgb(35,31,32);\">Windows: Win+Shift+R, then type 'cmd', then hit Enter</span></li><li><span style=\"color: rgb(35,31,32);\">Mac: Command+Shift+U, then double-click the Terminal icon&nbsp;</span></li></ol><p><span style=\"color: rgb(35,31,32);\">Execute the command&nbsp;<strong>java -version</strong>. (Note the space and single hyphen.)</span><br /><span style=\"color: rgb(35,31,32);\">You should see something identifying Java 1.8 as the version selected.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Execute the command&nbsp;<strong>javac -version</strong>.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Again you should see something identifying Java 1.8 as the version selected.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"c9b3bb25-d724-4a8e-9647-b7d7263e1c07\"><ac:parameter ac:name=\"title\">Step 2 - Install Gradle</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(153,153,153);\">For&nbsp;Mac Users:</span></h2><p><span style=\"color: rgb(35,31,32);\">If you have previously installed&nbsp;</span><a class=\"external-link\" href=\"http://brew.sh/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span>Homebrew</span></span></a><span style=\"color: rgb(35,31,32);\">, you can use that&nbsp;to install the latest Gradle package.</span></p><p style=\"margin-left: 30.0px;\"><strong><span style=\"color: rgb(35,31,32);\">brew install gradle</span></strong></p><ul><li><span style=\"color: rgb(35,31,32);\">Verify that the installation works by calling Gradle from your command line:</span></li></ul><p style=\"margin-left: 30.0px;\"><strong><span style=\"color: rgb(35,31,32);\">gradle &ndash;version</span></strong></p><ul><li><span style=\"color: rgb(35,31,32);\">&nbsp;If everything is ok, you will see information about the Gradle version, your JVM, OS and so on. Please consult the&nbsp;</span><a class=\"external-link\" href=\"http://www.gradle.org/docs/1.6/userguide/installation.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span>installation guide</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;if you have any problem.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">If you have not&nbsp;installed&nbsp;<strong>Homebrew</strong>, then follow the advice at&nbsp;</span><a class=\"external-link\" href=\"https://gradle.org/gradle-download/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span>the Gradle site</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;and use&nbsp;<strong>sdkman</strong>. &nbsp;<strong>sdkman</strong>&nbsp;is like&nbsp;<strong>Homebrew</strong>, but implemented in and for Java programs.</span></p><p><span style=\"color: rgb(35,31,32);\">Get&nbsp;<strong>sdkman</strong>&nbsp;with</span></p><p style=\"margin-left: 30.0px;\"><strong><span style=\"color: rgb(35,31,32);\">curl -s&nbsp;<span class=\"nolink\">https://get.sdkman.io</span>&nbsp;| bash</span></strong></p><p><span style=\"color: rgb(35,31,32);\">Then open a new Terminal window --&nbsp;the simplest way to make sure&nbsp;<strong>sdk</strong>&nbsp;is now available &ndash; and execute</span></p><p style=\"margin-left: 30.0px;\"><strong><span style=\"color: rgb(35,31,32);\">sdk install gradle 2.14.1</span></strong></p><h2><span style=\"color: rgb(153,153,153);\">For Windows/Linux:</span></h2><ul><li><span style=\"color: rgb(35,31,32);\">Download the latest binaries from Gradle's&nbsp;</span><a class=\"external-link\" href=\"http://www.gradle.org/downloads\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span>download page</span></span></a></li><li><span style=\"color: rgb(35,31,32);\">Unpack the zip to folder (e.g. &quot;C:/Program Files&quot;). &nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">Add the GRADLE_HOME/bin folder to your PATH environment variable.</span><ul><li><span style=\"color: rgb(35,31,32);\">Open the system properties (WinKey + Pause), select the &quot;Advanced&quot; tab, and the &quot;Environment Variables&quot; button</span></li><li><span style=\"color: rgb(35,31,32);\">Then add &quot;C:\\Program Files\\gradle-x.x\\bin&quot;, or wherever you unzipped Gradle to, to the end of your &quot;Path&quot; variable under System Properties &nbsp;</span></li></ul></li></ul><p><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />Remember to replace the x.x in the example with the gradle version number you downloaded. &nbsp;Be sure to omit any quotation marks around the path even if it contains spaces. Also make sure you separated from previous PATH entries with a semicolon &quot;;&quot;.</p><ul><li><span style=\"color: rgb(35,31,32);\">Verify that the installation works by calling Gradle from your command line:</span></li></ul><p style=\"margin-left: 60.0px;\"><strong><span style=\"color: rgb(35,31,32);\">gradle &ndash;version</span></strong></p><ul><li><span style=\"color: rgb(35,31,32);\">&nbsp;If everything is ok, you will see information about the Gradle version, your JVM, OS and so on. Please consult the&nbsp;</span><a class=\"external-link\" href=\"http://www.gradle.org/docs/1.6/userguide/installation.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span>installation guide</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;if you have any problem.</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"aed659c3-36d0-4595-b6a3-db57c875b45d\"><ac:parameter ac:name=\"title\">Step 3 - Create and run a Gradle Spring project</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">You can use any of several systems when building apps with Spring, but we will be using&nbsp;Gradle because it's so simple.</span></p><h2><span style=\"color: rgb(153,153,153);\">Create a Gradle Spring Project</span></h2><p><span style=\"color: rgb(35,31,32);\">Follow&nbsp;</span><a class=\"external-link\" href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1457\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">the instructions on how to create a Gradle Spring Project using the Spring Initializr</span></a><span style=\"color: rgb(35,31,32);\">. This simple web tool creates all the folders and files you need to get started.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Choose&nbsp;the following options at the Spring Initializr site:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Project:&nbsp;<strong>Gradle</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Group:<strong>&nbsp;com.codeoftheweb</strong>&nbsp;(unless you've been told to use another package)</span></li><li><span style=\"color: rgb(35,31,32);\">Artifact:&nbsp;<strong>salvo</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Dependencies:</span><ul><li><span style=\"color: rgb(35,31,32);\"><strong>web</strong></span></li><li><span style=\"color: rgb(35,31,32);\"><strong>JPA</strong></span></li><li><span style=\"color: rgb(35,31,32);\"><strong>H2</strong></span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Rest Repositories</strong></span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">Click&nbsp;<strong>Generate Project</strong>&nbsp;to download a Zip archive with your project.&nbsp;</span></p><h3><span style=\"color: rgb(153,153,153);\"><strong>Create the local directory</strong></span></h3><p><span style=\"color: rgb(35,31,32);\">Extract the Zip archive files in a Java project&nbsp;directory of your choosing. For example, if you use&nbsp;<strong><sub>/workspace/java/</sub></strong><sub>&nbsp;for your Java projects, then you should have&nbsp;</sub><strong>/workspace/java/salvo/</strong>&nbsp;as a new directory.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">One of the files in the top-level of that directory should be&nbsp;<strong>build.gradle</strong>.</span></p><h3><span style=\"color: rgb(153,153,153);\"><strong>Initialize the&nbsp;Gradle&nbsp;wrapper</strong></span></h3><p><span style=\"color: rgb(35,31,32);\">In your terminal console window, navigate to the top of the project directory, i.e., the directory with&nbsp;<strong>build.gradle</strong>.</span><br /><span style=\"color: rgb(35,31,32);\">Execute this command:</span></p><p><span style=\"color: rgb(35,31,32);\"><strong>gradle wrapper</strong></span></p><p><span style=\"color: rgb(35,31,32);\">This will download a number of files and create a runnable file called&nbsp;<strong>gradlew</strong>. &nbsp;From this point on, you will&nbsp;use that file to run Gradle commands, e.g.,&nbsp;</span></p><p><span style=\"color: rgb(35,31,32);\"><strong>./gradlew bootRun</strong></span></p><p><span style=\"color: rgb(35,31,32);\">to run your web application.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Learn more about gradle wrapper&nbsp;</span><a class=\"external-link\" href=\"https://docs.gradle.org/current/userguide/gradle_wrapper.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">here</span></a><span style=\"color: rgb(35,31,32);\">.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;&nbsp;</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br /><span style=\"color: rgb(35,31,32);\">Be sure you understand what 'root directory' is being referred to, as informal usage is ambiguous. &nbsp;There's the root for your project when building it, then there's the root for the web app you build, and within that there's a root for the Java classes.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test!</span></h2><p><span style=\"color: rgb(35,31,32);\">Try running the&nbsp;<strong>bootRun&nbsp;</strong>task. Even though you've not written any code, Spring has created the&nbsp;shell for one. If you named&nbsp;your artifact&nbsp;<strong>salvo</strong>, then you'll see&nbsp;<strong>Spring Initalizr</strong>&nbsp;has created a&nbsp;<strong>SalvoApplication&nbsp;</strong>class. It looks like this:</span></p><p><br />package com.codeoftheweb.salvo;&nbsp;<br class=\"atl-forced-newline\" />import org.springframework.boot.CommandLineRunner;<br />import org.springframework.boot.SpringApplication;<br />import org.springframework.boot.autoconfigure.SpringBootApplication;<br />import org.springframework.context.annotation.Bean;</p><p>&nbsp;<br class=\"atl-forced-newline\" />@SpringBootApplication<br />public class SalvoApplication {&nbsp;</p><p>&nbsp; &nbsp; public static void main(String[] args) {<br />&nbsp; &nbsp; &nbsp; &nbsp; SpringApplication.run(SalvoApplication.class, args);<br />&nbsp; &nbsp; }<br />}<br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Normally, to run a web application, you have to install&nbsp;the code into a web server, such as Tomcat, JBoss, Jetty, or GlassFish. With&nbsp;Spring, you can run&nbsp;a&nbsp;web application directly, thanks to Spring and the code above :&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong>@SpringBootApplication</strong>&nbsp;is an annotation that tells Spring this should be a &quot;bootable&quot; web app.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>main()</strong>&nbsp;is how you tell Java what code to run first when you run a Java program.</span><ul><li><span style=\"color: rgb(35,31,32);\">A Java program is defined as a set of Java classes with exactly one class defining a&nbsp;<strong>main()</strong>&nbsp;method.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">This particular&nbsp;<strong>main()</strong>&nbsp;method calls the&nbsp;<strong>run()</strong>&nbsp;method in the&nbsp;<strong>SpringApplication</strong>&nbsp;class.</span></li><li><span style=\"color: rgb(35,31,32);\">The&nbsp;<strong>run()</strong>&nbsp;method in&nbsp;<strong>SpringApplication</strong>&nbsp;starts an embedded Tomcat web server.</span></li><li><span style=\"color: rgb(35,31,32);\">The first argument to&nbsp;<strong>run()</strong>, i.e.,&nbsp;<strong>SalvoApplication.class&nbsp;</strong>in this case, specifies the web application to run in the web server.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">To run this program, open a terminal window and execute the comman</span></p><p style=\"margin-left: 30.0px;\"><strong><span style=\"color: rgb(35,31,32);\">./gradlew bootRun</span></strong></p><p><span style=\"color: rgb(35,31,32);\">You should see many lines of output, ending with&nbsp;</span></p><p style=\"margin-left: 30.0px;\"><strong><span style=\"color: rgb(35,31,32);\">Started Application in ... seconds ...</span></strong></p><p><span style=\"color: rgb(35,31,32);\">If that's the case, try the URL&nbsp;</span><a class=\"external-link\" href=\"http://localhost:8080/\" rel=\"nofollow\">http://localhost:8080</a><span style=\"color: rgb(35,31,32);\">&nbsp;in your browser. You should see JSON in the browser window. Not very useful JSON, but not bad for so little effort.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br /><span style=\"color: rgb(35,31,32);\">Tip: Chrome can display JSON directly and is our recommended browser for that reason.</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br /><span style=\"color: rgb(35,31,32);\">Firefox: Get&nbsp;</span><a class=\"external-link\" href=\"https://addons.mozilla.org/en-us/firefox/addon/jsonview/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">the JSONView plugin</span></a><span style=\"color: rgb(35,31,32);\">. Or download the file and view in a text editor.</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br /><span style=\"color: rgb(35,31,32);\">Internet Explorer 10: Download the file and view in a text editor.</span></p><h2><span style=\"color: rgb(153,153,153);\">Stop the Server</span></h2><p><span style=\"color: rgb(35,31,32);\">When you're done testing, stop the server in the console by type control-C, i.e., hold down the control key and the C key at the same time. On MacOS, command-period also works.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"0c25bd30-050b-4fae-a26c-69e1a713a25e\"><ac:parameter ac:name=\"title\">Step 4 - Set up a project in Intellij IDEA</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(153,153,153);\"><strong>Install IDEA</strong></span></h2><p><a class=\"external-link\" href=\"https://www.jetbrains.com/idea/download/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span>Download</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;and run the Intellij IDEA installer.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Start IDEA</span></h2><p><span style=\"color: rgb(35,31,32);\">Start IDEA and follow&nbsp;</span><a class=\"external-link\" href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1456\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span>these instructions</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;for setting up IDEA to edit and run the Salvo&nbsp;project you've just started. This will give you a very nice editor and compiler toolkit, with easy access to the Gradle commands for building and running your project.</span></p><h2><span style=\"color: rgb(153,153,153);\">Familiarize editing&nbsp;with IDEA</span></h2><p><span style=\"color: rgb(35,31,32);\">Click around in the IDEA interface to see the various menus and tool windows available. Many will be mysterious, and many you won't need, but it's good to get a feeling for what's there.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Read&nbsp;</span><a class=\"external-link\" href=\"https://codeacademy.ubiqum.com/ebooks/item?id=25\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span>how to edit in Intellij IDEA</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;for more information.</span></p><h2><span style=\"color: rgb(153,153,153);\">Import your project into IDEA</span></h2><p><span style=\"color: rgb(35,31,32);\">Import your project, per the&nbsp;</span><a class=\"external-link\" href=\"https://codeacademy.ubiqum.com/ebooks/item?id=23\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span>Gradle import project instructions</span></span></a><span style=\"color: rgb(35,31,32);\">.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Test!</span></h2><p><span style=\"color: rgb(35,31,32);\">Following&nbsp;</span><a class=\"external-link\" href=\"https://codeacademy.ubiqum.com/mc/ebook?id=24\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span>the instructions on how to run Gradle projects</span></span></a><span style=\"color: rgb(35,31,32);\">,</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Open the Gradle tool window</span></li><li><span style=\"color: rgb(35,31,32);\">Select the Gradle&nbsp;task&nbsp;<strong>application | bootRun</strong></span></li></ul><p><span style=\"color: rgb(35,31,32);\">This should do exactly the same thing as executing&nbsp;<strong>gradle</strong></span>&nbsp;<span style=\"color: rgb(35,31,32);\"><strong>bootRun&nbsp;</strong>in a terminal window, except that the output will appear in a window at the bottom.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"1bf72f66-42de-4171-9910-66735bf7ccd7\"><ac:parameter ac:name=\"title\">Step 5 - Create Player and PlayerRestRepository</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Now that you've set up the project in your IDE, you can start creating your web service.</span><br /><span style=\"color: rgb(35,31,32);\">The service you will create will handle requests to manage a database of players for the Salvo application.</span></p><h2><span style=\"color: rgb(153,153,153);\">Create a Player entity</span></h2><p><span style=\"color: rgb(35,31,32);\">Define the class for&nbsp;<strong>Player</strong>.&nbsp;Follow&nbsp;the example for&nbsp;<strong>Person</strong>&nbsp;in&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://codeacademy.ubiqum.com/mc/ebook?id=33&amp;anchor=entity\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">the eBook on Spring databases and JPA</span></span></a><span style=\"color: rgb(35,31,32);\">.&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">In Intellij IDEA, right-click on the package you created for your code, e.g.,&nbsp;<strong>salvo</strong>, and select<strong>&nbsp; New ... | Java Class</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Name the class&nbsp;<strong>Player</strong></span></li><li><span style=\"color: rgb(35,31,32);\">With the editor, add code for&nbsp;<strong>Player</strong>&nbsp;similar to the&nbsp;<strong>Person</strong>&nbsp;example.</span><ul><li><span style=\"color: rgb(35,31,32);\">Because this is to be stored in a database, it needs an&nbsp;<strong>id</strong>&nbsp;field and needs to be annotated as an&nbsp;<strong>@Entity</strong>.</span></li><li><span style=\"color: rgb(35,31,32);\">The&nbsp;<strong>Person</strong>&nbsp;example has&nbsp;<strong>firstName</strong>&nbsp;and&nbsp;<strong>lastName</strong>&nbsp;fields.&nbsp; We want a&nbsp;<strong>Player</strong>&nbsp;to have a&nbsp;<strong>userName</strong>&nbsp;field.&nbsp; It will be filled in with an email address.</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">The file for this class is&nbsp;<strong>Player.java</strong>&nbsp;file. IDEA should have correctly&nbsp;placed the file in&nbsp;<strong>src/main/java/com.codeoftheweb.salvo/Player.java</strong>&nbsp;but it's worth verifying that that's true.</span></p><h2><span style=\"color: rgb(153,153,153);\">Create a Player repository</span></h2><p><span style=\"color: rgb(35,31,32);\">Next you need to create a repository for players. A repository in Java's Persistence API (JPA) is a class that manages storing and retrieving instances of classes in&nbsp;a database.</span><br /><span style=\"color: rgb(35,31,32);\">Spring does almost all the work of defining this class for you. You just have to specify&nbsp;the name of the repository class and the name of the managed&nbsp;class.</span><br /><span style=\"color: rgb(35,31,32);\">Define&nbsp;the class&nbsp;<strong>PlayerRepository</strong>&nbsp;following the example&nbsp;<strong>PersonRepository</strong>&nbsp;in&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://codeacademy.ubiqum.com/mc/ebook?id=33\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">the eBook on Spring databases and JPA</span></span></a><span style=\"color: rgb(35,31,32);\">.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">In Intellij IDEA, right-click on the appropriate package and select<strong>&nbsp; New ... | Java Class</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Name the class&nbsp;<strong>PlayerRepository</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Edit the generated Java code as necessary&nbsp;to have&nbsp;<strong>PlayerRepository</strong>&nbsp;manage instances of&nbsp;<strong>Player</strong>&nbsp;rather than&nbsp;<strong>Person</strong>.&nbsp;</span></li></ul><p><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1166\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Make the repository a&nbsp;</span><strong>RestRepository</strong></span></a><span style=\"color: rgb(35,31,32);\">. By using this type of repository, Spring will automatically add code to let you manage&nbsp;your&nbsp;data in&nbsp;your browser, using JSON!</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br /><span style=\"color: rgb(35,31,32);\">When you add code referring to Spring classes, such as&nbsp;<strong>RestRepository</strong>, IDEA should prompt you to&nbsp;<strong>import</strong>&nbsp;that class into your code. You must do that for your code to compile. If you forget, you can click on that name and tell IDEA to import it later. See&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1433\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">importing classes in IDEA</span></span></a><span style=\"color: rgb(35,31,32);\">.</span><br /><span style=\"color: rgb(35,31,32);\">IDEA should put this&nbsp;code in the file&nbsp;<strong>src/main/java/com.codeoftheweb.salvo/PlayerRepository.java</strong>. Verify that's true.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"45dbd892-1aa7-465e-8ef9-863c33e71909\"><ac:parameter ac:name=\"title\">Step 6 - Test the REST web service</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(153,153,153);\"><strong>Run your application</strong></span></h2><p><span style=\"color: rgb(35,31,32);\">Run the&nbsp;<strong>Gradle bootRun&nbsp;</strong>command. It's easiest to do this in IDEA but you can do it on the command line if you wish.</span><br /><span style=\"color: rgb(35,31,32);\">This will start up a web server and load your current application into it. If nothing goes wrong, you will a message something like this:</span><span style=\"color: rgb(35,31,32);\">&nbsp;</span></p><p style=\"margin-left: 30.0px;\"><span style=\"color: rgb(35,31,32);\"><strong>Started Application in ...&nbsp;seconds (JVM running for ...)</strong></span></p><p><span style=\"color: rgb(35,31,32);\">If instead you see</span><span style=\"color: rgb(35,31,32);\">&nbsp;</span></p><p style=\"margin-left: 30.0px;\"><strong><span style=\"color: rgb(35,31,32);\">Compilation failed; see the compiler error output for details.</span></strong></p><p><span style=\"color: rgb(35,31,32);\">You typed something wrong. Look at the error messages and see what the mistake might be. Fix in the editor and try again.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test the REST repository</span></h2><p><span style=\"color: rgb(35,31,32);\">Point your web browser to the URL&nbsp;<strong><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://localhost:8080/players\" rel=\"nofollow\">http://localhost:8080/players</a></strong>.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">You should see JSON for an empty list of players.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"a866d3b0-bcb8-4646-b208-d023b82b32be\"><ac:parameter ac:name=\"title\">Step 7 - Add sample data</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(153,153,153);\">Create the Sample Data</span></h2><p><span style=\"color: rgb(35,31,32);\">If your code is correct, it has created data tables for your Java classes, but those tables are empty. To test that the code actually works, you want to add some code to your application class that will add, create, and save some sample players to the database.</span><br /><span style=\"color: rgb(35,31,32);\">Follow&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://codeacademy.ubiqum.com/mc/ebook?id=44\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">the example of adding&nbsp;a&nbsp;</span><strong>CommandLineRunner</strong></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;to your application class. In that&nbsp;<strong>CommandLineRunner</strong>, add code to create several of the example players specified in the testbed database attached to the email.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test</span></h2><p><span style=\"color: rgb(35,31,32);\">Run the&nbsp;<strong>bootRun</strong>&nbsp;task.</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />Be sure to stop the previous run, if it's still active.<br /><span style=\"color: rgb(35,31,32);\">Don't be surprised if there's a build failure. Two things can go wrong here:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">The compiler found some mistakes in Java.</span><ul><li><span style=\"color: rgb(35,31,32);\">With compiler errors, look at the first few error messages. They should tell you what line of code is broken.</span></li><li><span style=\"color: rgb(35,31,32);\">Fix just the first mistake or two and try again.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">The compiler was happy, but Spring had a problem initializing the database.</span><ul><li><span style=\"color: rgb(35,31,32);\">With initialization errors, look at the last few error messages. They should tell you the root cause that broke everything else.</span></li><li><span style=\"color: rgb(35,31,32);\">It will probably be a missing, misspelled, or misspecified JPA annotation.</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">If it starts without error, open a browser and enter the URL&nbsp;{*}<a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://localhost:8080/players*\" rel=\"nofollow\">http://localhost:8080/players*</a></span><br /><span style=\"color: rgb(35,31,32);\">You should see a list of players, one for each player you added. To see the data for any specific player, add the player's ID number to the URL, e.g.,&nbsp;{*}<a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://localhost:8080/players/1*\" rel=\"nofollow\">http://localhost:8080/players/1*</a></span><br /><span style=\"color: rgb(35,31,32);\">If this worked, congratulations! You have added sample data to the database that you set up!</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"eac9aae9-d606-4da0-8e95-c4811fbc5d39\"><ac:parameter ac:name=\"title\">Step 8 - Create a test front end</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">You have a web server returning JSON. Time to see if you can write an HTML/JavaScript front-end that can interact with such a server.</span><br /><span style=\"color: rgb(35,31,32);\">This is just a&nbsp;<strong>technical spike</strong>&nbsp;to make sure you can connect a front-end to the back-end. You won't use this front-end to actually manage players, but you will have confirmed you have all the pieces working that would make that possible.</span></p><h2><span style=\"color: rgb(153,153,153);\">Include Static Resources to your Build</span></h2><p><span style=\"color: rgb(35,31,32);\">In Spring, files such as HTML, CSS, JavaScript, and images, are called&nbsp;<strong>resources</strong>. Because they are not dynamically created by Java code, they are known as&nbsp;<strong>static resources</strong>.</span><br /><span style=\"color: rgb(35,31,32);\">By default, Spring does not copy static resources into the temporary web server that&nbsp;<strong>bootRun&nbsp;</strong>starts. This is easy to fix.</span><br /><span style=\"color: rgb(35,31,32);\">Add this code to your&nbsp;<strong>build.gradle</strong>&nbsp;file, right after the&nbsp;repositories { ... }&nbsp;code.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><strong>bootRun {</strong></p><p style=\"margin-left: 30.0px;\"><strong>addResources = true</strong></p><p><strong>}</strong></p><p><strong><span style=\"color: rgb(255,0,0);\">N.B: If you are using Gradle version 5, use this code instead</span></strong></p><p><strong><span style=\"color: rgb(255,0,0);\">bootRun {</span></strong><br style=\"text-align: left;\" /><strong><span style=\"color: rgb(255,0,0);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sourceResources sourceSets.main</span></strong><br style=\"text-align: left;\" /><strong><span style=\"color: rgb(255,0,0);\">}</span></strong><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br /><span style=\"color: rgb(35,31,32);\">You do not need to stop and restart the web server when you change or add static resources. Just reload the web page. However, if you rename or delete a resource, the old resource will remain until you restart.</span></p><h2><span style=\"color: rgb(153,153,153);\">Create an HTML Form to Manage Players</span></h2><p><span style=\"color: rgb(35,31,32);\">Now you can test your ability to build a front-end web page to get, display and update JSON data.</span><br /><span style=\"color: rgb(35,31,32);\">Here's the form you're shooting for.</span><br /><span class=\"confluence-embedded-file-wrapper confluence-embedded-manual-size\"><ac:image ac:height=\"333\" ac:width=\"512\"><ri:attachment ri:filename=\"worddave8276d078dc47f03547c30ccc1ee0256.png\" ri:version-at-save=\"1\" /></ac:image></span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">At the top, there's a field where you can add a player.&nbsp; Below that is the JSON returned by&nbsp;<strong><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://localhost:8080/players\" rel=\"nofollow\">http://localhost:8080/players</a></strong>.</span><br /><span style=\"color: rgb(35,31,32);\">If you enter a new name and click&nbsp;<strong>Add</strong>, that new player should appear at the end of the JSON.</span><br /><span style=\"color: rgb(35,31,32);\">To start, here's the HTML file you need.</span><br /><span style=\"color: rgb(35,31,32);\">File:<strong>&nbsp;src/main/resources/static/manager.html</strong></span></p><p><br /><span style=\"color: rgb(112,128,144);\">&lt;!DOCTYPE HTML&gt;</span><br /><span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">html</span><span style=\"color: rgb(153,153,153);\">&gt;</span><br /><span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">head</span><span style=\"color: rgb(153,153,153);\">&gt;</span>&nbsp;<span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">title</span><span style=\"color: rgb(153,153,153);\">&gt;</span>Player Manager<span style=\"color: rgb(153,153,153);\">&lt;/</span><span style=\"color: rgb(153,0,85);\">title</span><span style=\"color: rgb(153,153,153);\">&gt;</span>&nbsp;<span style=\"color: rgb(153,153,153);\">&lt;/</span><span style=\"color: rgb(153,0,85);\">head</span><span style=\"color: rgb(153,153,153);\">&gt;</span><br /><span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">body</span><span style=\"color: rgb(153,153,153);\">&gt;</span><br /><span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">h1</span><span style=\"color: rgb(153,153,153);\">&gt;</span>Player Manager<span style=\"color: rgb(153,153,153);\">&lt;/</span><span style=\"color: rgb(153,0,85);\">h1</span><span style=\"color: rgb(153,153,153);\">&gt;</span>&nbsp;</p><p><span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">form</span>&nbsp;<span style=\"color: rgb(102,153,0);\">action</span><span style=\"color: rgb(153,153,153);\">=&quot;&quot;</span>&nbsp;<span style=\"color: rgb(102,153,0);\">onsubmit</span><span style=\"color: rgb(153,153,153);\">=&quot;</span><span style=\"color: rgb(0,119,170);\">return false</span><span style=\"color: rgb(153,153,153);\">&quot;&gt;</span></p><p style=\"margin-left: 30.0px;\"><span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">label</span><span style=\"color: rgb(153,153,153);\">&gt;</span>Email User Name [e.g., <a href=\"mailto:alice@aol.com\">alice@aol.com</a>]:&nbsp;<span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">input</span>&nbsp;<span style=\"color: rgb(102,153,0);\">id</span><span style=\"color: rgb(153,153,153);\">=&quot;</span><span style=\"color: rgb(0,119,170);\">email</span><span style=\"color: rgb(153,153,153);\">&quot;</span>&nbsp;<span style=\"color: rgb(102,153,0);\">type</span><span style=\"color: rgb(153,153,153);\">=&quot;</span><span style=\"color: rgb(0,119,170);\">text</span><span style=\"color: rgb(153,153,153);\">&quot;</span>&nbsp;<span style=\"color: rgb(102,153,0);\">size</span><span style=\"color: rgb(153,153,153);\">=&quot;</span><span style=\"color: rgb(0,119,170);\">30</span><span style=\"color: rgb(153,153,153);\">&quot;&gt;&lt;/</span><span style=\"color: rgb(153,0,85);\">label</span><span style=\"color: rgb(153,153,153);\">&gt;</span><br /><span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">button</span>&nbsp;<span style=\"color: rgb(102,153,0);\">id</span><span style=\"color: rgb(153,153,153);\">=&quot;</span><span style=\"color: rgb(0,119,170);\">add_player</span><span style=\"color: rgb(153,153,153);\">&quot;&gt;</span>Add<span style=\"color: rgb(153,153,153);\">&lt;/</span><span style=\"color: rgb(153,0,85);\">button</span><span style=\"color: rgb(153,153,153);\">&gt;</span><br /><span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">br</span><span style=\"color: rgb(153,153,153);\">&gt;</span><br /><span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">pre</span>&nbsp;<span style=\"color: rgb(102,153,0);\">id</span><span style=\"color: rgb(153,153,153);\">=&quot;</span><span style=\"color: rgb(0,119,170);\">output</span><span style=\"color: rgb(153,153,153);\">&quot;&gt;&lt;/</span><span style=\"color: rgb(153,0,85);\">pre</span><span style=\"color: rgb(153,153,153);\">&gt;</span></p><p><span style=\"color: rgb(153,153,153);\">&lt;/</span><span style=\"color: rgb(153,0,85);\">form</span><span style=\"color: rgb(153,153,153);\">&gt;</span>&nbsp;<br class=\"atl-forced-newline\" /><br class=\"atl-forced-newline\" /><span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">script</span>&nbsp;<span style=\"color: rgb(102,153,0);\">src</span><span style=\"color: rgb(153,153,153);\">=&quot;</span><span style=\"color: rgb(0,119,170);\"><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://code.jquery.com/jquery-2.2.0.js\" rel=\"nofollow\">https://code.jquery.com/jquery-2.2.0.js</a></span><span style=\"color: rgb(153,153,153);\">&quot;&gt;&lt;/</span><span style=\"color: rgb(153,0,85);\">script</span><span style=\"color: rgb(153,153,153);\">&gt;</span><br /><span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">script</span>&nbsp;<span style=\"color: rgb(102,153,0);\">src</span><span style=\"color: rgb(153,153,153);\">=&quot;</span><span style=\"color: rgb(0,119,170);\">manager.js</span><span style=\"color: rgb(153,153,153);\">&quot;&gt;&lt;/</span><span style=\"color: rgb(153,0,85);\">script</span><span style=\"color: rgb(153,153,153);\">&gt;</span>&nbsp;</p><p><span style=\"color: rgb(153,153,153);\">&lt;/</span><span style=\"color: rgb(153,0,85);\">body</span><span style=\"color: rgb(153,153,153);\">&gt;</span><br /><span style=\"color: rgb(153,153,153);\">&lt;/</span><span style=\"color: rgb(153,0,85);\">html</span><span style=\"color: rgb(153,153,153);\">&gt;</span></p><h2><span style=\"color: rgb(153,153,153);\">Implement JavaScript to Talk to the Back-End Server</span></h2><p><span style=\"color: rgb(35,31,32);\">The following code will be a mystery to you until you read the notes on&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1171\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">AJAX calls in JavaScript</span></a><span style=\"color: rgb(35,31,32);\">. AJAX is how a web page asks for information from and sends information to a back-end web server. Some explanatory notes are below.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br /><span style=\"color: rgb(35,31,32);\">You should name&nbsp;JavaScript files so that it's clear what code they contain. Avoid generic names like&nbsp;<strong>app.js</strong>, unless it's being generated by some JavaScript module packaging system.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">File:<strong>&nbsp;src/main/resources/static/manager.js</strong></span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(221,74,104);\">$</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(0,119,170);\">function</span><span style=\"color: rgb(153,153,153);\">()</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">{</span></p><p style=\"margin-left: 30.0px;\"><span>&nbsp;</span><span style=\"color: rgb(112,128,144);\">// display text in the output area</span><br /><span style=\"color: rgb(0,119,170);\">function</span><span>&nbsp;</span><span style=\"color: rgb(221,74,104);\">showOutput</span><span style=\"color: rgb(153,153,153);\">(</span>text<span style=\"color: rgb(153,153,153);\">)</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">{</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(221,74,104);\">$</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(102,153,0);\">&quot;#output&quot;</span><span style=\"color: rgb(153,153,153);\">).</span><span style=\"color: rgb(221,74,104);\">text</span><span style=\"color: rgb(153,153,153);\">(</span>text<span style=\"color: rgb(153,153,153);\">);</span></p><p style=\"margin-left: 30.0px;\"><span style=\"color: rgb(153,153,153);\">}</span><span>&nbsp;</span></p><p style=\"margin-left: 30.0px;\"><span style=\"color: rgb(112,128,144);\">// load and display JSON sent by server for /players</span><span>&nbsp;</span><br class=\"atl-forced-newline\" /><span style=\"color: rgb(0,119,170);\">function</span><span>&nbsp;</span><span style=\"color: rgb(221,74,104);\">loadData</span><span style=\"color: rgb(153,153,153);\">()</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">{</span></p><p style=\"margin-left: 60.0px;\">$<span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(0,119,170);\">get</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(102,153,0);\">&quot;/players&quot;</span><span style=\"color: rgb(153,153,153);\">)</span><br /><span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(221,74,104);\">done</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(0,119,170);\">function</span><span style=\"color: rgb(153,153,153);\">(</span>data<span style=\"color: rgb(153,153,153);\">)</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">{</span></p><p style=\"margin-left: 90.0px;\"><span style=\"color: rgb(221,74,104);\">showOutput</span><span style=\"color: rgb(153,153,153);\">(</span>JSON<span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(221,74,104);\">stringify</span><span style=\"color: rgb(153,153,153);\">(</span>data<span style=\"color: rgb(153,153,153);\">,</span><span>&nbsp;</span><span style=\"color: rgb(0,119,170);\">null</span><span style=\"color: rgb(153,153,153);\">,</span><span>&nbsp;</span><span style=\"color: rgb(153,0,85);\">2</span><span style=\"color: rgb(153,153,153);\">));</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(153,153,153);\">})</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(221,74,104);\">fail</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(0,119,170);\">function</span><span style=\"color: rgb(153,153,153);\">(</span><span>&nbsp;</span>jqXHR<span style=\"color: rgb(153,153,153);\">,</span><span>&nbsp;</span>textStatus<span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">)</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(221,74,104);\">showOutput</span><span style=\"color: rgb(153,153,153);\">(</span><span>&nbsp;</span><span style=\"color: rgb(102,153,0);\">&quot;Failed: &quot;</span><span>&nbsp;</span><span style=\"color: rgb(166,127,89);\">+</span><span>&nbsp;</span>textStatus<span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">);</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(153,153,153);\">});</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(153,153,153);\">}</span><span>&nbsp;</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(112,128,144);\">// handler for when user clicks add person</span><span>&nbsp;</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(0,119,170);\">function</span><span>&nbsp;</span><span style=\"color: rgb(221,74,104);\">addPlayer</span><span style=\"color: rgb(153,153,153);\">()</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">{</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(0,119,170);\">var</span><span>&nbsp;</span>name<span>&nbsp;</span><span style=\"color: rgb(166,127,89);\">=</span><span>&nbsp;</span><span style=\"color: rgb(221,74,104);\">$</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(102,153,0);\">&quot;#email&quot;</span><span style=\"color: rgb(153,153,153);\">).</span><span style=\"color: rgb(221,74,104);\">val</span><span style=\"color: rgb(153,153,153);\">();</span><br /><span style=\"color: rgb(0,119,170);\">if</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">(</span>name<span style=\"color: rgb(153,153,153);\">)</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">{</span></p><p style=\"margin-left: 90.0px;\"><span style=\"color: rgb(221,74,104);\">postPlayer</span><span style=\"color: rgb(153,153,153);\">(</span>name<span style=\"color: rgb(153,153,153);\">);</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(153,153,153);\">}</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(153,153,153);\">}</span><span>&nbsp;</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(112,128,144);\">// code to post a new player using AJAX</span><br /><span style=\"color: rgb(112,128,144);\">// on success, reload and display the updated data from the server</span><span>&nbsp;</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(0,119,170);\">function</span><span>&nbsp;</span><span style=\"color: rgb(221,74,104);\">postPlayer</span><span style=\"color: rgb(153,153,153);\">(</span>userName<span style=\"color: rgb(153,153,153);\">)</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">{</span></p><p style=\"margin-left: 60.0px;\">$<span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(221,74,104);\">post</span><span style=\"color: rgb(153,153,153);\">({</span></p><p style=\"margin-left: 90.0px;\">headers<span style=\"color: rgb(153,153,153);\">:</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">{</span></p><p style=\"margin-left: 120.0px;\"><span style=\"color: rgb(102,153,0);\">'Content-Type'</span><span style=\"color: rgb(153,153,153);\">:</span><span>&nbsp;</span><span style=\"color: rgb(102,153,0);\">'application/json'</span></p><p style=\"margin-left: 90.0px;\"><span style=\"color: rgb(153,153,153);\">},</span></p><p style=\"margin-left: 90.0px;\">dataType<span style=\"color: rgb(153,153,153);\">:</span><span>&nbsp;</span><span style=\"color: rgb(102,153,0);\">&quot;text&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><br />url<span style=\"color: rgb(153,153,153);\">:</span><span>&nbsp;</span><span style=\"color: rgb(102,153,0);\">&quot;/players&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><br />data<span style=\"color: rgb(153,153,153);\">:</span><span>&nbsp;</span>JSON<span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(221,74,104);\">stringify</span><span style=\"color: rgb(153,153,153);\">({</span><span>&nbsp;</span><span style=\"color: rgb(102,153,0);\">&quot;userName&quot;</span><span style=\"color: rgb(153,153,153);\">:</span><span>&nbsp;</span>userName<span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">})</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(153,153,153);\">})</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(221,74,104);\">done</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(0,119,170);\">function</span><span style=\"color: rgb(153,153,153);\">(</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">)</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">{</span></p><p style=\"margin-left: 90.0px;\"><span style=\"color: rgb(221,74,104);\">showOutput</span><span style=\"color: rgb(153,153,153);\">(</span><span>&nbsp;</span><span style=\"color: rgb(102,153,0);\">&quot;Saved &ndash; reloading&quot;</span><span style=\"color: rgb(153,153,153);\">);</span><br /><span style=\"color: rgb(221,74,104);\">loadData</span><span style=\"color: rgb(153,153,153);\">();</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(153,153,153);\">})</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(221,74,104);\">fail</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(0,119,170);\">function</span><span style=\"color: rgb(153,153,153);\">(</span><span>&nbsp;</span>jqXHR<span style=\"color: rgb(153,153,153);\">,</span><span>&nbsp;</span>textStatus<span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">)</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">{</span></p><p style=\"margin-left: 90.0px;\"><span style=\"color: rgb(221,74,104);\">showOutput</span><span style=\"color: rgb(153,153,153);\">(</span><span>&nbsp;</span><span style=\"color: rgb(102,153,0);\">&quot;Failed: &quot;</span><span>&nbsp;</span><span style=\"color: rgb(166,127,89);\">+</span><span>&nbsp;</span>textStatus<span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">);</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(153,153,153);\">});</span></p><p style=\"margin-left: 30.0px;\"><span style=\"color: rgb(153,153,153);\">}</span><span>&nbsp;</span><br class=\"atl-forced-newline\" /><span style=\"color: rgb(221,74,104);\">$</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(102,153,0);\">&quot;#add_player&quot;</span><span style=\"color: rgb(153,153,153);\">).</span><span style=\"color: rgb(221,74,104);\">on</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(102,153,0);\">&quot;click&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><span>&nbsp;</span>addPlayer<span style=\"color: rgb(153,153,153);\">);</span><span>&nbsp;</span><br class=\"atl-forced-newline\" /><span style=\"color: rgb(221,74,104);\">loadData</span><span style=\"color: rgb(153,153,153);\">();</span></p><p><span style=\"color: rgb(153,153,153);\">});</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Key functions in this code:</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong>loadData()&nbsp;</strong>downloads the current list of players, using AJAX.</span><ul><li><span style=\"color: rgb(35,31,32);\">It does a simple&nbsp;<strong>GET</strong>&nbsp;request to the&nbsp;<strong>players</strong>&nbsp;URL.</span></li><li><span style=\"color: rgb(35,31,32);\">When the request is answered, the code inside&nbsp;<strong>done()</strong>&nbsp;will be executed.</span></li><li><span style=\"color: rgb(35,31,32);\">All this&nbsp;<strong>done()</strong>&nbsp;code does is display exactly the JSON received on the page.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\"><strong>addPlayer()</strong>&nbsp;is called when the&nbsp;<strong>Add</strong>&nbsp;button is clicked on the web page.</span><ul><li><span style=\"color: rgb(35,31,32);\">It gets data from the web form.&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">If there is a name string, it passes it to&nbsp;<strong>postPlayer()</strong></span></li></ul></li><li><span style=\"color: rgb(35,31,32);\"><strong>postPlayer()</strong>&nbsp;sends a JSON object with the user name to the server, using AJAX. Note several non-obvious points:</span><ul><li><span style=\"color: rgb(35,31,32);\">The URL is exactly the same as&nbsp;<strong>loadData()</strong>. The difference in back-end behavior is based on&nbsp;<strong>GET</strong>&nbsp;versus&nbsp;<strong>POST</strong>.</span></li><li><span style=\"color: rgb(35,31,32);\">It adds a&nbsp;<strong>Content-Type</strong>&nbsp;header to the request to tell the back-end JSON is coming.</span></li><li><span style=\"color: rgb(35,31,32);\">It uses&nbsp;<strong>JSON.stringify()</strong>&nbsp;to convert a JavaScript into a valid JSON string.</span></li><li><span style=\"color: rgb(35,31,32);\">It sets the expected return type to&nbsp;<strong>text</strong>. Otherwise, jQuery will get an error trying to parse the empty content returned for the POST as JSON.</span></li><li><span style=\"color: rgb(35,31,32);\">When the request is finished, it calls&nbsp;<strong>loadData()</strong>&nbsp;to get the new JSON.</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">If everything is working correctly, then when you&nbsp;<strong>bootRun&nbsp;</strong>and go to the url&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://localhost:8080/manager.html\" rel=\"nofollow\">http://localhost:8080/manager.html</a><span style=\"color: rgb(35,31,32);\">&nbsp;in your browser,</span></p><ul><li><span style=\"color: rgb(35,31,32);\">You should see a form where you can enter and add a player's name.</span></li><li><span style=\"color: rgb(35,31,32);\">Following the form should be the JSON for the current list of players.</span></li><li><span style=\"color: rgb(35,31,32);\">Entering a name and clicking&nbsp;<strong>Add</strong>&nbsp;should add the player you entered to the JSON displayed.</span></li></ul><h1><span style=\"color: rgb(153,153,153);\"><strong>Summary</strong></span></h1><p><span style=\"color: rgb(35,31,32);\">Congratulations! You've just developed a RESTful web service with Spring.&nbsp; With a web browser, you can retrieve and create data in JSON form.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"0ff6300b-a92b-4983-8f8a-3418d8e57f25\"><ac:parameter ac:name=\"title\">Step 9 - Submit your work</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">The objectives&nbsp;for this task were to:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">use Spring Boot and Java to create a web service</span></li><li><span style=\"color: rgb(35,31,32);\">create a database of players registered with the system</span></li><li><span style=\"color: rgb(35,31,32);\">create a data table for players</span><ul><li><span style=\"color: rgb(35,31,32);\">each player should have an email address, plus a database-generated unique ID number</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">the database should have:</span><ul><li><span style=\"color: rgb(35,31,32);\">at least two players in it</span></li><li><span style=\"color: rgb(35,31,32);\">you should be able&nbsp;to enter the URL&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://localhost:8080/salvo/players\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">{+}</span></a><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://localhost:8080/players+\" rel=\"nofollow\">http://localhost:8080/players+</a><span style=\"color: rgb(35,31,32);\">&nbsp;and see the JSON object listing all players in the database in a browser</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">At this point, all of that should be working. &nbsp;Good job! &nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\">Submit a zipped archive of your project folder, including the source code and build scripts.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Use the &quot;file&quot; format to attach the zip file.</span></li><li><span style=\"color: rgb(35,31,32);\">Run the&nbsp;<strong>clean</strong>&nbsp;task in the&nbsp;<strong>Gradle</strong>&nbsp;tool window first, to get rid of all compiled code.&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">In the comments with the submission, give&nbsp;a short report on your setup (what operating system, what versions of the tools you installed, etc.) and any issues you ran into and how you resolved them.</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "260866073",
    "conflChildrenId": [
      "261390618"
    ]
  },
  {
    "title": "JS Mobile Web App Project",
    "content": "<p><strong>Welcome!</strong><br />In this course, you are an independent developer who wants to design and launch an original mobile web app. In this project, you will not only develop the application, you will also do some initial design based on an analysis of your end users.&nbsp;</p><p>To do this, you'll work through a series of tasks designed by experts in programming and mobile web app development to help you create a robust and useful mobile web application.</p><p><strong>What is Mobile Web Application Development?</strong></p><p>Mobile Web Application Development is the process of creating or updating web-based applications or websites to be optimally viewable and functional within a mobile device's browser. This process includes:</p><ul><li>Using new features in HTML5, CSS3, and JavaScript to make the mobile web app look and feel like a native mobile application.</li><li>Creating a responsive design that works for various screen sizes and rotations.</li><li>Taking advantage of specific capabilities of smartphones such as location-awareness.</li></ul>",
    "conflPageId": "260931585",
    "conflChildrenId": [
      "261128196",
      "260997145",
      "260767861",
      "260931702",
      "260505710",
      "260735073"
    ]
  },
  {
    "title": "Mobile App - Task 4",
    "content": "<p><a class=\"external-link\" style=\"text-decoration: underline;\" href=\"https://gbstool.learningbydoingtools.com/mc/poa?productID=4978&amp;taskID=1737#introduction\" rel=\"nofollow\"><span style=\"color: rgb(38,34,98);\">INTRODUCTION</span></a></p><h1><span style=\"color: rgb(128,130,133);\">Your Task</span></h1><p><span style=\"color: rgb(35,31,32);\">You have been asked by League Director, Tom Denton, to add the following major capability to&nbsp;the mobile web app: a user can post messages visible to other users of the web app.</span><br /><span style=\"color: rgb(35,31,32);\">This requires adding several&nbsp;new back-end elements to the system:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">User accounts</span></li><li><span style=\"color: rgb(35,31,32);\">A database of sample messages</span></li><li><span style=\"color: rgb(35,31,32);\">Dynamically constructed HTML pages</span></li><li><span style=\"color: rgb(35,31,32);\">JSON data objects</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The steps below are one way to update the web app. The ordering is to make it easier to test as you go along.</span><br /><span style=\"color: rgb(35,31,32);\">Here are the high-level steps to follow. Continue through the Plan of Attack for more detailed guidance.</span></p><ol><li><span style=\"color: rgb(35,31,32);\">Get an example app running and see how to use:</span><ul><li><span style=\"color: rgb(35,31,32);\">HTML/JavaScript to add&nbsp;user signup and login</span></li><li><span style=\"color: rgb(35,31,32);\">HTML/JavaScript to add a form to post messages</span></li><li><span style=\"color: rgb(35,31,32);\">HTML templates for getting and displaying&nbsp;messages</span></li><li><span style=\"color: rgb(35,31,32);\">JavaScript for displaying messages retrieved from&nbsp;Firebase</span></li><li><span style=\"color: rgb(35,31,32);\">JavaScript for posting a new message</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">Modify the CSS/HTML/JavaScript to create&nbsp;the&nbsp;UI flow for the new functionality per&nbsp;your design.</span></li><li><span style=\"color: rgb(35,31,32);\">Modify the JavaScript for your specific app data (to get the game data and display it).</span></li><li><span style=\"color: rgb(35,31,32);\">Use&nbsp;JavaScript to give the app the client requested UI features.&nbsp;</span></li></ol><p><span style=\"color: rgb(35,31,32);\"><strong>As part of this task, you will submit the following for review:&nbsp;</strong></span></p><ul><li><span style=\"color: rgb(35,31,32);\">For Mentor Review:</span><ul><li><span style=\"color: rgb(35,31,32);\">Screen mockup and UI flow diagram for the new functionality</span></li><li><span style=\"color: rgb(35,31,32);\">JavaScript and relevant fragments of HTML and HTML templates for getting and displaying&nbsp;messages</span></li><li><span style=\"color: rgb(35,31,32);\">JavaScript for displaying messages that are retrieved from&nbsp;Firebase</span></li><li><span style=\"color: rgb(35,31,32);\">JavaScript for posting a new message</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">For Client Deliverable: the URL of the updated mobile web app, with notes on: what was built, changes made to other parts of the web app,&nbsp;and any known issues or limitations</span><ul><li><span style=\"color: rgb(35,31,32);\">Your mentor will&nbsp;advise you as to when you are ready to submit this package to the client.</span></li></ul></li></ul><p><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br /><span style=\"color: rgb(35,31,32);\">When submitting fragments of your CSS and HTML code for mentor review, be sure to clearly label the source file (i.e. give the filename, including folder) for each&nbsp;fragment.</span><span>&nbsp;</span></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"d8a96ddf-fedd-4fdb-bf7a-3e0c36a6be58\"><ac:parameter ac:name=\"title\">Step 1 - Get example code working</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(128,130,133);\"><strong>Get&nbsp;example code working in your&nbsp;app (learn how it works)</strong></span></h2><p><span style=\"color: rgb(51,122,183);\"><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://github.com/firebase/quickstart-js/tree/master/database\" rel=\"nofollow\"><span style=\"color: rgb(0,0,0);\"><strong>1.</strong></span></a><span style=\"text-decoration: underline;\"><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://github.com/firebase/quickstart-js/tree/master/database\" rel=\"nofollow\">This quickstart guide</a></span></span><span style=\"color: rgb(35,31,32);\">&nbsp;contains code that&nbsp;allows users to sign in and post messages. &nbsp;We will get the&nbsp;example&nbsp;app working and then modify it for our specific use case. &nbsp;<strong>Copy and paste</strong>&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://github.com/firebase/quickstart-js/blob/master/database/index.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">from the example code</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;into your app.</span></p><p><span style=\"color: rgb(35,31,32);\"><strong>2.&nbsp;</strong>*Add&nbsp;main.js file:*</span></p><ol><li><span style=\"color: rgb(35,31,32);\">Create a&nbsp;folder called 'js' within your app folder. &nbsp;Add the&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://github.com/firebase/quickstart-js/blob/master/database/scripts/main.js\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">main.js file from&nbsp;the quickstart example</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;to the 'js' folder you just created.&nbsp;(This file will be called in your index.html to communicate with firebase.)</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Open your index.html file and check the console to see if main.js is loading correctly.</span></li></ol><p><span style=\"color: rgb(35,31,32);\"><strong>3. Enable</strong>&nbsp;<strong>authentication</strong></span></p><ol><li><span style=\"color: rgb(35,31,32);\">Go to firebase dashboard for your app</span></li><li><span style=\"color: rgb(35,31,32);\">Click 'Auth' on the left, then go to the 'Sign In Method' tab. &nbsp;Select 'Google', 'enable', and 'save'.</span></li></ol><p><span style=\"color: rgb(35,31,32);\"><strong>4. Add security/validation rules</strong></span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong>Background</strong>: By default, anyone who knows the URL of your Firebase app can change any data any way they want, either intentionally or by accident. &nbsp;To prevent this, you need to add security and validation rules. Here is a simple set of rules that will make sure someone has to be logged in to post, and has to submit minimally valid data.&nbsp;</span><span>&nbsp;</span><span style=\"color: rgb(35,31,32);\">These rules say</span><ul><li><span style=\"color: rgb(35,31,32);\">The&nbsp;<strong>&quot;.read&quot;: true</strong>&nbsp;at the root says that anyone can read anything. They don't even have to log in.</span></li><li><span style=\"color: rgb(35,31,32);\">The&nbsp;<strong>&quot;.write&quot;</strong>&nbsp;rule under&nbsp;<strong>$noteid</strong>&nbsp;says that a note object is allowed only if the user is logged in and the user ID they are logged in under matches the one in the note object.</span></li><li><span style=\"color: rgb(35,31,32);\">The&nbsp;<strong>&quot;.validate&quot;</strong>&nbsp;rule under&nbsp;<strong>$noteid</strong>&nbsp;says that a note object is valid only if it contains non-empty author and text values.</span></li></ul></li></ul><p><strong>5.</strong></p><p style=\"margin-left: 180.0px;\"><br /></p><p style=\"margin-left: 180.0px;\">{</p><p style=\"margin-left: 210.0px;\">&quot;.read&quot;: true,</p><p style=\"margin-left: 210.0px;\">&quot;notes&quot;: {</p><p style=\"margin-left: 240.0px;\">&quot;$noteid&quot;: {</p><p style=\"margin-left: 270.0px;\">&quot;.write&quot;: &quot;auth.uid == newData.child('uid').val()&quot;,</p><p style=\"margin-left: 270.0px;\">&quot;.validate&quot;: &quot;newData.hasChildren(['author', 'text'])</p><p style=\"margin-left: 270.0px;\">&amp;&amp; newData.child('author').val().length &gt; 0</p><p style=\"margin-left: 270.0px;\">&amp;&amp; newData.child('text').val().length &gt; 0&quot;</p><p style=\"margin-left: 240.0px;\">}</p><p style=\"margin-left: 210.0px;\">}</p><p style=\"margin-left: 180.0px;\">}</p><p><br /></p><ol><li><span style=\"color: rgb(35,31,32);\">&nbsp;To install these rules:</span><ul><li><span style=\"color: rgb(35,31,32);\">Go to your app dashboard at Firebase.</span></li><li><span style=\"color: rgb(35,31,32);\">Click on&nbsp;<strong>Database</strong>&nbsp;and select the<strong>&nbsp;Rules</strong>&nbsp;tab.</span></li><li><span style=\"color: rgb(35,31,32);\">Replace the entire set of rules at Firebase with the rules above.</span></li><li><span style=\"color: rgb(35,31,32);\">Click&nbsp;<strong>Publish</strong>. Firebase will tell you if the rules are accepted.</span></li></ul></li></ol><p><span style=\"color: rgb(35,31,32);\">It's best to test that these rules work. Firebase provides a&nbsp;<strong>simulator</strong>&nbsp;web page to test which read and write operations are allowed with different authentications. The interface is simple but tedious to use. At the very least, it helps to make a table of test cases that you can copy and paste into the simulator.</span></p><p><span style=\"color: rgb(35,31,32);\"><strong>6. Deploy and Test</strong></span></p><ol><li><span style=\"color: rgb(35,31,32);\">use&nbsp;<strong>firebase</strong>&nbsp;<strong>deploy</strong>&nbsp;command in app folder from terminal</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Got to firebase app URL and try your new 'Team Notes' section:</span><ol><li><span style=\"color: rgb(35,31,32);\">Sign up a user</span></li><li><span style=\"color: rgb(35,31,32);\">Post a note for the new user</span></li><li><span style=\"color: rgb(35,31,32);\">Check that user appears in the 'Auth' section of your firebase app dashboard</span></li><li><span style=\"color: rgb(35,31,32);\">Check that new note data appears in 'data' section of your firebase app dashboard</span></li><li><span style=\"color: rgb(35,31,32);\">If not, debug.</span></li></ol></li></ol><p><span style=\"color: rgb(35,31,32);\"><strong>7. Update code</strong>&nbsp;by removing unnecessary code from index.html and main.js. &nbsp;</span></p><ol><li><span style=\"color: rgb(35,31,32);\">Remove code that doesn't apply to your app. &nbsp;Deploy and Test.</span></li><li><span style=\"color: rgb(35,31,32);\">Use&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://github.com/firebase/quickstart-js/blob/master/auth/email.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">another quickstart example</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;as a guide. &nbsp;Write code to set up email/password auth.&nbsp;</span><span><span style=\"color: rgb(35,31,32);\"><strong><span style=\"color: rgb(255,0,0);\">The linked </span></strong></span><span style=\"color: rgb(255,0,0);\"><span style=\"color: rgb(255,0,0);\"><strong>web page</strong></span><span style=\"color: rgb(255,0,0);\"><strong>&nbsp;does not exist</strong></span></span></span></li><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:&nbsp;</strong></span>Remember to enable email/password as a sign in method from the Firebase console.</li></ol><p><span style=\"color: rgb(35,31,32);\"><strong>8. Deploy and Test</strong>.</span></p><p class=\"auto-cursor-target\"><br /></p><p class=\"auto-cursor-target\"><br /></p><p class=\"auto-cursor-target\"><br /></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"2c9901d6-000f-414d-9826-04eecd33860c\"><ac:parameter ac:name=\"title\">Step 2 - Design UI for message display screen</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">In this step you will create the messages display screen design and HTML/JS/CSS code fragments (with placeholders for future game information). &nbsp;At this point, all messages in the database will be listed(per the example) and no dynamic game information will be included. &nbsp;In a later step, we will pass the game information to the database and filter the messages based on which game detail page is clicked.</span></p><p><span style=\"color: rgb(35,31,32);\"><strong>1.Add a message display screen, with a button to it from the game detail screen.</strong>&nbsp;&nbsp;Using your layout sketch, design the CSS and HTML for displaying the list of messages.</span></p><ol><li><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:&nbsp;</strong></span>Submit your UI mockup and flow diagram to your mentor for review.</li></ol><p><span style=\"color: rgb(35,31,32);\">2. In your web app HTML:</span></p><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Add any additional HTML needed</strong>&nbsp;for your design.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Add to your stylesheet the CSS needed</strong>&nbsp;for your design.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Add CSS to make the list of messages 'page' hidden by default.</strong>&nbsp;&nbsp;Refer to the book for how to do this. &nbsp;(As you did previously when you converted your app from multi-page to single-page)</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Add JavaScript for the page transition.</strong>&nbsp;&nbsp;Refer to the book. &nbsp;(Again, as you did before.)</span><ol><li><span style=\"color: rgb(35,31,32);\">Work on one layout at a time, i.e., portrait then landscape, or vice cersa. (In landscape, for example, you may want to take advantage of the additional room to show both some game detail data&nbsp;<em>and</em>&nbsp;the messages list.)</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Check how your local pages are looking frequently.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!&nbsp;</strong>When one orientation seems correct, deploy it to Firebase and check.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\">On the game details screen,&nbsp;<strong>add a button to show game messages</strong>.</span><ol><li><span style=\"color: rgb(35,31,32);\">Add JavaScript so that when the button is tapped, the message display screen is shown.</span><ol><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:&nbsp;</strong></span>A&nbsp;couple options are: 1. This button/link could go to a popup, or 2. The link/button could&nbsp;open the form/messages in the Game Details portion of the page.</li><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:&nbsp;</strong></span>Refer to the book and your previous work- this is similar to what you did to click on a game from a list and pull up its detail 'page' (actually a DIV)</li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Make sure the messages appear the way you want on your local page.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Deploy to Firebase and make sure everything still works.</span></li><li><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:&nbsp;<span style=\"color: rgb(35,31,32);\">Submit for mentor review the HTML, CSS and JavaScript code you added to display a list of messages.</span></strong></span></li></ol></li></ol><p><span style=\"color: rgb(23,155,201);\"><strong>TIP:&nbsp;</strong></span>When submitting fragments of your CSS and HTML code for mentor review, be sure to clearly label the source file (i.e. give the filename, including folder) for each fragment.<span>&nbsp;</span></p><p class=\"auto-cursor-target\"><br /></p></ac:rich-text-body></ac:structured-macro><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"d72d5538-bc13-431d-b6a0-7c9d9fc1586c\"><ac:parameter ac:name=\"title\">Step 3 - Create new data and filter messages</ac:parameter><ac:rich-text-body><p class=\"auto-cursor-target\"><br /></p><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Write Javascript&nbsp;to get and pass game information to database&nbsp;</strong>when form submitted.</span><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Plan</strong>. Decide what game information will be passed to the database. &nbsp;What will it be called? &nbsp;What kind of input will it be? (i.e. gameId, gameName, gameTime, gameInfo?)</span><ol><li><span style=\"color: rgb(35,31,32);\">When that form is submitted, JavaScript should save a Firebase&nbsp;message object with the time, user, game and message.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Add input field(s)&nbsp;</strong>for game information&nbsp;in HTML form.&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Capture specific game information&nbsp;</strong>(from HTML&nbsp;of game detail page) and&nbsp;<strong>pass it to the new form input&nbsp;</strong>with JavaScript.&nbsp;</span><ol><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:&nbsp;</strong></span>See&nbsp;<a class=\"external-link\" href=\"http://stackoverflow.com/questions/7764154/pass-a-javascript-variable-value-into-input-type-hidden-value\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">example</span></span></a><span style=\"color: rgb(35,31,32);\">. &nbsp;You can add JavaScript code that stores the game in question (in a variable) when a user pushes the &quot;Messages&quot; button from a game's detail screen</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Update the main.js methods</strong>&nbsp;so that&nbsp;game information inputs will be sent and saved to firebase database. &nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Update HTML&nbsp;to show all game&nbsp;</strong>data with Mustache.js similar to:</span></li></ol></li></ol><p><br /></p><p style=\"margin-left: 150.0px;\"><span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">li</span><span style=\"color: rgb(153,153,153);\">&gt;</span>(<code>gameId</code>)<span>&nbsp;</span><code>author</code><span>&nbsp;</span>said:<span>&nbsp;</span><code>text</code><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">&lt;/</span><span style=\"color: rgb(153,0,85);\">li</span><span style=\"color: rgb(153,153,153);\">&gt;</span></p><p style=\"margin-left: 240.0px;\"><span style=\"color: rgb(35,31,32);\">Review simple&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.lynda.com/articles/introduction-to-javascript-templating-using-mustache-js\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Javascript templating tutorial</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;with Mustache.js</span></p><p style=\"margin-left: 240.0px;\"><span style=\"color: rgb(35,31,32);\">Look for how they load the needed libraries from online sources, create dynamic HTML using the templating engine Mustache, and then fill the dynamic HTML with JSON data from a separate file. We will be doing the same below.</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(35,31,32);\">f. <strong>Deploy and Test!</strong>&nbsp;Remove&nbsp;the old notes generated in previous tests from the 'data' section of firebase app dashboard. Create new notes from your firebase app and check 'data' that they have the correct game information.</span></p><p style=\"margin-left: 30.0px;\"><span style=\"color: rgb(35,31,32);\"><strong>2. Show only the messages for the specific game clicked. &nbsp;</strong></span></p><p style=\"margin-left: 90.0px;\"><span style=\"color: rgb(35,31,32);\"><strong>1.&nbsp;Update the code in main.js&nbsp;</strong>to&nbsp;use the game information variable created when a user pushes the &quot;Messages&quot; button&nbsp;(i.e. gameId) to show only the messages for that game. &nbsp;See&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://firebase.google.com/docs/database/web/retrieve-data#next_steps\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">examples,</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;specifically filtering data&nbsp;to&nbsp;retrieve data from Firebase.&nbsp;<strong>&nbsp;</strong></span></p><p style=\"margin-left: 90.0px;\"><strong style=\"color: rgb(35,31,32);\">2. Set up two test accounts per client email:&nbsp;</strong><a href=\"mailto:denton@example.com\">denton@example.com</a><span style=\"color: rgb(35,31,32);\"> with password nysl123, and&nbsp;</span><a href=\"mailto:parent@example.com\">parent@example.com</a><span style=\"color: rgb(35,31,32);\"> with password soccer89, and put in a couple of posts from each for the first game on the schedule.</span></p><p style=\"margin-left: 30.0px;\"><strong><span style=\"color: rgb(35,31,32);\">3. Update HTML game information placeholders so specific game information&nbsp;appears dynamically (see&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.w3schools.com/js/js_htmldom_html.asp\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">example</span></span></a><span style=\"color: rgb(35,31,32);\">).</span></strong></p><p style=\"margin-left: 90.0px;\"><span style=\"color: rgb(35,31,32);\"><strong>1.&nbsp;Test!</strong>&nbsp;Make sure your page is showing the messages from Firebase&nbsp;and that they are displaying correctly.</span></p><p style=\"margin-left: 90.0px;\"><span style=\"color: rgb(35,31,32);\"><strong>2. Test!&nbsp;</strong>Deploy to Firebase&nbsp;and verify the web app still works.</span></p><p style=\"margin-left: 90.0px;\"><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:&nbsp;</strong></span>Submit&nbsp;for mentor review the HTML and JavaScript code you&nbsp;added to display a list of messages retrieved from Firebase.&nbsp;</p><p><br class=\"atl-forced-newline\" /><br class=\"atl-forced-newline\" /><br class=\"atl-forced-newline\" /><br class=\"atl-forced-newline\" /><br class=\"atl-forced-newline\" /><br class=\"atl-forced-newline\" /></p></ac:rich-text-body></ac:structured-macro><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"a11d59f8-126a-490a-b7dd-6f09c8d0b3d5\"><ac:parameter ac:name=\"title\">Step 4 - Update UI</ac:parameter><ac:rich-text-body><ol><li><span style=\"color: rgb(35,31,32);\">Use JavaScript to update the UI so that...</span><ol><li><span style=\"color: rgb(35,31,32);\">The post message button&nbsp;only appears on the game messages page if the user has logged in.</span></li><li><span style=\"color: rgb(35,31,32);\">When the post message button is tapped, the HTML form opens that lets the user enter a message.</span></li><li><span style=\"color: rgb(35,31,32);\">When the form is submitted, a message object is still saved to Firebase&nbsp;and the message appears in the correct game detail page.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Verify that you can only post if you are logged in and that posted messages appear on the appropriate game messages screen.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Deploy to Firebase&nbsp;and verify everything still works.</span></li><li><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span></li></ol><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\"><strong>Submit your changed HTML, CSS, and JavaScript</strong>&nbsp;for&nbsp;mentor review.</span><span>&nbsp;</span><span style=\"color: rgb(35,31,32);\">When submitting fragments of your CSS and HTML code for mentor review, be sure to clearly label the source file (i.e. give the filename, including folder) for each&nbsp;fragment.</span></p><p class=\"auto-cursor-target\"><br /></p></ac:rich-text-body></ac:structured-macro><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"dedfd82c-45a3-4ee7-ad9e-d60b8af7ad0f\"><ac:parameter ac:name=\"title\">Step 5 - Submit your client deliverable</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\"><strong>Submit your client deliverable.</strong></span><span style=\"color: rgb(9,30,66);\"><span>&nbsp;</span></span><span style=\"color: rgb(35,31,32);\">In plain text, send the URL of the web app, plus a brief&nbsp;write-up&nbsp;of what you did.</span><span style=\"color: rgb(9,30,66);\"><span>&nbsp;</span></span><span style=\"color: rgb(35,31,32);\">The mentor will tell you when you are ready to do this.</span></p></ac:rich-text-body></ac:structured-macro><p><br /></p><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "260931702",
    "conflChildrenId": [
      "260833348"
    ]
  },
  {
    "title": "Java 1 - Welcome",
    "content": "<h1><span style=\"color: rgb(86,86,86);\">Welcome!</span></h1><p><span style=\"color: rgb(51,51,51);\">In this course, your team of developers has been contacted by a board game company looking to use their brand recognition to market online games with a retro touch. In particular, they want your team to create a multi-player online version of a&nbsp;<strong>Salvo</strong>-like game engine.&nbsp;<strong>Salvo</strong>&nbsp;was a pencil and paper game that was the basis for the popular&nbsp;<strong>Battleship</strong>&nbsp;game. The basic idea involves&nbsp;guessing where other players have hidden objects. This can be varied to create many different kinds of games with different user interfaces.</span><br /><ac:image ac:height=\"256\" ac:width=\"512\"><ri:attachment ri:filename=\"worddav5204fb99371898c45f48d5ebfe6ecf46.png\" ri:version-at-save=\"1\" /></ac:image><br /><span style=\"color: rgb(51,51,51);\">Your job will be&nbsp;to&nbsp;create a front-end web application that game players interact with, and a back-end game server to manage the games, scoring, and player profiles. You will use the jQuery&nbsp;JavaScript library for the front-end client, and the Spring Boot framework for the Java-based RESTful web server.</span><br /><span style=\"color: rgb(51,51,51);\">In&nbsp;<strong>Part One&nbsp;</strong>of the course, you will implement the core architecture:</span></p><ul><li><span style=\"color: rgb(51,51,51);\">A small Java back-end server to store Salvo game data, and send that data to client apps via a RESTful API.</span></li><li><span style=\"color: rgb(51,51,51);\">A front-end browser-based game interface that graphically shows players the state of the game, including ships they've placed, damage sustained, and scores.</span></li></ul><p><span style=\"color: rgb(51,51,51);\">In&nbsp;<strong>Part Two</strong>&nbsp;of the course, you will implement game play:</span></p><ul><li><span style=\"color: rgb(51,51,51);\">Players can create new games and join games that others have created.</span></li><li><span style=\"color: rgb(51,51,51);\">When a game has both players, players can place their ships on their grids.</span></li><li><span style=\"color: rgb(51,51,51);\">When ships have been placed, players can begin trading salvos (shots) and seeing the results (hits, sinks, and misses).</span></li><li><span style=\"color: rgb(51,51,51);\">When all of a player's ships have been sunk, the game ends and the winner is added to the leaderboard.</span></li></ul><h1><span style=\"color: rgb(86,86,86);\">What is Web Server Development?</span></h1><p><span style=\"color: rgb(51,51,51);\">Web servers are the backbone of the Internet. When you use web apps or many mobile apps, they use web servers so that you can save data, communicate with other users, retrieve information, and perform many more activities that need computational power, persistent data storage, and network bandwidth.</span><br /><span style=\"color: rgb(51,51,51);\">Web servers can be implemented in many languages, including Python, PHP, Ruby on Rails, and Java. Java is particularly common for large web sites. In recent years, with the arrival of Java 8, there has been an explosion of tools for Java web services. A side-benefit of learning&nbsp;Java&nbsp;is that it&nbsp;is the primary language used to develop&nbsp;native Android apps.</span><br /><span style=\"color: rgb(51,51,51);\">Web server development typically involves writing front-end code that runs on mobile apps and web pages, and back-end code that runs on the web server.</span><br /><span style=\"color: rgb(51,51,51);\">In this course, you'll learn how to develop a modern web application using HTML, CSS, and JavaScript to handle all the user interface presentation aspects, and a Java RESTful web service to handle multi-user access and communication, store persistent data and implement complex business logic. More specifically, you'll learn how to:</span></p><ul><li><span style=\"color: rgb(51,51,51);\">Use JavaScript and the jQuery library to</span><ul><li><span style=\"color: rgb(51,51,51);\">send&nbsp;and retrieve&nbsp;data from a web service&nbsp;using AJAX&nbsp;</span></li><li><span style=\"color: rgb(51,51,51);\">construct HTML displays using templates</span></li></ul></li><li><span style=\"color: rgb(51,51,51);\">Use Java and the Spring Boot suite of tools to</span><ul><li><span style=\"color: rgb(51,51,51);\">implement a RESTful API to both the database and application&nbsp;services</span></li><li><span style=\"color: rgb(51,51,51);\">apply modern-day Java programming concepts, such as lambdas, streams, and dependency injection</span></li></ul></li><li><span style=\"color: rgb(51,51,51);\">Use JavaScript Object Notation (JSON) data structures to</span><ul><li><span style=\"color: rgb(51,51,51);\">communicate between your application's&nbsp;JavaScript front-end and Java&nbsp;back-end</span></li><li><span style=\"color: rgb(51,51,51);\">implement the &quot;model&quot; in a model-view-controller&nbsp;</span></li></ul></li></ul><h1><span style=\"color: rgb(86,86,86);\">What reference materials will I need?</span></h1><p><span style=\"color: rgb(51,51,51);\">The primary resources for this course are available online. We have written many of them, and carefully reviewed those we link to. There is a wealth of material online, but some of it is outdated, and much of it is written for experienced programmers.&nbsp;</span><br /><span style=\"color: rgb(51,51,51);\">We will provide links to the most appropriate resources in each task. They have been selected based on&nbsp;their relevance to your task,&nbsp;the amount of prior experience they assume, and their focus &nbsp;on just what you need to know.&nbsp;</span><br /><span style=\"color: rgb(51,51,51);\">Online resources are your best option for learning how to build web applications in Java and how to use the Spring Boot framework. Most introductory&nbsp;books on Java web applications describe other approaches that Spring has replaced. Most books on&nbsp;Spring are written for experienced developers,&nbsp;using&nbsp;versions of Spring that are several years old. Many tasks&nbsp;that were complicated two years ago in Spring have become trivial in the most current versions. Online resources are best here.</span><br /><span style=\"color: rgb(51,51,51);\">When it comes to learning the Java language itself, especially the most basic aspects of Java, such as&nbsp;punctuation, naming rules, arithmetic operations, and such, we think a&nbsp;physical reference can be very helpful, sitting open and ready next&nbsp;to your computer, while you work.&nbsp;We therefore recommend the following book as an optional resource that&nbsp;may be particularly helpful for very new developers, who are often tripped up by tiny details that online articles by developers&nbsp;never think to mention:</span></p><ul><li><span style=\"color: rgb(51,51,51);\">Burd, Barry.&nbsp;<em>Beginning Programming with Java For Dummies</em>&nbsp;4th edition. (ISBN-10: 1118407814)</span></li></ul><p><ac:structured-macro ac:name=\"anchor\" ac:schema-version=\"1\" ac:macro-id=\"b7d4be46-6bed-4986-a23b-167fc080a81c\"><ac:parameter ac:name=\"\">_GoBack</ac:parameter></ac:structured-macro></p>",
    "conflPageId": "260997121",
    "conflChildrenId": [
      "260866073",
      "261095534",
      "261423414",
      "263913528",
      "263913556"
    ]
  },
  {
    "title": "Mobile App - Task 2",
    "content": "<p><a class=\"external-link\" style=\"text-decoration: underline;\" href=\"https://gbstool.learningbydoingtools.com/mc/poa?productID=4978&amp;taskID=1735#introduction\" rel=\"nofollow\"><span style=\"color: rgb(38,34,98);\">INTRODUCTION</span></a></p><h1><span style=\"color: rgb(128,130,133);\">Your Task</span></h1><p><span style=\"color: rgb(35,31,32);\">You have been asked by League Director, Tom Denton, to move forward with developing the mobile web app, which should behave like a native mobile app.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">The steps outlined in this Plan of Attack are one way to accomplish your client's requirements.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">To make your mobile web app behave more like a typical native mobile app, focus on commonly supported HTML5 features for making websites more native-like. Things that work on iPhone, Android, and maybe Windows Phone or Blackberry, and more than one mobile browser, are much better than things that only work on one device and/or one browser.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\"><strong>As part of this task, you will submit the following for review:&nbsp;</strong></span></p><ul><li><span style=\"color: rgb(35,31,32);\">For Mentor Review:</span><ul><li><span style=\"color: rgb(35,31,32);\">HTML for the list of games screen</span></li><li><span style=\"color: rgb(35,31,32);\">HTML for the game detail screen</span></li><li><span style=\"color: rgb(35,31,32);\">CSS&nbsp;for the&nbsp;web app</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">For Client Deliverable: the URL&nbsp;of your mobile website</span><ul><li><span style=\"color: rgb(35,31,32);\">When submitting, document any major changes from the design the client approved.</span></li><li><span style=\"color: rgb(35,31,32);\">Your mentor will&nbsp;advise you as to when you are ready to submit this deliverable to the client.</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">To deliver a URL the client can access, you will need to have your web site running on a web server. There are many ways to host a web site, but in a later task you will need to add a database to your web app. Therefore, we recommend you host your web site at&nbsp;<strong>Firebase</strong>, because&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">It is free for small projects.</span></li><li><span style=\"color: rgb(35,31,32);\">It provides&nbsp;a way to store and retreive data using&nbsp;JavaScript in your web pages.</span></li></ul><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"69354911-e659-45cd-9bfa-d37ca6455ec9\"><ac:parameter ac:name=\"title\">Step 1 - Create your Mobile App</ac:parameter><ac:rich-text-body><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Create the HTML and CSS files</strong>&nbsp;to implement your design in the main&nbsp;NYSL&nbsp;directory.</span><ol><li><span style=\"color: rgb(35,31,32);\">Build these files in small steps.&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">First create the HTML with the content you need to show.</span></li><li><span style=\"color: rgb(35,31,32);\">Then, add CSS until it looks the way you want.</span></li><li><span style=\"color: rgb(35,31,32);\">Keep the HTML pure and simple. Avoid putting styling and presentation code in the HTML.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test frequently</strong>&nbsp;by saving and viewing the files locally.</span><ol><li><span style=\"color: rgb(35,31,32);\">First test in a desktop browser.</span></li><li><span style=\"color: rgb(35,31,32);\">Then, test using something that imitates a smartphone view.&nbsp;See&nbsp;<em>Resources</em>&nbsp;for mobile testing tools.</span></li></ol></li></ol><p><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br /><strong>Submit</strong>&nbsp;the HTML and CSS components as specified under&nbsp;<em>Submit Your Work</em>.</p></ac:rich-text-body></ac:structured-macro><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"2178e952-53cb-4a5c-bbeb-24d9b8b974ec\"><ac:parameter ac:name=\"title\">Step 2 - Deploy your web app</ac:parameter><ac:rich-text-body><div><div class=\"sc-TOsTZ hghlyc\"><div><div class=\"page view\"><div class=\"wiki-content\"><p><span style=\"color: rgb(35,31,32);\">Now that you have some web pages, it's time to deploy them to Firebase, so that you will have a public URL, and a place to store data in a later task. Deployment is done using the Firebase command line (CLI) tool in a command shell.</span><br /><span style=\"color: rgb(35,31,32);\">Note: You will need to run the&nbsp;<strong>firebase deploy</strong>&nbsp;command described below to move your files to the Firebase server, whenever you want to release a new version.&nbsp;</span></p><h2><span style=\"color: rgb(128,130,133);\">Install Node</span></h2><p><span style=\"color: rgb(35,31,32);\">The Firebase CLI is built using the&nbsp;<strong>node</strong>&nbsp;scripting system, so you need to install that first.</span></p><ol><li><span style=\"color: rgb(35,31,32);\">Go to&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://nodejs.org/en/download/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">nodejs.org/en/download/</span></span></a><span style=\"color: rgb(35,31,32);\">.</span><ol><li><span style=\"color: rgb(35,31,32);\">Select and download the right version for your operating system. &nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">Open the download pkg and follow the instructions to install.&nbsp;</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!&nbsp;</strong>Verify that both&nbsp;<strong>node</strong>&nbsp;and&nbsp;<strong>npm</strong>&nbsp;are installed and working.</span><ol><li><span style=\"color: rgb(35,31,32);\">In a command shell, execute&nbsp;<strong>node --version</strong></span></li><li><span style=\"color: rgb(35,31,32);\">In a command shell, execute&nbsp;<strong>npm --version</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Both should run without error and print some version information.</span></li></ol></li></ol><h2><span style=\"color: rgb(128,130,133);\">Set Up Firebase</span></h2><p><span style=\"color: rgb(35,31,32);\">To use Firebase, you need to</span></p><ul><li><span style=\"color: rgb(35,31,32);\">create a free account at Firebase</span></li><li><span style=\"color: rgb(35,31,32);\">install&nbsp;Firebase command line (CLI) tool</span></li></ul><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Follow the&nbsp;instructions at&nbsp;</strong></span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://www.firebase.com/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><strong><span style=\"text-decoration: underline;\">Firebase</span></strong></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;for signing up.</span><ol><li><span style=\"color: rgb(35,31,32);\">This is quite easy to do. If you have a Google account, it is&nbsp;almost trivial. &nbsp;Click 'Login to Legacy Console'.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Install the Firebase CLI.</strong></span><ol><li><span style=\"color: rgb(35,31,32);\">Once you have Node.js and npm installed, you can install the Firebase command line tools with npm. &nbsp;In the command shell, execute&nbsp;<strong>npm install -g firebase-tools</strong></span><ul><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span></li></ul></li></ol></li></ol><p><span style=\"color: rgb(35,31,32);\">You may receive an&nbsp;error that&nbsp;indicates that you do not have permission to write to the directories that npm uses. While you can use sudo, it is cleaner not to use&nbsp;sudo&nbsp;when installing with npm&nbsp;packages. Change the owner of npm's directories to the name of the current user with the following command and then try the install again:&nbsp;</span><br />sudo chown -R $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share}</p><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Test!&nbsp;</strong>Execute&nbsp;<strong>firebase --version&nbsp;</strong>in a command shell.</span><ul><li style=\"list-style-type: none;\"><ul><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span></li></ul></li></ul></li></ol><p><span style=\"color: rgb(35,31,32);\">If you get the error 'firebase command not found' you may need to check that the npm PATH is set correctly.&nbsp;1.Follow the instructions below to set the path for your specific type of machine&nbsp;2.Execute&nbsp;<strong>npm install -g firebase-tools</strong>&nbsp;3.Test with&nbsp;<strong>firebase --version</strong>&nbsp;in the command shell. &nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong>Set the PATH for&nbsp;Mac:&nbsp;</strong></span><ul><li><span style=\"color: rgb(35,31,32);\">In the&nbsp;command shell, execute&nbsp;<strong>npm get prefix&nbsp;</strong>to get your&nbsp;npm path. (i.e.&nbsp;/Users/name/.node_modules/)&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">&nbsp;To open your .bashrc file execute the following in the command shell:</span></li><li>touch .bashrc</li></ul></li></ul><p>open -a TextEdit.app .bashrc<br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span></p><ul><li style=\"list-style-type: none;\"><ul><li style=\"list-style-type: none;\"><ul><li style=\"list-style-type: none;\"><ul><li style=\"list-style-type: none;\"><ul><li><span style=\"color: rgb(35,31,32);\">Add&nbsp;<strong>export&nbsp;PATH = &quot;<em>your-npm-path</em>/bin:$PATH&quot;</strong>&nbsp;to your .bashrc file and Save. Enter<em>&nbsp;</em>the path you got when you did&nbsp;<strong>npm get prefix</strong>&nbsp;instead of&nbsp;<em>your-npm-path</em>&nbsp;in the above.</span></li><li><span style=\"color: rgb(35,31,32);\">Open a new terminal window and execute&nbsp;<strong>echo $PATH&nbsp;</strong>to see if the&nbsp;directory is now in the PATH.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\"><strong>Set the PATH for Windows:</strong></span><ul><li><span style=\"color: rgb(35,31,32);\">You need to add&nbsp;<strong><em>your-npm-path</em>\\bin</strong>&nbsp;to your PATH environment variable.</span><ol><li><span style=\"color: rgb(35,31,32);\">Execute&nbsp;<strong>npm get prefix</strong>&nbsp;in the command shell to get&nbsp;<em>your-npm-path</em>. (i.e. C:\\Users\\\\{yourName}\\AppData\\npm)</span></li><li><span style=\"color: rgb(35,31,32);\">Add&nbsp;<strong><em>your-npm-path</em>\\bin</strong>&nbsp;to your PATH environment variable per instruction&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.computerhope.com/issues/ch000549.htm\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">here</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;for your specific Windows machine.&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">Close all remaining windows by clicking&nbsp;OK.</span></li><li><span style=\"color: rgb(35,31,32);\">Reopen Command prompt window, and run your code.</span></li></ol></li></ul></li></ul></li></ul></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">&nbsp;</span></p><h2><span style=\"color: rgb(128,130,133);\">Initialize and Deploy Your Web App</span></h2><p><span style=\"color: rgb(35,31,32);\">Now it's time to turn your web site into a Firebase web app. That involves two parts:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Create an app in your Firebase account and use the&nbsp;Firebase CLI to initialize the web site. That means creating some files in the web site with information that Firebase needs.</span></li><li><span style=\"color: rgb(35,31,32);\">Use the Firebase CLI to copy your web site to the Firebase server. This is called&nbsp;<strong>deploying</strong>.</span></li></ul><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Create an app at Firebase.</strong></span><ol><li><span style=\"color: rgb(35,31,32);\">Go to&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://www.firebase.com/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Firebase</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;and click 'See our new website'. &nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">Click 'Get Started For Free' to login using a google account.</span></li><li><span style=\"color: rgb(35,31,32);\">Click 'create new project'.</span></li><li><span style=\"color: rgb(35,31,32);\">Input a name and click 'Create Project'</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Create matching directory</strong>&nbsp;on your&nbsp;computer</span><ol><li><span style=\"color: rgb(35,31,32);\">Create a new folder on your computer with the same name as the web app just created on Firebase.&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">Put your web app files (created in Task 1) in your new directory.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Initialize the web site</strong></span><ol><li><span style=\"color: rgb(35,31,32);\">In the command shell, cd into the new&nbsp;web app directory (i.e. my-new-app-name) and no deeper. You need to be inside the directory that contains the top level HTML files.</span></li><li><span style=\"color: rgb(35,31,32);\">Execute&nbsp;<strong>firebase login</strong>&nbsp;to log into the Firebase site.</span></li><li><span style=\"color: rgb(35,31,32);\">Execute&nbsp;<strong>firebase init</strong></span><ol><li><span style=\"color: rgb(35,31,32);\">Use the 'Space Bar' to select hosting and database services (arrows to move up and down). Then use 'Enter' to confirm selection.</span><span>&nbsp;</span><span class=\"confluence-embedded-file-wrapper confluence-embedded-manual-size\"><ac:image ac:height=\"342\" ac:width=\"624\"><ri:attachment ri:filename=\"worddava529631bd9d0700d0d163f188f34dd4f.png\" ri:version-at-save=\"1\" /></ac:image></span></li><li><span style=\"color: rgb(35,31,32);\">Select the firebase app that you created previously from the firebase console.</span><span>&nbsp;</span><span class=\"confluence-embedded-file-wrapper confluence-embedded-manual-size\"><ac:image ac:height=\"342\" ac:width=\"624\"><ri:attachment ri:filename=\"worddavc44a0757ac32f6618080ac48d21e16d6.png\" ri:version-at-save=\"1\" /></ac:image></span></li><li><span style=\"color: rgb(35,31,32);\">When prompted to select the database rules, leave the field empty and press 'Enter' to create the Database rules file.</span><span>&nbsp;</span><span class=\"confluence-embedded-file-wrapper confluence-embedded-manual-size\"><ac:image ac:height=\"342\" ac:width=\"624\"><ri:attachment ri:filename=\"worddavaee1b41eb463521d4917bbc8260e673a.png\" ri:version-at-save=\"1\" /></ac:image></span></li><li><span style=\"color: rgb(35,31,32);\">Input the name of your public folder (will be folder that contains index.html) and hit 'Enter'. The default name is 'public' and it is recommended to leave it as such.</span><span>&nbsp;</span><span class=\"confluence-embedded-file-wrapper confluence-embedded-manual-size\"><ac:image ac:height=\"342\" ac:width=\"624\"><ri:attachment ri:filename=\"worddav8c1d7419049e65a97a440847285e6f61.png\" ri:version-at-save=\"1\" /></ac:image></span></li><li><span style=\"color: rgb(35,31,32);\">Type&nbsp;'y' and press 'Enter' to configure for single-page-app.</span><span>&nbsp;</span><span class=\"confluence-embedded-file-wrapper confluence-embedded-manual-size\"><ac:image ac:height=\"342\" ac:width=\"624\"><ri:attachment ri:filename=\"worddav7e21b64d455f7b1e5206ffbf0fc6385a.png\" ri:version-at-save=\"1\" /></ac:image></span></li><li><span style=\"color: rgb(35,31,32);\">If prompted to overwrite the index.html,&nbsp;type&nbsp;'N' and press 'Enter'.</span></li></ol></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Rearrange your web app file structure.</strong>&nbsp;When it initializes, Firebase will create some additional files in your directory with information that the Firebase CLI needs to communicate with the Firebase site. &nbsp;One of these is a 'public' directory.&nbsp;</span><span>&nbsp;</span><span class=\"confluence-embedded-file-wrapper confluence-embedded-manual-size\"><ac:image ac:height=\"388\" ac:width=\"624\"><ri:attachment ri:filename=\"worddav4efbe7026560323672a2d15d08453095.png\" ri:version-at-save=\"1\" /></ac:image></span><span style=\"color: rgb(35,31,32);\">As needed, rearrange your web app file structure into a structure similar to&nbsp;the following:</span><ul><li><span style=\"color: rgb(35,31,32);\">your-app-name/&nbsp; &nbsp;public/&nbsp; &nbsp; &nbsp; index.html&nbsp; &nbsp; &nbsp; other.html&nbsp; &nbsp; &nbsp; styles/&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;style.css&nbsp; &nbsp; &nbsp; scripts/&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;code.js</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">Add firebase to your new webapp project from the firebase console.</span><ol><li><span style=\"color: rgb(35,31,32);\">Copy and paste the code snippet at the bottom of your HTML or before other&nbsp;</span><span style=\"color: rgb(199,37,78);\">script</span><span style=\"color: rgb(35,31,32);\">&nbsp;tags.</span></li><li><span style=\"color: rgb(35,31,32);\">Save index.html with new firebase code.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\">Execute&nbsp;<strong>firebase deploy</strong>.</span><ol><li><span style=\"color: rgb(35,31,32);\">This will send all the files in your HTML directory to Firebase.</span></li><li><span style=\"color: rgb(35,31,32);\">Get your web app URL</span></li></ol></li></ol><h2><span style=\"color: rgb(128,130,133);\">Test Your Firebase Web App</span></h2><p><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Enter the Firebase URL for your app&nbsp;into a web browser address field. Verify that all the pages appear, with images, and working links.</span><br /><span style=\"color: rgb(35,31,32);\">If you get a&nbsp;<strong>not found</strong>&nbsp;error,&nbsp;check for a&nbsp;typing error in the URL. Look for&nbsp;any error messages in the command shell when you deployed.</span><br /><span style=\"color: rgb(35,31,32);\">Now test your app on mobile devices.&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Open the page in your device browser.</span></li><li><span style=\"color: rgb(35,31,32);\">Verify that the pages lay out properly.</span></li></ul><p><br /></p></div></div></div></div></div></ac:rich-text-body></ac:structured-macro><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"c8de563c-178d-4861-a862-8d064704341e\"><ac:parameter ac:name=\"title\">Step 3 - Make the web app look native</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Making a web app behave like a native app just involves adding a special tag to the HTML files and putting a bookmark to your web app on the home screen of your mobile device. You will also need to find or create an icon to display on the homescreen. The references in&nbsp;<em>Resources</em>&nbsp;give the details.</span></p><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Add the appropriate META tags</strong>&nbsp;to make the web app standalone on iOS and Android. &nbsp;See&nbsp;<em>Resources</em>&nbsp;for examples.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Add the web app to your home screen</strong>.</span><ol><li><span style=\"color: rgb(35,31,32);\">Use the browser option on your device to save the page to your homescreen.</span></li><li><span style=\"color: rgb(35,31,32);\">Verify that the correct icon for your page appears on your device homescreen.</span></li><li><span style=\"color: rgb(35,31,32);\">Verify that tapping the icon opens your page.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Find or create&nbsp;a home screen icon for your web app&nbsp;</strong>and update your HTML to use it.</span></li></ol><p><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />Remember to run 'firebase deploy' from your app folder in the command shell after you update your HTML to see your changes online.<br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />If you used CDN versions of JS/CSS and your app is not displaying correctly, it's most likely because CDN versions of JS break when deployed to apps. One fix is to download the JS/CSS files and change your SCRIPT SRC to local links per&nbsp;<a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://forum.appgyver.com/t/jquery-in-module/1850/7\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">this example</span></span></a>.&nbsp;&nbsp;<span style=\"color: rgb(255,0,0);\"><strong>This link doesn't work</strong></span></p><p><br /></p><p class=\"auto-cursor-target\"><br /></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"5c659be1-7fb2-4276-bc61-b20f53a5b3ab\"><ac:parameter ac:name=\"title\">Step 4 - Submit your client deliverable</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br /><span style=\"color: rgb(35,31,32);\"><strong>Submit your client deliverable.</strong></span><span style=\"color: rgb(9,30,66);\"><span>&nbsp;</span></span><span style=\"color: rgb(35,31,32);\">In plain text, send the URL of the web app, plus a brief&nbsp;write-up&nbsp;of what you did.</span><span style=\"color: rgb(9,30,66);\"><span>&nbsp;</span></span><span style=\"color: rgb(35,31,32);\">Your mentor will tell you when you are ready to do this.</span></p></ac:rich-text-body></ac:structured-macro><p><br /></p><p class=\"auto-cursor-target\"><br /></p><p class=\"auto-cursor-target\"><br /></p><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "260997145",
    "conflChildrenId": [
      "260997149"
    ]
  },
  {
    "title": "Task 2 Resources",
    "content": "<h1 style=\"\"><span style=\"color: rgb(128,130,133);\">Background</span></h1><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Web site hosting with&nbsp;Firebase</span></h2><p style=\"\"><span style=\"color: rgb(35,31,32);\">You can create and test HTML pages on your local machine by simply opening them&nbsp;in a browser, but&nbsp;in order for your client and users to see your site, you have to&nbsp;<strong>deploy</strong>&nbsp;it to a&nbsp;<strong>web host</strong>. A site on a web host will have a public URL that you can send to your client for testing.</span><br /><span style=\"color: rgb(35,31,32);\">For this course, you are going to deploy your web app to&nbsp;<strong><a href=\"http://firebase.com\">firebase.com</a></strong>, which we'll usually refer to as&nbsp;<strong>Firebase</strong>. Firebase&nbsp;is one of the most popular of the new&nbsp;<strong>platform as a service</strong>&nbsp;(PaaS) companies. With Firebase, you get:</span></p><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\">Free hosting for web pages for modest amounts of traffic</span></li><li><span style=\"color: rgb(35,31,32);\">A&nbsp;<strong>command-line tool</strong>&nbsp;for uploading pages from your machine to Firebase</span></li><li><span style=\"color: rgb(35,31,32);\">The ability to store and access data for your web app at Firebase, using JavaScript in your web page</span></li></ul><p style=\"\"><span style=\"color: rgb(35,31,32);\">The last feature will become important later in the course. It's what will turn your website into a real interactive&nbsp;<strong>web app</strong>.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">To use Firebase, you set up a free account, download the Firebase Command Line Interface tool (CLI), and then create one or more<strong>&nbsp;applications</strong>&nbsp;on Firebase.</span></p><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Command Line Interfaces</span></h2><p style=\"\"><span style=\"color: rgb(35,31,32);\">Before the Macintosh, most users interacted with their computer using a&nbsp;<strong>command line interface</strong>&nbsp;(CLI). A CLI is&nbsp;a window within which you type commands to make the computer do things, such as create, move, and print files, and run programs. After the Macintosh,&nbsp;the point-and-click WYSIWYG (what you see is what you get) graphical user interface (GUI) became the most common way to do these activities.</span><br /><span style=\"color: rgb(35,31,32);\">However, software developers still often use the command shell. This is partly because you can do more in a command shell, and partly because the open source community does&nbsp;not have the resources to build and maintain multiple graphical user interfaces. All operating systems still include a command line interface.</span></p><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\">In Unix / Linux, it may be called the console.</span></li><li><span style=\"color: rgb(35,31,32);\">In MacOS, you run the&nbsp;<strong>terminal</strong>&nbsp;program.</span></li><li><span style=\"color: rgb(35,31,32);\">In Windows, you run the&nbsp;<strong>cmd</strong>&nbsp;program.</span><ul><li><span style=\"color: rgb(35,31,32);\">Windows 7 and later also have&nbsp;<strong>PowerShell</strong>, which has many more features.</span></li></ul></li></ul><p style=\"\"><span style=\"color: rgb(35,31,32);\">The Firebase CLI&nbsp;is a command line tool. To use this tool, you need to know how to do a few basic things, such as:</span></p><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\">Open a command line interface on your machine.</span></li><li><span style=\"color: rgb(35,31,32);\">Navigate inside the CLI to different directories.</span></li><li><span style=\"color: rgb(35,31,32);\">Enter and run commands.</span></li></ul><h1 style=\"\"><span style=\"color: rgb(128,130,133);\">Required Resources</span></h1><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Mobile Web Programming Concepts</span></h2><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\">Chapter 3 of&nbsp;<em>Build Mobile Websites and Apps for Smart Devices</em>&nbsp;by Earle Castledine, Myles Eftos, Max Wheeler &ndash; Covers how to build and style mobile web apps using CSS and HTML.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://blog.teamtreehouse.com/optimizing-mobile-web-apps-ios\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Optimizing Mobile Web Apps for iOS</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Making web apps look native on iOS, updated for iOS7.&nbsp;&nbsp;</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://blog.woorank.com/2014/06/adding-an-iphoneipad-icon-for-your-website/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Add a Shortcut to Your (iOS) Home Screen&nbsp;</span></a><span style=\"color: rgb(35,31,32);\">&ndash; Provides instructions on how to add a short cut to your home screen on an iOS device (e.g., iPhone, iPad).</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.mobilexweb.com/blog/home-screen-web-apps-android-chrome-31\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Home screen web apps for Android</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;--&nbsp;Shows how to set up your web app so that a user can add it to his/her home screen on an Android device.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.creativepulse.gr/en/blog/2014/hello-world-web-app-for-android-and-ios\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Hello World Web App for Android and iOS</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- A very simple, recent, annotated example of the HTML and icons you need to create a web app that can be put on the home screen in either Android or iOS.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://www.iconfinder.com/free_icons\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">IconFinder&nbsp;Free Icon Site</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- If you need a distinctive icon for your app, this is one of many sites offering free ones</span><ul><li><span style=\"color: rgb(35,31,32);\">Be careful! Many such sites in the past have contained malware.</span></li></ul></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.gieson.com/Library/projects/utilities/icon_slayer/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Icon Slayer Icon Generator</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- An online tool that takes an icon image and outputs it in the many sizes desired by Android and iOS, along with some nice customization options</span></li></ul><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">HTML and CSS Review</span></h2><ul style=\"\"><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://html5doctor.com/element-index/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">HTML Element Index</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;at HTML5 Doctor &ndash; A current and complete listing of what's in HTML5.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://htmlreference.io/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">HTML Reference</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- alphabetic reference, with links to the handy &quot;Can I Use&quot; site and the Mozilla Developer Network.</span></li></ul><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Node</span></h2><p style=\"\"><span style=\"color: rgb(35,31,32);\">The Firebase&nbsp;command line (CLI) tool uses&nbsp;<strong>node</strong>. Node (also called nodeJS)&nbsp;is a&nbsp;<strong>scripting system</strong>. Scripting systems help developers automate command shell tasks by writing programs to do common tasks, such as copy files, run compilers, and so on. These programs are called&nbsp;<strong>scripts</strong>.</span><br /><span style=\"color: rgb(35,31,32);\">Some scripting systems are specific to particular operating systems, e.g.,&nbsp;<strong>bash</strong>&nbsp;for&nbsp;Unix command shells, and&nbsp;<strong>bat</strong>&nbsp;files for Windows&nbsp;<strong>cmd</strong>&nbsp;shells. Other scripting systems are more general and run on many operating systems, e.g.,&nbsp;<strong>Perl</strong>,&nbsp;<strong>Python</strong>, and&nbsp;<strong>Ruby</strong>.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>node</strong>&nbsp;lets you write and run command shell scripts in&nbsp;JavaScript. It was originally designed to create web servers&nbsp;in JavaScript. As more and more libraries in JavaScript were written for&nbsp;<strong>node</strong>, it became important to simplify finding, downloading, and installing the libraries, so a tool called&nbsp;<strong>npm</strong>&nbsp;(node package manager) was created.&nbsp;These days,&nbsp;<strong>npm&nbsp;</strong>is installed with&nbsp;<strong>node</strong>&nbsp;automatically.&nbsp;<strong>node</strong>&nbsp;is available for Unix, Windows, and MacOS.</span><br /><span style=\"color: rgb(35,31,32);\">The Firebase CLI is built with&nbsp;<strong>node</strong>&nbsp;and you install it with&nbsp;<strong>npm</strong>. You don't need to do any&nbsp;<strong>node</strong>&nbsp;programming yourself.</span></p><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Firebase&nbsp;Web Hosting</span></h2><p style=\"\"><span style=\"color: rgb(35,31,32);\">There are many companies that provide web site hosting. These are&nbsp;primarily designed as places to store your HTML, CSS, and other web site assets. Many, though not all, also allow you to run one or more web application systems, such as&nbsp;<strong>PHP</strong>,&nbsp;<strong>Java</strong>,&nbsp;<strong>Python</strong>, or&nbsp;<strong>Ruby on Rails</strong>.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Firebase&nbsp;</strong>is different. It's primarily a place to host data for web and mobile applications. However, it also happens to support hosting static web pages. Firebase would not be your best choice if you just wanted to host a normal static web site. But since you will need&nbsp;to store and retrieve live data later in the project, it makes sense to put your website on Firebase&nbsp;from the start.&nbsp;</span></p><ul style=\"\"><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://www.firebase.com/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Firebase&nbsp;home page</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- go there&nbsp;to get a free account. If you have a Google account, you're almost done.&nbsp;</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://www.firebase.com/docs/hosting/quickstart.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Hosting&nbsp;Setup</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- How to set up&nbsp;your machine so that you can deploy your HTML pages to&nbsp;Firebase.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.developereconomics.com/finding-right-baas/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Finding the right BaaS</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- An overview with links to&nbsp;companies like Firebase&nbsp;that provide&nbsp;backend services for mobile apps.</span><ul><li><span style=\"color: rgb(35,31,32);\">Note: <a href=\"http://Parse.com\">Parse.com</a> is being turned off by Facebook. No new accounts can be created.</span></li></ul></li></ul><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Text Editor</span></h2><p style=\"\"><span style=\"color: rgb(35,31,32);\">HTML, CSS and JavaScript are all stored plain text files. Many&nbsp;text editors will work. Here are some free ones that we recommend.</span><br /><span style=\"color: rgb(35,31,32);\">Whichever you choose, the first thing you need to do is make sure that hitting the Tab key inserts 2 spaces, rather than a tab character or 4 or 8 spaces.</span></p><h3 style=\"\"><span style=\"color: rgb(128,130,133);\"><strong>Linux</strong></span></h3><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\"><strong>Emacs</strong>&nbsp;- Included or available with most Unix systems, somewhat complex to learn though.</span><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://ergoemacs.org/emacs/emacs_tabs_space_indentation_setup.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">How to make tab insert spaces in&nbsp;Emacs</span></a></li></ul></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://vim.sourceforge.net/download.php\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><strong>Vim</strong></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;- The other popular Unix editor.</span><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://vim.wikia.com/wiki/Converting_tabs_to_spaces\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">How to make tab insert spaces in vim</span></a></li></ul></li></ul><h3 style=\"\"><span style=\"color: rgb(128,130,133);\"><strong>MacOS</strong></span></h3><ul style=\"\"><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.barebones.com/products/textwrangler/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><strong>TextWrangler</strong></span></a><span style=\"color: rgb(35,31,32);\"><strong>&nbsp;-&nbsp;Free download, many more features than&nbsp;TextEdit.</strong></span><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://blog.ryanrampersad.com/2011/09/tabs-to-spaces-in-textwrangler/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">How to make tab insert spaces in&nbsp;TextWrangler</span></a></li></ul></li></ul><h3 style=\"\"><span style=\"color: rgb(128,130,133);\"><strong>Windows</strong></span></h3><ul style=\"\"><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://notepad-plus-plus.org/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><strong>Notepad++</strong></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;- A popular replacement for Notepad with many features. (Note: Do not use Notepad.)</span><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://stackoverflow.com/questions/6728313/notepad-tab-settings\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">How to make tab insert spaces in Notepad++</span></a></li></ul></li></ul><p style=\"\"><span style=\"color: rgb(35,31,32);\">Do&nbsp;<strong>not</strong>&nbsp;use any of the following:</span></p><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\">Word processors, like Microsoft Word or&nbsp;WordPad, or&nbsp;OpenOffice:&nbsp;In some cases these generate files that simply don't work with a web browser. In other cases, like Word, they generate very verbose non-standard HTML.</span></li><li><span style=\"color: rgb(35,31,32);\">WYSIWYG (what you see is what you get) HTML editors like Adobe Dreamweaver or Microsoft Expression: These hide what's happening underneath and have their own learning curve.</span></li><li><span style=\"color: rgb(35,31,32);\">Super-basic text editors like Notepad: These give you too little editing control over things like tab characters, and no support for writing syntactically valid HTML and CSS.</span></li></ul><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Command Line Interfaces</span></h2><h3 style=\"\"><span style=\"color: rgb(128,130,133);\"><strong>Unix, Linux, MacOS X</strong></span></h3><p style=\"\"><span style=\"color: rgb(35,31,32);\">The Macintosh has Unix underneath. The same basic commands are used in all of these systems. The only thing that varies is how you open the command shell.</span></p><ul style=\"\"><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://linuxcommand.org/lc3_learning_the_shell.php\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Learning the Shell</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- How you open a Linux shell depends on what Linux or Unix you have, but it's highly unlikely that you are a Linux user and don't already know about command shells.&nbsp;</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://blog.teamtreehouse.com/introduction-to-the-mac-os-x-command-line\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Introduction&nbsp;to the Macintosh command line</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Shows you how to use Terminal in the MacOS system.</span></li></ul><h3 style=\"\"><span style=\"color: rgb(128,130,133);\"><strong>Windows</strong></span></h3><p style=\"\"><span style=\"color: rgb(35,31,32);\">Windows uses a different command line language. It has two shell programs: the older, simpler&nbsp;<strong>cmd</strong>, available in basically every version of Windows you'll run into on the desktop, and the more powerful but more complicated&nbsp;<strong>PowerShell</strong>&nbsp;in&nbsp;Windows 7 and later.</span></p><ul style=\"\"><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.7tutorials.com/command-prompt-how-use-basic-commands\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Command Prompt &ndash; How to use basic commands</span></a></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://technet.microsoft.com/en-us/library/cc947813(v=ws.10).aspx\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">How to open the Windows command prompt with administrator access</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Do this only if some command fails because Windows says you don't have the necessary privileges. You must&nbsp;know the password for administrator access on your machine.</span></li></ul><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Testing Tools</span></h2><p style=\"\"><span style=\"color: rgb(35,31,32);\">While smartphone web browsers can view most websites as is, many sites do not work well on tiny screens. Testing for this problem is challenging because there are many different screen sizes, especially if you include 7 and 10-inch tablets. Therefore, it's very useful to have one or more tools that let you quickly see your mobile site in a different small phone-sized window.</span></p><ul style=\"\"><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://quirktools.com/screenfly/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Quirktools&nbsp;Screenfly</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Enter a URL and select a device to see how the site looks on that device.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://developers.google.com/web/tools/chrome-devtools/iterate/device-mode/?hl=en\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Google Chrome Emulator for Mobile Devices</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Allows you to emulate a mobile device to see how your web app would look on the device.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://sixrevisions.com/tools/10-excellent-tools-for-testing-your-site-on-mobile-devices/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">10 Excellent Tools for Testing Your Site on Mobile Devices</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- A variety of tools, including simulators and&nbsp;validators.</span></li></ul><h1 style=\"\"><span style=\"color: rgb(128,130,133);\">Additional Resources</span></h1><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Mobile Web Programming Concepts</span></h2><ul style=\"\"><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://37signals.com/svn/posts/3439-design-decisions-projects-on-basecamp-for-iphone\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Design Decisions: Projects on Basecamp for iPhone</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- A case study of what's involved in going from desktop Basecamp to iPhone.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.html5rocks.com/en/mobile/mobifying/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Mobifying HTML5rocks</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- A case study of what was involved in making the HTML5rocks website mobile friendly.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://blog.forecast.io/its-not-a-web-app-its-an-app-you-install-from-the-web/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">It's not a web app. It's an app you install from the web.</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Provides lessons learned on making a mobile web app more like a native mobile app.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://mobiforge.com/news-comment/what-you-can-learn-ft-web-app-interview-with-steve-pinches\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">What You Can Learn from the FT Web App: Interview with Steve Pinches</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Describes what you can learn from the Financial Times web app; an interview with the Financial Times of London about why in 2011 they&nbsp;dropped their native mobile app in favor of an HTML5 web app.</span></li></ul>",
    "conflPageId": "260997149",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Task 3 - Resources",
    "content": "<h1 style=\"\"><span style=\"color: rgb(128,130,133);\">Background</span></h1><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Responsive web design</span></h2><p style=\"\"><span style=\"color: rgb(35,31,32);\">Responsive web design refers to a web page design adapting appropriately to different delivery platforms, focusing primarily on size variations. Adapting means more than simply filling the width of the screen. It means adjusting what is visible, e.g., not showing some elements if the screen is too small, or laying elements out differently, as the ratio of height to width changes.</span><br /><span style=\"color: rgb(35,31,32);\">There are two key elements in responsive web design:</span></p><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\"><strong>CSS media queries&nbsp;</strong>let you write CSS code that uses a set of CSS rules only if certain conditions are true, such as the page is being printed, or displayed on a screen, or has at least a certain width.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Flexible grid layouts</strong>&nbsp;are predefined CSS classes representing variously-sized&nbsp;columns, e.g., 2 columns across, 3 across, and so on,&nbsp;specified in percentage widths. You use media queries to select which columns to put items in for different screen sizes. This leads to layouts that are neatly aligned, adjust smoothly over&nbsp;modest changes, and&nbsp;switch cleanly when the size changes past a certain point.&nbsp;</span></li></ul><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Twitter Bootstrap</span></h2><p style=\"\"><span style=\"color: rgb(35,31,32);\">Quite a few libraries of CSS and JavaScript have been developed to support responsive design. Of these, the most popular right now is Bootstrap from Twitter. The advantages of using Twitter Bootstrap are:</span></p><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\">Someone else has put a lot of thought into the design.</span></li><li><span style=\"color: rgb(35,31,32);\">The code has been tested and used by&nbsp;thousands&nbsp;of developers.</span></li><li><span style=\"color: rgb(35,31,32);\">If you get stuck, there are a lot of users online to ask for help.</span></li></ul><p style=\"\"><span style=\"color: rgb(35,31,32);\">Another popular competitor to Bootstrap is Foundation. See&nbsp;<em>Resources</em>&nbsp;for links to both, but use Bootstrap here.</span></p><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Single-page web apps</span></h2><p style=\"\"><span style=\"color: rgb(35,31,32);\">The most common way to make a mobile web app respond quickly and robustly, even in the face of poor network access, is to make it a single page web app. That means, instead of having each screen be one web page, as is normal on a desktop website, you have just one page with all the content. Once it is downloaded, no further network access is needed. You use CSS and JavaScript to hide and show just one part of the page at a time. This is both quick and allows you to add fancy transitions between &quot;pages.&quot;</span><br /><span style=\"color: rgb(35,31,32);\">This technique is useful in desktop websites as well. For example, there are very nice libraries for doing presentations&nbsp;in HTML, such as&nbsp;<strong>reveal.js</strong>, that put all slides in one page and use JavaScript and CSS to manage transitions between slides.</span></p><h1 style=\"\"><span style=\"color: rgb(128,130,133);\">Required Resources</span></h1><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Mobile Web Programming Concepts</span></h2><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\">Chapter 4 of&nbsp;<em>Build Mobile Websites and Apps for Smart Devices</em>&nbsp;by Earle Castledine, Myles Eftos, Max Wheeler &ndash; Discusses how to do animated transitions.</span><ul><li><span style=\"color: rgb(35,31,32);\">Stop when you get to the section on AJAX.</span></li></ul></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://coding.smashingmagazine.com/2011/01/12/guidelines-for-responsive-web-design/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Guidelines for Responsive Web Design</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- A nice overview of the various techniques involved.</span></li><li><span style=\"color: rgb(35,31,32);\">Twitter Bootstrap:</span><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.bootstrapcdn.com/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Bootstrap CDN link</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- This site gives the HTML link to use to load Bootstrap from a remote server.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://www.codeproject.com/Articles/1113048/Creating-Responsive-Website-using-Bootstrap\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Creating a Responsive Website with Bootstrap</span></span></a></li></ul></li></ul><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">CSS Animations</span></h2><ul style=\"\"><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://caniuse.com/css-animation\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Can I Use...? table&nbsp;</span></span></a><span style=\"color: rgb(35,31,32);\">of browser support for various CSS3 animations &ndash; Before adding a new animation, or code, to work around a limitation, use this or similar sites to see what's supported.</span></li></ul><h1 style=\"\"><span style=\"color: rgb(128,130,133);\">Additional Resources</span></h1><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Responsive Web Design</span></h2><ul style=\"\"><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://caniuse.com/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Compatibility Tables for Support of HTML5, CSS3, SVG and More in Desktop and Mobile Browsers</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- A comprehensive, readable summary of what features are supported by what browsers on what mobile devices.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.quirksmode.org/m/css.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">CSS Contents and Browser Compatibility - Mobile</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Another excellent resource for what works where.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://www.sitepoint.com/most-popular-frontend-frameworks-compared/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">5 Most Popular&nbsp;FrontEnd&nbsp;Frameworks Compared</span></span></a></li></ul><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">jQuery</span></h2><ul style=\"\"><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://net.tutsplus.com/tutorials/javascript-ajax/14-helpful-jquery-tricks-notes-and-best-practices/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">14 Helpful jQuery Tricks, Notes, and Best Practices</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;- Article with helpful tips for writing jQuery code.</span></li></ul><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">jQuery Mobile</span></h2><p style=\"\"><span style=\"color: rgb(35,31,32);\">Most mobile web interfaces rely heavily on JavaScript, and most use a JavaScript library to take care of the many common tasks, such as animation and pitfalls (e.g., browser differences). Because it is so widely used and documented, the book recommends using the jQuery JavaScript library. jQuery, developed for desktop web applications, can be used for mobile web apps, but even more appropriate is jQuery Mobile.</span><br /><span style=\"color: rgb(35,31,32);\">Here are some good tutorials on using jQuery Mobile. In addition, it's always a good idea to look for more offerings. Try searching for jQuery mobile tutorials that have appeared in the last year or so.</span></p><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\"><em>Head First Mobile Web</em>&nbsp;by&nbsp;Lyza Danger Gardner and Jason Grigsby</span></li><li><span style=\"color: rgb(35,31,32);\"><em>jQuery Mobile: Up and Running</em>&nbsp;by Maximiliano Firtman</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.codeforest.net/jquery-mobile-tutorial-basics\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">jQuery Mobile Tutorial: Basics</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;at CodeForest</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.noupe.com/tutorial/jquery-mobile-tutorial-creating-a-restaurant-picker-web-app.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">jQuery Mobile Tutorial: Creating a Restaurant Picker Web App</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;by Stephanie Walter</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://jquerymobile.com/resources/#Articles\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">A list of jQuery Mobile articles and tutorials</span></span></a></li></ul><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Mobile Web Programming Concepts</span></h2><ul style=\"\"><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://37signals.com/svn/posts/3439-design-decisions-projects-on-basecamp-for-iphone\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Design Decisions: Projects on Basecamp for iPhone</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;- A case study of what's involved in going from desktop Basecamp to iPhone.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.html5rocks.com/en/mobile/mobifying/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Mobifying HTML5rocks</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;- A case study of what was involved in making the HTML5rocks website mobile friendly.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://blog.forecast.io/its-not-a-web-app-its-an-app-you-install-from-the-web/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">It's not a web app. It's an app you install from the web.</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;- Provides lessons learned on making a mobile web app more like a native mobile app.</span></li></ul>",
    "conflPageId": "260997172",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java - Task 2",
    "content": "<h2><span style=\"color: rgb(153,153,153);\">Introduction</span></h2><p><span style=\"color: rgb(35,31,32);\">You've been asked to build an initial web application that can create and show a list of games and who is&nbsp;playing them.&nbsp;This will require writing both front-end and back-end code, including</span></p><ul><li><span style=\"color: rgb(35,31,32);\">JPA code and database tables for games and players</span></li><li><span style=\"color: rgb(35,31,32);\">Java methods&nbsp;for getting the players of a game and&nbsp;the games someone is playing</span></li><li><span style=\"color: rgb(35,31,32);\">application controller code&nbsp;to return JSON with a list of the current games and who is playing them</span></li><li><span style=\"color: rgb(35,31,32);\">web page HTML, CSS, and JavaScript&nbsp;to display that JSON data in a readable list</span></li></ul><p><span style=\"color: rgb(35,31,32);\"><strong>DON'T PANIC!</strong>&nbsp;There's a ton of things mentioned in that email that are probably completely mysterious to you. That's normal, especially at the start of a new project. You are&nbsp;not expected to&nbsp;know or understand all these terms and concepts. This is where you get to learn them.</span></p><h2><span style=\"color: rgb(153,153,153);\">Agile Development</span></h2><p><span style=\"color: rgb(35,31,32);\">Agile is the name for a modern approach to doing software development. It emphasizes building useful pieces of programs in small steps with testable useful results. The email mentions several key concepts: end-to-end slices, user stories, acceptance tests. Information about what these mean&nbsp;can be found in the&nbsp;<strong>Resources</strong>.</span></p><h2><span style=\"color: rgb(153,153,153);\">Databases</span></h2><p><span style=\"color: rgb(35,31,32);\">Most applications, especially web applications, need databases to store&nbsp;information in a permanent place. A database for an application is a set of tables. Each table is simple &ndash; basically like a spreadsheet &ndash; but a complete set of databases may have complicated relationships.&nbsp;To access data you would write Structured Query Language (SQL) commands. This is a programming language for storing and fetching data from a relational database. SQL is not at all like Java or JavaScript. It doesn't have loops and classes with methods&nbsp;in the way those languages do. SQL has&nbsp;a powerful&nbsp;<strong>SELECT</strong>&nbsp;command&nbsp;for&nbsp;fetching rows of data from a database, and&nbsp;<strong>INSERT, UPDATE</strong>, and&nbsp;<strong>DELETE</strong>&nbsp;commands for&nbsp;modifying data. The basic operations with data are often given the acronym&nbsp;CRUD for create, retrieve, update, and delete.</span><br /><span style=\"color: rgb(35,31,32);\">The email mentions several key database concepts: tables, database-generated IDs, one-to-many relationships, and CRUD. Information about basic database concepts can be found in the&nbsp;<strong>Resources</strong>.</span></p><h2><span style=\"color: rgb(153,153,153);\">Many-to-Many Relationships</span></h2><p><span style=\"color: rgb(35,31,32);\">When dealing with collections of different&nbsp;kinds of data, both in Java classes and in databases, what code you write will depend on what the&nbsp;<em>cardinality</em>&nbsp;of the inter-relationship of data is. There are three basic cardinalities:</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong>One-to-one:&nbsp;</strong>Example:&nbsp;A player will have exactly one unique ID number that no one else has.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>One-to-many:&nbsp;</strong>Example:&nbsp;A player might have multiple email addresses, but every email belongs to just one player.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Many-to-many:&nbsp;</strong>Example:&nbsp;A player can play many games, and games have more than one player.&nbsp;</span></li></ul><p><span style=\"color: rgb(35,31,32);\">For this task, you need to implement the third kind of relationship.</span></p><h2><span style=\"color: rgb(153,153,153);\">JPA, Hibernate, ORM</span></h2><p><span style=\"color: rgb(35,31,32);\">The email refers to JPA (the Java Persistence API). This is a modern Java library&nbsp;that makes it possible&nbsp;to connect Java code to databases without having to write database code directly (i.e., without using SQL).&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">With&nbsp;JPA,&nbsp;you</span></p><ul><li><span style=\"color: rgb(35,31,32);\">use Java annotations to connect one class, e.g.,&nbsp;<strong>User</strong>, to the database tables and columns where user information would be stored, and</span></li><li><span style=\"color: rgb(35,31,32);\">define a&nbsp;<strong>Repository</strong>&nbsp;class with methods for storing and retrieving instances of just that class, e.g., a&nbsp;<strong>UserRepository</strong>&nbsp;class with methods for</span><ul><li><span style=\"color: rgb(35,31,32);\">saving an instance of a User in the appropriate database tables (create)</span></li><li><span style=\"color: rgb(35,31,32);\">getting lists of instances of Users with various properties, e.g., all users with the last name Smith (retrieve)</span></li><li><span style=\"color: rgb(35,31,32);\">saving a modified User instance in the database (update)</span></li><li><span style=\"color: rgb(35,31,32);\">deleting a User from the database (delete)</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">The A in JPA is API (application program interface). That means JPA is a specification of a standard set of methods for connecting&nbsp;Java classes to&nbsp;databases. JPA is not however a body of code to do that. Spring uses a library called&nbsp;<strong>Hibernate</strong>&nbsp;which implements the JPA specification.</span><br /><span style=\"color: rgb(35,31,32);\">Hibernate is an example of a&nbsp;<strong>Object-Relational Mapper</strong>&nbsp;(<strong>ORM</strong>). An ORM is any tool that does the task of saving objects, such as Java instances, to a database, and retrieving objects from a database.</span><br /><span style=\"color: rgb(35,31,32);\">See&nbsp;the&nbsp;<strong>Resources</strong>&nbsp;for links to more information about JPA.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Spring Boot</span></h2><p><span style=\"color: rgb(35,31,32);\">Building a web application requires tens of thousands of lines of code.&nbsp;It would take many months or more if you had to write this code over and over for every web application you needed to develop. Fortunately,large libraries of pre-written code have been created for every modern programming language to do the commonly needed tasks, such as creating and using a database, and sending&nbsp;data to&nbsp;a web browser.</span><br /><span style=\"color: rgb(35,31,32);\">Spring is a collection of a large number of libraries, including JPA. Spring has a reputation for being powerful but very complicated to use. Spring Boot is a set of tools, i.e., programs, designed to hide the complexity of Spring. Spring Boot lets you build a running web application in a few minutes. There is a caution though. Because Spring Boot has&nbsp;so many parts, if you do something wrong, it can be very challenging to find the cause. If the application doesn't run, you'll probably need help from your peers and mentor to find the appropriate error messages and figure out what they mean. The&nbsp;<strong>Resources</strong>&nbsp;has links to some tutorial material on Spring Boot.</span></p><h2><span style=\"color: rgb(153,153,153);\">REST</span></h2><p><span style=\"color: rgb(35,31,32);\">REST is not a programming language or library, though there are many libraries to help do REST. REST is a way of organizing how you develop the URLs to access your web application.</span><br /><span style=\"color: rgb(35,31,32);\">There are many subtleties in designing RESTful interfaces. The Spring Boot libraries will automatically create URLs for you, following commonly used patterns. The&nbsp;<strong>Resources</strong>&nbsp;have links&nbsp;to background material on what REST means and why it's used.</span><br /><span style=\"color: rgb(35,31,32);\">You'll sometimes see the acronym<strong>&nbsp;HATEOAS</strong>&nbsp;in connection with discussions about REST. It is an abbreviation for &quot;Hypermedia As The Engine Of Application State&quot;. That mouthful means that you design a REST application so that a web client only needs&nbsp;one URL to get started. That URL is the equivalent of a home page for a web site. If you GET that URL, you get back a resource, e.g., JSON, XML, or HTML, that lists the&nbsp;other URLs that are available. Those URLs in turn lead to data and/or other lists of URLs. All public resources should be available through URLs sent by the server. The client should not be required to construct URLs.</span><br /><span style=\"color: rgb(35,31,32);\">You are not required to follow this principle in the application you are building, but be aware that Spring's&nbsp;<strong>RepositoryRestResource</strong>&nbsp;does. This makes the JSON somewhat verbose. Every JSON object returns fields with the URL for the object itself and the URLs for all the objects that are parts&nbsp;of the object.</span></p><h2><span style=\"color: rgb(153,153,153);\">Controllers</span></h2><p><span style=\"color: rgb(35,31,32);\">By a&nbsp;&quot;controller&quot; here, we don't mean</span><br /><ac:image ac:height=\"185\" ac:width=\"297\"><ri:attachment ri:filename=\"worddavb327e074f11f954bc38d55fbabe8bc6b.png\" ri:version-at-save=\"1\" /></ac:image><br /><span style=\"color: rgb(35,31,32);\">Rather a controller in Spring&nbsp;means a Java class in a web application that takes care of reading URLs sent to the server and picking the right Java code to run to send data back. A web application can have multiple controllers. They are tried in order until one of them says &quot;I know what to do with that URL.&quot; If no controller works, Spring responds with an error message &ndash; one you'll be encountering frequently.</span><br /><span style=\"color: rgb(35,31,32);\">A&nbsp;<strong>RestController</strong>&nbsp;is a subclass of controllers. The methods in a&nbsp;<strong>RestController</strong>&nbsp;return JSON objects rather than web pages.</span><br /><span style=\"color: rgb(35,31,32);\">When you create a REST repository, Spring creates a Rest controller that handles&nbsp;URLs for inspecting and modifying&nbsp;your repository. You&nbsp;could write JavaScript code to use these URLs,&nbsp;but this has several problems:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">The REST repository sends back HATEOAS JSON.</span><ul><li><span style=\"color: rgb(35,31,32);\">When an object contains other objects, e.g., a game contains players, you get JSON with just the URLs for the nested objects.</span></li><li><span style=\"color: rgb(35,31,32);\">This means you have to do multiple requests to get all the data you want.</span></li><li><span style=\"color: rgb(35,31,32);\">This is slow and increases the number of requests the server has to handle.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">The REST repository returns all fields in an object, unless explicitly marked to not send.</span><ul><li><span style=\"color: rgb(35,31,32);\">This can include data that should not be sent, e.g., passwords, or, in a Salvo game, the secret locations of an opponent's ships.</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">Therefore, while the repository JSON is handy for inspecting and debugging the database during development, you will want to define another controller that is used by the web pages that are the&nbsp;game interface. Specifically, you want to define a controller that will make it easy to</span></p><ul><li><span style=\"color: rgb(35,31,32);\">send&nbsp;a list of all games, and the players playing them, with just one call</span></li><li><span style=\"color: rgb(35,31,32);\">send only&nbsp;the information that a player should be allowed to see</span></li><li><span style=\"color: rgb(35,31,32);\">send data in JSON format that are easy to convert into HTML</span></li></ul><p><span style=\"color: rgb(35,31,32);\">By defining a&nbsp;<strong>RestController</strong>&nbsp;in Java in your web app, you can do all this.</span><br /><span style=\"color: rgb(35,31,32);\">A&nbsp;Spring&nbsp;web application uses the following algorithm to&nbsp;decide how to respond to a&nbsp;URL:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">First, it checks the URLs defined by any&nbsp;<strong>RepositoryRestResource</strong>&nbsp;controller classes that have been automatically created.</span></li><li><span style=\"color: rgb(35,31,32);\">Then it checks the URLs specified by any&nbsp;<strong>Controller</strong>&nbsp;classes that you have defined.</span></li><li><span style=\"color: rgb(35,31,32);\">Finally, it checks to see if the URL is the name of a file in the&nbsp;<strong>resources/static</strong>&nbsp;directory.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">URLs&nbsp;are checked in this order. If you have a&nbsp;<strong>Game</strong><strong>RestRepository</strong>, then all URLs starting with&nbsp;<strong>/games</strong>&nbsp;will be handled by that repository's controller. A file like&nbsp;<strong>games.html</strong>&nbsp;in&nbsp;<strong>resources/static</strong>&nbsp;will never be returned because&nbsp;<strong>/games</strong>&nbsp;would be&nbsp;found first.</span><br /><span style=\"color: rgb(35,31,32);\">To avoid accidental name conflicts, you should tell Spring to use different URL &quot;prefixes&quot; for each of the above cases.</span> <br class=\"atl-forced-newline\" /><br class=\"atl-forced-newline\" /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"aa0c7539-0db2-4646-a016-0247ab2cdf9b\"><ac:parameter ac:name=\"title\">Step 1 - Create a Game REST Repository</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(153,153,153);\">Define the Java Classes</span></h2><p><span style=\"color: rgb(35,31,32);\">Repeat the process you did with&nbsp;<strong>Player</strong>&nbsp;to create&nbsp;<strong>Game</strong>&nbsp;and&nbsp;<strong>GameRepository</strong>. &nbsp;Define the classes for&nbsp;<strong>Game</strong>&nbsp;and&nbsp;<strong>GameRepository</strong>&nbsp;following the examples in&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=33\"><span style=\"color: rgb(51,122,183);\">the eBook on Spring databases and JPA</span></a><span style=\"color: rgb(35,31,32);\">.&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">In Intellij IDEA, use&nbsp;<strong>File | New ... | Java Class</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Name the class&nbsp;<strong>Game</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Edit the generated Java code as appropriate to define&nbsp;<strong>Game</strong>&nbsp;along the lines of the&nbsp;<strong>Person</strong>&nbsp;example.</span></li><li><span style=\"color: rgb(35,31,32);\">Repeat by making a new class for&nbsp;<strong>GameRepository</strong></span></li></ul><p><span style=\"color: rgb(35,31,32);\">The only real difference between&nbsp;<strong>Player</strong>&nbsp;and&nbsp;<strong>Game</strong>&nbsp;is that games have no name. They do have a creation date. The creation date should be set automatically to the current date, when the game is created.&nbsp;</span><br /><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1166\"><span style=\"color: rgb(51,122,183);\">Make the repository a&nbsp;<strong>RestRepository</strong></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;so that you can use your browser to view the stored data in the testing below.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Create the Sample Data</span></h2><p><span style=\"color: rgb(35,31,32);\">Change your&nbsp;<strong>CommandLineRunner</strong>&nbsp;in your application class to create three games, using&nbsp;<strong>new Game()</strong>.</span><br /><span style=\"color: rgb(35,31,32);\">After creating the games, but before saving them, set the dates of the second and third games to one hour and two hours later, respectively.&nbsp;See&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1167\"><span style=\"color: rgb(51,122,183);\">the Date section of the Java eBook</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;for how to create dates from other dates.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test by Browsing&nbsp;the JSON</span></h2><p><span style=\"color: rgb(35,31,32);\">Run the project.</span><br /><span style=\"color: rgb(35,31,32);\">If it starts without error, open a browser and enter the URL&nbsp;{*}<a class=\"external-link\" href=\"http://localhost:8080*\" rel=\"nofollow\">http://localhost:8080*</a></span><br /><span style=\"color: rgb(35,31,32);\">You should see JSON, with links (not clickable, alas) for URLs you can enter to see more data. Copy those links and&nbsp;paste them into your browser's address window, e.g.,&nbsp;{*}<a class=\"external-link\" href=\"http://localhost:8080/games*\" rel=\"nofollow\">http://localhost:8080/games*</a></span><br /><span style=\"color: rgb(35,31,32);\">Verify that there are three games with the correct dates.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Note:</strong>&nbsp;In the JSON, the dates will be UTC, i.e., what used to be called Greenwich Mean Time. So unless you're in that time zone, the hours will be different from what you specified in your test data. This will be corrected when you display the times on the web page.</span> <br class=\"atl-forced-newline\" /><span style=\"color: rgb(35,31,32);\">Now you need to add data indicating which players are playing which games. There's a Java aspect to this, and a database aspect.</span><br /><span style=\"color: rgb(35,31,32);\">In Java, if&nbsp;<em>player</em>&nbsp;is an instance of a&nbsp;<strong>Player</strong>, we would like&nbsp;<em>player</em><strong>.getGames()</strong>&nbsp;to return a list of the games a player is playing or has played. If&nbsp;<em>game</em>&nbsp;is an instance of&nbsp;<strong>Game</strong>, we would like&nbsp;<em>game</em><strong>.getPlayers()</strong>&nbsp;to return a list of players playing the game.</span><br /><span style=\"color: rgb(35,31,32);\">On the database side, JPA has created tables for us for game data and player data. Each game has a unique ID in the game table and each player has a unique ID in the player table. Now we want a table that associates specific IDs together.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">While not the only way, the simplest way to do this is to create a Java class&nbsp;<strong>GamePlayer</strong>&nbsp;with an associated table to represent an instance of a specific player playing a specific game.</span><br /><span style=\"color: rgb(35,31,32);\">Any noun could be used for this class that represents &quot;a player in a particular game.&quot; Sometimes simply combining the two table names works, but use a name that is natural, e.g.,&nbsp;<strong>PetOwner</strong>&nbsp;for a class representing a person owning a pet, not&nbsp;<strong>PetPerson</strong>.</span><br /><span style=\"color: rgb(35,31,32);\">The&nbsp;Java&nbsp;class&nbsp;<strong>GamePlayer</strong>&nbsp;has a&nbsp;<strong>Game</strong>&nbsp;field and a&nbsp;<strong>Player</strong>&nbsp;field.&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Each row of the game players data table has a game ID and a player ID.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">In addition, since we have a class and table, we can add two other pieces of useful data:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">An ID, to uniquely represent this GamePlayer in other tables you'll need later.</span></li><li><span style=\"color: rgb(35,31,32);\">A date, to represent when this player joined this game.</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"8e995a96-46a5-4917-a2ad-a9f125c0a591\"><ac:parameter ac:name=\"title\">Step 2 - Create a GamePlayer REST Repository</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(153,153,153);\">Define the Java Classes</span></h2><p><span style=\"color: rgb(35,31,32);\">Define&nbsp;<strong>GamePlayer</strong>&nbsp;and&nbsp;<strong>GamePlayerRepository</strong>. Use the same steps&nbsp;you did with&nbsp;<strong>Player</strong>&nbsp;and&nbsp;<strong>Game</strong>, but now you'll need data fields for</span></p><ul><li><span style=\"color: rgb(35,31,32);\">A database-generated ID, as with&nbsp;<strong>Player</strong>&nbsp;and&nbsp;<strong>Game</strong></span></li><li><span style=\"color: rgb(35,31,32);\">A creation date, as with&nbsp;<strong>Game</strong></span></li><li><span style=\"color: rgb(35,31,32);\">A&nbsp;<strong>Game</strong></span></li><li><span style=\"color: rgb(35,31,32);\">A&nbsp;<strong>Player</strong></span></li></ul><p><span style=\"color: rgb(35,31,32);\">Because game and player are references to objects stored in other data tables, you need to add JPA annotations to tell JPA how to connect the tables together. Follow the example of&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=33&amp;anchor=joined-many-to-many\"><span style=\"color: rgb(51,122,183);\">joined many-to-many relationships in the eBook</span></a><span style=\"color: rgb(35,31,32);\">.</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />Although we could have used any name for this class, the&nbsp;name GamePlayer was chosen for two reasons. First, it's a&nbsp;<strong>singular noun</strong>. Entities should be given singular noun names, as we have done with&nbsp;<strong>Game</strong>&nbsp;and&nbsp;<strong>Player</strong>. Names like&nbsp;<strong>Playing</strong>&nbsp;and&nbsp;<strong>GamePlayers</strong>&nbsp;would not be&nbsp;as good.&nbsp;Second, since this class &quot;joins&quot; two other entities together, we use a normal-sounding name that says that.&nbsp;<strong>PlayerGame</strong>&nbsp;would sound odd.&nbsp;</p><h2><span style=\"color: rgb(153,153,153);\">Create the Sample Data</span></h2><p><span style=\"color: rgb(35,31,32);\">Change your CommandLineRunner to create the sample data for the players in&nbsp;the games, as given in the email.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test by Browsing&nbsp;the JSON</span></h2><p><span style=\"color: rgb(35,31,32);\">Start your web app. If it boots up, look at the links in the JSON shown for <a class=\"external-link\" href=\"http://localhost:8080\" rel=\"nofollow\">http://localhost:8080</a>. One of them should be for&nbsp;<strong>gamePlayers</strong>. Go to that URL and verify that you see the correct list of players for games.</span><br /><span style=\"color: rgb(35,31,32);\">Now take a look at</span></p><ul><li style=\"list-style-type: none;\"><ul><li><span style=\"color: rgb(35,31,32);\"><a class=\"external-link\" href=\"http://localhost:8080/games\" rel=\"nofollow\">http://localhost:8080/games</a>,</span></li><li><span style=\"color: rgb(35,31,32);\"><a class=\"external-link\" href=\"http://localhost:8080/players\" rel=\"nofollow\">http://localhost:8080/players</a></span></li><li><span style=\"color: rgb(35,31,32);\"><a class=\"external-link\" href=\"http://localhost:8080/gamePlayers/1\" rel=\"nofollow\">http://localhost:8080/gamePlayers/1</a></span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">Depending on how ambitious you have been, you might be surprised by the results you see.&nbsp;&nbsp;If you implemented both&nbsp;<em>player</em><strong>.getGames()&nbsp;</strong><em>and&nbsp;game</em><strong>.getPlayers()</strong>, all three of these pages will have recursions which cause the display to get arbitrarily deep, such as</span><br /><span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;_embedded&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;games&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;players&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;userName&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;c.obrian@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;games&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;players&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;userName&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;c.obrian@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;games&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;players&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;userName&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;c.obrian@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(35,31,32);\">The reason for this is that Spring Boot&nbsp;automatically uses any&nbsp;<em>public getter</em>&nbsp;methods you have created when generating its lists.&nbsp; You can tell it not to do this by adding the&nbsp;<strong>@JsonIgnore</strong>&nbsp;annotation to a method.</span><br /><span style=\"color: rgb(35,31,32);\">The circularity happens because you have&nbsp;<em>both&nbsp;</em>methods:&nbsp;<em>player</em><strong>.getGames()&nbsp;</strong>references games, and then&nbsp;<em>game</em><strong>.getPlayers()&nbsp;</strong>references players.&nbsp;&nbsp;You only need to annotate one of the methods to avoid the recursion.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"ebc46ed3-2eae-4b3f-8c3c-60c411a65c6b\"><ac:parameter ac:name=\"title\">Step 3 - Make REST Repository URLs start with /rest</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">To avoid&nbsp;accidental name conflicts between the RestRepository controller&nbsp;and anything else we have,&nbsp;tell Spring to use&nbsp;<strong>/rest</strong>&nbsp;as a prefix for all RestRepository URLs.</span><br /><span style=\"color: rgb(35,31,32);\">You can do this by creatiing an &quot;application properties&quot; file. This optional file can be used to configure&nbsp;</span><a href=\"http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html\"><span style=\"color: rgb(51,122,183);\"><span style=\"\">many useful aspects of your web application</span></span></a><span style=\"color: rgb(35,31,32);\">.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Create&nbsp;an&nbsp;<strong>application.properties</strong>&nbsp;text file in your project, if one doesn't already exist.&nbsp;</span><ul><li><span style=\"color: rgb(35,31,32);\">Put this file is in the&nbsp;<strong>src/main/resources</strong>&nbsp;directory. &nbsp;</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">Add the&nbsp;following two lines to this file. They tell Spring to</span><ul><li><span style=\"color: rgb(35,31,32);\">put&nbsp;<strong>/rest&nbsp;</strong>in front of&nbsp;all&nbsp;<strong>RestRepository</strong>&nbsp;URLs, e.g.,&nbsp;<strong>/rest/games</strong>&nbsp;instead of&nbsp;<strong>/games</strong></span></li><li><span style=\"color: rgb(35,31,32);\">send all JSON, from any source, in a nicely indented form &ndash; computers don't care but you'll like it better</span></li></ul></li></ul><p>spring.data.rest.base-path=/rest<br />spring.jackson.serialization.INDENT_OUTPUT=true<br /><span style=\"color: rgb(35,31,32);\"><strong>TEST!&nbsp;</strong>Try your REST urls now.&nbsp;<strong>/games</strong>&nbsp;and&nbsp;<strong>/players</strong>&nbsp;should no longer work.&nbsp;<strong>/rest/games</strong>&nbsp;and&nbsp;<strong>/rest/players</strong>&nbsp;should now&nbsp;return the appropriate JSON.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"22dc63da-1041-486c-b00b-1be19a30adc3\"><ac:parameter ac:name=\"title\">Step 4 - Create an application RestController</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Create a&nbsp;<strong>RestController</strong>&nbsp;to create and return JSON&nbsp;data containing just the information you want to send players. This is just an initial version to lay the groundwork for a more useful controller in later tasks. In Agile, this is called&nbsp;<strong>a technical spike</strong>.&nbsp;&nbsp;See the&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1168\"><span style=\"color: rgb(51,122,183);\">ebook</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;for information about&nbsp;<strong>RestControllers</strong>&nbsp;and how to map URL's to controller methods with&nbsp;<strong>@RequestMapping</strong>.</span><br /><span style=\"color: rgb(35,31,32);\">For this step, you want to</span></p><ul><li><span style=\"color: rgb(35,31,32);\">create a controller</span></li><li><span style=\"color: rgb(35,31,32);\">create a method in the controller to return a list of game&nbsp;IDs</span></li></ul><p><span style=\"color: rgb(35,31,32);\">For the first slice, just see if you can return the game IDs. Once that works, you can add more information to what's returned, until eventually you are returning a list of game descriptions.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Create a controller</strong></span><br /><span style=\"color: rgb(35,31,32);\">You want a controller to return JSON, not HTML, so you want a&nbsp;<strong>RestController</strong>. You want all calls to this controller to start with&nbsp;<strong>api/</strong>.&nbsp; Your method is returning game information, so you need to give the controller a reference to the game repository.</span><br /><span style=\"color: rgb(35,31,32);\">This can be done with the following coding:</span></p><ol><li><span style=\"color: rgb(35,31,32);\">Add a<strong>&nbsp;SalvoController</strong>&nbsp;class to your project, in the same package as your application class.</span></li><li><span style=\"color: rgb(35,31,32);\">Make it a&nbsp;<strong>RestController</strong>, as shown in the ebook.</span></li><li><span style=\"color: rgb(35,31,32);\">Add&nbsp;a&nbsp;<strong>RequestMapping</strong>&nbsp;to&nbsp;<em>the class</em>&nbsp;to add&nbsp;<strong>/api</strong>&nbsp;to all URLs for this controller.</span></li><li><span style=\"color: rgb(35,31,32);\">Add an&nbsp;<strong>autowired&nbsp;</strong>field, i.e., instance variable, to hold a&nbsp;<strong>GameRepository</strong>.</span></li></ol><p><span style=\"color: rgb(35,31,32);\">Step 3 is important. That makes sure that all the&nbsp;URLs this controller looks for will&nbsp;have to start with&nbsp;<strong>/api</strong>. This will prevent any accidental overlap with the REST repository URLs, because you've made them start with&nbsp;<strong>/rest</strong>.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Be sure to import the new classes and annotations you are using. IDEA should help you do this.</span><br /><span style=\"color: rgb(35,31,32);\">See the&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1168\"><span style=\"color: rgb(51,122,183);\">ebook</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;from&nbsp;<strong>Resources</strong>&nbsp;for information about&nbsp;<strong>RestControllers</strong>,&nbsp;<strong>@RequestMapping</strong>, and&nbsp;<strong>@Autowired</strong>.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Test that your code compiles</strong></span><br /><span style=\"color: rgb(35,31,32);\">Run the Gradle task&nbsp;<strong>classes</strong>. This just compiles code but doesn't try to run it. It's a quick way to catch mistakes IDEA might have missed, or you might not have noticed.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Add a method to get a list of game IDs</strong></span><br /><span style=\"color: rgb(35,31,32);\">You want a method that is called when the URL is&nbsp;<strong>/api/games</strong>. You want it to get all the games and return a list of the ID's. This is a good example of the difference between our application controller and the REST repository controllers.&nbsp;<strong>/rest/games</strong>&nbsp;will return a JSON object containing a list of the games. But you have no control over what that&nbsp;JSON contains. It will show all information about each game that is in the database, along with the URLs necessary to get the JSON for each game on its own. In contrast, you will define exactly what you want&nbsp;<strong>/api/games</strong>&nbsp;to return.</span><br /><span style=\"color: rgb(35,31,32);\">This can be done with the following coding:</span></p><ol><li><span style=\"color: rgb(35,31,32);\">Define a public method that returns a&nbsp;<strong>List&lt;Object&gt;</strong>.</span></li><li><span style=\"color: rgb(35,31,32);\">Add&nbsp;a&nbsp;<strong>@RequestMapping</strong>&nbsp;to this method so that it will be called to handle the URL&nbsp;<strong>/games</strong>.</span><ol><li><span style=\"color: rgb(35,31,32);\">Hence, the full&nbsp;URL for this method will be&nbsp;<strong>/api/games</strong>.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\">In the method, use the autowired&nbsp;<strong>GameRepository</strong>&nbsp;to get a&nbsp;<strong>Set&nbsp;</strong>of all the games.</span></li><li><span style=\"color: rgb(35,31,32);\">From this set, create a list of game IDs.</span></li><li><span style=\"color: rgb(35,31,32);\">Return this list.</span></li></ol><p><span style=\"color: rgb(35,31,32);\">The controller&nbsp;method should&nbsp;return&nbsp;<strong>List&lt;Object&gt;</strong>. This is very&nbsp;general. We can put whatever we want in the list, as long as the Spring Jackson library is able to convert it to JSON. &nbsp;Eventually,&nbsp;the objects will include all the game and player information you&nbsp;need, but to start, keep it simple and just return a list of&nbsp;game ID numbers.</span><br /><span style=\"color: rgb(35,31,32);\">Use&nbsp;<strong>GameRepository</strong>&nbsp;to&nbsp;get a list of the&nbsp;games in the database created by your&nbsp;<strong>CommandLineRunner</strong>. &nbsp;See the&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1168\"><span style=\"color: rgb(51,122,183);\">ebook</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;from&nbsp;<strong>Resources</strong>&nbsp;for how to get a list of all instances of a class from&nbsp;a&nbsp;<strong>JpaRepository</strong></span><br /><span style=\"color: rgb(35,31,32);\">Given a collection of game objects, it is fairly easy to collect a list of just the game IDs. See the section on&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=47\"><span style=\"color: rgb(51,122,183);\">Java streams</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;from&nbsp;the&nbsp;<strong>Resources</strong>.</span><br /><span style=\"color: rgb(35,31,32);\">Do not return the list of games directly. Since a game references&nbsp;game players, and game players reference&nbsp;the game they play, you will get a circular loop. &nbsp;See the section on&nbsp;<strong>data transfer objects</strong>&nbsp;in&nbsp;the&nbsp;<strong>Resources</strong>&nbsp;for more on this.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test!</span></h2><p><span style=\"color: rgb(35,31,32);\">After defining this method, start your web app.</span><br /><span style=\"color: rgb(35,31,32);\">Assuming it compiles and starts, visit&nbsp;<strong><a class=\"external-link\" href=\"http://localhost:8080/api/games\" rel=\"nofollow\">http://localhost:8080/api/games</a></strong>&nbsp;in your web browser. If you have three games, you should see JSON like this:</span><br /><span style=\"color: rgb(35,31,32);\">[ 1, 2, 3 ]</span><br /><span style=\"color: rgb(35,31,32);\">This may not seem like much, but&nbsp;it actually means that you wired everything together correctly. Now it's just a matter of including more data in what you send back.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"a4bd5625-632e-4dc3-843f-d6edbf09ac81\"><ac:parameter ac:name=\"title\">Step 5 - Create game data objects</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">The next step in developing your controller is to have it return JSON with additional information, like this</span><br /><span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;created&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1456438201629</span><br /><span style=\"color: rgb(153,153,153);\">},</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">2</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;created&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1456438201636</span><br /><span style=\"color: rgb(153,153,153);\">},</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">3</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;created&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1456438201639</span><br /><span style=\"color: rgb(153,153,153);\">}</span> <span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(35,31,32);\">Now you have an array of JSON objects. Each object has&nbsp;a&nbsp;game's ID&nbsp;and creation date in milliseconds.</span><br /><span style=\"color: rgb(35,31,32);\">The easiest way to do this is to change the loop in your controller so that the function that used to return just the ID for a game now returns a&nbsp;<strong>Map&lt;String, Object&gt;</strong>, with an&nbsp;<strong>ID</strong>&nbsp;key and a&nbsp;<strong>created</strong>.</span><br /><span style=\"color: rgb(35,31,32);\">Spring will automatically convert a Java date object into milliseconds, when creating the JSON. Leave it like that. You will write JavaScript to convert that into something user-friendly on the web page in a later step.</span><br /><span style=\"color: rgb(35,31,32);\">See the&nbsp;<strong>Resources</strong>&nbsp;for how to create a&nbsp;<strong>Map&lt;String, Object&gt;</strong>&nbsp;as a data transfer object.</span><br /><span style=\"color: rgb(35,31,32);\">Keep your code clean. Define a private method that takes a game and returns the map object for it. This will keep the loop in your controller method simple and make the next step easier.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test!</span></h2><p><span style=\"color: rgb(35,31,32);\">Restart your web server. Visit&nbsp;<strong><a class=\"external-link\" href=\"http://localhost:8080/api/games\" rel=\"nofollow\">http://localhost:8080/api/games</a></strong>&nbsp;in your web browser. You should see JSON&nbsp;that has a nested structure&nbsp;like the example above.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"8316ad64-6389-4a4a-b79e-15410f3db429\"><ac:parameter ac:name=\"title\">Step 6 - Add player data to the game objects</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">The final step is to include data on what players are in each game. You want to get something that looks like this:</span><br /><span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;created&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1456438201629</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;gamePlayers&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;player&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;email&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;j.bauer@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span> <span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">},</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">2</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;player&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">2</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;email&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;c.obrian@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span> <span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">}</span> <br /><span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(153,153,153);\">},</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">2</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;created&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1456438201636</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;gamePlayers&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">3</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;player&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;email&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;j.bauer@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span> <span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(153,153,153);\">},</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">3</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;created&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1456438201639</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;gamePlayers&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(153,153,153);\">}</span> <br /><span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(35,31,32);\">Note that there are many different&nbsp;<strong>id</strong>s in this JSON:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">There is a&nbsp;<strong>Game</strong>&nbsp;ID&nbsp;for the game.</span></li><li><span style=\"color: rgb(35,31,32);\">There is a&nbsp;<strong>GamePlayer</strong>&nbsp;ID for each GamePlayer in each game.&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">There is a&nbsp;<strong>Player</strong>&nbsp;ID for the player in each GamePlayer.&nbsp;</span></li></ul><p><span style=\"color: rgb(35,31,32);\">These IDs are generated by the database system in which your web application is storing information.</span><br /><span style=\"color: rgb(35,31,32);\">To make the controller include this information about the players, &nbsp;you need to add some nested loops to your games method:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Create a list with a Map for each game.</span></li><li><span style=\"color: rgb(35,31,32);\">In the&nbsp;Map for each game, put keys and values&nbsp;for the game ID, creation date, and gamePlayers.</span></li><li><span style=\"color: rgb(35,31,32);\">For the value for the gamePlayers key, create a&nbsp;<strong>List</strong>&nbsp;with a&nbsp;<strong>Map</strong>&nbsp;for each GamePlayer.</span></li><li><span style=\"color: rgb(35,31,32);\">In the Map for each GamePlayer, put keys and values&nbsp;for the GamePlayer ID and the player.</span></li><li><span style=\"color: rgb(35,31,32);\">For the value of the player, create a Map with keys for the player ID and the player's email.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Work on these loops from the outside inward, in slices, e.g.,</span></p><ul><li><span style=\"color: rgb(35,31,32);\">First,&nbsp;write controller code to make a list of maps with keys for the game IDs and creation dates.</span><ul><li><span style=\"color: rgb(35,31,32);\"><strong>Test</strong>. Run your app, enter the URL for the JSON, and verify you see a JavaScript list with the correct IDs.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">Then, add code to add a key for the game players, with a list of&nbsp;maps with keys for the game player IDs.</span><ul><li><span style=\"color: rgb(35,31,32);\"><strong>Test</strong>. Make sure you see the correct game player IDs.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">Finally, add code to add a key to each game player map to contain a player map, with the keys for the player ID and name.</span><ul><li><span style=\"color: rgb(35,31,32);\"><strong>Test.</strong></span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">The simplest way to create the lists and maps is with streams, just as you did with the list of game maps in the first task.</span><br /><span style=\"color: rgb(35,31,32);\">You do not need to autowire a&nbsp;<strong>PlayerRepository</strong>&nbsp;or&nbsp;<strong>GamePlayer</strong>&nbsp;repository&nbsp;into your controller for this task. When you load a&nbsp;<strong>Game</strong>, Spring code automatically loads whatever a game contains, including its&nbsp;collection of game players.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test!</span></h2><p><span style=\"color: rgb(35,31,32);\">Restart your web server. Visit&nbsp;<strong><a class=\"external-link\" href=\"http://localhost:8080/api/games\" rel=\"nofollow\">http://localhost:8080/api/games</a></strong>&nbsp;in your web browser. You should see JSON&nbsp;that has a nested structure&nbsp;like the example above.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit your application controller code. Use the &quot;code&quot; format.<br /><span style=\"color: rgb(35,31,32);\">Because you've been inspecting the JSON in your browser, you should be reasonably confident that the&nbsp;data has the structure you need.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Now it's time to present this data on a web page that makes sense to&nbsp;players. As given in the email, the format is simple for now: just a list of games, with information about when&nbsp;they were created, and who is currently playing them. That data is in the JSON. It needs to be represented in HTML.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"28f2770d-e9e7-4915-b16e-50e0892aebba\"><ac:parameter ac:name=\"title\">Step 7 - Create a game list web page</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(153,153,153);\">Create an Empty Web Page</span></h2><p><span style=\"color: rgb(35,31,32);\">What you need to do now is create the first of several web pages that will hold the interface for the&nbsp;<strong>Salvo</strong>&nbsp;game.</span><br /><span style=\"color: rgb(35,31,32);\">Again, to avoid accidental name conflict, it will help if the URLs for all web files &ndash; often called&nbsp;<strong>static web assets</strong>&nbsp;-- begin with something that is neither&nbsp;<strong>/rest</strong>&nbsp;nor&nbsp;<strong>/api</strong>. A good choice is&nbsp;<strong>/web</strong>.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">This is easily done. Spring will &quot;serve&quot; all static web assets under the&nbsp;<strong>src/main/resources/static/</strong>&nbsp;directory. So if you put all your web files (HTML, CSS, JavaScript, images) in the directory&nbsp;<strong>src/main/resources/static/web/</strong>, their URL will begin with&nbsp;<strong>/web</strong>. If you like, you can&nbsp;create additional subdirectories, e.g.,&nbsp;<strong>src/main/resources/web/scripts/</strong>&nbsp;for your JavaScript files,&nbsp;<strong>src/main/resources/static/web/styles/</strong>&nbsp;for your CSS files, and so on. We will just use the top-level&nbsp;<strong>web</strong>&nbsp;directory.</span><br /><span style=\"color: rgb(35,31,32);\">In&nbsp;<strong>src/main/resources/static/web/</strong>,&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Create a web page&nbsp;<strong>games.html</strong>, with the usual&nbsp;HEAD and BODY boilerplate.</span></li><li><span style=\"color: rgb(35,31,32);\">Include some title, e.g.,&nbsp;<strong>Salvo!</strong>, so that you will know that the page has loaded.</span></li><li><span style=\"color: rgb(35,31,32);\">On the page, have an&nbsp;<strong>OL</strong>&nbsp;element that will hold the list of games.</span></li><li><span style=\"color: rgb(35,31,32);\">Have&nbsp;<strong>script</strong>&nbsp;tags to load&nbsp;<strong>jQuery</strong>&nbsp;and a local JavaScript file,&nbsp;<strong>games.js</strong></span></li></ul><p><span style=\"color: rgb(35,31,32);\">See the&nbsp;<strong>Resources</strong>&nbsp;for where to put the web page and other static assets in a Spring MVC application.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>TEST!</strong>&nbsp;Start your web app and point your browser at&nbsp;</span><a class=\"external-link\" href=\"http://localhost:8080/web/games.html\" rel=\"nofollow\">http://localhost:8080/web/games.html</a><span style=\"color: rgb(35,31,32);\">. You should see your title information.</span></p><h2><span style=\"color: rgb(153,153,153);\">Create a List with Game Dates</span></h2><p><span style=\"color: rgb(35,31,32);\">In&nbsp;<strong>src/main/resources/static/web/</strong>,&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Create the&nbsp;<strong>games.js</strong>&nbsp;file.</span></li><li><span style=\"color: rgb(35,31,32);\">In&nbsp;<strong>games.js</strong>, write&nbsp;<strong>jQuery</strong>&nbsp;code that, on page load, will</span><ul><li><span style=\"color: rgb(35,31,32);\">send an&nbsp;<strong>AJAX</strong>&nbsp;request to&nbsp;<strong>/api/games</strong></span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">In the&nbsp;<strong>done()</strong>&nbsp;method for that&nbsp;<strong>AJAX</strong>&nbsp;call, pass&nbsp;the JSON data that is returned to a function to&nbsp;create an HTML list.</span></li><li><span style=\"color: rgb(35,31,32);\">That function should create a list of HTML&nbsp;<strong>LI&nbsp;</strong>elements, one for each game object in the JSON.</span></li><li><span style=\"color: rgb(35,31,32);\">When the list is created, the function should store it in the&nbsp;<strong>OL</strong>&nbsp;element you prepared on&nbsp;<strong>games.html</strong>.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">See the&nbsp;<strong>Resources</strong>&nbsp;for how to use JavaScript's&nbsp;<strong>map</strong>&nbsp;to&nbsp;create a list from a list.</span><br /><span style=\"color: rgb(35,31,32);\">Initially, just put&nbsp;the millisecond numbers on the page. When that's working, change your JavaScript code to create readable date strings. See the&nbsp;<strong>Resources</strong>&nbsp;for how to create and format dates.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>TEST!</strong>&nbsp;Make sure you're seeing the correct dates.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Add Player Emails to the Games List</span></h2><p><span style=\"color: rgb(35,31,32);\">Now add code to the function that creates the&nbsp;<strong>LI</strong>&nbsp;elements&nbsp;to include the HTML for a comma-separated list of the player emails. See the&nbsp;<strong>Resources</strong>&nbsp;for how to join an array of strings into a comma-separated list in JavaScript.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test!</span></h2><p><span style=\"color: rgb(35,31,32);\">In your browser, visit the page&nbsp;</span><a class=\"external-link\" href=\"http://localhost:8080/web/games.html\" rel=\"nofollow\">http://localhost:8080/web/games.html</a><span style=\"color: rgb(35,31,32);\">.</span><br /><span style=\"color: rgb(35,31,32);\">Make sure you see the correct player emails with each game, including games with just one player so far. The data should match what's in the sample testbed.</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit your HTML and JavaScript&nbsp;code for review. Use&nbsp;the &quot;code&quot; format. Put the HTML first, then JavaScript, with lines labeling the source file for each part.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"78e66ba9-d6bc-47a1-bd98-5306f886f7ab\"><ac:parameter ac:name=\"title\">Step 8 - Submit your work</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">The objectives&nbsp;for this task were to:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">create&nbsp;data tables for games.</span><ul><li><span style=\"color: rgb(35,31,32);\">For games, we just need when (date and time) the game was created, and a database ID.</span></li><li><span style=\"color: rgb(35,31,32);\">To track which players are playing which games, we'll need&nbsp;a third table linking games to&nbsp;players&nbsp;with&nbsp;the ID of a&nbsp;game, the ID of a&nbsp;player, and when (date and time) the player joined the game.</span></li></ul></li><li><a href=\"http://localhost:8080/rest/games\"><span style=\"color: rgb(51,122,183);\">{+}</span></a><a class=\"external-link\" href=\"http://localhost:8080/rest/games+\" rel=\"nofollow\">http://localhost:8080/rest/games+</a><span style=\"color: rgb(35,31,32);\">&nbsp;will list all the games</span></li><li><a href=\"http://localhost:8080/rest/players\"><span style=\"color: rgb(51,122,183);\">{+}</span></a><a class=\"external-link\" href=\"http://localhost:8080/rest/players+\" rel=\"nofollow\">http://localhost:8080/rest/players+</a><span style=\"color: rgb(35,31,32);\">&nbsp;will list all the players</span></li><li><a href=\"http://localhost:8080/rest/games/1/gamePlayers\"><span style=\"color: rgb(51,122,183);\">{+}</span></a><a class=\"external-link\" href=\"http://localhost:8080/rest/games/1/players+\" rel=\"nofollow\">http://localhost:8080/rest/games/1/players+</a><span style=\"color: rgb(35,31,32);\">&nbsp;will list all the players in game 1</span></li><li><a href=\"http://localhost:8080/api/games\"><span style=\"color: rgb(51,122,183);\">{+}</span></a><a class=\"external-link\" href=\"http://localhost:8080/api/games+\" rel=\"nofollow\">http://localhost:8080/api/games+</a><span style=\"color: rgb(35,31,32);\">&nbsp;will return a customized JSON list of games and players.</span></li><li><a href=\"http://localhost:8080/web/games.html\"><span style=\"color: rgb(51,122,183);\">{+}</span></a><a class=\"external-link\" href=\"http://localhost:8080/web/games.html+\" rel=\"nofollow\">http://localhost:8080/web/games.html+</a><span style=\"color: rgb(35,31,32);\">&nbsp;will&nbsp;display a human-readable list of games and players.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">At this point, all of that should be working. &nbsp;Good job! &nbsp;</span><br /><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\">Submit a zipped archive of your project folder, with all your source code and&nbsp;build scripts. Use the &quot;file&quot; format to attach the archive. &nbsp;Use the Gradle&nbsp;<strong>clean</strong>&nbsp;task to remove&nbsp;compiled files before zipping.</span></p></ac:rich-text-body></ac:structured-macro><p><br /></p><p><br /></p>",
    "conflPageId": "261095534",
    "conflChildrenId": [
      "261423376"
    ]
  },
  {
    "title": "Mobile App- Task 1",
    "content": "<p class=\"auto-cursor-target\"><br /></p><p><strong>INTRODUCTION</strong></p><p><strong>Your Task</strong><br />You have been asked by League Director, Tom Denton, to develop a mobile web app to show game schedules for NYSL. He's sent you a copy of their desktop website to provide background material that you can use when building the app, but they do not want a mobile version of the site or even of the existing web page for the game schedule. They want something that looks and feels like a native mobile app, but doesn't require their users to download and install anything.<br /><br />Fortunately, technologies and libraries have been developed and (mostly) standardized in browsers over the past few years to make this possible with just HTML, CSS, and JavaScript coding.<br /><br />Right now, though, they just want to see the design for what you're going to build, not a working app. The trick is to get the right level of design. If you go overboard designing a super-fancy mockup, the detail overwhelms the client, and you become too invested in the design to accept criticism. If you dash off something vague and incomplete, the client loses faith in your abilities and can't give you any useful feedback. The point of the mockup design is to provide the client with a way to see if the app you are thinking of developing looks like what they want and would be understood by their users. The point of the UI flow sketch is so the client can see if the app will do everything their users need it to do, with no unnecessary or confusing transitions.<br /><br />The steps given in this Plan of Attack present a scenario-based approach to interface design. This approach is a modern best practice.<br /><br /><strong>As part of this task, you will submit the following for review:</strong></p><p>For Mentor Review:</p><ul><li>A write-up of the user personas and scenarios you'll use in your design process</li><li>Your UI flow diagram</li><li>Your screen mockups</li></ul><p>For Client Deliverable: A PDF or Word-compatible UI design document with the mockups, UI flow diagram, and any accompanying documentation</p><ul><li>Do not submit this deliverable to the client until your mentor says you are ready to do so.</li></ul><p><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong></span> For the Mentor Review deliverables listed above, as you complete a working slice of each deliverable, submit it for the mentor to review. It's better to submit one screen for review, or one part of one screen, if you're uncertain, rather than everything at once. This helps you and the mentor find issues early.</p><p><br /></p><p>You can submit portions and revisions of items for review multiple times via the Mentor Feedback Page. Just always be clear about:</p><ul><li>What's new or changed in each submission</li><li>What, if anything, you have not yet completed for the given item in the submission</li></ul><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"b72a83c9-8df3-44e6-ae0b-fd7eec9d5a44\"><ac:parameter ac:name=\"title\">Step 1- Develop the User Interface Flow</ac:parameter><ac:rich-text-body><ol><li><strong>Determine what the app is for.</strong> Ideally, you should observe and interview the target users. Since you don't have that option, use the website Tom sent to get a feeling for the information a parent or player is looking to find.<ol><li>Download the zip file of code that Tom provided.</li><li>Extract the files to your project directory.</li><li>Double-click the file index.html to see the existing website.</li><li>Navigate to the game schedule page to see the kind of data that's available for each game.</li></ol></li><li><strong>Develop typical user personas and likely scenarios.</strong> Write at least three personas (i.e. well-specified fictional people) and at least three scenarios in which your personas need to use the mobile game schedule app. Consider what kind of problem they are trying to solve. See Resources.<br />Some possible personas/scenarios include:Sally, a working mom who has to balance the weekend schedules of three kids.<br /><ol><li>Bob, a parent volunteer at games.</li><li>Chris, a 13-year-old team member who plays intensely.</li><li>Bob's friend asks if they can meet up Saturday. Bob opens the app to see when the game is happening.</li><li>Sally is about to drive her daughter to a game and needs to know which field to go to.</li><li>Chris wants to know what team they're playing against today.</li></ol></li><li><strong>Draw a user flow diagram.</strong><ol><li>This is best done with pencil and paper, or on a whiteboard. Scan or take a picture of the diagram when you're done.</li><li>Don't worry about details. A column of boxes labeled &quot;game 1,&quot; &quot;game 2,&quot; and so on, may be all you need for the list of games.</li><li>Do worry about what buttons and other options you need.</li><li>For each user action, draw the screen it leads to, if not already in the diagram, and clearly label the arrow.</li><li>Think about the clarity of button labels and so on (e.g., Would &quot;cancel&quot; be confused with &quot;delete&quot;? Is &quot;submit&quot; too vague? Etc.).</li></ol></li></ol><p><strong>SUBMIT:</strong><br /><strong>Submit a write-up of your user personas and scenarios, and your user flow diagram to the mentor for review,</strong> using the Submit Your Work tab.</p><ol><li>If your user flow diagram is one graphic, then a GIF, JPG, or PNG file is fine.</li><li>If you have several drawings, put them in a PDF or Word-compatible file.</li></ol></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"d0df7f22-792a-4f9c-b5a0-6d79c23197ed\"><ac:parameter ac:name=\"title\">Step 2- Design the Screen Mockups</ac:parameter><ac:rich-text-body><ol><li><strong>Draw a&nbsp;mockup for each screen</strong>&nbsp;in your user flow diagram.<ol><li>Focus on layout, sizes, and color scheme; don't worry about fancy graphics and shading, unless you're fluent in graphic design.</li><li>Use whatever drawing tool you prefer.</li><li>Label each mockup screen, and put those labels in your user flow diagram.</li></ol></li><li><strong>Put the user flow diagram and the mockup screens into a PDF or Word-compatible document</strong>.</li></ol><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><strong>Submit the document to the mentor for review&nbsp;</strong>using the&nbsp;<em>Submit Your Work</em>&nbsp;tab.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"70e074aa-c2d5-4a3c-9869-6d2bc7f80b12\"><ac:parameter ac:name=\"title\">Step 3 - Submit your Client Deliverable </ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\"><strong>Submit a PDF or Word document of your UI flow diagram, screen mockups, and any other documentation to&nbsp;the client.</strong></span> <span style=\"color: rgb(35,31,32);\">Your&nbsp;mentor will tell you when you are ready to do this.</span></p></ac:rich-text-body></ac:structured-macro><p><br /></p><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "261128196",
    "conflChildrenId": [
      "260472845"
    ]
  },
  {
    "title": "Task 5 - Resources",
    "content": "<p class=\"auto-cursor-target\">Required Resources</p><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"188a4923-f0a0-4db7-a18c-87fa1b953ea4\"><ac:parameter ac:name=\"title\"> Geolocation Background Info </ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(128,130,133);\">Location Awareness</span></h2><p><span style=\"color: rgb(35,31,32);\">Modern smartphones provide a number of features,&nbsp;such as cameras, accelerometers,&nbsp;geolocation&nbsp;sensors, and integrated contact lists. However, many of these functionalities are not available to web pages.&nbsp;For security reasons, web pages have long been restricted in their access to data on the computer displaying the web page. For example, while a developer can create a form that lets users select and upload a local file, there is no way to write JavaScript in the web page to see which file was selected.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">In response to demand from users and developers for more powerful web apps, the browser organizations and companies, and the web standards committees, are carefully defining extensions to HTML and JavaScript that can support access to mobile device features without unduly compromising user security.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Access to the user's location is one of the features that has been well-standardized at this point.&nbsp;How to get the user's location in JavaScript&nbsp;is described in the references in&nbsp;<em>Resources</em>. There are two things to be aware of.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">First, for privacy reasons, the first time your web app asks for location information, the user will be asked if they want to allow this to happen. They must say yes for location mapping to work. After they say yes the first time, they won't be asked again.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Second, getting the location can take many seconds. You don't want the browser to wait until the data is returned. That would freeze up the web app. For this reason, the JavaScript code looks like this:</span></p><p><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span></p><p style=\"margin-left: 90.0px;\"><br /><span style=\"color: rgb(51,51,51);\">navigator.geolocation.getCurrentPosition(</span><br /><span style=\"color: rgb(51,51,51);\">function (position) {...<em>your code to use when the position is found</em>...},</span><br /><span style=\"color: rgb(51,51,51);\">function () {...<em>your code to use if the position can't be found</em>...}</span><br /><span style=\"color: rgb(51,51,51);\">);</span></p><p><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><span style=\"color: rgb(35,31,32);\">This code&nbsp;returns immediately so that your web app can continue responding to user actions. When the position data is found, the first function is called. If there is some failure, e.g., the user denies permission or too much time passes, the&nbsp;second function will be called.&nbsp;</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"a85bbe18-4c86-4098-9a1c-fada32201c97\"><ac:parameter ac:name=\"title\">Geolocation Examples</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(128,130,133);\">Location Awareness</span></h2><ul><li><span style=\"color: rgb(35,31,32);\"><em>Build Mobile Websites and Apps for Smart Devices</em>&nbsp;by Earle Castledine, Myles Eftos, Max Wheeler</span><ul><li><span style=\"color: rgb(35,31,32);\">Chapter 5 discusses&nbsp;geolocation and the cache manifest</span></li></ul></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://developers.google.com/maps/articles/geolocation\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Geolocation&nbsp;and the Google MAP API</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Describes how to determine a user's location.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://mobiforge.com/design-development/html5-mobile-web-a-guide-geolocation-api\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">A Guide to the Geolocation API</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Describes how geolocation works.</span></li><li><span style=\"color: rgb(35,31,32);\">Exampes of getting directions between two points:</span><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://developers.google.com/maps/documentation/javascript/examples/directions-travel-modes\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Travel Between Two Points Example</span></span></a></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://developers.google.com/maps/documentation/javascript/examples/directions-simple\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Simple Directions Example</span></span></a></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://stackoverflow.com/questions/14586916/google-maps-directions-from-users-geo-location\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Going from user's location to a fixed location</span></span></a></li></ul></li></ul><h2><span style=\"color: rgb(128,130,133);\">Test Locations</span></h2><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.latlong.net/convert-address-to-lat-long.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">LatLong.net</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Use this tool to convert addresses to latitude and longitude coordinates.</span></li></ul></ac:rich-text-body></ac:structured-macro><p><s><br /></s></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"5f510b29-a2bb-4af1-877d-731da370ca60\"><ac:parameter ac:name=\"title\">Local Storage Background</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(128,130,133);\">Offline support</span></h2><p><span style=\"color: rgb(35,31,32);\">A fact of life with mobile devices is that the network connection comes and goes as users move around. For this reason, features have been added in&nbsp;HTML5&nbsp;to support storing more data on the device: the cache manifest and local storage.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Cache manifest</strong></span><br /><span style=\"color: rgb(35,31,32);\">The cache manifest is nothing more than a text file that lists all the resources (or URLs) that your web app needs to function. This includes the HTML, JavaScript, and images. A browser that supports cache manifests will make local copies of the items listed and use them when the network is not available.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Local Storage</strong></span><br /><span style=\"color: rgb(35,31,32);\">Imagine a parent at a game excitedly types a shout-out to her team and presses &quot;Send&quot;, only to receive the message &quot;no network found.&quot; At the very least, she will have to keep trying until the network connection is re-established. At the worst, her message was lost and she has to start all over again.</span><br /><span style=\"color: rgb(35,31,32);\">Fortunately, modern web apps can store data locally. That means, you can write JavaScript code that stores the user's messages locally when posting fails. While there are&nbsp;unposted&nbsp;messages, a timed method can automatically check every minute or so and try to post again. How often this happens, if at all, can be a user preference that is also saved in local storage.</span><br /><span style=\"color: rgb(35,31,32);\">Though it is not universally supported yet, there is a proposed&nbsp;W3C&nbsp;web standard.&nbsp;</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"1c7bb82c-e3b5-44e8-a801-5b9dccfe8142\"><ac:parameter ac:name=\"title\">Local Storage Links/Examples</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(128,130,133);\">Cache Manifest</span></h2><ul><li><span style=\"color: rgb(35,31,32);\"><em>Build Mobile Websites and Apps for Smart Devices</em>&nbsp;by Earle Castledine, Myles Eftos, Max Wheeler</span><ul><li><span style=\"color: rgb(35,31,32);\">Chapter 5 discusses the cache manifest</span></li><li><span style=\"color: rgb(35,31,32);\">Chapter 6 has a section on local storage</span></li></ul></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.html5rocks.com/en/tutorials/appcache/beginner/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">A Beginners's Guide to the Application Cache</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Describes how to use and structure the cache manifest.</span><ul><li><span style=\"color: rgb(35,31,32);\">Pay special attention to the paragraph halfway&nbsp;down. &quot;<strong>You must modify the manifest file itself to inform the browser to refresh cached files</strong>.&quot; Many people put in a comment line in the manifest with a version number that they change whenever they change any file that the manifest caches.</span></li></ul></li></ul><h2><span style=\"color: rgb(128,130,133);\">Local Storage</span></h2><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://coding.smashingmagazine.com/2010/10/11/local-storage-and-how-to-use-it/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Local Storage and How to Use It on Websites</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;by Christian Heilman &ndash; Describes local storages and how to use them.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.ibm.com/developerworks/library/x-html5mobile2/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Unlock Local Storage for Mobile Web Applications</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- An example of storing messages (from Twitter in this case)&nbsp;in local storage.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://graphicpush.com/using-localstorage-api-as-a-light-database\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Using Local Storage as a Light Database for Form Submissions</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Provides an example of how to use localStorage&nbsp;when submitting forms.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.html5rocks.com/en/features/storage\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Browser Support for Local Storage</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;(look for &quot;Web Storage - name/value pairs&quot;) &ndash; Gives a quick overview of the browser editions supporting local storage.</span></li></ul><h2><span style=\"color: rgb(128,130,133);\">Timers</span></h2><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://javascript.info/tutorial/settimeout-setinterval\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Understanding Timers</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Describes how to use&nbsp;<strong>setTimeout</strong>&nbsp;and&nbsp;<strong>setInterval</strong>&nbsp;in JavaScript.</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><p class=\"auto-cursor-target\">Optional Resources</p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"94de9087-8a9d-4dbb-b519-3d3d67e81cde\"><ac:parameter ac:name=\"title\">Firebase Offline Capabilities</ac:parameter><ac:rich-text-body><div><div class=\"sc-gGBfsJ ftxnCx\"><div><div class=\"page view\"><div class=\"wiki-content\"><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://www.firebase.com/docs/android/guide/offline-capabilities.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Firebase Offline Capabilities</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Firebase's features for when you restart your app or when you go offline. &nbsp;This&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://www.firebase.com/docs/android/guide/offline-capabilities.html#section-sample\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">example</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;at the end shows how it can be used.</span></li></ul><p><br /></p></div></div></div></div></div></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><p class=\"auto-cursor-target\"><br /></p><p class=\"auto-cursor-target\"><br /></p><p class=\"auto-cursor-target\"><br /></p><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "261226631",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java - Task 1 Resources",
    "content": "<p>Here's a quick guide to the Resource subsections and what they cover.<br /><strong>Java</strong>: Right from the start you will need to know a little bit about classes, interfaces, methods, variables, packages, and so on. Don't try to learn everything about at once. Skim to get a feeling for what&nbsp;classes are for and what they look like, what interfaces are for, and so on, but then trying writing some code. When you get stuck, look at the examples and re-read the Java tutorial material. Each time you re-read, you'll understand more, and change your understanding of things you thought you knew.<br /><strong>Gradle</strong>: Gradle is a tool, i.e., program, for building Java programs. The section covers how to install it and create&nbsp;a Gradle script for your web app.<br /><strong>IDEA</strong>: IDEA is an environment for editing and running Java programs. The section covers how to install and use it with Gradle scripts.<br /><strong>Spring&nbsp;and JPA:</strong>&nbsp;Spring is a framework and&nbsp;suite of libraries that make it possible to&nbsp;build powerful Java web services with very little code. JPA, the Java Persistence API, is the system Spring uses to create and manage databases without needing to learn and write database code.&nbsp;Spring was designed to reduce the amount of code you have to write, and to make that code as simple as possible.&nbsp;Spring Boot and JPA have many advanced features. Don't try to learn or use them all. Focus on just the things you need first.<br /><strong>JavaScript:</strong>&nbsp;As with&nbsp;Java, there is too much about JavaScript to try and learn all at once. Learn in slices. We've tried to include the majority of what you need to know for the tasks, and no more, in the eBook. The most important part initially&nbsp;is how&nbsp;to use JavaScript to request JSON data from a server using AJAX. Getting JSON and using JSON to construct HTML will be the primary front-end coding you need to do throughout this project.<br />&nbsp;<br /><strong>Required resources</strong></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"ca71f0be-01a7-4b4c-8ba7-ffbfdcb44012\"><ac:parameter ac:name=\"title\">Java</ac:parameter><ac:rich-text-body><ul><li><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Where to download Java</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- you want the Java 8 SE JDK, not the larger, more complicated Java EE, nor the JRE, which&nbsp;doesn't include the Java compiler</span></li><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1459\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Introduction to Java</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- This is a quick review. It assumes you've seen a similar language before, such as JavaScript.</span></li><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=29\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Classes in Java</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- All code in Java is organized into classes.</span></li><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=34\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Instances in Java</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Run-time data in Java is stored in instances of classes.</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"b7c8cabf-85b7-4dbb-b3b7-a7c74a5b9ab7\"><ac:parameter ac:name=\"title\">Gradle</ac:parameter><ac:rich-text-body><p><a href=\"https://gradle.org/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Gradle</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;is a command line build tool, in the same spirit as other tools such as&nbsp;</span><a href=\"http://ant.apache.org/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Ant</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;and&nbsp;</span><a href=\"https://maven.apache.org/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Maven</span></span></a><span style=\"color: rgb(35,31,32);\">. Gradle makes it easier to compile and run Java applications with just one command, such as&nbsp;<strong>./gradlew build</strong>&nbsp;and&nbsp;<strong>./gradlew</strong></span> <span style=\"color: rgb(35,31,32);\"><strong>bootRun</strong>. Gradle commands can be executed in a command shell, or by an IDE such as IDEA.&nbsp;</span></p><ul><li><a href=\"https://gradle.org/gradle-download/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Where to download Gradle</span></span></a></li><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1457\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to create a Gradle Spring Project using the Spring Initializr</span></span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"25e75beb-6c80-41da-bc14-8b1f67abb1f7\"><ac:parameter ac:name=\"title\">Intellij IDEA and Gradle</ac:parameter><ac:rich-text-body><p><a href=\"https://www.jetbrains.com/idea/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Intellj IDEA</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;from JetBrains is the recommended editor for this course, for a number of reasons:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">It is a powerful tool, designed for professional developers.</span></li><li><span style=\"color: rgb(35,31,32);\">It is designed and optimized for Java coding.</span></li><li><span style=\"color: rgb(35,31,32);\">It has good support for Java 8, Gradle, and Spring.</span></li><li><span style=\"color: rgb(35,31,32);\">It is not as complex as the most popular alternative,&nbsp;</span><a href=\"http://www.eclipse.org/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Eclipse</span></span></a><span style=\"color: rgb(35,31,32);\">.</span></li><li><span style=\"color: rgb(35,31,32);\">It is the basis for&nbsp;</span><a href=\"http://www.eclipse.org/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Google Android Studio</span></span></a><span style=\"color: rgb(35,31,32);\">, the standard development tool for Android apps.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Use&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1456\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">our&nbsp;eBook on IDEA and Gradle</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;as your starting point for learning about IDEA and Gradle.</span><br /><span style=\"color: rgb(35,31,32);\">Here are some specific sections in the IDEA ebook that you will need:</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1456\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to install Intellij IDEA</span></span></a></li><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1456\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to set up IDEA</span></span></a></li><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=25\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to edit in Intellij IDEA</span></span></a></li></ul><p><span style=\"color: rgb(35,31,32);\">&nbsp;Here are some specific sections about using Gradle within IDEA:</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=23\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to import Gradle projects</span></span></a></li><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=24\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to run Gradle projects</span></span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"36e45b44-cf7d-449e-aafc-a22c53689b2d\"><ac:parameter ac:name=\"title\">Spring and JPA</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\"><strong>JPA</strong>&nbsp;(<strong>Java Persistence API</strong>) is a standard library in Java for describing how Java classes should be&nbsp;<strong>persisted</strong>, i.e., stored in a permanent sharable way, to a relational database. JPA itself just describes an interface language for describing the connection. There are different code libraries that implement JPA. The most popular is called&nbsp;<strong>Hibernate</strong>.</span><br /><span style=\"color: rgb(35,31,32);\">Hibernate is included in the&nbsp;<strong>Spring</strong>&nbsp;Framework, which is a large collection of Java libraries. Spring is very complicated and has to support&nbsp;many complex tasks, including database, security, mapping Java data to JSON (JavaScript Object Notation) and so on.&nbsp;<strong>Spring Boot&nbsp;</strong>is a project designed to make using the Spring tools as simple as possible.</span><br /><span style=\"color: rgb(35,31,32);\">Spring Boot, which includes&nbsp;<strong>JPA</strong>, is a powerful library that makes of advanced Java concepts. Understanding how it works and what you can do with it isn't something you can pick up right away.</span><br /><span style=\"color: rgb(35,31,32);\">But the nice thing about Spring is that you don't have to understand it in depth to use it. Spring was designed to reduce the amount of code you have to write, and to make that code as simple as possible. Each version of Spring, while adding more features, has also simplified what you need to do for the most common cases.</span><br /><span style=\"color: rgb(35,31,32);\">Spring Boot and JPA have many advanced features. Don't try to learn or use them all. Focus on just the things you need first.</span><br /><span style=\"color: rgb(35,31,32);\">Study the following&nbsp;annotated examples using Spring to do tasks very similar to what you need to do. Follow the examples as closely as possible. Change the parts that seem obvious, like names of classes and variables. If something breaks, look to see if you left out an&nbsp;<strong>import</strong>&nbsp;or method definition that the examples had.</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=33\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to define an entity using Spring databases and JPA&nbsp;</span></span></a></li><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1166\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to make a&nbsp;</span><strong>RestRepository</strong></span></a></li><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=44\"><span style=\"color: rgb(35,82,124);\"><span style=\"text-decoration: underline;\">How to initialize application data with&nbsp;a&nbsp;</span><strong>CommandLineRunner</strong><span style=\"text-decoration: underline;\">.</span></span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"8d51a642-da62-4d1f-a126-f7c89ac74898\"><ac:parameter ac:name=\"title\">Javascript</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Despite the name, JavaScript has nothing to do with Java. It was created by a completely different company. It was originally called LiveScript and was renamed JavaScript&nbsp;because Java was becoming&nbsp;very popular at the time.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">For quite a while, JavaScript was considered a useful but minor addition to web browsers to enable amusing web animation tricks. But gradually the language evolved, became standardized, became many times&nbsp;faster in most browsers, accumulated a number of very powerful libraries, and moved in uses&nbsp;beyond&nbsp;the browser.&nbsp;Today it is possible to build an entire web application, front and back, using just JavaScript.&nbsp;&nbsp;&nbsp;</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1060\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">JavaScript eBook</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- skim from the beginning at least through the section on using objects.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The eBook is a condensed fly through the key concepts. If something doesn't make sense, come up with concrete examples of of code you don't understand and go to the web, your peers, and your mentor.</span><br /><span style=\"color: rgb(35,31,32);\">The most important aspect of JavaScript you may not have seen before is getting JSON data from a server with AJAX calls.&nbsp;</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1171\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Overview of AJAX calls in JavaScript</span></span></a></li></ul></ac:rich-text-body></ac:structured-macro><p><strong>Optional resources</strong></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"9c0c036a-cd21-46f9-bee0-dafaa00782d3\"><ac:parameter ac:name=\"title\">Background on Java IDEs</ac:parameter><ac:rich-text-body><ul><li><a href=\"http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/keplersr1\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Overview of Eclipse</span></span></a></li><li><a href=\"https://netbeans.org/features/java/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Overview of Netbeans</span></span></a></li><li><a href=\"https://www.jetbrains.com/idea/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Overview of Intellij IDEA</span></span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"a7f5ca06-bd32-4758-903a-ddce9c0abe10\"><ac:parameter ac:name=\"title\">Gradle and Maven</ac:parameter><ac:rich-text-body><ul><li><a href=\"https://maven.apache.org/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Overview of Maven</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Maven has been around longer than Gradle, so many articles on Spring use it. Maven uses XML files that are much harder to read than Gradle files.</span><ul><li><span style=\"color: rgb(35,31,32);\">If you want to experiment with a Maven-based project</span><ul><li><span style=\"color: rgb(35,31,32);\">Download it.</span></li><li><span style=\"color: rgb(35,31,32);\">Run&nbsp;<strong>gradle</strong></span> <span style=\"color: rgb(35,31,32);\"><strong>init</strong>&nbsp;to create&nbsp;<strong>.gradle</strong>&nbsp;files from&nbsp;&nbsp;the Maven&nbsp;<strong>.pom&nbsp;</strong>file.</span></li><li><span style=\"color: rgb(35,31,32);\">Study the results.</span></li></ul></li></ul></li><li><a href=\"https://gradle.org/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Overview of Gradle</span></span></a></li><li><a href=\"https://docs.gradle.org/current/userguide/gradle_wrapper.html\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Overview of gradle wrapper</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- if you're curious what the difference is between&nbsp;<strong>gradle</strong>&nbsp;and&nbsp;<strong>gradlew</strong></span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"07d09ee9-93f6-4509-b37e-c06820aeed57\"><ac:parameter ac:name=\"title\">JPA and Spring Boot</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">As you explore and need more features, check out the brief guides the Spring Boot project developers have written:</span></p><ul><li><a href=\"https://spring.io/guides\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Spring Guides</span></span></a></li></ul><p><span style=\"color: rgb(35,31,32);\">These show many examples of different kinds of applications you can do.</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />Caution: The guides are a community effort and not updated very frequently. They may use Spring 1.2 or 1.3. You can tell by looking in the&nbsp;<strong>build.gradle</strong>&nbsp;file for the sample code. Some packages may be renamed in Spring 1.4, or there may be a simpler way to do something. A few major changes happened with Spring Boot 2.0, e.g.,&nbsp;<strong>findOne()</strong>&nbsp;was replaced with the slightly different&nbsp;<strong>findById()</strong>. See&nbsp;<a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=33\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">the ebook</span></span></a>.&nbsp;</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"487ec407-0a12-4c3f-9a8c-14d3aee26f4d\"><ac:parameter ac:name=\"title\">Miscellaneous</ac:parameter><ac:rich-text-body><ul><li><a href=\"https://www.elegantthemes.com/blog/resources/the-11-best-code-editors-available-in-2015\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">List of code editors</span></span></a></li><li><span style=\"color: rgb(35,31,32);\">Firefox: Get&nbsp;</span><a href=\"https://addons.mozilla.org/en-us/firefox/addon/jsonview/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">the JSONView plugin</span></span></a><span style=\"color: rgb(35,31,32);\">.</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "261390618",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java - Task 2 Resources",
    "content": "<p><span style=\"color: rgb(35,31,32);\">A brief guide to the Resource subsections:</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Java:</strong>&nbsp;Besides getting more familiar with Java in general, now is a good time to learn about collections, streams from collections, maps, and dates.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Spring and JPA:&nbsp;</strong>The main new thing to be sure you understand is the many-to-many data relationship.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Databases:</strong>&nbsp;One-to-many, many-to-many, columns, joins, etc., are all concepts from databases, not Java or Spring. While you don't need to write code, e.g., SQL, to directly interact with your databases, it will help you use JPA correctly if you understand what is actually happening under the hood.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>JavaScript:&nbsp;</strong>Focus here is on generating HTML on a web page, based on data in a JSON object, including formatting dates.</span></p><p><br /><span style=\"color: rgb(35,31,32);\"><strong>Required resources</strong></span></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"97154bea-1eb4-4dbe-8579-6196fdca6c77\"><ac:parameter ac:name=\"title\">Java</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Try another pass at the eBook:</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=29\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Java concepts eBook</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- skim from the beginning&nbsp;through&nbsp;at least the section on types</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Java classes particularly useful in this task are collections, streams,&nbsp;and dates.</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=42\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Java collections</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- collections include list, sets, and&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=42&amp;anchor=maps\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">maps</span></span></a><ul><li><span style=\"color: rgb(35,31,32);\">Maps are Java's way of storing keys and values.</span></li><li><span style=\"color: rgb(35,31,32);\">If a request method builds and returns a Map, Spring will add code to convert the map into&nbsp;JSON for you.</span></li></ul></li><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=47\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Streams</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;are a set of classes and methods that make it easy to process a collection, e.g., to transform&nbsp;a list of data from a collection, to sum&nbsp;up a collection of numbers, and so on. Streams lead to very compact and easy to modify code.</span></li><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1167\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How</span></span></a><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1167\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">&nbsp;t</span></span></a><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1167\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">o</span></span></a><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1167\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">&nbsp;create dates</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- dates seem simple but appearances are deceiving. Java is on its third set of classes for handling dates!</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"63c2d1e6-5234-403f-9c2e-8a578c3e8056\"><ac:parameter ac:name=\"title\">Spring and JPA</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">In the&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=32\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Spring Boot eBook</span></span></a><span style=\"color: rgb(35,31,32);\">,&nbsp;you should have looked at the sections up to and including&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1169\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Data Transfer Objects</span></span></a><span style=\"color: rgb(35,31,32);\">.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">An&nbsp;important new JPA concept to understand well is the case where two classes have&nbsp;a &quot;many to many&quot; relationship, e.g., a magazine has many subscribers (i.e., people), and a person may subscribe to many magazines.&nbsp;</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=33&amp;anchor=joined-many-to-many\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to join many-to-many relationships</span></span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"6f64b097-95aa-4e8e-887c-1d3bda37ff52\"><ac:parameter ac:name=\"title\">Databases</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Spring JPA and the Hibernate library will take care of storing and retrieving data from your databases. But it will be easier for you to&nbsp;read error messages and debug problems if you have a basic idea of what JPA needs&nbsp;to do. Plus, some day you will probably need to write database code. This is a good way to get acclimated to the basic concepts.</span><br /><span style=\"color: rgb(35,31,32);\">For a quick introduction to the basic concepts and terms used in databases, see</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=50\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">the Database concepts eBook</span></span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"911d93d0-d5bc-4ebb-99c8-8f28b25b61ac\"><ac:parameter ac:name=\"title\">JavaScript</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Particularly important in this task is generating HTML from&nbsp;JSON data. These two links cover the basics:</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=61\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to create and access data objects</span></span></a></li><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1458\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to create dynamic HTML pages</span></span></a></li><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1058\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to format dates for users</span></span></a></li></ul></ac:rich-text-body></ac:structured-macro><p><span style=\"color: rgb(35,31,32);\"><strong>Optional resources</strong></span></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"9daa00df-06bc-4ae0-adef-5652569c37a5\"><ac:parameter ac:name=\"title\">Java</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">As new concepts, such as collections, come up, look for tutorials about them at Oracle</span></p><ul><li><a href=\"http://docs.oracle.com/javase/tutorial/java/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">The Java Trail&nbsp;</span></span></a><span style=\"color: rgb(35,31,32);\">&ndash; an extensive set of tutorials from Oracle, the home of Java</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"8a5c2539-38c5-458b-b3c2-6a558a84f69f\"><ac:parameter ac:name=\"title\">Spring</ac:parameter><ac:rich-text-body><ul><li><a href=\"http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Common Spring Boot configuation properties</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- A list of many of the properties you can set to control how Spring, Hibernate, Jackson, and other tools in the Spring suite behave. The defaults should be all you need, unless instructed otherwise in a Plan of Attack.</span></li><li><a href=\"https://spring.io/guides\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Spring Guides</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- return to the guides as questions arise</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"23f69c8a-2cbb-43ae-9277-fb4b3e400393\"><ac:parameter ac:name=\"title\">Databases</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">A good&nbsp;overview of databases and database operations is</span></p><ul><li><a href=\"http://www.dummies.com/how-to/content/knowing-just-enough-about-relational-databases.html\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Knowing Just Enough about Relational Databases</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;from&nbsp;<strong>Databases For Dummies</strong></span></li></ul><p><span style=\"color: rgb(35,31,32);\">Although the Java Persistence API (JPA) annotations make it unnecessary to write Structured Query Language (SQL) commands for simple applications, knowing what SQL looks like&nbsp;can help you&nbsp;understand how the JPA annotations work and why they use the terms they do.</span><br /><span style=\"color: rgb(35,31,32);\">A good overview of this material is</span></p><ul><li><a href=\"https://docs.oracle.com/javase/tutorial/jdbc/overview/database.html\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">A Relational Database Overview</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;from Oracle</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"710306ee-8e01-4a4d-ad86-16ef17a12a92\"><ac:parameter ac:name=\"title\">Agile Development</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">For a quick introduction to agile software development concepts, see</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1087\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">the Agile Development basic concepts eBook</span></span></a></li></ul><p><span style=\"color: rgb(35,31,32);\">For a wealth of information on agile, see</span></p><ul><li><a href=\"https://www.agilealliance.org/agile101/what-is-agile/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">What is Agile Software Development?</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;from the Agile Alliance</span></li><li><a href=\"https://www.versionone.com/agile-101/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Agile 101</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;from VersionOne</span></li><li><a href=\"http://guide.agilealliance.org/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Guide to Agile Practices</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;from the&nbsp;Agile Alliance</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"d1a8734b-da30-461f-a278-bdcacc88873f\"><ac:parameter ac:name=\"title\">REST</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Roy Fielding in his PhD disssertation analyzed the principles behind this design, and those principles became the REST guidelines for building web applications of all sorts.</span><br /><span style=\"color: rgb(35,31,32);\">We will grossly over-simplify these guidelines as follows:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Do not design&nbsp;URLs as commands, e.g.,&nbsp;<strong>/add/25</strong>&nbsp;or&nbsp;<strong>/register?course=c110&amp;student=pa562</strong>&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">Instead, design&nbsp;URLs as identifiers for resources. &quot;Resource&quot; here means &quot;container of content.&quot;&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">Use the HTTP methods&nbsp;<strong>GET</strong>,&nbsp;<strong>POST</strong>,&nbsp;<strong>PUT</strong>, and&nbsp;<strong>DELETE</strong>&nbsp;to manage resources.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The idea is to make web applications work just like classic static web sites.&nbsp;When your browser asks for a file &ndash; HTML, CSS, JavaScript, image, whatever &ndash; &nbsp;the browser sends a&nbsp;<strong>GET</strong>&nbsp;command and a URL. That URL&nbsp;is a unique&nbsp;identifier for the file.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\"><strong>GET</strong>&nbsp;should have&nbsp;no side effects on the server. Getting something twice should get the same resource.</span><br /><span style=\"color: rgb(35,31,32);\">A&nbsp;resource is a container.&nbsp;<strong>GET&nbsp;</strong><em>URL</em>&nbsp;should always return the same&nbsp;container, but the contents may&nbsp;change. E.g., a shopping cart is a resource, but what's in it will change as a user adds and removes items from it.</span><br /><span style=\"color: rgb(35,31,32);\">The web, in particular, the</span> <span style=\"color: rgb(35,31,32);\">HyperText Transfer Protocol (HTTP), has just a few commands (called methods) to accessing and&nbsp;changine&nbsp;the resources on the server:</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong>GET</strong>&nbsp;<em>URL</em>&nbsp;says &quot;get the source with this URL.&quot;&nbsp;<strong>GET</strong>&nbsp;should have&nbsp;no side effect on the server.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>PUT</strong>&nbsp;<em>URL +&nbsp;data</em>&nbsp;says &quot;create a resource with the given URL&nbsp;with&nbsp;the given data.&quot;&nbsp;<strong>PUT&nbsp;</strong>will affect the server, but one or more&nbsp;calls with&nbsp;the same URL and data should have the same effect.&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>POST</strong>&nbsp;<em>URL +&nbsp;data</em>&nbsp;says &quot;modify&nbsp;the resource with the given URL using&nbsp;the given data.&quot;&nbsp;Exactly what this means up to the application. Multiple calls with the same URL and data might have different effects.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>DELETE</strong>&nbsp;<em>URL</em>&nbsp;says &quot;delete the resource with this URL.&quot;</span></li></ul><p><span style=\"color: rgb(35,31,32);\">REST says you should do the same thing when building any kind of web application, even one that seems like it is all about actions by users. For example:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">A shopping site:</span><ul><li><span style=\"color: rgb(35,31,32);\">Resources are catalogs, lists items to buy, customers, and shopping carts</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>GET</strong>&nbsp;is used to get items, customer profiles, carts, etc.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>PUT</strong>&nbsp;and&nbsp;<strong>POST</strong>&nbsp;are used to add items to catalogs, create customers, create carts, add items to carts</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">A chess game</span><ul><li><span style=\"color: rgb(35,31,32);\">Resources are players, games, lists of moves</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>GET</strong>&nbsp;is used to get players, games, and move histories</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>PUT</strong>&nbsp;and&nbsp;<strong>POST</strong>&nbsp;are used to create players, games, and add moves to the move lists</span></li></ul></li></ul><p><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />Read more in this&nbsp;<a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1168\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">ebook section about Applications and Controllers</span></span></a>.<br /><span style=\"color: rgb(35,31,32);\">A nice overview of REST in the Spring context:</span></p><ul><li><a href=\"https://spring.io/understanding/REST\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Understanding REST</span></span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "261423376",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java - Task 3",
    "content": "<h2><span style=\"color: rgb(153,153,153);\">Introduction</span></h2><p><span style=\"color: rgb(35,31,32);\">You've been asked to implement the story &quot;As a player in a game, I can see a display of where my ships are.&quot;&nbsp;The user interface for this will be a simple grid on an HTML page. The exact look of this table is up to you, as long as it shows marks for cells occupied by ships, and&nbsp;includes the standard Salvo row and column labels.</span><br /><span style=\"color: rgb(35,31,32);\">This story is the first part of implementing &quot;As a player, I can see all the information about a game that I'm playing.&quot;&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">This means that instead of showing all games, with just a little data per game, you will generate JSON to show one game in more detail.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">First you will show&nbsp;ships. Later you will add&nbsp;salvos and other information.</span><br /><span style=\"color: rgb(35,31,32);\">Implementing this current story means implementing</span></p><ul><li><span style=\"color: rgb(35,31,32);\">JPA code and database tables for&nbsp;ships&nbsp;and ship locations</span></li><li><span style=\"color: rgb(35,31,32);\">Java code&nbsp;for a game player to return&nbsp;the ships a player has&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">application controller code&nbsp;to include the player's ship locations in the&nbsp;JSON&nbsp;for the player's view of the game</span></li><li><span style=\"color: rgb(35,31,32);\">web page code to display the JSON data in the grid form, i.e., an HTML table</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Fortunately, this does not involve anywhere near as many concepts as the previous task. This is an opportunity to apply and practice what you've learned, with slight variations.</span></p><h2><span style=\"color: rgb(153,153,153);\">Path Variables</span></h2><p><span style=\"color: rgb(35,31,32);\">To get the JSON data transfer object with the ships for a particular game player, you need to include who the game player is in the request.</span><br /><span style=\"color: rgb(35,31,32);\">For a RESTful application, the standard approach is to use a URL that includes&nbsp;<strong>nn</strong>. For example, the&nbsp;<strong>PlayerRestRepository</strong>&nbsp;takes a URL like this:</span><br /><span style=\"color: rgb(35,31,32);\">/rest/players/nn</span><br /><span style=\"color: rgb(35,31,32);\">where&nbsp;<strong>nn</strong>&nbsp;is the ID of the player. So we could do the same thing for our app controller, e.g.,&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">/api/game_view/nn</span><br /><span style=\"color: rgb(35,31,32);\">to return the view of a game that GamePlayer&nbsp;<strong>nn</strong>&nbsp;should see.</span><br /><span style=\"color: rgb(35,31,32);\">These are called&nbsp;<strong>path variables</strong>&nbsp;because values, like&nbsp;<strong>nn</strong>, are stored in the URL directly. Spring makes it fairly easy to define requests that do this. For example, here's a fragment of&nbsp;such a&nbsp;method definition in a Spring controller:</span><br />@RequestMapping(&quot;/owners/{ownerId}&quot;)<br />public String findOwner(@PathVariable Long ownerId) {<br />Owner owner = ownerService.findOwner(ownerId);<br />...<br />}<br /><span style=\"color: rgb(35,31,32);\">This will match URLs such as&nbsp;<strong>/api/owners/32</strong>&nbsp;and will set&nbsp;<strong>ownerId</strong>&nbsp;to the long integer&nbsp;<strong>32</strong>. Spring automatically takes care of parsing out the number from the URL string. For more details, see the&nbsp;<strong>Resources</strong>.</span></p><h2><span style=\"color: rgb(153,153,153);\">One-to-Many Relationships with&nbsp;@ElementCollection</span></h2><p><span style=\"color: rgb(35,31,32);\">A ship has several locations, e.g., H3, H4, and H5. I.e., you have&nbsp;a&nbsp;<strong>one-to-many</strong>&nbsp;relationship between ships and locations.</span><br /><span style=\"color: rgb(35,31,32);\">In the previous task, you implemented a&nbsp;<strong>many-to-many</strong>&nbsp;relationship between games and players by creating a&nbsp;<strong>GamePlayer</strong>&nbsp;object implementing two&nbsp;<strong>one-to-many</strong>&nbsp;relationships between entities:</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong>Game</strong>&nbsp;has&nbsp;a&nbsp;<strong>one-to-many</strong>&nbsp;relationship with&nbsp;<strong>GamePlayer</strong></span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Player</strong>&nbsp;has&nbsp;a&nbsp;<strong>one-to-many</strong>&nbsp;relationship with&nbsp;<strong>GamePlayer</strong></span></li><li><span style=\"color: rgb(35,31,32);\">ergo,&nbsp;<strong>Game</strong>&nbsp;has a&nbsp;<strong>many-to-many</strong>&nbsp;relationship with&nbsp;<strong>Player</strong></span></li></ul><p><span style=\"color: rgb(35,31,32);\">For this task, you could create a&nbsp;<strong>ShipLocation</strong>&nbsp;entity, and set up a&nbsp;<strong>one-to-many</strong>&nbsp;relationship from&nbsp;<strong>Ship</strong>&nbsp;to&nbsp;<strong>ShipLocation</strong>.</span><br /><span style=\"color: rgb(35,31,32);\">There's no need to create new entities for simple data, such as numbers and strings.&nbsp;Locations are just strings, e.g.,&nbsp; &quot;H2&quot; and &quot;B3&quot;. In Java JPA, you can create a&nbsp;<strong>one-to-many</strong>&nbsp;relationship from an entity, such as&nbsp;<strong>Ship</strong>, to a basic data type, such as a location string, using the&nbsp;<strong>@ElementCollection&nbsp;</strong>annotation.&nbsp;&nbsp;See the entry on&nbsp;<strong>@ElementCollection</strong>&nbsp;in the&nbsp;<strong>Resources</strong>.</span></p><h2><span style=\"color: rgb(153,153,153);\">Data Transfer Objects</span></h2><p><span style=\"color: rgb(35,31,32);\">The main goal of this task is to send a player a JSON object with all the data that player needs to play the game. There are two ideas you might have for how to do this with as little new Java code&nbsp;as possible:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Write JavaScript to get&nbsp;JSON using&nbsp;the&nbsp;<strong>RestRepository</strong>&nbsp;URLs.&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">Write one short method in the application controller to return a&nbsp;<strong>GamePlayer&nbsp;</strong>object. That object contains not only player information but a link to the entire game object.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Both have serious problems. The first method, using the RestRepository URLs,&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">requires many separate requests&nbsp;to get all the data you need</span></li><li><span style=\"color: rgb(35,31,32);\">each call returns a lot of JSON information you don't need</span></li><li><span style=\"color: rgb(35,31,32);\">a player who knows how to run JavaScript could use similar calls to get information about the opponent!&nbsp;</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The second method, returning a&nbsp;<strong>GamePlayer&nbsp;</strong>object, is even worse.&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">If you could send JSON for a&nbsp;<strong>GamePlayer</strong>&nbsp;object, it would include information about all the players, including where their ships are</span></li><li><span style=\"color: rgb(35,31,32);\">But you can't, because the library to convert a&nbsp;<strong>GamePlayer</strong>&nbsp;to JSON will go into an infinite loop!</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Spring uses the standard&nbsp;<strong>Jackson</strong>&nbsp;library to&nbsp;<strong>serialize</strong>&nbsp;Java objects to JSON strings. &quot;Serialize&quot; means writing an instance of an object as a flat string of text. Data needs to be serialized to send over the internet.</span><br /><span style=\"color: rgb(35,31,32);\">To serialize a&nbsp;<strong>GamePlayer</strong>, Jackson needs to serialize all the values in the instance variables, including the&nbsp;<strong>Game</strong>&nbsp;object a&nbsp;<strong>GamePlayer</strong>&nbsp;contains. To serialize the&nbsp;<strong>Game</strong>&nbsp;object, Jackson needs to serialize the&nbsp;<strong>GamePlayer</strong>&nbsp;objects the game contains. See the loop?</span><br /><span style=\"color: rgb(35,31,32);\">Circular references between instances is very common in applications.&nbsp;They don't bother Java, or&nbsp;the&nbsp;database, but they do bother any code that has to&nbsp;<strong>serialize</strong>&nbsp;instances of such&nbsp;classes, such as Jackson.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">There are ways to annotate classes to tell Jackson how to avoid loops, but things get complicated quickly, because&nbsp;you need&nbsp;different serialization rules for different situations.</span><br /><span style=\"color: rgb(35,31,32);\">It's simpler to instead create&nbsp;<strong>data transfer objects</strong>&nbsp;as needed in Java and give them to Jackson to convert. This is effectively what you did in the first task. You construct&nbsp;Java data transfer objects&nbsp;with just the information you want to share, and no circular references. Then Jackson will convert them to JSON for you. See the entry on data transfer objects in the&nbsp;<strong>Resources</strong>.</span></p><p class=\"auto-cursor-target\"><br /></p><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"ea0eb42f-feeb-4121-b6e9-ecd54b5dd321\"><ac:parameter ac:name=\"title\">Step 1 - Create a Ship REST repository</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">As with implementing games and players, implementing ships requires implementing&nbsp;two Java classes.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Implement the&nbsp;<strong>Ship</strong>&nbsp;class.&nbsp;A ship object needs to have a unique ID&mdash;so it can be referred to&nbsp;elsewhere; a type&mdash;whether it's e.g., a cruiser, destroyer, or battleship; and a list of locations.</span></li><li><span style=\"color: rgb(35,31,32);\">Implement the&nbsp;<strong>ShipRepository</strong>&nbsp;class. This manages the creation and retrieval of ships from the database.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">You also need to add fields and methods to link game players to ships:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">A ship has a game player. &nbsp;</span><ul><li><span style=\"color: rgb(35,31,32);\"><strong>ship.getGamePlayer()</strong>&nbsp;should return that player.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">A game player has a set of ships.&nbsp;</span><ul><li><span style=\"color: rgb(35,31,32);\"><strong>gamePlayer.getShips()</strong>&nbsp;should return a&nbsp;<strong>Set</strong>&nbsp;of ships</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">This will look very much like the code you defined linking&nbsp;players and game players.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Define the Java Classes</span></h2><p><span style=\"color: rgb(35,31,32);\">Repeat the process you did with&nbsp;<strong>Game</strong>&nbsp;to create&nbsp;<strong>Ship&nbsp;</strong>and&nbsp;<strong>ShipRepository</strong>. &nbsp;Define the classes for&nbsp;<strong>Ship&nbsp;</strong>and&nbsp;<strong>ShipRepository</strong>&nbsp;following the examples in&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=33\"><span style=\"color: rgb(51,122,183);\">the eBook on Spring databases and JPA</span></a><span style=\"color: rgb(35,31,32);\">.&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">In Intellij IDEA, use&nbsp;<strong>File | New ... | Java Class</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Name the class&nbsp;<strong>Ship</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Edit the generated Java code as appropriate to define&nbsp;<strong>Ship</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Repeat by making a new class for&nbsp;<strong>ShipRepository</strong></span><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1166\"><span style=\"color: rgb(51,122,183);\">Make the repository a&nbsp;RestRepository</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;so that you can use your browser to view the stored data in the testing below.&nbsp;</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">A ship object needs data fields for</span></p><ul><li><span style=\"color: rgb(35,31,32);\">A database-generated ID, as with&nbsp;<strong>Game</strong></span></li><li><span style=\"color: rgb(35,31,32);\">A ship type (i.e. &quot;cruiser&quot;)</span></li><li><span style=\"color: rgb(35,31,32);\">A&nbsp;<strong>GamePlayer</strong></span></li><li><span style=\"color: rgb(35,31,32);\">A list of locations, i.e., cells on the grid, e.g., [&quot;H3&quot;, &quot;H4&quot;, &quot;H5&quot;]</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Because GamePlayer is a&nbsp;reference to an object stored in another data table, you need to add JPA annotations to tell JPA how to connect the tables together. &nbsp;One gamePlayer has many ships, so follow the&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=33\"><span style=\"color: rgb(51,122,183);\">example of one-to-many relationships</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;to connect the GamePlayer and Ship tables.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Because the locations are simple strings, you do not need to create a new repository for ship locations. You can just use an&nbsp;<strong>ElementCollection</strong>. See the&nbsp;<strong>Resources</strong>&nbsp;for details.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test Your Syntax</span></h2><p><span style=\"color: rgb(35,31,32);\">Run the Gradle&nbsp;<strong>build</strong>&nbsp;task to make sure your code is syntactically correct, &nbsp;all necessary classes and methods are defined, and all necessary library code is imported.</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />If&nbsp;<strong>build</strong>&nbsp;fails, it's because of a compiler error. Look at&nbsp;<em>the&nbsp;<span style=\"text-decoration: underline;\">first</span>&nbsp;few error messages</em>. Fix those and&nbsp;<strong>build</strong>&nbsp;again. The first&nbsp;syntax&nbsp;error&nbsp;can cause many error messages, so just focus on fixing the first few errors, and any you see that are obvious, like a misspelled name.</p><h2><span style=\"color: rgb(153,153,153);\">Create the Sample Data</span></h2><p><span style=\"color: rgb(35,31,32);\">Change your&nbsp;<strong>CommandLineRunner</strong>&nbsp;in your application class to create ships, using&nbsp;<strong>new Ship()</strong>.<strong>&nbsp;</strong></span></p><ul><li><span style=\"color: rgb(35,31,32);\">Create at least several ships for several players in several games, using&nbsp;<strong>new Ship()</strong>,&nbsp;<em>gamePlayer</em><strong>.addShip()</strong>, and so on.&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">Use the example ship data given in the testbed database document attached to the email in Task 1.</span></li><li><span style=\"color: rgb(35,31,32);\">Save the entities in the appropriate repositories.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">When creating ships, you will need to give lists of locations. See the&nbsp;<strong>Resources</strong>&nbsp;for easy ways to create lists in test data.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test by Browsing the JSON &nbsp;</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>Run the Gradle task&nbsp;bootRun.</strong></span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />If&nbsp;<strong>bootRun</strong>&nbsp;fails with a compiler error, check for and fix the first few errors as above, then try again.<br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />If the&nbsp;last line of the&nbsp;<strong>bootrun</strong>&nbsp;output is not &quot;Started Application in ... seconds ...&quot;&nbsp;then&nbsp;<strong>bootRun</strong>&nbsp;failed to start the web service.&nbsp;&nbsp;Look at&nbsp;<em>the last error message&nbsp;</em>in the output window.&nbsp;When runtime errors happen, the last message will often be&nbsp;the&nbsp;<strong>root</strong>&nbsp;cause of the error.<br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />One common root cause is that another bootRun service is still active. If&nbsp;<strong>Run | Stop</strong>&nbsp;is available, that's the problem. Stop the previous run, close the extraneous bootRun output tab, and run again.<br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />Another common cause of&nbsp;<strong>bootRun</strong>&nbsp;failure is a problem creating or saving the test data. &nbsp;Look for root cause error messages about an unknown data column, or an&nbsp;entity that can't be saved because it contains another unsaved entity. Fix your code appropriately.<br /><span style=\"color: rgb(35,31,32);\">If&nbsp;<strong>bootRun</strong>&nbsp;starts the application, open&nbsp;the&nbsp;<strong>RestRepository</strong>&nbsp;URLs in your &nbsp;browser to see if the stored data is correct and complete:</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong><a class=\"external-link\" href=\"http://localhost:8080/rest/gamePlayers/1\" rel=\"nofollow\">http://localhost:8080/rest/gamePlayers/1</a></strong>&nbsp;should show&nbsp;a list of ships&nbsp;for game player 1, for example</span></li><li><span style=\"color: rgb(35,31,32);\"><strong><a class=\"external-link\" href=\"http://localhost:8080/rest/ships\" rel=\"nofollow\">http://localhost:8080/rest/ships</a></strong>&nbsp;should show a list of all ships&nbsp;in all games</span></li></ul><p><span style=\"color: rgb(35,31,32);\">If data is missing, it might be because you didn't</span></p><ul><li><span style=\"color: rgb(35,31,32);\">save everything in the appropriate repositories</span></li><li><span style=\"color: rgb(35,31,32);\">connect entities together completely, e.g., there's no link from a ship to game player, or from a game player to their ships</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"ddca08a7-d2ea-4450-a226-578e24b9f044\"><ac:parameter ac:name=\"title\">Step 2 - Update the controller</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">We need to update our game controller to have a new method that responds to URLs asking for information about a specific game from a specific game player's point of view. That information for now should include</span></p><ul><li><span style=\"color: rgb(35,31,32);\">the&nbsp;game player: name and game player ID</span></li><li><span style=\"color: rgb(35,31,32);\">the opponent of this game player: name and game player ID</span></li><li><span style=\"color: rgb(35,31,32);\">what kinds of&nbsp;ships this game player has placed, e.g., destroyer, patrol boat, ...</span></li><li><span style=\"color: rgb(35,31,32);\">where those ships are</span></li></ul><p><span style=\"color: rgb(35,31,32);\">By defining a method in your&nbsp;<strong>RestController</strong>&nbsp;in Java in your web app, you can do all this. When you do, you'll be ready to create the web page and JavaScript to get that JSON data and display it in HTML.</span></p><h2><span style=\"color: rgb(153,153,153);\">Define a Method&nbsp;to Return JSON with GamePlayer Information</span></h2><p><span style=\"color: rgb(35,31,32);\">As a first step, write the code to take a URL of the form&nbsp;<strong>/api/game_view/<em>nn</em></strong><em>&nbsp;and&nbsp;</em>return a JSON object like the game list, but for just one game. E.g., for the first game, it might be the following.&nbsp;</span><br /><span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;created&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1456438201629</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;gamePlayers&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;player&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;email&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;j.bauer@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span> <span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">},</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">2</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;player&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">2</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;email&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;c.obrian@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span> <span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">}</span> <br /><span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(35,31,32);\">One of the GamePlayer IDs should be the&nbsp;<strong><em>nn</em></strong>&nbsp;given in the URL. If not, you've done something wrong.</span><br /><span style=\"color: rgb(35,31,32);\">To do this,&nbsp;you need to add a method to return a game view, given a URL of the form&nbsp;<strong>/api/game_view/<em>nn</em></strong>. To make that happen, you need to</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Add a method that</span><ul><li><span style=\"color: rgb(35,31,32);\">takes a game player ID as a parameter</span></li><li><span style=\"color: rgb(35,31,32);\">returns a&nbsp;<strong>Map&lt;String, Object&gt;</strong>&nbsp;that will be translated into the JSON&nbsp;object&nbsp;above</span><ul><li><span style=\"color: rgb(35,31,32);\">A Java&nbsp;<strong>Map</strong>&nbsp;will turn into a&nbsp;JSON object of the form&nbsp;{&nbsp;<em>key</em>:&nbsp;<em>value</em>, ... }.</span></li><li><span style=\"color: rgb(35,31,32);\">A Java&nbsp;<strong>List&nbsp;</strong>will turn into a&nbsp;JSON array.</span></li><li><span style=\"color: rgb(35,31,32);\">So, to get&nbsp;the above JSON, you want a&nbsp;<strong>Map</strong>&nbsp;with&nbsp;<strong>id</strong>,&nbsp;<strong>created</strong>, and&nbsp;<strong>gamePlayers</strong>, where&nbsp;<strong>gamePlayers</strong>&nbsp;contains a&nbsp;list with a&nbsp;<strong>Map</strong>&nbsp;for each&nbsp;<strong>GamePlayer</strong>.</span></li><li><span style=\"color: rgb(35,31,32);\">Each game player map has an&nbsp;<strong>id</strong>&nbsp;and a&nbsp;<strong>player</strong>, where&nbsp;<strong>player</strong>&nbsp;contains a map for a&nbsp;<strong>Player</strong>.</span></li><li><span style=\"color: rgb(35,31,32);\">The player map has an&nbsp;<strong>id</strong>&nbsp;and&nbsp;<strong>email</strong>.&nbsp;</span></li></ul></li></ul></li><li><span style=\"color: rgb(35,31,32);\">Annotate the method with&nbsp;<strong>@RequestMapping</strong>&nbsp;to map the URL&nbsp;<strong>/game_view/<em>nn</em></strong><em>&nbsp;</em>to that method.</span></li><li><span style=\"color: rgb(35,31,32);\">Annotate the method parameter with&nbsp;<strong>@PathVariable&nbsp;</strong>to extract the desired&nbsp;game player ID&nbsp;<strong><em>nn</em></strong>&nbsp;from&nbsp;the URL as a long integer.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">You will need to autowire a&nbsp;<strong>GamePlayerRepository</strong>&nbsp;into your controller,&nbsp;&nbsp;so that you can get the game player given&nbsp;the ID&nbsp;<strong><em>nn</em></strong>. &nbsp;See the&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1168\"><span style=\"color: rgb(51,122,183);\">ebook</span></a><span style=\"color: rgb(35,31,32);\">from&nbsp;<strong>Resources</strong>&nbsp;for how to</span></p><ul><li><span style=\"color: rgb(35,31,32);\">autowire an instance variable to hold a repository</span></li><li><span style=\"color: rgb(35,31,32);\">get an&nbsp;instance of a class from&nbsp;a&nbsp;<strong>JpaRepository</strong>&nbsp;by ID</span></li><li><span style=\"color: rgb(35,31,32);\">get the&nbsp;<strong><em>nn</em></strong>&nbsp;value from the&nbsp;<strong>RequestMapping</strong>&nbsp;pattern&nbsp;<strong>/api/game_view/<em>nn</em></strong>&nbsp;into a&nbsp;<strong>long&nbsp;</strong>parameter of the method</span></li></ul><p><span style=\"color: rgb(35,31,32);\"><strong>TEST</strong></span><br /><span style=\"color: rgb(35,31,32);\">After updating your controller,&nbsp;start your web app. Assuming it runs, visit&nbsp;<strong><a class=\"external-link\" href=\"http://localhost:8080/api/game_view/1\" rel=\"nofollow\">http://localhost:8080/api/game_view/1</a></strong>&nbsp;in your web browser. Make sure you see the correct game data.</span><br /><span style=\"color: rgb(35,31,32);\">This may not seem like much progress, but&nbsp;it actually means that you wired everything together correctly. Now it's just a matter of including more data in what you send back.</span></p><h2><span style=\"color: rgb(153,153,153);\">Include Ship Data in the&nbsp;JSON</span></h2><p><span style=\"color: rgb(35,31,32);\">Now we want the JSON for the game view for a player to include that player's ships.</span><br /><span style=\"color: rgb(35,31,32);\">The easiest way to do that is to add a new key to the game JSON.</span><br /><span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;created&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1456438201629</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;gamePlayers&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;player&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;email&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;j.bauer@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span> <span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">},</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">2</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;player&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">2</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;email&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;c.obrian@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span> <span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">}</span> <br /><span style=\"color: rgb(153,153,153);\">],</span><br /><span style=\"color: rgb(102,153,0);\">&quot;ships&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><br /><span style=\"color: rgb(153,153,153);\">...</span><br /><span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(35,31,32);\">Since a player has more than one ship, we'll need an array of ships.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Each ship in the array will need to specify&nbsp;two things: what type of ship it is, and what locations it occupies. The locations will be another array.</span><br /><span style=\"color: rgb(35,31,32);\">For example, the first ship assigned to Jack might&nbsp;look like this</span><br /><span style=\"color: rgb(35,31,32);\">{ &quot;type&quot;: &quot;Destroyer&quot;, &quot;locations&quot;: [ &quot;H2&quot;, &quot;H3&quot;, &quot;H4&quot; ] }</span><br /><span style=\"color: rgb(35,31,32);\">The&nbsp;<strong>ships</strong>&nbsp;value for Jack&nbsp;should be a list of JSON items like this:</span><br /><span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;created&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1456438201629</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;gamePlayers&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;player&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;email&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;j.bauer@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span> <span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">},</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">2</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;player&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">2</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;email&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;c.obrian@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span> <span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">}</span> <br /><span style=\"color: rgb(153,153,153);\">],</span><br /><span style=\"color: rgb(102,153,0);\">&quot;ships&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;type&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;Destroyer&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;locations&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(102,153,0);\">&quot;H2&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;H3&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;H4&quot;</span> <span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(153,153,153);\">},</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;type&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;Submarine&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;locations&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(102,153,0);\">&quot;E1&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;F1&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;G1&quot;</span> <span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(153,153,153);\">},</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;type&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;Patrol Boat&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;locations&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(102,153,0);\">&quot;B4&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;B5&quot;</span> <span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(35,31,32);\">Work in small slices. For example, first just try to make and return a list of the JSON for the type of each ship.</span><br /><span style=\"color: rgb(35,31,32);\">{ ...&nbsp;&quot;ships&quot;: [ &quot;Destroyer&quot;, &quot;Submarine&quot;, &quot;Patrol Boat&quot;&nbsp;] }</span><br /><span style=\"color: rgb(35,31,32);\">As in the previous task;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">define private methods to do each subtask</span></li><li><span style=\"color: rgb(35,31,32);\">use streams to loop over collections to collect the data transfer objects</span></li></ul><p><span style=\"color: rgb(35,31,32);\">When the above is working, expand your code to create a list of&nbsp;<strong>Map</strong>s with a&nbsp;<strong>type</strong>&nbsp;key whose value is the ship type,&nbsp;to produce JSON like this</span><br /><span style=\"color: rgb(35,31,32);\">{ ...&nbsp;&quot;ships&quot;: [ { &quot;type&quot;: &quot;Destroyer&quot; }, { &quot;type&quot;: &quot;Submarine&quot; }, { &quot;type&quot;: &quot;Patrol Boat&quot; } ] }</span><br /><span style=\"color: rgb(35,31,32);\">Then finally&nbsp;add code to include in each ship JSON&nbsp;a&nbsp;<strong>location&nbsp;</strong>key whose value is&nbsp;the&nbsp;list of the ship locations.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test!</span></h2><p><span style=\"color: rgb(35,31,32);\">After each change, re-start your web app and check what&nbsp;<strong><a class=\"external-link\" href=\"http://localhost:8080/api/game_view/1\" rel=\"nofollow\">http://localhost:8080/api/game_view/1</a></strong>&nbsp;shows in your web browser. Check that the JSON has the data you need.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"fb297bcd-29cc-4a9c-9139-2421d0a8c975\"><ac:parameter ac:name=\"title\">Step 3 - Create a game web view</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Because you've been inspecting the JSON in your browser, you should be reasonably confident your data is stored correctly.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Now it's time to present this data on a web page for a player. Right now this view will only be showing the player's own ships in a specific game. Later it will include other information, such as where shots have been fired.</span><br /><span style=\"color: rgb(35,31,32);\">As given in the email, the format is simple for now: just a grid with the locations of the ships marked on the grid. That data is in the JSON.</span></p><h2><span style=\"color: rgb(153,153,153);\">Create an Empty Web Page</span></h2><p><span style=\"color: rgb(35,31,32);\">What you need to do now is</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Create a web page&nbsp;<strong>game.html</strong>, with the usual&nbsp;HEAD and BODY boilerplate, in your&nbsp;<strong>web</strong>&nbsp;directory.</span><ul><li><span style=\"color: rgb(35,31,32);\">This page will be a player's view of a game. Right now, all they will see are the ships they have placed.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">Include some title, e.g.,&nbsp;<strong>Ship Locations!</strong>, so that you will know that the page has loaded.</span></li><li><span style=\"color: rgb(35,31,32);\">Have&nbsp;<strong>script</strong>&nbsp;tags to load&nbsp;<strong>jQuery</strong>&nbsp;and a local JavaScript file, e.g.,&nbsp;<strong>game.js</strong></span><ul><li><span style=\"color: rgb(35,31,32);\"><strong>game.js</strong>&nbsp;is just a placeholder.&nbsp;Don't worry about what to put in&nbsp;<strong>game.js</strong>&nbsp;yet. You don't even have to create the file yet.</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">See the&nbsp;<strong>Resources</strong>&nbsp;for where to put the web page and other static assets in a Spring MVC application.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>TEST!</strong>&nbsp;Start your web app and point your browser at&nbsp;<strong><a class=\"external-link\" href=\"http://localhost:8080/web/game.html?gp=1\" rel=\"nofollow\">http://localhost:8080/web/game.html?gp=1</a></strong>. You should see your title information.</span><br /><span style=\"color: rgb(35,31,32);\">The&nbsp;<strong>?gp=1</strong>&nbsp;is being ignored right now, but include it in your testing from the start.</span></p><h2><span style=\"color: rgb(153,153,153);\">Create an Empty Grid</span></h2><p><span style=\"color: rgb(35,31,32);\">Create the&nbsp;<strong>game.js</strong>&nbsp;file in your&nbsp;<strong>web</strong>&nbsp;directory.</span><br /><span style=\"color: rgb(35,31,32);\">In&nbsp;<strong>game.js</strong>, write&nbsp;<strong>jQuery</strong>&nbsp;code that on page load will</span></p><ul><li><span style=\"color: rgb(35,31,32);\">create an empty grid with numbers across the top and letters on the left side, per the email.</span><ul><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">See&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1458\"><span style=\"color: rgb(51,122,183);\">how to create dynamic HTML pages</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;for example code to generate lists and tables from lists of data.&nbsp;The lists that drive building Salvo grids&nbsp;are the column and row headers.</span><br /><span style=\"color: rgb(35,31,32);\">Initially, just put an&nbsp;empty grid on the page. Style it with CSS so that it has nice borders and square cells. In the subtasks below, you will change your JavaScript code to loop over the data and fill in the cells&nbsp;appropriately. See the&nbsp;<strong>Resources</strong>.</span></p><h2><span style=\"color: rgb(153,153,153);\">Load the correct GamePlayer data</span></h2><p><span style=\"color: rgb(35,31,32);\">Send an&nbsp;<strong>Ajax</strong>&nbsp;request to&nbsp;<strong>/api/game_view/<em>nn</em></strong></span></p><ul><li style=\"list-style-type: none;\"><ul><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">Refer to the&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1439\"><span style=\"color: rgb(51,122,183);\">JavaScript ebook section 'How to Use URL Parameters'</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;and the Stack Overflow&nbsp;</span><a href=\"http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript\"><span style=\"color: rgb(51,122,183);\">example of how to get the value of a URL parameter</span></a><span style=\"color: rgb(35,31,32);\">, e.g., &quot;1&quot; from&nbsp;<strong>?gp=1</strong>).</span></p><ul><li style=\"list-style-type: none;\"><ul><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">Refer to&nbsp;</span><a href=\"http://stackoverflow.com/questions/31321402/how-to-pass-javascript-variables-inside-a-url-ajax\"><span style=\"color: rgb(51,122,183);\">example of how to call a URL that contains a variable</span></a><span style=\"color: rgb(35,31,32);\">, i.e. /api/gp/gamePlayer_Id)&nbsp;The AJAX data can then be passed into the table loop when it is successfully retrieved.</span></p><h2><span style=\"color: rgb(153,153,153);\">Create&nbsp;Conditional Grid Colors</span></h2><p><span style=\"color: rgb(35,31,32);\">Pass&nbsp;the AJAX data to a function that creates&nbsp;conditional grid colors<strong>&nbsp;</strong>for each game grid location and stores the new grid&nbsp;on the web page. See the&nbsp;<strong>Resources</strong>&nbsp;for the JavaScript ebook sections on looping and conditionals. &nbsp;Remember to work in small slices and test after each change!&nbsp;</span></p><ul><li style=\"list-style-type: none;\"><ul><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">You can access specific data from data objects. &nbsp;See the&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=61\"><span style=\"color: rgb(51,122,183);\">JavaScript ebook section on data objects</span></a><span style=\"color: rgb(35,31,32);\">.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>TEST!</strong>&nbsp;Make sure you're seeing the ship locations for each&nbsp;game. They should be located on the grid&nbsp;per the specifications in the email.</span></p><h2><span style=\"color: rgb(153,153,153);\">Show&nbsp;Game&nbsp;and Player info in&nbsp;the Game View</span></h2><p><span style=\"color: rgb(35,31,32);\">In&nbsp;<strong>game.js</strong>, add functions to display information about the game at the top of the game grid web view. It should clearly indicate</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Who is playing this game, and who is viewing this page</span><ul><li><span style=\"color: rgb(35,31,32);\">This could be as simple as&nbsp;<strong><a href=\"mailto:j.bauer@ctu.gov\">j.bauer@ctu.gov</a> (you) vs&nbsp;<a href=\"mailto:c.obrian@ctu.gov\">c.obrian@ctu.gov</a></strong></span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">Use the game player ID in the URL to determine&nbsp;which game player is &quot;the viewer&quot; in the HTML that's generated.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>TEST!</strong>&nbsp;Make sure you see the correct player email with each game grid.</span><br /><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit&nbsp;<strong>game.js</strong>&nbsp;for code view. Select the &quot;code&quot; format and paste in the entire code.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"cff9b38b-a678-485e-84e9-5cb105d7a0e0\"><ac:parameter ac:name=\"title\">Step 4 - Submit your work</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">The objectives of this task were:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Create data tables for ships and ship locations. &nbsp;The key classes / tables are:</span><ul><li><span style=\"color: rgb(35,31,32);\">Ship, which has an ID and the ID of a game player</span></li><li><span style=\"color: rgb(35,31,32);\">Location, which has a ship ID and a grid cell label</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">Link the data tables so that the JSON data for ships and ship locations can be accessed (/rest/gamePlayers/1/ships, /rest/ships, /rest/ships/1/shipLocations, etc).</span></li><li><span style=\"color: rgb(35,31,32);\">Create sample ship and ship location data per email.</span></li><li><span style=\"color: rgb(35,31,32);\">Display where the&nbsp;ships are on a game grid for a specific player and game. &nbsp;</span><ul><li><span style=\"color: rgb(35,31,32);\">the URL&nbsp;<strong>/web/game.html?gp=1</strong>&nbsp;should display the player email&nbsp;and a grid with his ships for game 1.</span></li></ul></li></ul><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />When this is working, send a cleaned zipped archive of your project folder.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "261423414",
    "conflChildrenId": [
      "263913489"
    ]
  },
  {
    "title": "Java - Task 5 Resources",
    "content": "<p><span style=\"color: rgb(35,31,32);\">This task mostly applies concepts you've already seen.</span><br /><span style=\"color: rgb(35,31,32);\">One new technique in Java that is worth learning is using the&nbsp;<strong>Optional&nbsp;</strong>class&nbsp;to simplify the code for getting&nbsp;the first element in a possibly empty list.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Required resources</strong></span></p><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"24b654b6-3206-4915-824c-148acfa70dc8\"><ac:parameter ac:name=\"title\">Java</ac:parameter><ac:rich-text-body><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=47\"><span style=\"color: rgb(51,122,183);\">How to use&nbsp;<strong>Optional</strong>&nbsp;and&nbsp;<strong>findFirst()</strong>&nbsp;to get an element from a possibly empty stream</span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "263716912",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java - Task 6",
    "content": "<h2><span style=\"color: rgb(153,153,153);\">Introduction</span></h2><p><span style=\"color: rgb(35,31,32);\">You've been asked to add the ability for players to log into the game system with a password. This will require</span></p><ul><li><span style=\"color: rgb(35,31,32);\">modifying the player database table to include password information</span></li><li><span style=\"color: rgb(35,31,32);\">adding authentication code to the&nbsp;web server to handle log in and log out</span></li><li><span style=\"color: rgb(35,31,32);\">adding a method to the application controller to create a new player, if valid information is sent</span></li><li><span style=\"color: rgb(35,31,32);\">modifying the main page JavaScript to&nbsp;get and send log in and sign up information to the server</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The team lead has said that a user who is not logged in would be able to see the current games, and can log in or sign up, by given an email field as a user name, and a password.&nbsp;A logged in user would not see those fields and buttons for logging in, but would see a log out button, and more buttons for joining and creating games.</span><br /><span style=\"color: rgb(35,31,32);\">The team lead is recommending doing all this on the&nbsp;<strong>games.html</strong>&nbsp;page.</span></p><h2><span style=\"color: rgb(153,153,153);\">Authentication and Authorization</span></h2><p><span style=\"color: rgb(35,31,32);\">This is your first encounter with creating a secure web service. Security is a large and complex topic, with many new concepts. Spring Boot will do a lot of the hard work for you, but be prepared for a lot of trial and error to&nbsp;set everything up properly.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Two key concepts&nbsp;to keep straight are authentication and authorization.</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong>Authentication</strong>&nbsp;means determining who the user is.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Authorization</strong>&nbsp;means determining what the user is allowed to do.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Both are critical to securing a web application,&nbsp;protecting user data from accidental or malicious tampering or theft.</span><br /><span style=\"color: rgb(35,31,32);\">Authentication happens first. It involves a negotiation between the web browser and the web server. When the browser sends a request for a protected web page, the web server returns a message saying &quot;login required.&quot; This message also says how login needs to happen.</span><br /><span style=\"color: rgb(35,31,32);\">If login succeeds, then the web server knows who the user is. It can then look for&nbsp;<strong>authorization</strong>&nbsp;rules that say what the user is allowed to read&nbsp;and modify. Even if you have logged in successfully, you might still not be authorized to look at the page you requested.</span><br /><span style=\"color: rgb(35,31,32);\">See the entry on authentication and authorization in the&nbsp;<strong>Resources&nbsp;</strong>for more on&nbsp;this large and complex topic of security.</span></p><h2><span style=\"color: rgb(153,153,153);\">Securing Web Pages</span></h2><p><span style=\"color: rgb(35,31,32);\">Much of what you will find on the web is about securing web pages. When the Spring documentation talks about securing an MVC (model view application) system), that's what they are referring to. The idea is that certain pages are protected, i.e., will only be shown to users who are logged in, i.e., authenticated.</span><br /><span style=\"color: rgb(35,31,32);\">When a web browser requests a page that is protected, the server will tell the browser that the user does not have access to that page with an HTTP error response. That response will&nbsp;also tell&nbsp;the browser on what method needs to be used to log a user in. There are many standardized methods, including BASIC authentication, where the browser gets the name and password information, form-based authentication, where the server provides&nbsp;an HTML form to get that information, and token-based authentication methods where a third-party service, e.g., Google or Facebook, handles the login and provides a token, i.e., a long unique string, for the browser to use as a &quot;key&quot; to access your web app.</span><br /><span style=\"color: rgb(35,31,32);\">However login is done,&nbsp;the browser and the server need some way to remember that&nbsp;someone has logged in so that they don't need to log in over and over. The browser normally handles this by storing a small file, called a&nbsp;<strong>cookie</strong>, with some string sent by the server, that is a &quot;key&quot;.&nbsp;When an&nbsp;authenticated user tries to access another protected page, the browser sends that key string along with the page request. If the server sees a valid key, it just returns the requested page without asking for another log in. The browser and server need to expire this permission, so that others can't sit down to a machine&nbsp;that some previous user was on, and access the protected sites the user was at.</span></p><h2><span style=\"color: rgb(153,153,153);\">Securing Web Services</span></h2><p><span style=\"color: rgb(35,31,32);\">Securing&nbsp;a web app that primarily uses&nbsp;AJAX to send JSON back and forth to a web service is a little different than securing typical web pages. Securing&nbsp;web pages typically involves sending HTML pages to the user at various times, e.g.,</span></p><ul><li><span style=\"color: rgb(35,31,32);\">When you try to access a protected resource, you get an HTML form for logging in.</span></li><li><span style=\"color: rgb(35,31,32);\">When you log out, you get an HTML page saying you have logged out.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">A&nbsp;web service just wants to send JSON back and forth. No&nbsp;HTML should be&nbsp;returned. Fortunately, Spring has the methods for changing&nbsp;what gets sent after various authentication events. The links in the&nbsp;<strong>Resources</strong>&nbsp;describe how to call them.</span><br /><span style=\"color: rgb(35,31,32);\">The major new concept in this task is implementing&nbsp;RESTful HTTP requests to&nbsp;create&nbsp;data on the server. This requests should be done through your application controller API, not through your RESTRepositories. The latter&nbsp;would give end users&nbsp;too much access to your data.</span></p><h2><span style=\"color: rgb(153,153,153);\">RESTful Create Requests</span></h2><p><span style=\"color: rgb(35,31,32);\">The action of signing up&nbsp;means creating a new player. Although you could use PUT with your existing REST controller to add a player object, this not a good idea because it doesn't check if someone is trying to create new player using a name already in use</span><br /><span style=\"color: rgb(35,31,32);\">Therefore, you will want to define an application controller method that responds to a POST with user name and password information, and only adds a new player to the repository if the information is valid and doesn't conflict with&nbsp;an existing player.</span><br /><span style=\"color: rgb(35,31,32);\">In REST, all resource creation actions should follow several HTTP standards:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">The HTTP method&nbsp;should be either a PUT or POST, because those are the methods for adding data to a resource.</span></li><li><span style=\"color: rgb(35,31,32);\">The response status code should be 201, which means data was created.</span></li><li><span style=\"color: rgb(35,31,32);\">The response header may&nbsp;optionally include the URL of the new resource.</span></li><li><span style=\"color: rgb(35,31,32);\">The&nbsp;response body, if there is no error, may optionally contain useful information, e.g.,&nbsp;JSON for the new player.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">In addition, there are standard responses that should be sent if an action fails, namely,</span></p><ul><li><span style=\"color: rgb(35,31,32);\">If an authenticated user is required to do an action, but none is logged in,&nbsp;a 401 (<strong>Unauthorized</strong>) response code should be sent.</span></li><li><span style=\"color: rgb(35,31,32);\">If a user is logged in, but does not have the authorization for the action, a 403 (<strong>Forbidden)</strong>&nbsp;response code should be sent.</span></li><li><span style=\"color: rgb(35,31,32);\">If the request is incorrect in some way, e.g., has bad data, a 400 (<strong>Bad request)</strong>&nbsp;response code should be sent.</span><ul><li><span style=\"color: rgb(35,31,32);\">Often the body of the response will be a string or JSON object explaining the specific problem.</span></li></ul></li></ul><h2><span style=\"color: rgb(153,153,153);\">Response&nbsp;Entities</span></h2><p><span style=\"color: rgb(35,31,32);\">In Spring, the way to write a method that&nbsp;return a specific HTTP response code is to return a&nbsp;<strong>ResponseEntity</strong>. A response entity contains&nbsp;an HTTP status code, and optionally some Java object that is the&nbsp;body of the response, such as a JSON object with more information, e.g.,</span><br /><span style=\"color: rgb(35,31,32);\">{ &quot;status&quot;: &quot;error&quot;, &quot;reason&quot;: &quot;...some text giving the reason for the error&quot; }</span><br /><span style=\"color: rgb(35,31,32);\">It's good practice to always return JSON, if you're going to return it sometimes, because&nbsp;empty response can break the jQuery JSON parser.</span><br /><span style=\"color: rgb(35,31,32);\">When you write a controller method that returns a JSON object, it is really returning a response entity with a 200 (<strong>OK</strong>)&nbsp;code.</span><br /><span style=\"color: rgb(35,31,32);\">See the&nbsp;<strong>Resources</strong>&nbsp;for information&nbsp;on response entities&nbsp;and how to create them in a controller.</span>&nbsp;</p><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"560f4225-6f65-4ca7-8ab0-fc7635da6fd5\"><ac:parameter ac:name=\"title\">Step 1 - Modify Player to support login</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">You already have a class that can represent users:&nbsp;<strong>Player</strong>. Two things needed to be added to make players usable for authentication.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">There needs to be a way to retrieve player data, given a player's name.</span></li><li><span style=\"color: rgb(35,31,32);\">There needs to be a password attached to each player. &nbsp;</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Both of these are fairly easy to add.</span></p><ol><li><span style=\"color: rgb(35,31,32);\">Add a&nbsp;<strong>findByUserName()</strong>&nbsp;method to the&nbsp;<strong>PlayerRepository</strong>&nbsp;class, if not already present.</span><ol><li><span style=\"color: rgb(35,31,32);\">You just need to declare it in the repository class. Spring will write the code for you!&nbsp;</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\">Add a private String&nbsp;<strong>password</strong>&nbsp;field to&nbsp;the&nbsp;<strong>Player</strong>&nbsp;class, and the associated&nbsp;<strong>getPassword</strong>,&nbsp;<strong>setPassword</strong>&nbsp;methods.</span></li><li><span style=\"color: rgb(35,31,32);\">Change your&nbsp;<strong>Application</strong>&nbsp;code that creates sample players to include the passwords for each one.</span><ol><li><span style=\"color: rgb(35,31,32);\">See the example testbed document for what these passwords should be.</span></li></ol></li></ol><p><span style=\"color: rgb(35,31,32);\">To create&nbsp;<strong>findByUserName()</strong>, see&nbsp;the entry on repository query methods in the&nbsp;<strong>Resources</strong>.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"917aa5e2-8db1-4ec4-b3f1-8c5077fd7a2b\"><ac:parameter ac:name=\"title\">Step 2 - Add the Spring security library to the project</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Adding security to a project is easy. As soon as you do it, everything is protected. The&nbsp;tricky&nbsp;part is configuring the security rules to make the right things public again.</span><br /><span style=\"color: rgb(35,31,32);\">You just need to add a single line to your&nbsp;<strong>build.gradle</strong>&nbsp;file to include the Spring Boot security framework. As always, when you change&nbsp;<strong>build.gradle</strong>, you need to&nbsp;re-synchronize&nbsp;your IDEA project with Gradle. See the entry on authentication and authorization, and the entry on re-syncing IDEA with Gradle, in the&nbsp;<strong>Resources</strong>.</span><br /><span style=\"color: rgb(35,31,32);\">As soon as you add the security library, your app will be locked down. For safety, Spring assumes everything should be protected until you say otherwise. That way, you don't accidentally leave an opening for a hacker.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong></span><br /><span style=\"color: rgb(35,31,32);\">If you run your server now and try to access any page or REST URL, you should&nbsp;get an access violation.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">The next step will add code to make some URLs public and others available to authenticated users.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"4d7e9947-0b1f-4128-9231-334796f7b106\"><ac:parameter ac:name=\"title\">Step 3 - Configuring user access</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">This is the most complicated step in the task. Expect to take a fair amount of time looking at examples, reading about the concepts, and debugging mistakes in configuration.</span><br /><span style=\"color: rgb(35,31,32);\">Spring has a lot of code to manage the authentication process. It will catch an attempt to access a protected URL and signal an exception. It provides code to authenticate a user if and only if the name and password provided matches what is required. It provides code to implement someone logging out.</span><br /><span style=\"color: rgb(35,31,32);\">What you have to do is provide Spring with the information it needs to do these tasks, i.e.,</span></p><ul><li><span style=\"color: rgb(35,31,32);\">What user names are there?</span></li><li><span style=\"color: rgb(35,31,32);\">What password goes with each name?</span></li><li><span style=\"color: rgb(35,31,32);\">What kinds of users are there, e.g., guests, normal users, admin super users.</span></li><li><span style=\"color: rgb(35,31,32);\">What method should the browser use to get name and password?</span></li></ul><p><span style=\"color: rgb(35,31,32);\">In Spring, this is done by adding two special subclasses&nbsp;in your&nbsp;<strong>Application</strong>&nbsp;class file:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">One class provides the code that Spring should run to get a user's password and roles, e.g.,&nbsp;<strong>user</strong>&nbsp;or&nbsp;<strong>admin</strong>,&nbsp;given their user name.</span></li><li><span style=\"color: rgb(35,31,32);\">The other class specifies&nbsp;which URLs are public, what method the browser should use to get name and password, and whether&nbsp;authentication communication should use HTML or just HTTP success/failure response codes</span></li></ul><h2><span style=\"color: rgb(153,153,153);\">Configure Names and Passwords</span></h2><p><span style=\"color: rgb(35,31,32);\">In your case, a user's password and roles are stored in&nbsp;the&nbsp;<strong>Player</strong>&nbsp;repository. To give&nbsp;Spring a method&nbsp;to get&nbsp;that information, you create a subclass of&nbsp;<strong>GlobalAuthenticationConfigurerAdapter</strong>&nbsp;for your application, e.g.,&nbsp;</span><br />@SpringBootApplication<br />public class Application extends SpringBootServletInitializer {<br />...<br />} <br class=\"atl-forced-newline\" />@Configuration<br />class WebSecurityConfiguration extends GlobalAuthenticationConfigurerAdapter {<br />...<br />}</p><ol><li><span style=\"color: rgb(35,31,32);\">This class definition should appear after and completely outside of the definition of the&nbsp;<strong>Application</strong>&nbsp;class.</span></li><li><span style=\"color: rgb(35,31,32);\">It should not be&nbsp;<strong>public</strong>.&nbsp;Java lets you define&nbsp;multiple classes in one file, but only one class can be&nbsp;<strong>public</strong>.</span></li><li><span style=\"color: rgb(35,31,32);\">The annotation&nbsp;<strong>@Configuration&nbsp;</strong>tells Spring to create&nbsp;an instance of this class automatically. It can then be found and used by the security framework.</span></li></ol><p><span style=\"color: rgb(35,31,32);\">Within this class, you define a method that returns a&nbsp;<strong>UserDetailsService</strong>&nbsp;class with a&nbsp;<strong>loadUserByUsername(<em>name</em>)</strong>&nbsp;method. You define that method to get the player with the name&nbsp;<strong><em>name</em></strong>, if any, and return a&nbsp;<strong>UserDetails</strong>&nbsp;object with the player's name and password. Spring can then use that object to see if the right name and password have been sent for login.&nbsp;See the entries on authentication and authorization in the&nbsp;<strong>Resources&nbsp;</strong>&nbsp;for example code.</span></p><h2><span style=\"color: rgb(153,153,153);\">Enable URL Access to Authenticated Users</span></h2><p><span style=\"color: rgb(35,31,32);\">Having defined how to authenticate users, you now have to tell Spring who is authorized to see what. You do this by creating a subclass of&nbsp;<strong>WebSecurityConfigurerAdapter</strong>&nbsp;to your application. Add it as another non-public class in&nbsp;<strong>Application.java</strong>, similar to what&nbsp;you did above. In this new class, the rules for what is public, how information is sent, and so on, is specified in the definition of the&nbsp;<strong>configure()</strong>&nbsp;method.</span><br />@EnableWebSecurity<br />@Configuration<br />class WebSecurityConfig extends WebSecurityConfigurerAdapter { <br class=\"atl-forced-newline\" />@Override<br />protected void configure(HttpSecurity http) throws Exception {<br />...<br />}<br />}<br /><span style=\"color: rgb(35,31,32);\">Again, this should be non-<strong>public</strong>&nbsp;class&nbsp;with the annotation&nbsp;<strong>@Configuration</strong>.</span><br /><span style=\"color: rgb(35,31,32);\">In this class, you define one method,&nbsp;<strong>configure()</strong>. In that method, you write the rules describing</span></p><ul><li><span style=\"color: rgb(35,31,32);\">how&nbsp;the browser should&nbsp;get the user name and password&nbsp;to send the web application</span></li><li><span style=\"color: rgb(35,31,32);\">the patterns of URLs that are and are not accessible to different types of users</span><ul><li><span style=\"color: rgb(35,31,32);\">Note that your team lead wants&nbsp;<strong>/api/login</strong>&nbsp;and&nbsp;<strong>/api/logout</strong>&nbsp;for the login and logout endpoints</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">Don't forget to override the default settings that send HTML forms when unauthenticated access happens and when someone logs in or out. See the&nbsp;<strong>Resources</strong>&nbsp;for example code. Be sure to follow the example for web services. You want Spring to just sent HTTP success and response codes, no HTML pages.</span></p><h2><span style=\"color: rgb(153,153,153);\"><strong>Test!</strong></span></h2><p><span style=\"color: rgb(35,31,32);\">First, test that you get an 401 access error if you try to access any URL other than the ones you've listed as public in your&nbsp;<strong>configure()</strong>&nbsp;method.</span><br /><span style=\"color: rgb(35,31,32);\">Test that you can access, without error, the URLs you have configured as public. Check the console log to make sure that when you reload&nbsp;<strong>games.html</strong>, you do not see any failures loading files, such as&nbsp;stylesheets, JavaScript, or images.</span><br /><span style=\"color: rgb(35,31,32);\">Now, test to see log in is working, using the&nbsp;JavaScript console&nbsp;to execute jQuery&nbsp;<strong>post()</strong>&nbsp;to whatever&nbsp;login URL you specified.</span><br /><span style=\"color: rgb(35,31,32);\">First, try an invalid name and password, e.g.,&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">$.post(&quot;/api/login&quot;, { username: &quot;j.bauer@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;, password: &quot;123&quot; }).done(function() { console.log(&quot;logged in!&quot;); })</span><br /><span style=\"color: rgb(35,31,32);\">You should see a 401 error.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Now try the same line but with a valid name and password.</span><br /><span style=\"color: rgb(35,31,32);\">You should see the logged in message. If so, you should now be able in the browser window to access&nbsp;the protected URLs without error.</span><br /><span style=\"color: rgb(35,31,32);\">Then test logging out.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">$.post(&quot;/api/logout&quot;).done(function() { console.log(&quot;logged out&quot;); })</span><br /><span style=\"color: rgb(35,31,32);\">You should see the logged out message. If so, you should now once more get errors if you try to&nbsp;access&nbsp;the protected URLs.</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit the code for your two web security configuration classes, using the &quot;code&quot; format.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"919de4e6-1066-4d66-81ee-4a8de28770e4\"><ac:parameter ac:name=\"title\">Step 4 - Add current user information to the JSON games object</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Now it's time to make your application send the current user information, when there is an authenticated user.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">You need to add code to&nbsp;your application controller&nbsp;methods to get&nbsp;the current&nbsp;authenticated user, if any. &nbsp;See the&nbsp;<strong>Resources</strong>&nbsp;for links to example code that gets such information from an&nbsp;<strong>Authentication</strong>&nbsp;object.</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />You're going to be adding code that needs&nbsp;the current user in many methods in your controller. Don't repeat yourself (DRY) Define a private method that takes an&nbsp;<strong>Authentication</strong>&nbsp;object and returns the&nbsp;<strong>Player</strong>&nbsp;object that has the user name in the Authentication object. It should return null if no one is logged in, or if whoever is logged in is not a player (this may not be possible, but it's good to check for it.)&nbsp;<br /><span style=\"color: rgb(35,31,32);\">In particular, change your application controller code&nbsp;that currently returns the JSON for the list of all games&nbsp;to return instead an object like this</span><br /><span style=\"color: rgb(35,31,32);\">{ &quot;player&quot;: { &quot;id&quot;:&nbsp;<em>nn</em>, &quot;name&quot;:&nbsp;<em>username</em> }, &quot;games&quot;: [ ... ] }</span><br /><span style=\"color: rgb(35,31,32);\">The&nbsp;<strong>games</strong>&nbsp;key will have the list of games you were returning before.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">The&nbsp;<strong>player</strong>&nbsp;key will have a JSON object with information about the current user, if there is one. If there is not, you can decide whether to omit the&nbsp;<strong>player</strong>&nbsp;key entirely, or use the value&nbsp;<strong>null</strong>.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Be sure to not include the player's password in the information sent back!</span><br /><span style=\"color: rgb(35,31,32);\">I.e., the JSON for a list of games might&nbsp;look something like this&nbsp;if player 3 is logged in</span><br /><span style=\"color: rgb(35,31,32);\">{ &quot;player&quot;: { &quot;id&quot;: 3, &quot;name&quot;: &quot;kim_bauer@<a href=\"http://gmail.com\">gmail.com</a>&quot; }, &quot;games&quot;: [ ... ] }</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Test!&nbsp;</strong>&nbsp;Enter the URL&nbsp;<strong>/api/games</strong>&nbsp;and verify that you see the correct player information when you are logged in, and no player information when you are not.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"0a6572f4-d45f-49e3-848b-60a66c58bb92\"><ac:parameter ac:name=\"title\">Step 5 - Add a create player method to the application controller</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">The security code will take care of login and logout, but you have to add a method that&nbsp;responds to a request to create a new player.</span><br /><span style=\"color: rgb(35,31,32);\">Define such a method in your application controller. It should take two request parameters: the username and the password.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Your team lead wants the URL endpoint to be&nbsp;<strong>/api/players</strong>.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The method needs to see if there is an existing player with the same name. If so, the method needs to return a&nbsp;<strong>ResponseEntity</strong>&nbsp;with the 403&nbsp;<strong>Forbidden</strong>&nbsp;HTTP status code. It should also include a JSON object describing the reason, e.g.,&nbsp;{ &quot;error&quot;: &quot;Name in use&quot; }.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">If there is no problem, the method should save the new Player in the repository, and return a&nbsp;<strong>ResponseEntity</strong>&nbsp;with the&nbsp;201 code and a JSON object with the player's name. Do NOT send back the password! Applications should avoid transmitting passwords.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test</span></h2><p><span style=\"color: rgb(35,31,32);\">In your web browser, in the JavaScript console, trying posting a new user. First, try creating a player the same name as an existing player</span><br /><span style=\"color: rgb(35,31,32);\">$.post(&quot;/api/players&quot;, { username: &quot;j.bauer@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;, password: &quot;1234&quot; })</span><br /><span style=\"color: rgb(35,31,32);\">Verify that you get the correct error response.</span><br /><span style=\"color: rgb(35,31,32);\">Then try creating a new player, e.g.,</span><br /><span style=\"color: rgb(35,31,32);\">$.post(&quot;/api/players&quot;, { username: &quot;newbie@<a href=\"http://aol.com\">aol.com</a>&quot;, password: &quot;1234&quot; })</span><br /><span style=\"color: rgb(35,31,32);\">You should get a 201 response and the JSON with the player name.</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit the Java code for your method that creates a new player. Use the &quot;code&quot; format.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"00127615-c2fc-44ed-8323-990f183338c3\"><ac:parameter ac:name=\"title\">Step 6 - Update the games pin for login and signup</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(153,153,153);\">Add logging in</span></h2><p><span style=\"color: rgb(35,31,32);\">Add an HTML form to your&nbsp;<strong>games.html</strong>&nbsp;page for login and signup. The form should have &nbsp;fields for name and password and a&nbsp;<strong>login</strong>&nbsp;button.</span><br /><span style=\"color: rgb(35,31,32);\">In your JavaScript, attach a function to the login&nbsp;button to post the data to your login URL, using AJAX.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Be sure to add code to reject invalid&nbsp;fields.</span></li><li><span style=\"color: rgb(35,31,32);\">If login is successful,&nbsp;reload the&nbsp;page.</span></li><li><span style=\"color: rgb(35,31,32);\">If login fails, display a helpful alert.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Update&nbsp;your HTML and JavaScript to show the current user's name if there is a non-null value for&nbsp;<strong>player</strong>&nbsp;in the game data.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Test!&nbsp;</strong>After logging in with a valid name and password, you&nbsp;should see the player's name. The name should remain if you reload the page.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Add logging out</span></h2><p><span style=\"color: rgb(35,31,32);\">Add another form with just one button,&nbsp;<strong>logout</strong>. Attach a JavaScript function to it to post to your logout URL, using AJAX. If successful, reload the page.</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />Using a separate form will make it easy to hide and show the appropriate controls after login and logout.</p><h2><span style=\"color: rgb(153,153,153);\">Add conditional&nbsp;HTML</span></h2><p><span style=\"color: rgb(35,31,32);\">Add JavaScript so that the login form appears only when there is no user logged in, and the logout form appears&nbsp;only when there is a user logged in.</span><br /><span style=\"color: rgb(35,31,32);\">If you are using jQuery,&nbsp;use conditionals&nbsp;to test the JSON for a player and create different HTML.&nbsp; If you are using Vue, use&nbsp;<strong>v-if</strong>&nbsp;and&nbsp;<strong>v-else</strong>&nbsp;in your HTML.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Test!&nbsp;</strong>Make sure the appropriate data and forms appear when you log in and log out, and refresh the page.</span></p><h2><span style=\"color: rgb(153,153,153);\">Add signing up</span></h2><p><span style=\"color: rgb(35,31,32);\">Add a&nbsp;<strong>signup&nbsp;</strong>button&nbsp;to your login form. No new fields should be needed.</span><br /><span style=\"color: rgb(35,31,32);\">Add JavaScript code so that when you enter a user name and password and click the signup button, the potential new player information is POSTed&nbsp;to the URL you defined for your create player method.</span><br /><span style=\"color: rgb(35,31,32);\">If the POST is successful, the&nbsp;JavaScript code should then&nbsp;POST the same data to the login URL, to automatically log the new user in. If that succeeds, reload the page.&nbsp; If either step&nbsp;fails,&nbsp;show a helpful alert.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Try signing up with an existing user. Verify that an alert appears rejecting this signup. It doesn't matter what the password is.</span><br /><span style=\"color: rgb(35,31,32);\">Then try a new user name and password. Verify that you are logged in as that user.</span><br /><span style=\"color: rgb(35,31,32);\">Log out and trying logging in again as that user. Verify that this works.</span></p><h2><span style=\"color: rgb(153,153,153);\">Add logging out to the game page</span></h2><p><span style=\"color: rgb(35,31,32);\">Finally, add just the logout form to your page for playing a game. &nbsp;(It doesn't make sense to add a login form here, since you can't see a game page unless you are logged in.)</span><br /><span style=\"color: rgb(35,31,32);\">In your JavaScript&nbsp;code for this button, the&nbsp;<strong>done()</strong>&nbsp;method should&nbsp;send the browser back to&nbsp;<strong>games.html</strong>&nbsp;page when a user successfully logs out.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Log in, enter a URL for an active game, and click the logout button.</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit the JavaScript code that does login, logout, and signup, using the &quot;code&quot; format. The HTML form code is not required, but if you send it, put it first, clearly&nbsp;labeled.&nbsp;</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"0699f3c3-0913-440e-9f5d-38df9efb2ebd\"><ac:parameter ac:name=\"title\">Step 7 - Submit your work</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\">Send your&nbsp;zipped project folder per the instructions in the 'Submit Your Work' Tab.&nbsp;</span></p></ac:rich-text-body></ac:structured-macro><p><br /></p>",
    "conflPageId": "263716926",
    "conflChildrenId": [
      "263913587"
    ]
  },
  {
    "title": "Java - Task 7 Resources",
    "content": "<p><span style=\"color: rgb(35,31,32);\">A brief guide to the Resource subsections:</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Spring and JPA:</strong>&nbsp;How to return&nbsp;HTTP responses when something goes wrong, e.g., a user is not authorized to see certain data, or a game has no room for another player</span><br /><span style=\"color: rgb(35,31,32);\"><strong>JavaScript:&nbsp;</strong>how to send the browser to another URL using JavaScript</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Java</strong>:&nbsp;how to create instances</span></p><p><span style=\"color: rgb(35,31,32);\"><strong>Required resources</strong></span> </p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"92eb207b-55f3-47e5-9999-26e57d5fc2b6\"><ac:parameter ac:name=\"title\">Spring and JPA</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(153,153,153);\">Response Entities</span></h2><p><span style=\"color: rgb(35,31,32);\">A&nbsp;<strong>response</strong>&nbsp;in HTTP is more than just HTML or JSON. A response has a status code, e.g.,&nbsp;<strong>200</strong>&nbsp;for a&nbsp;successful GET,&nbsp;<strong>404</strong>&nbsp;for page not found, and so on. A response also has a number of&nbsp;<strong>headers</strong>, each of which is a key and value, e.g.,&nbsp;&quot;Last-Modified: Wed, 15 Nov 1995 04:58:08 GMT&quot;. The HTML, CSS, JSON, etc. are found in the body or&nbsp;<strong>content</strong>&nbsp;of the response.</span><br /><span style=\"color: rgb(35,31,32);\">For most controller methods, you just need to say what content to return and Spring will construct the appropriate&nbsp;<strong>response entity</strong>&nbsp;for you. But if you need to send some special response, e.g., an error response when some application-level rule is violated, then you need to create the&nbsp;response entity yourself.</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1442\"><span style=\"color: rgb(51,122,183);\">Response entities</span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"d0a3e889-46dd-47f1-84cd-6f06c1d5d9c4\"><ac:parameter ac:name=\"title\">JavaScript</ac:parameter><ac:rich-text-body><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1461\"><span style=\"color: rgb(51,122,183);\">How to change browser locations in JavaScript</span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"94fc202b-4bcf-4354-a9f7-f5865fc906ad\"><ac:parameter ac:name=\"title\">Java</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">You'll need to create instances of a ResponseEntity.&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=34\"><span style=\"color: rgb(51,122,183);\">Here is a link to the instances section of the ebook.</span></a></p></ac:rich-text-body></ac:structured-macro><p><br /></p>",
    "conflPageId": "263716931",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java - Task 9",
    "content": "<h2><span style=\"color: rgb(153,153,153);\">Introduction</span></h2><p><span style=\"color: rgb(35,31,32);\">You been asked to implement the user story &quot;As a player&nbsp;in&nbsp;a game, I can submit a salvo of shots.&quot; The back-end data repository code already supports&nbsp;storing salvos&nbsp;for a game player. What you need to add is:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">HTML and JavaScript on the front-end to collect and send a salvo&nbsp;to the server.</span></li><li><span style=\"color: rgb(35,31,32);\">A controller method to receive this request and call the appropriate repository methods.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The user interface for this is a lot simpler than for placing ships. Simply clicking on squares in the shot grid should work. You should allow the user to unselect squares, until they are satisfied with their salvo.</span><br /><span style=\"color: rgb(35,31,32);\">The one extra bit is tracking the turn. This should be done on the server side. If it's turn #4, you don't want a player to be able to change history by constructing and submitting a new salvo for turn #3.</span><br /><span style=\"color: rgb(35,31,32);\">For now, you just need a fixed turn on the server. For example, if the test data for a game has 2 salvos from each player, then it's turn #3.&nbsp;Incrementing the&nbsp;turn counter on the server will happen in a later task when game play logic is implemented.</span> </p><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"0427ff06-a5d3-4d9b-b1a9-71c5e172f9bb\"><ac:parameter ac:name=\"title\">Step 1 - Implement a controller method to store salvos</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">The request should return a failure response, of the appropriate type,&nbsp;if the user is not logged is, or is not the game player the ID refers to.</span><br /><span style=\"color: rgb(35,31,32);\">Implement a back-end controller method that can receive a salvo object, consisting of a turn and a list of&nbsp;locations.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">The URL should be&nbsp;<strong>/games/players/{gamePlayerId}/salvos</strong>.</span></li><li><span style=\"color: rgb(35,31,32);\">The body of the request should be parsed into a&nbsp;<strong>Salvo</strong>&nbsp;object</span></li><li><span style=\"color: rgb(35,31,32);\">An&nbsp;<strong>Unauthorized</strong>&nbsp;response should be sent if</span><ul><li><span style=\"color: rgb(35,31,32);\">there is no current user logged in, or</span></li><li><span style=\"color: rgb(35,31,32);\">there is no game player with the given ID, or</span></li><li><span style=\"color: rgb(35,31,32);\">the current user is not the game player the ID references</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">A&nbsp;<strong>Forbidden</strong>&nbsp;response should be sent if the user already has submitted a salvo for the turn&nbsp;listed.</span></li><li><span style=\"color: rgb(35,31,32);\">Otherwise, the salvo&nbsp;should be added to the game player and saved, and a&nbsp;<strong>Created</strong>&nbsp;response should be sent.</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"7dd881d5-c8e7-46ca-a974-04fc676b58af\"><ac:parameter ac:name=\"title\">Step 2 - Implement the user interface to create and send a salvo</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">This should be relatively straightforward, similar to but simpler than the ship interface.</span><br /><span style=\"color: rgb(35,31,32);\">A player should be able to click squares on and off in the salvo grid to construct a salvo to submit. There's just a few constraints:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">The player can't select more than allowed number of shots.</span></li><li><span style=\"color: rgb(35,31,32);\">Squares previous fired on should not be selectable.</span></li><li><span style=\"color: rgb(35,31,32);\">If somehow the user submits a salvo but is not logged in, or is logged in a different user than the URL says, the request should fail.</span></li></ul><p><span style=\"color: rgb(35,31,32);\"><strong>TEST!&nbsp;</strong>Verify that the salvo is saved, under the correct turn and the display is updated correctly when new JSON is retrieved. Keep the console log and watch for error messages.</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit your JavaScript and Java code for sending a salvo to the server, in that order, clearly labeled, using the &quot;code&quot; format. Only include the&nbsp;HTML and JavaScript for selecting salvo locations if you would like comments on that code as well.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"8822d794-c58e-4a21-aebc-88ecfdbbba83\"><ac:parameter ac:name=\"title\">Step 3 - Submit your work</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\">Send your&nbsp;zipped project folder per the instructions in the 'Submit Your Work' Tab.</span></p></ac:rich-text-body></ac:structured-macro><p><br /></p>",
    "conflPageId": "263716938",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java - Task 10",
    "content": "<h2><span style=\"color: rgb(153,153,153);\">Introduction</span></h2><p><span style=\"color: rgb(35,31,32);\">You've been asked to implement the user story &quot;As a player in&nbsp;a game, I can find out when I hit or sink my opponent's ships.&quot; To do this requires:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Implementing logic on the back-end&nbsp;to calculate for each turn what ships have been hit and/or sunk&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">Including this information in JSON form in each player's view of the game</span></li><li><span style=\"color: rgb(35,31,32);\">Displaying this information on the front-end interface</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The main challenge in this task is calculating hits and sinks.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">In any given turn, the number of&nbsp;<strong>hits&nbsp;</strong>on a&nbsp;ship for a game player is equal to the number of locations the ship has in common with the&nbsp;salvo by the opponent in that turn.</span></li><li><span style=\"color: rgb(35,31,32);\">A ship has been&nbsp;<strong>sunk</strong>&nbsp;in a turn if all of its locations have been hit in this or some earlier&nbsp;turn.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">This task involves writing code to loop&nbsp;over a number of different ranges:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Looping over locations in ships and salvos to find hits in a turn.</span></li><li><span style=\"color: rgb(35,31,32);\">Looping over location in ships and turns to see if a ship has been sunk.</span></li><li><span style=\"color: rgb(35,31,32);\">Looping over players to calculate the hits and sinks&nbsp;for each player.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Implementing this code will give you a lot of practice on loops inside loops.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Nested Loops with Java Streams</span></h2><p><span style=\"color: rgb(35,31,32);\">Learning to write clean efficient readable&nbsp;loops is a core&nbsp;coding skill.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">In classical C, C++, and Java programs, looping was typically&nbsp;done with a&nbsp;<strong>numeric for&nbsp;</strong>&nbsp;loop, e.g.,&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">for (int i = 0; i &lt; 100; ++i) { ... }</span><br /><span style=\"color: rgb(35,31,32);\">Most of the loops in this application, and in many applications, are over various lists of data.&nbsp;This is common in data-intensive code. &nbsp;Other examples might be &quot;for every employee in every department in every branch ...&quot; and &quot;for every item in every order from every customer ...&quot;</span><br /><span style=\"color: rgb(35,31,32);\">These can be done with numeric&nbsp;<strong>for</strong>&nbsp;loops, e.g.,&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">for (int i = 0; i &lt; items.size(); ++i) { ...do something with item i... }</span><br /><span style=\"color: rgb(35,31,32);\">But such loops are&nbsp;more&nbsp;verbose than necessary. For that reason, Java 8&nbsp;added&nbsp;<strong>streams</strong>&nbsp;to make it easier to do the most common operations on collections of objects:</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong>mapping:&nbsp;</strong>apply a function to every object and make a list of results</span><ul><li><span style=\"color: rgb(35,31,32);\">e.g., take a list of numbers and return a list of those numbers squared</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\"><strong>filtering:&nbsp;</strong>apply a function&nbsp;to every object and save those for which the function returns&nbsp;true</span><ul><li><span style=\"color: rgb(35,31,32);\">e.g., take a list of numbers and return a list of the odd numbers</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\"><strong>aggregating:&nbsp;</strong>apply a function to every object and return an accumulated result</span><ul><li><span style=\"color: rgb(35,31,32);\">e.g., add up a list of a list of numbers</span></li><li><span style=\"color: rgb(35,31,32);\">e.g., count how long a list is</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\"><strong>searching:&nbsp;</strong>apply a function to every object and return the function one for which the function returns true</span><ul><li><span style=\"color: rgb(35,31,32);\">e.g., take a list of numbers and return the first odd one</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\"><strong>testing:&nbsp;</strong>return true if a function returns&nbsp;true for every object in the list</span><ul><li><span style=\"color: rgb(35,31,32);\">e.g., return true if every number in a list is odd</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">Combination of these operations usually take care of most common operations on lists of data. The&nbsp;<strong>streams</strong>&nbsp;framework make combining these operations very simple.&nbsp;See the entry on streams in the&nbsp;<strong>Resources</strong>&nbsp;for more details.</span> </p><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"4aac7bf4-077a-4edd-bf70-07529bd1c98e\"><ac:parameter ac:name=\"title\">Step 1 - Implement back-end code to calculate and return how many ships are afloat</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">You don't need any new public methods in your application controller. Instead, you need to expand the game view object you send to each player to include JSON with a history of hits and sinks. Even though every player gets JSON with all the salvos &ndash; that's public knowledge &ndash; they don't have information about the opponents ships.</span><br /><span style=\"color: rgb(35,31,32);\">What needs to be in the history of hits and sinks is basically what you see in the sample table in the email:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">for each turn</span><ul><li><span style=\"color: rgb(35,31,32);\">a list of number of&nbsp;<em>new<strong>&nbsp;</strong></em>hits and sinks for the player, including the types of ships involved</span></li><li><span style=\"color: rgb(35,31,32);\">a similar list for the opponent</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">One way to approach this is from the front-end backward:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">First design a JSON object for sample data.</span></li><li><span style=\"color: rgb(35,31,32);\">Write test JavaScript code to create the HTML table you want for that data.</span></li><li><span style=\"color: rgb(35,31,32);\">Modify your JSON to make&nbsp;the JavaScript loops simpler, as necessary.</span></li><li><span style=\"color: rgb(35,31,32);\">Do not put display-specific information in the JSON.</span><ul><li><span style=\"color: rgb(35,31,32);\">No HTML or CSS style information.</span></li><li><span style=\"color: rgb(35,31,32);\">Don't worry about sorting. Let the JavaScript sort by turn as fits your interface.</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">When you have JSON you like, then develop a private method&nbsp;in your application controller to build a&nbsp;<strong>Map</strong>&nbsp;from the history of salvos and ship information that matches the JSON.</span><br /><span style=\"color: rgb(35,31,32);\">This will probably be the hardest code you have to write in this task. You need to think carefully about the logic for deciding what new hits&nbsp;are caused by each salvo in each turn, and what new ships have been sunk.</span><br /><span style=\"color: rgb(35,31,32);\">When that method seems to be working, add a line in your code to build your game view&nbsp;<strong>Map&nbsp;</strong>to include a key with this history map as the value.&nbsp;</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />Be careful not to include any objects with circular references. Create safe data transfer objects for everything.<br /><span style=\"color: rgb(35,31,32);\">There are no Spring concepts here, just basic JavaScript and Java methods, loops, and calculation. Because there are so many loops, but they do fairly simple things, like counting, Java collection streams can lead to fairly clean maintainable code.</span><br /><span style=\"color: rgb(35,31,32);\">Testing is especially critical here.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit all of the Java code you added to calculate and send to the browser&nbsp;what ships remain. Clearly label what file or files each section of code is in.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"cfd84b20-9571-459c-a5bb-a926b251abe8\"><ac:parameter ac:name=\"title\">Step 2 - Implement the user interface to show the state of the game</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">This step should be fairly easy if you have already written the JavaScript to generate the HTML table for the game history:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">You want to add some place in your HTML to display the history table.</span></li><li><span style=\"color: rgb(35,31,32);\">You want to add code in your JavaScript to&nbsp;fill in this table.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">&nbsp;<strong>Test!</strong>&nbsp;The sample testbed has several games in different states. Some are over, some are in progress, some have not yet begun. Be sure your&nbsp;<strong>game.html</strong>&nbsp;page works for all of them, for all players in the games.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"758c6145-6a9c-4210-9e52-ea5458b79f30\"><ac:parameter ac:name=\"title\">Step 3 - Submit your work</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\">Send your&nbsp;zipped project folder per the instructions in the 'Submit Your Work' Tab.</span></p></ac:rich-text-body></ac:structured-macro><p><span style=\"color: rgb(35,31,32);\">&nbsp;</span></p>",
    "conflPageId": "263716943",
    "conflChildrenId": [
      "263913620"
    ]
  },
  {
    "title": "Java - Task 11",
    "content": "<h2><span style=\"color: rgb(153,153,153);\">Introduction</span></h2><p><span style=\"color: rgb(35,31,32);\">You been asked to implement the use story &quot;As a player in&nbsp;a game, I can play a complete game...&quot; &nbsp;This will require implementing</span></p><ul><li><span style=\"color: rgb(35,31,32);\">back-end code to determine and send the current state of the game for each player to the front-end in JSON, e.g., &quot;waiting for your salvo&quot; versus &quot;waiting for the other player&quot; versus &quot;game is over&quot;</span></li><li><span style=\"color: rgb(35,31,32);\">back-end code to update the scores database when a game is over</span></li><li><span style=\"color: rgb(35,31,32);\">front-end code to display the appropriate controls and results</span></li><li><span style=\"color: rgb(35,31,32);\">front-end code to handle those times&nbsp;when the player has to wait until other players finish their actions</span></li></ul><p><span style=\"color: rgb(35,31,32);\">You've already done one of the most complicated parts of the back-end: figuring out how many ships each player still has. With this, it's pretty easy to tell when the game is over. The remaining coding to be done is to calculate and return a JSON snapshot of the game such that the JavaScript in the client can correctly determine which of the states applies. Be careful not reveal information in the JSON that a player should not have. A&nbsp;game player should never get JSON showing the opponent's ships, nor should they get the other&nbsp;player's salvo until they've sent&nbsp;their own salvo.</span><br /><span style=\"color: rgb(35,31,32);\">The front-end needs to correctly interpret the JSON and show only those controls that make sense. I.e.,</span></p><ul><li><span style=\"color: rgb(35,31,32);\">until ships are placed, there should be no controls to fire salvos</span></li><li><span style=\"color: rgb(35,31,32);\">after salvos start, there should be no controls to place ships</span></li><li><span style=\"color: rgb(35,31,32);\">after the player has sent a salvo, but the other player has not, there should be no controls to fire another salvo</span></li><li><span style=\"color: rgb(35,31,32);\">after the game is over, there should be no controls for ships or salvos</span></li></ul><h2><span style=\"color: rgb(153,153,153);\">REST versus RPC</span></h2><p><span style=\"color: rgb(35,31,32);\">A common pitfall when implementing an interactive system, like a game, is viewing the task as similar to calling methods in code or sending messages back and forth. For example, you might implement the application so that the front-end sends a salvo and the controller sends back what happened, e.g.,&nbsp; &quot;you just hit his patrol boat, the opponent just sank your battleship.&quot;&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">In web services, this approach is known as&nbsp;<strong>remote procedure calls</strong>&nbsp;or&nbsp;<strong>RPC</strong>. For a while, RPC was a very common approach, with standard frameworks to support it, such as&nbsp;<strong>XML-RPC</strong>&nbsp;and&nbsp;<strong>SOAP</strong>&nbsp;(Simple Object Access Protocol).</span><br /><span style=\"color: rgb(35,31,32);\">It was this approach that Roy Fielding criticized in his doctoral dissertation on REST. The world-wide web, he noted, was able to scale up with very little change from&nbsp;100s of documents on a few dozen servers &nbsp;to millions upon millions of documents on thousands of servers. This happened because the web's model was based not on procedure calls and return values, but on document resources and&nbsp;stateless interactions. Stateless means that a server can handle a&nbsp;request knowing just the information in the request and the document(s) that request references. Neither the server nor the client need to remember any other history of&nbsp;previous requests.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">So, a RESTful approach to a game is&nbsp;to have the back-end always return a JSON document that simply describes the current and complete state of game. For example, consider&nbsp;an online chess game. All you really need is where the pieces currently are on the board. How they got there doesn't matter. You can however keep a transcript of moves as part of the snapshot, if desired for review, but it's not necessary for game play.</span><br /><span style=\"color: rgb(35,31,32);\">Any actions that change the state of the game are submitted as POST or PUT requests. Following HTTP standards, the server tells the client if the request succeeded or failed. Either way, the client then can request&nbsp;an&nbsp;updated snapshot of the game. A&nbsp;player can refreshes the page one or many times, can bookmark the URL, exit the browser,&nbsp;come back later, and so on.&nbsp;The URL for the game always works to retrieve the current state of the game.</span><br /><span style=\"color: rgb(35,31,32);\">The main thing that you have to ensure is that the JSON for a game sent to the browser has all the information&nbsp;needed&nbsp;to show the right messages.&nbsp;Can the browser JavaScript determine unambiguously each of the states the game might&nbsp;be in, based solely on the JSON it is given. It should not need any other locally kept values, e.g, it should not need to know what it last sent to the server.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Polling the server</span></h2><p><span style=\"color: rgb(35,31,32);\">As noted in the email, some times the player has to wait for someone else to do something. If one player has sent a salvo, but the other has not, the&nbsp;first player has to wait for the other player.&nbsp;The snapshot for a game with a missing salvo has to display &quot;waiting for other player.&quot; But how will the first player know when the other player is done?</span><br /><span style=\"color: rgb(35,31,32);\">You could have the first player periodically refresh the page. This is safe, in a RESTful system, because getting a URL has no side effects on the server. It is however tedious for the player.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">The better approach is to have the web page take care of refreshing the data. JavaScript has two methods for calling some code periodically:&nbsp;<strong>setTimeout()</strong>&nbsp;and&nbsp;<strong>setInterval()</strong>. &nbsp;<strong>setTimeout()</strong>&nbsp;lets you&nbsp;do something after waiting N seconds.&nbsp;<strong>setInterval()</strong>&nbsp;lets you do something every N seconds. In any given context, one will usually make more sense than the other. See the&nbsp;<strong>Resources</strong>&nbsp;for more.</span> </p><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"450c1172-78f9-409c-9471-102533b83e24\"><ac:parameter ac:name=\"title\">Step 1 - Implement back-end game state management</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">REST forces a clean separation between getting a resource, and updating resources. This makes some design decisions fairly clear.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Your code to add ships and salvos should be pretty much done. The one thing you should&nbsp;add&nbsp;code for in the controller is rejecting&nbsp;updates that are illegal, e.g., trying to</span></p><ul><li><span style=\"color: rgb(35,31,32);\">place ships if they've already been placed</span></li><li><span style=\"color: rgb(35,31,32);\">fire more than one salvo in a turn</span></li><li><span style=\"color: rgb(35,31,32);\">fire a salvo after the game is over</span></li><li><span style=\"color: rgb(35,31,32);\">do anything in a game if you're not logged in as the appropriate player</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Otherwise, your main focus will&nbsp;be on returning JSON to a game player describing the state and history of the game. The JSON needs to</span></p><ul><li><span style=\"color: rgb(35,31,32);\">be complete enough for the browser code to be able to show the correct controls and messages</span><ul><li><span style=\"color: rgb(35,31,32);\">This includes being able to tell which hits and sinks happened in which&nbsp;turns.&nbsp;</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">not reveal any information about the opponent other than where they're fired in previous turns, and what hits and sinks they've suffered</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The JSON sent should include</span></p><ul><li><span style=\"color: rgb(35,31,32);\">the state of the game, as defined in the game state diagram in the email</span></li><li><span style=\"color: rgb(35,31,32);\">for each player how many ships they have left, but no location&nbsp;information about the opponent's ships</span></li><li><span style=\"color: rgb(35,31,32);\">what happened (sinks and hits) in each turn so far</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Think carefully about the logic for deciding what&nbsp;state the game is in. Here are some example situations that your code might get confused about:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">It confuses&nbsp;&quot;the&nbsp;<strong>enter ship</strong>&nbsp;state with&nbsp;no ships placed by anyone&quot; with&nbsp;&quot;the&nbsp;<strong>game over&nbsp;</strong>state where&nbsp;all ships have been sunk&quot;.</span></li><li><span style=\"color: rgb(35,31,32);\">It confuses&nbsp;&quot;the&nbsp;<strong>wait</strong>&nbsp;state for turn #2, where you&nbsp;sent two&nbsp;salvos&quot; with&nbsp;&quot;the&nbsp;<strong>enter salvo</strong>&nbsp;state for turn #3,&nbsp;where you&nbsp;sent two salvos&quot;.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Try to avoid sending redundant information. Don't send values&nbsp;that&nbsp;can be calculated from other information already in the JSON. That runs the risk of calculating and sending inconsistent information.</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit all the Java code you wrote in this step to manage and send to players the state of the game. Clearly label what file or files each section of code is in.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"a16e956f-4430-4037-8e7e-dcce0080e324\"><ac:parameter ac:name=\"title\">Step 2 - Implement state-aware front-end game display</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">The first and simplest thing to do is to have your front-end user interface&nbsp;hide the salvo grid until the player has submitted a set of ship placements.</span><br /><span style=\"color: rgb(35,31,32);\">As soon as they do that, the ship placement controls should be gone, and the salvo grid and controls can appear.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">it's OK if a player&nbsp;wants to submit a&nbsp;first salvo, even though the other player has not placed ships, or another player has not even joined yet.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">After&nbsp;a player places their ships or submits a salvo for a turn, one of two displays&nbsp;can appear:</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong>Wait for other player</strong>: The other player has not submitted a salvo: the display shows the salvo grid with&nbsp;the player's new salvo, but the salvo controls should be missing or disabled, and there should be some text or icon for &quot;waiting for other player to fire salvo.&quot;</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Enter salvo</strong>: The other player has already submitted a salvo: the display shows the updated salvo grid, controls, and text describing the hits and sinks for all players for this turn.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Which display to show should be easily determined in the browser by the state information in the JSON.</span><br /><span style=\"color: rgb(35,31,32);\">To have the display change automatically&nbsp;from&nbsp;<strong>Wait for other player</strong>&nbsp;to&nbsp;<strong>Enter salvo</strong>&nbsp;after the other player finally takes action, you will need to add JavaScript timer code to check periodically if the game server has received the other player's salvo. See the&nbsp;<strong>Resources</strong>&nbsp;for how to do this in JavaScript.</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit the JavaScript code you wrote manage game play, from placing ships, to firing salvos, to showing game end. Submit HTML code only if you think it's necessary, or you want feedback on it.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"592d2069-bae3-4793-bbd5-39389234ccf1\"><ac:parameter ac:name=\"title\">Step 3 - Submit your work</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\">Send your&nbsp;zipped project folder per the instructions in the 'Submit Your Work' Tab.</span></p></ac:rich-text-body></ac:structured-macro><p><span style=\"color: rgb(35,31,32);\">&nbsp;</span></p>",
    "conflPageId": "263716948",
    "conflChildrenId": [
      "263913626"
    ]
  },
  {
    "title": "Java - Task 3 Resources",
    "content": "<p><span style=\"color: rgb(35,31,32);\">Here's a brief guide to the Resource subsections:</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Java:</strong>&nbsp;a few concepts to review, including a reminder on how to create lists of data.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Spring and JPA:</strong>&nbsp;How to get data sent from a&nbsp;browser,&nbsp;and how to use&nbsp;<strong>@ElementCollection</strong>&nbsp;for adding simple lists to JPA entities</span><br /><span style=\"color: rgb(35,31,32);\"><strong>JavaScript</strong>: how to access information in the URL of the current web page, and how to send data to the server</span> <br class=\"atl-forced-newline\" /><br class=\"atl-forced-newline\" /></p><p><strong style=\"\">Required resources</strong></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"a0311880-7dc0-416b-b80c-1999dc7ec14f\"><ac:parameter ac:name=\"title\">Java</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">At this point, you should be at least up to the section on&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=47\"><span style=\"color: rgb(51,122,183);\">Java streams</span></a><span style=\"color: rgb(35,31,32);\">&nbsp; in&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=29\"><span style=\"color: rgb(51,122,183);\">Java concepts eBook</span></a><span style=\"color: rgb(35,31,32);\">. &nbsp;As your application controller sends more and more collections of data to the client, streams and maps will play an increasingly important role in your code.</span><br /><span style=\"color: rgb(35,31,32);\">To create lists of data for testing, pay particular attention to</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=42&amp;anchor=arrays-to-lists\"><span style=\"color: rgb(51,122,183);\">Converting arrays to lists</span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"e65c239d-0479-4f3c-9c11-76397756e85b\"><ac:parameter ac:name=\"title\">Spring and JPA</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">The biggest&nbsp;new Spring concept you want to learn is how Jackson, the library that turns your maps into JSON to send to the client, can be used in the other direction to turn JSON into Java classes in your controller&nbsp;</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1445\"><span style=\"color: rgb(51,122,183);\">Sending data to the Application</span></a><span style=\"color: rgb(35,31,32);\">&nbsp; &ndash; this covers all the normal ways to send data from a web page to a server, including path variables and sending JSON objects</span></li></ul><p><span style=\"color: rgb(35,31,32);\">A very&nbsp;useful annotation in JPA is&nbsp;<strong>@ElementCollection</strong>, for adding lists of simple values, such as numbers and strings, to an entity.</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=33&amp;anchor=one-to-many-basic\"><span style=\"color: rgb(51,122,183);\">One to many relationships for simple data using @ElementCollection</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;in the Spring eBook</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"1b43bb1e-9e30-4266-8e50-4c85bac84813\"><ac:parameter ac:name=\"title\">JavaScript</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">The new JavaScript tasks&nbsp;you have&nbsp;before you are</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Getting the ID of a game from the URL so you can ask for that data from the server</span></li><li><span style=\"color: rgb(35,31,32);\">Using AJAX to&nbsp;send JSON from the web page to a server</span></li><li><span style=\"color: rgb(35,31,32);\">Generating fairly complicated HTML from a complex JSON object&nbsp;</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Here are the relevant sections of the eBook:</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1171\"><span style=\"color: rgb(51,122,183);\">how to make AJAX calls</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- both GET and POST are covered</span></li><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1439\"><span style=\"color: rgb(51,122,183);\">How to Use URL Parameters</span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><strong style=\"\">Optional resources</strong></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"63171114-b226-4c38-b8a7-c8f41a9333fe\"><ac:parameter ac:name=\"title\">JavaScript</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Some examples you might want to look at for the JavaScript tasks, if the eBook is not enough:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Stack Overflow&nbsp;</span><a href=\"http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript\"><span style=\"color: rgb(51,122,183);\">How to get the value of a URL parameter</span></a></li><li><span style=\"color: rgb(35,31,32);\">Stack Overflow&nbsp;</span><a href=\"http://stackoverflow.com/questions/31321402/how-to-pass-javascript-variables-inside-a-url-ajax\"><span style=\"color: rgb(51,122,183);\">How to do AJAX call with a URL variable</span></a></li></ul></ac:rich-text-body></ac:structured-macro><p><br /></p><p><br /></p><p><br /></p><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "263913489",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java - Task 4",
    "content": "<h2><span style=\"color: rgb(153,153,153);\">Introduction</span></h2><p><span style=\"color: rgb(35,31,32);\">You've been asked to implement two&nbsp;stories involving salvoes:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">&quot;As a player in a game, I can see all the shots I've fired, so I can pick other places&nbsp;to shoot.&quot;</span></li><li><span style=\"color: rgb(35,31,32);\">&quot;As a player in a game, I can see all the hits on my ships.&quot;</span></li></ul><p><span style=\"color: rgb(35,31,32);\">You also need to implement a user interface for these stories, both using simple grids showing the locations of shots fired.</span><br /><span style=\"color: rgb(35,31,32);\">Implementing these stories means implementing</span></p><ul><li><span style=\"color: rgb(35,31,32);\">JPA code and database tables for salvoes&nbsp;and salvo&nbsp;locations</span></li><li><span style=\"color: rgb(35,31,32);\">Java code&nbsp;for a game player to return&nbsp;the salvoes&nbsp;a game player has fired</span></li><li><span style=\"color: rgb(35,31,32);\">application controller code&nbsp;to include salvo data in the&nbsp;JSON for the player's view of the game&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">web page code to display the salvo&nbsp;data in a&nbsp;grid</span></li></ul><p><span style=\"color: rgb(35,31,32);\">This is another opportunity to apply and become fluent with the database and looping concepts from the previous task.</span></p><h2><span style=\"color: rgb(153,153,153);\">Shots vs Ships</span></h2><p><span style=\"color: rgb(35,31,32);\">Like ships, salvoes are associated with a game player and several locations, e.g., H3, H4, and H5. Unlike ships, the locations in a salvo do not have to be adjacent, and there is no restriction on different salvoes referencing the same locations.</span><br /><span style=\"color: rgb(35,31,32);\">More importantly, salvoes are also associated with a&nbsp;<strong>turn</strong>, i.e., there will be a salvo in turn 1 for player 1, a salvo in turn 1 for player 2, a salvo in turn 2 for player 1, and so on.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Like ships, salvoes can be implemented with a&nbsp;<strong>one-to-many</strong>&nbsp;relationship using&nbsp;two tables: salvoes&nbsp;and salvo&nbsp;locations. Salvo&nbsp;locations are simple strings, just like ship locations, so an&nbsp;<strong>@ElementCollection</strong>&nbsp;annotation can be used to link a salvo to its locations.</span></p><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"ed420352-f663-491b-b0d1-a4b8e38b535d\"><ac:parameter ac:name=\"title\">Step 1 - Create a Salvo REST Repository</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">As with implementing ships&nbsp;and shipLocations, implementing salvoes requires implementing&nbsp;two Java classes.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Implement the&nbsp;<strong>Salvo</strong>&nbsp;class.&nbsp;A salvo object just needs to have a unique ID, so it can be referred to&nbsp;elsewhere; a gamePlayer ID; a turn number; and a list of locations.</span></li><li><span style=\"color: rgb(35,31,32);\">Implement the&nbsp;<strong>SalvoRepository</strong>&nbsp;class. This manages the creation and retrieval of salvoes from the database.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">You also need to add code to&nbsp;<strong>GamePlayer</strong>&nbsp;so that&nbsp;<em>gamePlayer</em><strong>.getSalvoes()</strong>&nbsp;returns a list of the salvo objects, describing the salvo the gamePlayer has fired.</span></p><h2><span style=\"color: rgb(153,153,153);\">Define the Java Classes</span></h2><p><span style=\"color: rgb(35,31,32);\">Repeat the process you did with&nbsp;<strong>Ship</strong>&nbsp;to create&nbsp;<strong>Salvo&nbsp;</strong>and&nbsp;<strong>SalvoRepository</strong>. &nbsp;Define the classes for&nbsp;<strong>Salvo&nbsp;</strong>and&nbsp;<strong>SalvoRepository</strong>&nbsp;following the examples in&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=33\"><span style=\"color: rgb(51,122,183);\">the eBook on Spring databases and JPA</span></a><span style=\"color: rgb(35,31,32);\">.&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">In Intellij IDEA, use&nbsp;<strong>File | New ... | Java Class</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Name the class&nbsp;<strong>Salvo</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Edit the generated Java code as appropriate to define&nbsp;<strong>Salvo</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Repeat by making a new class for&nbsp;<strong>SalvoRepository</strong></span><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1166\"><span style=\"color: rgb(51,122,183);\">Make the repository a&nbsp;RestRepository</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;so that you can use your browser to view the stored data in the testing below.&nbsp;</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">A salvo object needs data fields for</span></p><ul><li><span style=\"color: rgb(35,31,32);\">A database-generated ID, as with&nbsp;<strong>Ship</strong></span></li><li><span style=\"color: rgb(35,31,32);\">A&nbsp;<strong>GamePlayer</strong></span></li><li><span style=\"color: rgb(35,31,32);\">A turn number</span></li><li><span style=\"color: rgb(35,31,32);\">A list of locations</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Because&nbsp;<strong>GamePlayer</strong>&nbsp;is a&nbsp;reference to an object stored in another data table, you need to add JPA annotations to tell JPA how to connect the tables together. &nbsp;One game player has many salvoes, so follow the&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=33\"><span style=\"color: rgb(51,122,183);\">example of one-to-many relationships</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;to connect the&nbsp;<strong>GamePlayer</strong>&nbsp;and&nbsp;<strong>Salvo</strong>tables.</span><br /><span style=\"color: rgb(35,31,32);\">The locations can be handled the same way they were handled with ships.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test Your Syntax</span></h2><p><span style=\"color: rgb(35,31,32);\">Run the Gradle&nbsp;<strong>build</strong>&nbsp;task to make sure your code is syntactically correct, &nbsp;all necessary classes and methods are defined, and all necessary library code is imported.</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />If&nbsp;<strong>build</strong>&nbsp;fails, it's because of a compiler error. Look at&nbsp;<em>the&nbsp;<span style=\"text-decoration: underline;\">first</span>&nbsp;few error messages</em>. Fix those and&nbsp;<strong>build</strong>&nbsp;again. The first&nbsp;syntax&nbsp;error&nbsp;can cause many error messages, so just focus on fixing the first few errors, and any you see that are obvious, like a misspelled name.</p><h2><span style=\"color: rgb(153,153,153);\">Create the Sample Data</span></h2><p><span style=\"color: rgb(35,31,32);\">Change your&nbsp;<strong>CommandLineRunner</strong>&nbsp;in your application class to create salvoes.<strong>&nbsp;</strong></span></p><ul><li><span style=\"color: rgb(35,31,32);\">Create several salvoes for several turns&nbsp;for several players in several games.&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">Use the example ship data given in the testbed database document attached to the email in Task 1.</span></li><li><span style=\"color: rgb(35,31,32);\">Save the entities in the appropriate repositories.</span></li></ul><h2><span style=\"color: rgb(153,153,153);\">Test by Browsing the JSON &nbsp;</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>Run the Gradle task&nbsp;bootRun.</strong></span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />If&nbsp;<strong>bootRun</strong>&nbsp;fails with a compiler error, check for and fix the first few errors as above, then try again.<br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />If the&nbsp;last line of the&nbsp;<strong>bootrun</strong>&nbsp;output is not &quot;Started Application in ... seconds ...&quot;&nbsp;then&nbsp;<strong>bootRun</strong>&nbsp;failed to start the web service.&nbsp;&nbsp;Look at&nbsp;<em>the last error message&nbsp;</em>in the output window.&nbsp;When runtime errors happen, the last message will often be&nbsp;the&nbsp;<strong>root</strong>&nbsp;cause of the error.<br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />One common root cause is that another bootRun service is still active. If the&nbsp;<strong>Run | Stop</strong>&nbsp;menu item is available, that's the problem. Stop the previous run, close the extraneous bootRun output tab, and run again.<br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />Another common cause of a&nbsp;<strong>bootRun</strong>&nbsp;failure is a problem creating or saving the test data. &nbsp;Look for root cause error messages about an unknown data column, or an&nbsp;entity that can't be saved because it contains another unsaved entity. Fix your code appropriately.<br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Check the&nbsp;<strong>RestRepository</strong>&nbsp;URLs to see if the stored data is correct and complete</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong><a class=\"external-link\" href=\"http://localhost:8080/rest/gamePlayers/1\" rel=\"nofollow\">http://localhost:8080/rest/gamePlayers/1</a></strong>&nbsp;should show&nbsp;a list of salvoes for game player 1, for example</span></li><li><span style=\"color: rgb(35,31,32);\"><strong><a class=\"external-link\" href=\"http://localhost:8080/rest/salvoes\" rel=\"nofollow\">http://localhost:8080/rest/salvoes</a></strong>&nbsp;should show a list of all salvoes in all games</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Note that Spring JPA knows that the plural of&nbsp;<strong>salvo&nbsp;</strong>is&nbsp;<strong>salvoes</strong>.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"77037ce7-1118-4376-b307-08ac1221ae6f\"><ac:parameter ac:name=\"title\">Step 2 - Update the Controller</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">We need to update our game controller again.</span><br /><span style=\"color: rgb(35,31,32);\">Specifically, you want the game view that is returned to now include&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">all the salvoes fired by both players in the game</span></li><li><span style=\"color: rgb(35,31,32);\">with enough detail to know who fired each salvo in what turn</span></li><li><span style=\"color: rgb(35,31,32);\">in JSON that is easy to convert to HTML</span></li><li><span style=\"color: rgb(35,31,32);\">requiring just&nbsp;one HTTP call</span></li></ul><p><span style=\"color: rgb(35,31,32);\">This should&nbsp;not require any new request mappings. Instead, the existing code to&nbsp;construct&nbsp;a game view needs to be expanded to include salvo information.&nbsp;That will probably require some new&nbsp;<strong>private</strong>&nbsp;methods, to keep your code readable.</span><br /><span style=\"color: rgb(35,31,32);\">When the new game view data is being returned, you'll be ready to create the web page and JavaScript to get that JSON data and display it in HTML.</span></p><h2><span style=\"color: rgb(153,153,153);\">Extend the game view data transfer object</span></h2><p><span style=\"color: rgb(35,31,32);\">Your current code creates a view of the game using a&nbsp;<strong>Map</strong>&nbsp;with a key&nbsp;for the players,&nbsp;and a key for the ships the game player has.</span><br /><span style=\"color: rgb(35,31,32);\">Now you want to add another key to this map for the salvoes. The value will be some list or map that contains all the&nbsp;salvoes for both players in this game.</span><br /><span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;created&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1456438201629</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;gamePlayers&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">...</span> <span style=\"color: rgb(153,153,153);\">}</span> <br /><span style=\"color: rgb(153,153,153);\">],</span><br /><span style=\"color: rgb(102,153,0);\">&quot;ships&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">...</span> <span style=\"color: rgb(153,153,153);\">],</span><br /><span style=\"color: rgb(102,153,0);\">&quot;salvoes&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">...</span><br /><span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(35,31,32);\">Salvo data is a bit more complicated than ship data. The ship data was for just one player, but the salvo data is for all players, for multiple turns. The user interface is going to need all that information to display the salvoes on the correct grids with the correct turn labels.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">The best way to decide how to organize the&nbsp;data transfer object is to first figure out what JSON would be simplest to write JavaScript code for in the front-end. For example, here's the same small set of salvo data, organized three different ways.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\"><strong>A flat list:&nbsp;</strong></span><br /><span style=\"color: rgb(153,153,153);\">[</span><br /><span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;turn&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;1&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;player&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;23&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;locations&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;H1&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;A2&quot;</span><span style=\"color: rgb(153,153,153);\">]</span> <span style=\"color: rgb(153,153,153);\">},</span><br /><span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;turn&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;1&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;player&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;54&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;locations&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;C5&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;E6&quot;</span><span style=\"color: rgb(153,153,153);\">]</span> <span style=\"color: rgb(153,153,153);\">},</span><br /><span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;turn&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;2&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;player&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;23&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;locations&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;B4&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;D8&quot;</span><span style=\"color: rgb(153,153,153);\">]</span> <span style=\"color: rgb(153,153,153);\">},</span><br /><span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;turn&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;2&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;player&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;54&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;locations&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;A7&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;F1&quot;</span><span style=\"color: rgb(153,153,153);\">]</span> <span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(35,31,32);\"><strong>An object, with turns as keys, and within each turn, an object with player IDs as keys:</strong></span><br /><span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;1&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;23&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;H1&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;A2&quot;</span><span style=\"color: rgb(153,153,153);\">],</span> <span style=\"color: rgb(102,153,0);\">&quot;54&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;C5&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;E6&quot;</span><span style=\"color: rgb(153,153,153);\">]</span> <span style=\"color: rgb(153,153,153);\">},</span><br /><span style=\"color: rgb(102,153,0);\">&quot;2&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;23&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;B4&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;D8&quot;</span><span style=\"color: rgb(153,153,153);\">],</span> <span style=\"color: rgb(102,153,0);\">&quot;54&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;A7&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;F1&quot;</span><span style=\"color: rgb(153,153,153);\">]</span> <span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(35,31,32);\"><strong>An object with&nbsp;player IDs as keys, and within each player, an object with turns as keys:</strong></span><br /><span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;23&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;1&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;H1&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;A2&quot;</span><span style=\"color: rgb(153,153,153);\">],</span> <span style=\"color: rgb(102,153,0);\">&quot;2&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;B4&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;D8&quot;</span><span style=\"color: rgb(153,153,153);\">]</span> <span style=\"color: rgb(153,153,153);\">},</span><br /><span style=\"color: rgb(102,153,0);\">&quot;54&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;1&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;C5&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;E6&quot;</span><span style=\"color: rgb(153,153,153);\">],</span> <span style=\"color: rgb(102,153,0);\">&quot;2&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;A7&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;F1&quot;</span><span style=\"color: rgb(153,153,153);\">]</span> <span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(35,31,32);\">All of these representations are complete. The only question is which one is most convenient to write code for?</span><br /><span style=\"color: rgb(35,31,32);\">Try writing the JavaScript loops&nbsp;to display the salvoes in the ship grid and salvo grid. Which of these three forms makes that code simplest for you? Is there another organization&nbsp;that works even better?</span><br /><span style=\"color: rgb(35,31,32);\">Once you decide on your JSON, it's easy to write Java code to create the equivalents lists and maps.&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">When you need a JSON object, i.e.,&nbsp;{ key: value, key, value ... }, you create a&nbsp;<strong>Map</strong>.</span></li><li><span style=\"color: rgb(35,31,32);\">When you need a JSON array, you create a&nbsp;<strong>List</strong>.</span></li></ul><h2><span style=\"color: rgb(153,153,153);\">Test in your browser&nbsp;</span></h2><p><span style=\"color: rgb(35,31,32);\"><strong>bootRun</strong>&nbsp;your application. Enter the URL for your game view,&nbsp;<strong><a class=\"external-link\" href=\"http://localhost:8080/api/game_view/\" rel=\"nofollow\">http://localhost:8080/api/game_view/</a><em>nn</em></strong><em>&nbsp;</em>for some game player ID&nbsp;<strong><em>nn</em></strong>.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Does the JSON for the game view of the salvoes look correct and complete?</span></li><li><span style=\"color: rgb(35,31,32);\">Is there any unnecessary information or information game player&nbsp;<strong><em>nn</em></strong><em>&nbsp;</em>should not be allowed to see?</span></li></ul><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit your controller code. Use the &quot;code&quot; format.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"ce940d61-84bb-4a00-8c11-01a20ee28b41\"><ac:parameter ac:name=\"title\">Step 3 - Create the salvo web view</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Because you've been inspecting the JSON in your browser, you should be reasonably confident your data is stored correctly.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Now it's time to present this data on a web page for a player's salvoes in a specific game, as well as the opponent salvoes that hit the gamePlayers ships. As given in the email, the format is simple for now: just a grid with the locations of the salvoes marked on the grid and an updated ship grid marked with hits made by the opponent gamePlayer. That data is in the JSON.</span></p><h2><span style=\"color: rgb(153,153,153);\">Create an empty salvo&nbsp;grid</span></h2><p><span style=\"color: rgb(35,31,32);\">In&nbsp;<strong>game.html</strong>&nbsp;and&nbsp;<strong>game.js</strong>,&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Add the code necessary to&nbsp;create a new&nbsp;empty grid, for salvoes fired by the player.</span><ul><li><span style=\"color: rgb(35,31,32);\">As with the ship grid, JavaScript should create the rows, columns, and labels.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">Make sure&nbsp;the HTML&nbsp;clearly labels which is&nbsp;the ship grid and which is the salvo grid.</span></li><li><span style=\"color: rgb(35,31,32);\">Update your CSS if necessary so that salvo grid is styled correctly.</span></li></ul><p><span style=\"color: rgb(35,31,32);\"><strong>Test</strong>: Verify that the salvo grid appears next to the ship grid, properly labeled, but empty.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Put the player's&nbsp;salvoes on the&nbsp;salvo grid</span></h2><p><span style=\"color: rgb(35,31,32);\">Change the&nbsp;code that draws the salvo grid to&nbsp;indicate which cells have appeared in a salvo fired by the player.&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Initially, get it to work so that a grid cell is either empty or colored to show a salvo has been fired on it.</span><ul><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">If you've followed&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1458\"><span style=\"color: rgb(51,122,183);\">the example coding pattern for generating the grid as an HTML table</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;(<em>Example: Rendering JSON Data in an HTML Table</em>&nbsp;section), then this work will occur&nbsp;inside the function that returns the HTML for an individual cell. You'll need a conditional that asks &quot;is this cell in some salvo fired by an opponent?&quot; Define one or more subfunctions to organize this code in a clear way.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">When your code&nbsp;works, extend&nbsp;it so that the grid cell also shows&nbsp;the turn when that cell was fired on.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">See the&nbsp;<strong>Resources</strong>&nbsp;for the JavaScript ebook sections on looping, conditionals, and dynamic HTML. &nbsp;Remember to work in small slices and test after each change!&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Test in the browser</span></h2><p><span style=\"color: rgb(35,31,32);\">Enter the URL&nbsp;<strong><a class=\"external-link\" href=\"http://localhost:8080/web/game.html?gp=\" rel=\"nofollow\">http://localhost:8080/web/game.html?gp=</a><em>nn</em></strong>&nbsp;for some game player&nbsp;<strong><em>nn</em></strong>.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\"><strong>TEST!</strong>&nbsp;Make sure you're seeing the salvo locations that the gamePlayer has shot at their opponent. They should be located on the salvo grid&nbsp;per the specifications in the email.</span></p><h2><span style=\"color: rgb(153,153,153);\">Add Salvo 'Hits' to the Ship Grid&nbsp;</span></h2><p><span style=\"color: rgb(35,31,32);\">In&nbsp;<strong>game.js</strong>, change the function&nbsp;that draws the&nbsp;ship grid to indicate which ship locations&nbsp;have been hit by a salvo fired by the opponent. There are three possible grid cell situations. The cell is</span></p><ul><li><span style=\"color: rgb(35,31,32);\">empty</span></li><li><span style=\"color: rgb(35,31,32);\">contains a ship location that's been hit</span></li><li><span style=\"color: rgb(35,31,32);\">contains a ship location that has not been hit</span></li></ul><p><span style=\"color: rgb(35,31,32);\"><strong>TEST!</strong>&nbsp;Make sure you see the correct 'hits' on the ship grid made by the opponent per the sample data.</span><br /><span style=\"color: rgb(35,31,32);\">When this is working, change the code so that a &quot;hit&quot; cell&nbsp;shows&nbsp;what turn that hit occurred in.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>TEST!</strong>&nbsp;Make sure you see the correct turn numbers on the salvo and ship grid.</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit your game.html and game.js code. Use the &quot;code&quot; format. Put the HTML code first, then the JavaScript, with lines labelling the source file for each section.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"98a6fee8-0c61-49cb-8c71-594cbc1b2c6f\"><ac:parameter ac:name=\"title\">Step 4 - Submit your work</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">The objectives of this task were:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Create data tables for salvoes and salvo locations. &nbsp;The key classes / tables are:</span><ul><li><span style=\"color: rgb(35,31,32);\">Salvo, which has an ID, a turn number, and the ID of a game player</span></li><li><span style=\"color: rgb(35,31,32);\">SalvoLocation, which has a salvo ID and a grid cell label</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">Link the data tables so that the JSON data for salvoes and salvo locations can be accessed (/rest/gamePlayers/1/salvoes, /rest/salvoes, /rest/salvoes/1/salvoLocations, etc).</span></li><li><span style=\"color: rgb(35,31,32);\">Create sample salvo and salvo location data per email.</span></li><li><span style=\"color: rgb(35,31,32);\">Display where the&nbsp;salvoes are on game gridsfor a specific player and game.</span><ul><li><span style=\"color: rgb(35,31,32);\">one grid for the player with his ships marked with opponent hits</span></li><li><span style=\"color: rgb(35,31,32);\">one grid for shots fired at the opponent &nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">the URL&nbsp;<strong>/web/game.html?gp=1</strong>&nbsp;should display the player email&nbsp;and grids for game 1.</span></li></ul></li></ul><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\">When this is working, send a zipped archive of your project folder. Don't forget to run the&nbsp;<strong>clean</strong>&nbsp;task first.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "263913528",
    "conflChildrenId": [
      "263913551"
    ]
  },
  {
    "title": "Java - Task 4 Resources",
    "content": "<p><span style=\"color: rgb(35,31,32);\">Things are starting to calm down! No major new concepts are needed in this task.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>JavaScript</strong>: It might be useful to revisit how conditionals and comparisons work in JavaScript, because your web page loops are getting pretty complicated now!</span> </p><p><strong><span style=\"color: rgb(35,31,32);\">Required resources</span></strong></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"04688edb-e007-4a6b-995f-7e7f5560e952\"><ac:parameter ac:name=\"title\">JavaScript</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Your conditionals for the grids with salvos are getting more complicated. It may help to review&nbsp;</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1062\"><span style=\"color: rgb(51,122,183);\">How to do looping and conditional in JavaScript</span></a></li></ul></ac:rich-text-body></ac:structured-macro><p><br /></p>",
    "conflPageId": "263913551",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java - Task 5",
    "content": "<h2><span style=\"color: rgb(153,153,153);\">Introduction</span></h2><p><span style=\"color: rgb(35,31,32);\">You've been asked to implement scores and a leaderboard:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">&quot;As a player, I can see the&nbsp;number of wins, losses, and ties for all players.&quot;</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Implementing this story means implementing</span></p><ul><li><span style=\"color: rgb(35,31,32);\">a database table with the score for each game player and when the game was finished</span></li><li><span style=\"color: rgb(35,31,32);\">changing the controller to include scores in the list of games data from Task 2</span></li><li><span style=\"color: rgb(35,31,32);\">changing&nbsp;<strong>games.html&nbsp;</strong>to&nbsp;display the leaderboard</span></li></ul><p><span style=\"color: rgb(35,31,32);\">This is another opportunity to apply and become fluent with the database and looping concepts from the previous task.</span><br /><span style=\"color: rgb(35,31,32);\">Notice that this task needs to work with both&nbsp;<strong>players</strong>&nbsp;and&nbsp;<strong>game players</strong>. A game player in a game gets a score, but if the score were saved in the database that way, then to make the leaderboard,&nbsp;your code would have to get all the game players&mdash;which means all the games and players&mdash;just to get a list of scores.</span></p><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"bb547812-8779-4a89-904f-aa89b7ba16e4\"><ac:parameter ac:name=\"title\">Step 1 - Create a Score REST Repository</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(153,153,153);\">Define the Java Classes</span></h2><p><span style=\"color: rgb(35,31,32);\">Given your experience creating classes and repositories,&nbsp;the&nbsp;<strong>data schema diagram</strong>&nbsp;in the email should be enough for you to create a&nbsp;<strong>Score</strong>class and repository, and link it correctly to game players.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Define the classes by&nbsp;following the examples in&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=33\"><span style=\"color: rgb(51,122,183);\">the eBook on Spring databases and JPA</span></a><span style=\"color: rgb(35,31,32);\">. &nbsp;</span></li><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1166\"><span style=\"color: rgb(51,122,183);\">Make the repository a&nbsp;RestRepository</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;so that you can use your browser to view the stored data while&nbsp;testing.</span></li><li><span style=\"color: rgb(35,31,32);\">Refer to the&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=33\"><span style=\"color: rgb(51,122,183);\">table relationship examples</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;to connect the tables.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The relationship between games, players, and scores is just like the relationship between games, players, and game players, so use that as your model for defining and updating classes.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test Your Syntax</span></h2><p><span style=\"color: rgb(35,31,32);\">Run the Gradle&nbsp;<strong>build</strong>&nbsp;task to make sure your code is syntactically correct, &nbsp;all necessary classes and methods are defined, and all necessary library code is imported.</span></p><h2><span style=\"color: rgb(153,153,153);\">Create the Sample Data</span></h2><p><span style=\"color: rgb(35,31,32);\">Change the&nbsp;<strong>CommandLineRunner</strong>&nbsp;in your application class to store scores for game players.<strong>&nbsp;</strong></span></p><ul><li><span style=\"color: rgb(35,31,32);\">Use the example ship data given in the testbed database document attached to the email in Task 1.</span></li><li><span style=\"color: rgb(35,31,32);\">Save the entities in the appropriate repositories.</span></li></ul><h2><span style=\"color: rgb(153,153,153);\">Test by Browsing the JSON &nbsp;</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>Run the Gradle task&nbsp;bootRun.</strong></span><br /><span style=\"color: rgb(35,31,32);\">Check the&nbsp;<strong>RestRepository</strong>&nbsp;URLs to see if the stored data is correct and complete</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong><a class=\"external-link\" href=\"http://localhost:8080/rest/players/1/scores\" rel=\"nofollow\">http://localhost:8080/rest/players/1/scores</a></strong>&nbsp;should show the scores for player 1</span></li><li><span style=\"color: rgb(35,31,32);\"><strong><a class=\"external-link\" href=\"http://localhost:8080/rest/scores\" rel=\"nofollow\">http://localhost:8080/rest/scores</a></strong>&nbsp;should show all scores&nbsp;in all games</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"79523856-20b6-4671-96b0-4a41397ccf30\"><ac:parameter ac:name=\"title\">Step 2 - Update the Controller</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Once score data is being saved, you want to make it available&nbsp;in the&nbsp;JSON you send to the browser.&nbsp;Score data is needed for the leaderboard when listing all games, not for a specific game, so it makes sense to add score information to the JSON returned by&nbsp;<strong>/api/games</strong>.</span><br /><span style=\"color: rgb(35,31,32);\">Specifically, when creating the JSON for a&nbsp;list of games, you create JSON for each game. When you create game JSON, you create JSON for each game player in the game. This is the code in&nbsp;the controller to change&nbsp;to add a key with&nbsp;the score for the game, if there is a score for the game in the score repository. &nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">You will probably need to add two&nbsp;methods to your entity classes:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">A&nbsp;<strong>GamePlayer.getScore()</strong>&nbsp;method that returns a&nbsp;<strong>Score</strong>&nbsp;that&nbsp;the controller can call to get the score, if any.&nbsp;<strong>null&nbsp;</strong>means the game is not finished.</span></li><li><span style=\"color: rgb(35,31,32);\">A<strong>&nbsp;Player.getScore(game)</strong>&nbsp;method that returns a&nbsp;<strong>Score</strong>&nbsp;that&nbsp;<strong>GamePlayer&nbsp;</strong>can call, if&nbsp;you are storing scores&nbsp;in the&nbsp;<strong>Player</strong>&nbsp;class.</span></li></ul><p><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />To search the scores in a&nbsp;<strong>Player</strong>&nbsp;and return the one&nbsp;for&nbsp;<strong>game</strong>, if any, or&nbsp;<strong>null</strong>,&nbsp;see&nbsp;a handy method in streams called&nbsp;<strong>findFirst()</strong>. See the&nbsp;<strong>Resources</strong>.<br /><span style=\"color: rgb(35,31,32);\">The client JavaScript code (next step) will&nbsp;take care of displaying&nbsp;this information.</span><br /><span style=\"color: rgb(35,31,32);\">Work in small slices.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test in your browser&nbsp;</span></h2><p><span style=\"color: rgb(35,31,32);\"><strong>TEST:&nbsp;</strong>After each change to the controller,&nbsp;<strong>bootRun</strong>&nbsp;your application. Assuming it runs, visit&nbsp;<strong><a class=\"external-link\" href=\"http://localhost:8080/api/games\" rel=\"nofollow\">http://localhost:8080/api/games</a></strong>&nbsp;in your web browser.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Does the JSON include the scores for all game players that have them?</span></li><li><span style=\"color: rgb(35,31,32);\">Is the JSON correct for&nbsp;game players that do not have scores?</span></li></ul><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit your controller code. Use the &quot;code&quot; format.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"dba6a99e-2937-4a46-a80b-4f1026a2ce4f\"><ac:parameter ac:name=\"title\">Step 3 - Change the games list page to show the leaderboard</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Because you've been inspecting the JSON in your browser, you should be reasonably confident your data is stored correctly.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Update your&nbsp;HTML and JavaScript so that&nbsp;<strong>games.html</strong>&nbsp;displays a leaderboard. The leaderboard should be a table, showing total score, wins, losses, and ties, for every player.</span></p><h2><span style=\"color: rgb(153,153,153);\">Create JSON for the leaderboard</span></h2><p><span style=\"color: rgb(35,31,32);\">The&nbsp;scoring data is structured very differently from&nbsp;what the leaderboard needs. The JSON has</span></p><ul><li><span style=\"color: rgb(35,31,32);\">a list of games</span></li><li><span style=\"color: rgb(35,31,32);\">each game has a list of gameplayers</span></li><li><span style=\"color: rgb(35,31,32);\">in games that are over, each&nbsp;game player has a score of 0, 0.5, or 1</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The leaderboard on the other hand wants data like this:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">a list of players</span></li><li><span style=\"color: rgb(35,31,32);\">for each player,</span><ul><li><span style=\"color: rgb(35,31,32);\">a total score</span></li><li><span style=\"color: rgb(35,31,32);\">a total number of wins</span></li><li><span style=\"color: rgb(35,31,32);\">a total number of losses</span></li><li><span style=\"color: rgb(35,31,32);\">a total number of ties</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">The best way to do this kind of code is to</span></p><ul><li><span style=\"color: rgb(35,31,32);\">first write code to return&nbsp;a JSON object structured to fit the needs of&nbsp;the leaderboard</span></li><li><span style=\"color: rgb(35,31,32);\">then write code to display that JSON in HTML</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Most of the challenges will be in the first part. By working on a function to return the desired&nbsp;JSON object first, you will be&nbsp;writing&nbsp;code that is easier to develop incrementally and test.</span><br /><span style=\"color: rgb(35,31,32);\">For example, here's a possible sequence of slices you could write to create the JSON for the leaderboard:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">a function to create a list of all distinct players</span></li><li><span style=\"color: rgb(35,31,32);\">a function that takes a player and returns that player's total score, i.e., the sum of the scores they have</span></li><li><span style=\"color: rgb(35,31,32);\">a function that takes a player and returns that player's total win count, i.e., how many 1's</span></li><li><span style=\"color: rgb(35,31,32);\">a function that takes a player and returns that player's total loss&nbsp;count, i.e., how many 0's</span></li><li><span style=\"color: rgb(35,31,32);\">a function that takes a player and returns that player's total tie&nbsp;count, i.e., how many 0.5's</span></li><li><span style=\"color: rgb(35,31,32);\">combine the above functions to create the leaderboard JSON</span></li></ul><p><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Test!&nbsp;</strong>With each function, test in the JavaScript console&mdash;using the test JSON game data&mdash;to verify that the right answers are being returned.</span><br /><span style=\"color: rgb(35,31,32);\">See the&nbsp;<strong>Resources</strong>&nbsp;for&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1062\"><span style=\"color: rgb(51,122,183);\">JavaScript basics, like looping and conditionals</span></a><span style=\"color: rgb(35,31,32);\">.</span></p><h2><span style=\"color: rgb(153,153,153);\">Display the leaderboard JSON in HTML</span></h2><p><span style=\"color: rgb(35,31,32);\">This part should be fairly straightforward if your leaderboard JSON is correct. You just need to loop over your JSON and create the HTML table rows and columns.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>TEST!</strong>&nbsp;Make sure you see the correct scores&nbsp;and game data (per the sample data) in the table format&nbsp;outlined in the email.</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit your game.html and game.js code. Use the &quot;code&quot; format. Put the HMTL code first, then the JavaScript code, with lines labelling the source file for each section.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"7265946d-1f7c-4665-ab5a-94769c839169\"><ac:parameter ac:name=\"title\">Step 4 - Submit your work</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">The objectives of this task were:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Create a Score class and&nbsp;tables to collect information about scores. &nbsp;The Score class has an ID, a score&nbsp;number, the ID of a game and the ID of a player</span></li><li><span style=\"color: rgb(35,31,32);\">Link the data tables so that the JSON data for scores,&nbsp;games, and players&nbsp;can be accessed.</span></li><li><span style=\"color: rgb(35,31,32);\">Create sample score data per email.</span></li><li><span style=\"color: rgb(35,31,32);\">Display a&nbsp;summary of score data on the&nbsp;<strong>games.html</strong>&nbsp;page</span><ul><li><span style=\"color: rgb(35,31,32);\">one table for all the players with their totals tallied per the email</span></li></ul></li></ul><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\">When this is working, send a zipped archive of your project folder. Be sure to run the&nbsp;<strong>clean</strong>&nbsp;task first.</span></p></ac:rich-text-body></ac:structured-macro><p><br /></p><p><br /></p>",
    "conflPageId": "263913556",
    "conflChildrenId": [
      "263716912"
    ]
  },
  {
    "title": "Java - Task 6 Resources",
    "content": "<p>Adding security to a web application introduces a number of new concepts. Many of these concepts, such as authentication and authorization, users and roles, are general and come up in any programming framework. Others, such as&nbsp;you&nbsp;define&nbsp;users and find who is logged in, are specific to Spring's security tools.<br /><strong>Spring and JPA:</strong>&nbsp;Several distinct new areas of Spring are covered:</p><ul><li>how you configure&nbsp;authentication and authorization,</li><li>how you add a query method to a repository such as &quot;find by user name,&quot; so that you can log players in by name,</li><li>how you can get the current logged in user, if any, in a controller method</li><li>how you return response codes when creating a resource or failing to create one</li></ul><p><strong>IDEA and Gradle:</strong>&nbsp;Since you are modifying your&nbsp;<strong>build.gradle</strong>&nbsp;file, a reminder on what to do to make sure IDEA&nbsp;and Gradle agree on what the project contains</p><p><strong>Required resources</strong> </p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"3a5d4d16-7218-4096-a1c5-08365821aeda\"><ac:parameter ac:name=\"title\">Spring and JPA</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(153,153,153);\">Authentication and Authorization</span></h2><p><span style=\"color: rgb(35,31,32);\">Most critical is&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1436\"><span style=\"color: rgb(51,122,183);\">the&nbsp;basic introduction&nbsp;to the Spring Boot security framework</span></a><span style=\"color: rgb(35,31,32);\">.&nbsp;There's a lot here, but the key things&nbsp;you will need to do, in different steps, are</span></p><ul><li><span style=\"color: rgb(35,31,32);\">add the security library to your application in Gradle</span></li><li><span style=\"color: rgb(35,31,32);\">use the&nbsp;<strong>GlobalAuthenticationConfigurerAdapter</strong>&nbsp;class to configure your user database&nbsp;</span><ul><li><span style=\"color: rgb(35,31,32);\">Don't create a new database. Use the database of users you already have.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">use the&nbsp;<strong>WebSecurityConfigurerAdapter</strong>&nbsp;class to define rules for which&nbsp;URLs are public and which&nbsp;require login</span><ul><li><span style=\"color: rgb(35,31,32);\">Be sure to pay special attention to how to configure for AJAX-based web apps.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">use the&nbsp;<strong>Authentication</strong>&nbsp;class to&nbsp;get the current user information in your application controller methods</span></li><li><span style=\"color: rgb(35,31,32);\">add a query method to your repository to get user by name (see next subsection)</span></li><li><span style=\"color: rgb(35,31,32);\">use&nbsp;the&nbsp;<strong>Authentication&nbsp;</strong>class in your application controller method to get the current logged in user.</span></li></ul><h2><span style=\"color: rgb(153,153,153);\">Login&nbsp;and Signup Forms</span></h2><p><span style=\"color: rgb(35,31,32);\">Login and signup&nbsp;forms are just like other code you've written to send data to the server. You are just posting data to a URL.&nbsp;</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1445\"><span style=\"color: rgb(51,122,183);\">Sending data to the application</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- this describes the different ways you can send data to a server.</span><ul><li><span style=\"color: rgb(35,31,32);\">For this task, use the simple AJAX approach. That gives you the most control over what happens if logging succeeds or fails.</span></li></ul></li></ul><h2><span style=\"color: rgb(153,153,153);\">Query Methods</span></h2><p><span style=\"color: rgb(35,31,32);\">Spring Data JPA makes it very easy to create additional&nbsp;query methods for a repository, such as&nbsp;<strong>findByUserLastName</strong>, so that you can retrieve data without writing database code.&nbsp;You just give the name of the method you want, the parameters it takes, and the type of value it returns, but no actual code. Spring figures out what code to write based on the types and the method name. Specific words must be used, but&nbsp;they are&nbsp;pretty&nbsp;intuitive.</span></p><ul><li><a href=\"http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.query-methods.query-creation\"><span style=\"color: rgb(51,122,183);\">Examples and rules for creating query methods</span></a></li></ul><h2><span style=\"color: rgb(153,153,153);\">Response Entities</span></h2><p><span style=\"color: rgb(35,31,32);\">A&nbsp;<strong>response</strong>&nbsp;in HTTP is more than just HTML or JSON. A response has a status code, e.g.,&nbsp;<strong>200</strong>&nbsp;for a&nbsp;successful GET,&nbsp;<strong>404</strong>&nbsp;for page not found, and so on. A response also has a number of&nbsp;<strong>headers</strong>, each of which is a key and value, e.g.,&nbsp;&quot;Last-Modified: Wed, 15 Nov 1995 04:58:08 GMT&quot;. The HTML, CSS, JSON, etc. are found in the body or&nbsp;<strong>content</strong>&nbsp;of the response.</span><br /><span style=\"color: rgb(35,31,32);\">For most controller methods, you just need to say what content to return and Spring will construct the appropriate&nbsp;<strong>response entity</strong>&nbsp;for you. But if you need to send some special response, e.g., an error response when some application-level rule is violated, then you need to create the&nbsp;response entity yourself.</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1442\"><span style=\"color: rgb(51,122,183);\">Response entities</span></a></li><li><a href=\"http://www.leveluplunch.com/java/tutorials/014-post-json-to-spring-rest-webservice/\"><span style=\"color: rgb(51,122,183);\">Post JSON to Spring REST service</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- warning: shows some&nbsp;simple POSTing, but then gets into more complicated cases.</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"4cc0feb1-def7-42f6-90dd-a13f072ec620\"><ac:parameter ac:name=\"title\">IDEA and Gradle</ac:parameter><ac:rich-text-body><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1434\"><span style=\"color: rgb(51,122,183);\">How to re-sync&nbsp;IDEA with build.gradle</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- any time you change build.gradle, do this so that IDEA knows&nbsp;what Java libraries you are using</span></li></ul></ac:rich-text-body></ac:structured-macro><p><strong>Optional resources</strong> </p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"2f24584c-2831-4fc4-92eb-a0f519c245c3\"><ac:parameter ac:name=\"title\">Authentication and Authorization</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Some examples of adding security to Spring applications:</span></p><ul><li><a href=\"https://spring.io/guides/gs/securing-web/\"><span style=\"color: rgb(51,122,183);\">Spring guide example of adding security to a simple Spring MVC applications</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;</span><ul><li><span style=\"color: rgb(35,31,32);\">Note: This creates a tiny&nbsp;in-memory user database for demonstration purposes. You don't need this in your app, because you already have a database of users.</span></li></ul></li><li><a href=\"http://www.codesandnotes.be/2014/10/31/restful-authentication-using-spring-security-on-spring-boot-and-jquery-as-a-web-client/\"><span style=\"color: rgb(51,122,183);\">Diego Pappalardo's&nbsp;RESTful authentication using Spring Security on Spring Boot, and jQuery as a web client</span></a></li></ul></ac:rich-text-body></ac:structured-macro><p><br class=\"atl-forced-newline\" /></p>",
    "conflPageId": "263913587",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java - Task 7",
    "content": "<h2><span style=\"color: rgb(153,153,153);\">Introduction</span></h2><p><span style=\"color: rgb(35,31,32);\">You been asked to implement creating, joining, and re-entering games for logged-in users. To do this, you will need to:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Add code on the back end web server to map URLs for joining and creating games to code that updates&nbsp;the data tables appropriately, and returns the JSON for the game created or joined.</span></li><li><span style=\"color: rgb(35,31,32);\">Add code on the front end so that&nbsp;the&nbsp;<strong>Join Game</strong>&nbsp;and&nbsp;<strong>Create Game</strong>&nbsp;buttons send the appropriate command to the web server.</span></li><li><span style=\"color: rgb(35,31,32);\">Add code on the front end to respond to successfully joining or creating a game to switch to the grid view of that particular game.</span></li><li><span style=\"color: rgb(35,31,32);\">Add code to create links to games the player has already joined.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The major new concept in this task is implementing&nbsp;RESTful HTTP requests to&nbsp;create&nbsp;data on the server. This requests should be done through your application controller API, not through your RESTRepositories. The latter&nbsp;would give end users&nbsp;too much access to your data.</span></p><h2><span style=\"color: rgb(153,153,153);\">RESTful Create Requests</span></h2><p><span style=\"color: rgb(35,31,32);\">Creating a new game and joining an existing game are very similar, as defined by the data schema you have been implementing. Both operations involve creating new data entries.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Join a game = add a new game player entry</span></li><li><span style=\"color: rgb(35,31,32);\">Create a game = add a new game + add a new game player entry</span></li></ul><p><span style=\"color: rgb(35,31,32);\">As before, be sure to send the appropriate response codes when creating a resource, or failing to create one.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">HTML Data Attributes</span></h2><p><span style=\"color: rgb(35,31,32);\">One problem with&nbsp;implementing the&nbsp;<strong>Join Game</strong>&nbsp;buttons is how to make&nbsp;each game button refer to a different game. You could write code that look at the text&nbsp;in the HTML next to&nbsp;the button,&nbsp;but this code is fragile, i.e., it breaks easily, whenever anyone makes a simple change to the web layout.. A graphic artist redesigning the web layout could easily break the code.</span><br /><span style=\"color: rgb(35,31,32);\">A&nbsp;better approach is to mark the button for&nbsp;each game with the ID of the game it's connected to.</span><br /><span style=\"color: rgb(35,31,32);\">Before HTML5 there was no standards-compliant way&nbsp;to attach data to HTML elements. HTML validators would complain about extra tags or attributes. Browsers would silently ignore unknown tags and attributes. Pages usually&nbsp;looked OK but JavaScript code that used non-standard&nbsp;attributes was not guaranteed to work.</span><br /><span style=\"color: rgb(35,31,32);\">HTML5 added&nbsp;<strong>data attributes</strong>&nbsp;just for this purpose. You can add attributes of the form&nbsp;<strong>data-<em>name</em>=&quot;<em>value</em>&quot;</strong>&nbsp;to any element. For example, an&nbsp;application might&nbsp;generate a date&nbsp;in&nbsp;a human-friendly form in the visible text, and a computer-friendly form (ISO-8601) in an attribute on a&nbsp;<strong>span</strong>&nbsp;around the text.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Today is &lt;span data-date=&quot;2016-06-30&quot;&gt;June 30&lt;/span&gt;.</span><br /><span style=\"color: rgb(35,31,32);\">JavaScript code can then retrieve and use&nbsp;the date&nbsp;information using normal DOM methods. Libraries like jQuery provide utilities to make this simple code even simpler.</span><br /><span style=\"color: rgb(35,31,32);\">You are free to add&nbsp;any&nbsp;<strong>data-</strong>&nbsp;attribute you want to&nbsp;the game buttons to indicate what game or game player they refer to.</span>&nbsp;</p><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"06d24990-2f73-4524-a53d-6f9706212857\"><ac:parameter ac:name=\"title\">Step 1 - Add the ability to return to a game</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">You want users to be able to re-enter&nbsp;a game they're in.</span></p><h2><span style=\"color: rgb(153,153,153);\">Add game player information to the list of games</span></h2><p><span style=\"color: rgb(35,31,32);\">If necessary, change the data transfer object you build for the list of games to include the IDs for each game player in each game. E.g., your JSON might look something like this:</span><br /><span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;games&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;created&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1473346240147</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;players&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;gpid&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;name&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;j.bauer@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span><br /><span style=\"color: rgb(153,153,153);\">},</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;gpid&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">2</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">2</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;name&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;c.obrian@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span><br /><span style=\"color: rgb(153,153,153);\">}</span> <span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(153,153,153);\">},</span><br /><span style=\"color: rgb(153,153,153);\">...</span><br /><span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(35,31,32);\">This says that Game #1 has two game players. The game player IDs are 1 and 2. That also happens to be their player IDs but that's a coincidence.</span></p><h2><span style=\"color: rgb(153,153,153);\">Add links to join games</span></h2><p><span style=\"color: rgb(35,31,32);\">Modify the&nbsp;JavaScript that writes the HTML for the list of games in&nbsp;<strong>games.html&nbsp;</strong>to wrap the game description inside a link to the URL for the appropriate game page, i.e.,&nbsp;<strong>game.html?gp=<em>nn</em></strong>&nbsp;where&nbsp;<strong><em>nn</em></strong>&nbsp;is the game player ID that player has for that game.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">The code&nbsp;should only do this&nbsp;if (1) there is logged in user, and (2) that user is a player in that game.</span></li></ul><p><span style=\"color: rgb(35,31,32);\"><strong>TEST!</strong>&nbsp;Try logging in as different users. Verify that links appear only on those games the user has joined. Verify that the&nbsp;links go to the right game, and that there are no user access errors.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Remember when testing that to change who you are&nbsp;with&nbsp;BASIC authentication, you need to exit and restart your browser.</span></p><h2><span style=\"color: rgb(153,153,153);\">Prevent players from seeing other players' data</span></h2><p><span style=\"color: rgb(35,31,32);\">The links you generate in the HTML should take players to only those games they are playing in, and show them their own data, e.g., where their ships are and what salvoes have been fired.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">But imagine an enterprising player who knows JavaScript, opens the developer window, and sees the HTML, JSON and URL links. &nbsp;If the player sees that her&nbsp;opponent has ID 15, then she&nbsp;can try entering&nbsp;<strong>game.html?gp=15</strong>&nbsp;into the browser window, to sneak a peak at her&nbsp;opponent's ships.</span><br /><span style=\"color: rgb(35,31,32);\">A&nbsp;logged-in player should not be able to cheat and see the game page for another player. To prevent that, you need to add code to the application controller method that returns a player's game view to</span></p><ul><li><span style=\"color: rgb(35,31,32);\">the current user is in fact the game player referenced by the ID&nbsp;<strong><em>nn</em></strong>&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">send an&nbsp;<strong>UNAUTHORIZED</strong>&nbsp;response if this is not true</span></li></ul><p><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />There is a way to do this kind of test&nbsp;with&nbsp;Spring annotations on the request methods, but it's just as easy to write conditional code in the&nbsp;controller method. See the entry on how to send responses like&nbsp;<strong>UNAUTHORIZED</strong>&nbsp;in the&nbsp;<strong>Resources</strong>.<br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />You'll need to create instances of a ResponseEntity. See the&nbsp;<strong>Resources</strong>&nbsp;on how to create instances.&nbsp;</p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit the methods you changed to check that a player is authorized to see the information requested. Use the &quot;code&quot; format.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"6f996ab1-5fd0-4422-aa60-965e31122957\"><ac:parameter ac:name=\"title\">Step 2 - Add the ability to create a game</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Creating games is a little simpler than joining a game, because you don't have to worry that someone else might have joined a game just before the user did.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Back-end: Add a create game method to your app controller</strong></span><br /><span style=\"color: rgb(35,31,32);\">As per the team lead's table, a game is created with a&nbsp;<strong>POST&nbsp;</strong>to&nbsp;the&nbsp;URL &nbsp;<strong>/api/games</strong>. This request&nbsp;should map to a method&nbsp;that</span></p><ul><li><span style=\"color: rgb(35,31,32);\">gets the current user</span><ul><li><span style=\"color: rgb(35,31,32);\">if there is none, it should send an&nbsp;<strong>Unauthorized</strong>&nbsp;response&nbsp;</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">creates and saves a new game</span></li><li><span style=\"color: rgb(35,31,32);\">creates and saves a new game player&nbsp;for&nbsp;this game and the&nbsp;current&nbsp;user</span></li><li><span style=\"color: rgb(35,31,32);\">send a&nbsp;<strong>Created</strong>&nbsp;response, with&nbsp;<strong>JSON&nbsp;</strong>containing the new game player ID, e.g.,&nbsp;{ &quot;gpid&quot;: 32 }</span><ul><li><span style=\"color: rgb(35,31,32);\">Note: a number or string is not a valid JSON object.&nbsp;</span><a href=\"http://www.json.org/\"><span style=\"color: rgb(51,122,183);\">Only key-value objects and arrays qualify as top-level JSON.</span></a></li><li><span style=\"color: rgb(35,31,32);\">It's not worth sending back an entire game view because the front-end code added&nbsp;below will request a game view automatically.</span></li><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">Refer to&nbsp;ebook sections:&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1442\"><span style=\"color: rgb(51,122,183);\">Response Entities, Spring Controllers and Response Objects</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;for an example of POST with request mapping method in a controller&nbsp;or&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1445\"><span style=\"color: rgb(51,122,183);\">Sending Data to the Application, Sending data in the request body example</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;for another example of POST with&nbsp;request mapping.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Front-end: Add AJAX code to post the create&nbsp;request and handle the response</strong></span></p><ul><li><span style=\"color: rgb(35,31,32);\">Add a&nbsp;<strong>Create Game</strong>&nbsp;button to&nbsp;<strong>games.html</strong>.</span></li><li><span style=\"color: rgb(35,31,32);\">Add an on-click method to the button that sends a POST to&nbsp;<strong>/api/games</strong>.</span></li><li><span style=\"color: rgb(35,31,32);\">If the request is successful, the JavaScript&nbsp;should&nbsp;send the browser to the URL&nbsp;<strong>game.html?gp=<em>mm</em></strong><em>&nbsp;</em>where&nbsp;<strong><em>mm</em></strong>&nbsp;is the new game player ID</span></li><li><span style=\"color: rgb(35,31,32);\">If the request fails, the JavaScript should pop up an alert with the error.</span></li><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span></li></ul><p><span style=\"color: rgb(35,31,32);\">See ebook section:&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1171\"><span style=\"color: rgb(51,122,183);\">JavaScript: How to Make AJAX Calls</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;(shows how to use $.post() in an AJAX call)</span><br /><span style=\"color: rgb(35,31,32);\">See the&nbsp;<strong>Resources</strong>&nbsp;for how to change browser locations in JavaScript.</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Send both the front-end JavaScript code and the back-end Java method(s) to handle creating a game. Put the JavaScript first and clearly label each section. Use the &quot;code&quot; format.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"14903fe3-8f50-4ceb-b337-a77c547578eb\"><ac:parameter ac:name=\"title\">Step 3 - Add the ability to join a game</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">This will&nbsp;be similar to creating a game, but with a few additional parts, because you need to get the ID of&nbsp;existing game, and check if someone else has&nbsp;already joined.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Add a join&nbsp;game method to your app controller</strong></span><br /><span style=\"color: rgb(35,31,32);\">As per the diagram, the request will be a&nbsp;<strong>POST</strong>&nbsp;to the URL&nbsp;<strong>/api/game/<em>nn</em>/players</strong>&nbsp;where&nbsp;<strong><em>nn</em></strong>&nbsp;is the ID of the game the user wants to join.&nbsp;This request&nbsp;should map to a method&nbsp;that</span></p><ul><li><span style=\"color: rgb(35,31,32);\">gets the current user</span><ul><li><span style=\"color: rgb(35,31,32);\">if there is none, it sends an&nbsp;<strong>Unauthorized</strong>&nbsp;response&nbsp;</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">gets the game with that ID</span><ul><li><span style=\"color: rgb(35,31,32);\">if there is none, it sends a&nbsp;<strong>Forbidden</strong>&nbsp;response with descriptive&nbsp;text, such as &quot;No such game&quot;</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">checks that the game has&nbsp;only one player</span><ul><li><span style=\"color: rgb(35,31,32);\">if there are two players, it sends a&nbsp;<strong>Forbidden</strong>&nbsp;response with descriptive text, such as &quot;Game is full&quot;</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">creates and saves a new game player, with this game and the&nbsp;current&nbsp;user</span></li><li><span style=\"color: rgb(35,31,32);\">sends a&nbsp;<strong>Created</strong>&nbsp;response, with the body containing JSON with&nbsp;the new game player ID, e.g.,&nbsp;{ &quot;gpid&quot;: 32 }</span></li></ul><p><span style=\"color: rgb(35,31,32);\"><strong>Add Game ID data to the Join buttons</strong></span></p><ul><li><span style=\"color: rgb(35,31,32);\">Change the&nbsp;JavaScript code that generates the list of games and the&nbsp;<strong>Join</strong>&nbsp;buttons to&nbsp;add a&nbsp;<strong>data-...&nbsp;</strong>attribute to each&nbsp;button with the appropriate game ID.</span></li></ul><p><span style=\"color: rgb(35,31,32);\"><strong>Add AJAX code to post the join&nbsp;request and handle the response</strong></span></p><ul><li><span style=\"color: rgb(35,31,32);\">Add an on-click method to the&nbsp;<strong>Join&nbsp;Game</strong>&nbsp;button that POSTs to&nbsp;the URL&nbsp;<strong>/api/game/<em>nn</em>/players</strong>, where&nbsp;<strong><em>nn</em></strong>&nbsp;is extracted from the&nbsp;<strong>data-game</strong>&nbsp;attribute on the button.</span></li><li><span style=\"color: rgb(35,31,32);\">If the request is successful, the JavaScript&nbsp;should&nbsp;send the browser to&nbsp;<strong>game.html?gp=<em>mm</em></strong>&nbsp;where&nbsp;<strong><em>mm</em></strong>&nbsp;is the new game player ID.</span></li><li><span style=\"color: rgb(35,31,32);\">If the request fails, the JavaScript should pop up an alert with an&nbsp;error message.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">See the&nbsp;<strong>Resources</strong>&nbsp;for how to change browser location in JavaScript.</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit the JavaScript and Java code you wrote for joining a game, in that order, clearly labeled, using the &quot;code&quot; format.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"54b844bd-edf7-487f-955b-7b4cbb375203\"><ac:parameter ac:name=\"title\">Step 4 - Submit your work</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\">Send your&nbsp;zipped project folder per the instructions in the 'Submit Your Work' Tab.&nbsp;</span></p></ac:rich-text-body></ac:structured-macro><p><br /></p>",
    "conflPageId": "263913599",
    "conflChildrenId": [
      "263716931"
    ]
  },
  {
    "title": "Java - Task 8",
    "content": "<h2><span style=\"color: rgb(153,153,153);\">Introduction</span></h2><p><span style=\"color: rgb(35,31,32);\">You been asked to implement the user story &quot;As a player in a new game, I can place ships.&quot; The back-end data repository code already supports&nbsp;storing&nbsp;ships with locations for a game player. What you need to add is:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">HTML and JavaScript on the front-end to collect and send a set of ship locations to the server.</span></li><li><span style=\"color: rgb(35,31,32);\">A controller method to receive this request and call the appropriate repository methods.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">There are two challenges here.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Building a nice easy to use interface for placing ships on a grid in HTML and JavaScript.</span></li><li><span style=\"color: rgb(35,31,32);\">Sending complex data, i.e., a set of ships for a game player, where each ship has a type and a list of locations, from the front-end to the back-end. Until now, you have only needed to send a game or game player ID.&nbsp;</span></li></ul><h2><span style=\"color: rgb(153,153,153);\">Modal&nbsp;Interactions</span></h2><p><span style=\"color: rgb(35,31,32);\">What makes this user interface a bit tricky is that it's hard to avoid a&nbsp;<strong>modal interaction&nbsp;</strong>design.&nbsp;Modal means that an interaction needs&nbsp;several steps. Doing the first step puts you in a special&nbsp;<strong>mode</strong>&nbsp;waiting for you&nbsp;to&nbsp;do the&nbsp;remaining steps. While in the special mode, other actions either can't be done, or, if allowed, cancel the action you were doing.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">For example, suppose you decide that the way to place a ship is to (1) click on the ship in a list of &quot;ships to place&quot; (2) click on a square in the ship grid to specify&nbsp;one end of the ship, and (3) click on another square to specify the other end of the ship.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">What if the user clicks on something else in steps (2) or (3)? What if the user clicks on endpoints that don't match where the selected ship can go. What if the user clicks a square already occupied? &nbsp;Do these errors cancel the mode? Or does the interface&nbsp;ignore such clicks? Or does it beep? How does the user know visually that they're in ship-adding mode?</span><br /><span style=\"color: rgb(35,31,32);\">Modern interface designers try very hard to avoid modal interfaces. That's one&nbsp;reason they use some kind of drag-and-drop action, because it replaces a multi-step action with one gesture. But drag-and-drop is fairly complex to implement. It also doesn't solve the problem of how a user decides between vertical and horizontal placement.</span><br /><span style=\"color: rgb(35,31,32);\">The interface&nbsp;challenge is up to you. You want it to be easy for users to place ships and adjust them. You want to prevent illegal placements, e.g., more than the allowed number of ships,&nbsp;ships overlapping each other, or ships going off the grid. At the same time, you want the interface to be easy for you to build and maintain. Brainstorm alternatives. Search the web for examples, Try out&nbsp;different ideas.</span></p><h2><span style=\"color: rgb(153,153,153);\">Posting&nbsp;Complex Data with JSON</span></h2><p><span style=\"color: rgb(35,31,32);\">Sending complex data to the web server involves some new concepts, but not&nbsp;very much code. In older&nbsp;HTML web apps, the only way to send data was&nbsp;to&nbsp;submit a form. Submitting a form sends the server a flat list of key-value pairs. It was up to the code on the back end&nbsp;to construct whatever Java objects were intended.</span><br /><span style=\"color: rgb(35,31,32);\">JSON-based apps, like Spring apps, have a more direct approach. You can use AJAX to post&nbsp;a JSON object that looks like the Java object you want to send, and framework code on the back end will construct the Java object for you.</span><br /><span style=\"color: rgb(35,31,32);\">For example, a&nbsp;pet tracking web site&nbsp;might have a form where a logged-in user could add a new pet to be tracked. The key part of the code for sending the data would look something like this:</span><br /><span style=\"color: rgb(112,128,144);\">// ... variables petName</span> <span style=\"color: rgb(112,128,144);\">etc set by earlier code from a form</span><br />$<span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(221,74,104);\">post</span><span style=\"color: rgb(153,153,153);\">({</span><br />url<span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;/owners/23/pets&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <br />data<span style=\"color: rgb(153,153,153);\">:</span> JSON<span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(221,74,104);\">stringify</span><span style=\"color: rgb(153,153,153);\">({</span> name<span style=\"color: rgb(153,153,153);\">:</span> petName<span style=\"color: rgb(153,153,153);\">,</span> type<span style=\"color: rgb(153,153,153);\">:</span> petType<span style=\"color: rgb(153,153,153);\">,</span> age<span style=\"color: rgb(153,153,153);\">:</span> petAge <span style=\"color: rgb(153,153,153);\">}),</span><br />dataType<span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;text&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><br />contentType<span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;application/json&quot;</span><br /><span style=\"color: rgb(153,153,153);\">})</span><br /><span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(221,74,104);\">done</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(0,119,170);\">function</span> <span style=\"color: rgb(153,153,153);\">(</span>response<span style=\"color: rgb(153,153,153);\">,</span> status<span style=\"color: rgb(153,153,153);\">,</span> jqXHR<span style=\"color: rgb(153,153,153);\">)</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(221,74,104);\">alert</span><span style=\"color: rgb(153,153,153);\">(</span> <span style=\"color: rgb(102,153,0);\">&quot;Pet added: &quot;</span> <span style=\"color: rgb(166,127,89);\">+</span> response <span style=\"color: rgb(153,153,153);\">);</span><br /><span style=\"color: rgb(153,153,153);\">})</span><br /><span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(221,74,104);\">fail</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(0,119,170);\">function</span> <span style=\"color: rgb(153,153,153);\">(</span>jqXHR<span style=\"color: rgb(153,153,153);\">,</span> status<span style=\"color: rgb(153,153,153);\">,</span> httpError<span style=\"color: rgb(153,153,153);\">)</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(221,74,104);\">alert</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(102,153,0);\">&quot;Failed to add pet: &quot;</span> <span style=\"color: rgb(166,127,89);\">+</span> textStatus <span style=\"color: rgb(166,127,89);\">+</span> <span style=\"color: rgb(102,153,0);\">&quot; &quot;</span> <span style=\"color: rgb(166,127,89);\">+</span> httpError<span style=\"color: rgb(153,153,153);\">);</span><br /><span style=\"color: rgb(153,153,153);\">})</span><br /><span style=\"color: rgb(35,31,32);\">The controller for handling this request might look something like this, leaving out error checking and creating the response entity:</span><br />@RequestMapping(value=&quot;/owners/{ownerId}/pets&quot;, method=RequestMethod.POST)<br />public ResponseEntity&lt;String&gt; addPet(@PathVariable long ownerId, @RequestBody Pet pet) {<br />Person person = personRepository.findById(ownerId).orElse(null);<br />pet.setOwner(person);<br />petRepository.save(pet);<br />...<br />}<br /><span style=\"color: rgb(35,31,32);\">This example&nbsp;method is getting data from two very different places:</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong>@PathVariable long ownerId</strong>&nbsp;tells Spring to extract an ID number from the URL.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>@RequestBody Pet pet</strong>&nbsp;tells Spring to parse the request body as a&nbsp;JSON object and use that object to make&nbsp;an instance of&nbsp;<strong>Pet</strong>.</span><ul><li><span style=\"color: rgb(35,31,32);\">An error will occur if the JSON keys and values do not match&nbsp;the fields of&nbsp;<strong>Pet</strong>.</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">&nbsp;See the entries on sending data to an application in the&nbsp;<strong>Resources</strong>.</span>&nbsp;</p><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"49cef106-5430-4162-8828-4d1e4f5b9d4a\"><ac:parameter ac:name=\"title\">Step 1 - Implement a controller method for a list of placed ships</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Implement a back-end controller method that can receive a list of ship objects, with locations, save them in your ship repository, and return a &quot;created&quot; response if there are no problems.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">The URL should be&nbsp;<strong>/games/players/{gamePlayerId}/ships</strong>.</span></li><li><span style=\"color: rgb(35,31,32);\">The body of the request should be parsed into a list of ships</span></li><li><span style=\"color: rgb(35,31,32);\">An&nbsp;<strong>Unauthorized</strong>&nbsp;response should be sent if</span><ul><li><span style=\"color: rgb(35,31,32);\">there is no current user logged in, or</span></li><li><span style=\"color: rgb(35,31,32);\">there is no game player with the given ID, or</span></li><li><span style=\"color: rgb(35,31,32);\">the current user is not the game player the ID references</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">A&nbsp;<strong>Forbidden</strong>&nbsp;response should be sent if the user already has ships placed.</span></li><li><span style=\"color: rgb(35,31,32);\">Otherwise, the ships should be added to the game player and saved, and a&nbsp;<strong>Created</strong>&nbsp;response should be sent.</span><ul><li><span style=\"color: rgb(35,31,32);\">There's no need for new content in the response, because&nbsp;the&nbsp;page needs to&nbsp;request an updated game view, to see possible&nbsp;actions by the opponent.</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">See the next task for how to test if this is working.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"7c5ff425-2b9d-4560-9119-c65ec38cac14\"><ac:parameter ac:name=\"title\">Step 2 - Implement JavaScript to post a list of ships to the server</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Write JavaScript functions to construct and POST&nbsp;with AJAX&nbsp;the JSON string for a list of ships to the controller you defined.</span><br /><span style=\"color: rgb(35,31,32);\">The JSON for each ship should include the type of the ship and a list of locations.</span><br /><span style=\"color: rgb(35,31,32);\">If the POST is successful, the JavaScript should get an updated game view and redisplay the grids. That way, the game view is guaranteed to include both player's actions and any the opponent has done.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>TEST</strong>! Run the JavaScript with some canned data. Keep a JavaScript console window open. Verify&nbsp;that</span></p><ul><li><span style=\"color: rgb(35,31,32);\">posting fails if you are not logged in, or are logged in as the wrong user</span></li><li><span style=\"color: rgb(35,31,32);\">a &quot;created&quot; response is returned for valid posting</span></li><li><span style=\"color: rgb(35,31,32);\">after a valid post, if you get the JSON for the game, it now includes the ship data that was posted</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Here's some example&nbsp;JSON for a list of ships:</span><br /><span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;type&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;destroyer&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;locations&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;A1&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;B1&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;C1&quot;</span><span style=\"color: rgb(153,153,153);\">]</span> <span style=\"color: rgb(153,153,153);\">},</span><br /><span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;type&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;patrol boat&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;locations&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;H5&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;H6&quot;</span><span style=\"color: rgb(153,153,153);\">]</span> <span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">]</span></p><h2><span style=\"color: rgb(153,153,153);\">&nbsp;Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit the JavaScript and Java code for posting ship locations to the server, in that order, clearly labeled, using the &quot;code&quot; format.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"30a5590a-e6ff-46a3-afed-f1401e571958\"><ac:parameter ac:name=\"title\">Step 3 - Implement the HTML interface to place and submit ships</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">This is the most open-ended and trickiest task. You want an interface that lets&nbsp;a player</span></p><ul><li><span style=\"color: rgb(35,31,32);\">see what ships they have placed so far</span></li><li><span style=\"color: rgb(35,31,32);\">see what ships they still need to place</span></li><li><span style=\"color: rgb(35,31,32);\">select and place a ship</span></li><li><span style=\"color: rgb(35,31,32);\">select and move a placed ship</span></li><li><span style=\"color: rgb(35,31,32);\">submit the placed ships when, and only when, there is a valid placement</span></li></ul><p><span style=\"color: rgb(35,31,32);\">You already have done the part about showing what ships are placed, based on what's in the game JSON.</span><br /><span style=\"color: rgb(35,31,32);\">To show what ships they need to place, you need to display a&nbsp;list of ship types defined for the game, e.g., one battleship, one destroyer, etc. It would be nice to show them how big each ship is, and, in this list, which ones have already been placed in the grid, especially since there are two ship types that have the same size.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit your HTML and JavaScript code for placing ships on the ship grid. Put the HTML first, and clearly label each section. Use the &quot;code&quot; format to submit.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"9f5cedb0-2641-4aef-850c-2749ba2ff681\"><ac:parameter ac:name=\"title\">Step 4 - Submit your work</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\">Send your&nbsp;zipped project folder per the instructions in the 'Submit Your Work' Tab.&nbsp;</span></p></ac:rich-text-body></ac:structured-macro><p><br /></p>",
    "conflPageId": "263913608",
    "conflChildrenId": [
      "263913613"
    ]
  },
  {
    "title": "Java - Task 8 Resources",
    "content": "<p><span style=\"color: rgb(35,31,32);\">A brief guide to the Resource subsections:</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Spring and JPA:&nbsp;</strong>This covers the&nbsp;several different ways a browser can send data to a server, from a simple value in a URL, to values in a form, to a complex JSON object. &nbsp;</span></p><p><span style=\"color: rgb(35,31,32);\"><strong>Required resources</strong></span></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"b1b81789-0c96-4637-bbe4-6a7d52989814\"><ac:parameter ac:name=\"title\">Spring and JPA</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(153,153,153);\">Sending Data&nbsp;to a Web App</span></h2><p><span style=\"color: rgb(35,31,32);\">HTTP has two methods for sending data: POST and PUT. POST is for sending any kind of data, for the web server to handle however it chooses. PUT is for sending a resource to be stored on the server. Because older browsers only support GET and POST, web applications often use POST to send&nbsp;all data.</span><br /><span style=\"color: rgb(35,31,32);\">Data can be sent as a simple set of key and value pairs. This is what happens when you submit a normal HTML form. The keys and values are simple strings. This is simple on the browser side, but requires more code on the server to construct the objects you need.</span><br /><span style=\"color: rgb(35,31,32);\">With AJAX, data can also be sent in the body of the request. The body is a string containing a JSON object.</span><br /><span style=\"color: rgb(35,31,32);\">With the Spring framework, you can POST&nbsp;JSON that matches some Java class, and Spring code will take care of constructing an instance of that class from the JSON for you, just as it converts Java instances to JSON for GET.</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1445\"><span style=\"color: rgb(51,122,183);\">Sending data to an application</span></a></li></ul></ac:rich-text-body></ac:structured-macro><p><span style=\"color: rgb(35,31,32);\"><strong>Optional resources</strong></span></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"ea5d02c7-7bbf-424d-8982-9c1b623ac598\"><ac:parameter ac:name=\"title\">Spring</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Some examples of sending different types of objects with JSON:</span></p><ul><li><a href=\"http://www.leveluplunch.com/java/tutorials/014-post-json-to-spring-rest-webservice/\"><span style=\"color: rgb(51,122,183);\">LevelUp Lunch: Post JSON to spring REST</span></a></li></ul><p><span style=\"color: rgb(35,31,32);\">Some sample code to show how to control what the Jackson library will include and not include when serializing Java to JSON and deserializing JSON to Java:</span></p><ul><li><a href=\"http://www.baeldung.com/jackson-field-serializable-deserializable-or-not\"><span style=\"color: rgb(51,122,183);\">Specifying what Jackson should serialize / deserialize</span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "263913613",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java - Task 10 Resources",
    "content": "<p><span style=\"color: rgb(35,31,32);\">A brief guide to the Resource subsections:</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Java:</strong>&nbsp;This task involves a fair amount of nested loops over multiple collections of data, counting and summing. Complex though these loops are, they can be done fairly compactly with Java's streams and lambda expressions.</span></p><p><span style=\"color: rgb(35,31,32);\"><strong>Required resources</strong></span> </p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"0ca96c67-8c17-42dd-9013-c7be8b14bafc\"><ac:parameter ac:name=\"title\">Java</ac:parameter><ac:rich-text-body><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=47\"><span style=\"color: rgb(51,122,183);\">Looping with&nbsp;streams</span></a></li></ul></ac:rich-text-body></ac:structured-macro><p><span style=\"color: rgb(35,31,32);\"><strong>Optional resources</strong></span></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"3d9c2b98-7dee-4024-b0eb-f55229c5e779\"><ac:parameter ac:name=\"title\">Java</ac:parameter><ac:rich-text-body><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1447\"><span style=\"color: rgb(51,122,183);\">General introduction to looping in Java</span></a></li></ul></ac:rich-text-body></ac:structured-macro><p><br /></p>",
    "conflPageId": "263913620",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java - Task 11 Resources",
    "content": "<p><span style=\"color: rgb(35,31,32);\">A brief guide to the Resource subsections:</span><br /><span style=\"color: rgb(35,31,32);\"><strong>JavaScript:</strong>&nbsp;Many games require code that executes periodically, e.g., every second, to update the positions of objects, count down to a deadline, and so on. This resource shows how to do that in JavaScript so that you can check to see if the other player has moved yet.</span></p><p><span style=\"color: rgb(35,31,32);\"><strong>Required resources</strong></span> </p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"bd0a0b75-0b90-4649-be49-1789cd0cfc9c\"><ac:parameter ac:name=\"title\">JavaScript</ac:parameter><ac:rich-text-body><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1446\"><span style=\"color: rgb(51,122,183);\">How to execute JavaScript code periodically</span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "263913626",
    "conflChildrenId": [

    ]
  },
  {
    "title": "JS Classes Exercises (before starting with Java)",
    "content": "<p style=\"\"><strong>Important: always implement one exercise at a time (if possible just parts of it), and test each solution (or each change). The general idea is, code a bit and try, code a bit and try&hellip;<span>&nbsp;</span></strong>Here's an example with an explanation about classes in JavaScript.</p><p style=\"\">Classes were added in last version of JavaScript (called ECMAScript 6 or just ES6). It's something similar to how classes work in other languages (Java, Ruby, etc). This is a very important concept in programming, so sooner or later you'll want to learn about it. (And I highly recommend you to do it before the Java modules).</p><p style=\"\">In this example you will find an index.html and 3 JavaScript files: main1.js, main2.js and main3.js.</p><p style=\"\">The index.html loads main1.js. Read the main1.js file and see how it creates a plain literal object with some methods.</p><p style=\"\">When you understand main1.js make index.html load main2.js instead, and try to understand what main2.js does. It just creates the object from inside a function, to avoid code repetition.</p><p style=\"\">Finally replace main2.js by main3.js, where you can see how you can use classes instead of plain objects.</p><p style=\"\">You can play with the Car class in main3.js to understand how it works.</p><p style=\"\"><strong>Suggested exercises:</strong></p><ol><li style=\"\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Add another property like model, so you can create a &ldquo;Ford&rdquo; with model &ldquo;Mondeo&rdquo;. Make the status method display the model too.</span></li><li style=\"\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Fix the brake method so the car never reduces its speed below zero (a Car can't run at -50 km/h) even when you try to brake more than necessary.</span></li><li style=\"\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Add a new method to stop the car immediately (set the speed to 0). It doesn't need parameters.</span></span></li><li style=\"\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Add a method that returns a boolean saying if the car is running (speed is greater than zero) or not.</span></span></span><span style=\"color: rgb(85,85,85);text-decoration: none;\"></span></li></ol><p style=\"\">You can also try to create other classes.</p><p style=\"\"><strong>TV class:</strong></p><ol><li style=\"\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Create a TV class with properties like brand, channel and volume.</span></li><li style=\"\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Specify brand in a constructor parameter. Channel should be 1 by default. Volume should be 50 by default.</span></li><li style=\"\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Add methods to increase and decrease volume. Volume can't never be below 0 or above 100.</span></span></li><li style=\"\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Add a method to set the channel. Let's say the TV has only 50 channels so if you try to set channel 60 the TV will stay at the current channel.</span></span></span></li><li style=\"\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Add a method to reset TV so it goes back to channel 1 and volume 50. (Hint: consider using it from the constructor).</span></span></span></span></li><li style=\"\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">It's useful to write a status, that returns info about the TV status like: &ldquo;Panasonic at channel 8, volume 75&rdquo;.</span></span></span></span></span></li></ol><p><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Look for main4.js and main5.js here. After reading, playing with them and understanding what they do,<span>&nbsp;</span></span><strong style=\"text-decoration: none;\">here are some exercises</strong><span style=\"color: rgb(85,85,85);text-decoration: none;\">:</span></span></span></span></span></span></p><ol><li><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">In ShoppingCart, define a method totalPrice() that returns the total amount of the products it contains.</span></span></span></span></span></span></span></li><li><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Now let's say that, if you buy 5 products or more, you have a 10% of discount. Change totalPrice to reflect this calculation.</span></span></span></span></span></span></span></span></li><li><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Besides the previous discount, if you buy 3 items of the same type (e.g. 3 pencils) you may get one more for free. So, if you buy 4 pencils you only pay 3, if you buy 8 pencils you only pay 6, etc. Change totalPrice so it considers the free items you get. Notice that if you buy 3 pencils you just pay the 3 of them.</span></span></span></span></span></span></span></span></span></li><li><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Sometimes a product is sold out and has to be replaced by a new one. Add a method replace(productName, replacementProduct) that looks for products with productName and replaces them by new instances of the product like replacementProduct. Notice that productName is a string, and replacementProduct is a Product. Also, bear in mind that you don't have to add the replacementProduct itself to the cart, but create new products like that one (whenever necessary).</span></span></span></span></span></span></span></span></span></span></li></ol><p><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Important: always implement one exercise at a time (if possible just parts of it), and test each solution (or each change) with different combinations of products. The general idea is, code a bit and try, code a bit and try&hellip;</span></span></span></span></span></span></span></span></span></span></span></p><p><span style=\"color: rgb(85,85,85);text-decoration: none;\">Exercises to send to students:</span></p><p><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span>&nbsp;</span></span><ac:structured-macro ac:name=\"view-file\" ac:schema-version=\"1\" ac:macro-id=\"d7def2e7-61cc-465f-b94e-ec297202aae3\"><ac:parameter ac:name=\"name\"><ri:attachment ri:filename=\"JS classes intro-20190318T104532Z-001.zip\" ri:version-at-save=\"1\" /></ac:parameter><ac:parameter ac:name=\"height\">150</ac:parameter></ac:structured-macro></p>",
    "conflPageId": "282263572",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Web Development Resources and E-Books",
    "content": "<p>This page is filled with links to resources and e-books for the web development program.</p><p><br /></p><p>eBooks:</p><p>- Ubiqum eBooks: <a href=\"https://codeacademy.ubiqum.com/ebooks/\">https://codeacademy.ubiqum.com/ebooks/</a> . If you don&acute;t have an account, use the following credentials:</p><ul style=\"list-style-type: square;\"><li>User: <span class=\"c-message__body\"><a class=\"c-link\" href=\"mailto:ubiqum.course@gmail.com\">ubiqum.course@gmail.com</a></span></li><li>Password: <span class=\"c-message__body\">15Ub129</span></li></ul><p>-&nbsp;Free eBooks: <a href=\"https://books.goalkicker.com/\">https://books.goalkicker.com/</a></p><p><br /></p><p>Recommended tutorials:</p><p>- CSS Grid: <a href=\"https://www.youtube.com/watch?v=jV8B24rSN5o\">https://www.youtube.com/watch?v=jV8B24rSN5o</a></p><p>- Bootstrap: <a href=\"https://www.youtube.com/watch?v=gqOEoUR5RHg\">https://www.youtube.com/watch?v=gqOEoUR5RHg</a></p><p>- VueJS (1-14): <a href=\"https://www.youtube.com/watch?v=5LYrN_cAJoA&amp;list=PL4cUxeGkcC9gQcYgjhBoeQH7wiAyZNrYa\">https://www.youtube.com/watch?v=5LYrN_cAJoA&amp;list=PL4cUxeGkcC9gQcYgjhBoeQH7wiAyZNrYa</a></p><p>- Firebase: <a href=\"https://www.youtube.com/watch?v=F6UWb9FNnj4\">https://www.youtube.com/watch?v=F6UWb9FNnj4</a></p><p>- NodeJS: <a href=\"https://www.youtube.com/watch?v=w-7RQ46RgxU&amp;list=PL4cUxeGkcC9gcy9lrvMJ75z9maRw4byYp&amp;index=1\">https://www.youtube.com/watch?v=w-7RQ46RgxU&amp;list=PL4cUxeGkcC9gcy9lrvMJ75z9maRw4byYp&amp;index=1</a></p><p>- Node, Express and MongoDB Set Up: <a href=\"https://www.youtube.com/watch?v=BRdcRFvuqsE&amp;list=PL4cUxeGkcC9jBcybHMTIia56aV21o2cZ8&amp;index=1\">https://www.youtube.com/watch?v=BRdcRFvuqsE&amp;list=PL4cUxeGkcC9jBcybHMTIia56aV21o2cZ8&amp;index=1</a></p><p>- React &amp; Redux: <a href=\"https://www.youtube.com/watch?v=OxIDLw0M-m0&amp;list=PL4cUxeGkcC9ij8CfkAY2RAGb-tmkNwQHG\">https://www.youtube.com/watch?v=OxIDLw0M-m0&amp;list=PL4cUxeGkcC9ij8CfkAY2RAGb-tmkNwQH</a></p><p>-&nbsp;Redux (Chapters 1-3): <a href=\"https://www.freecodecamp.org/news/understanding-redux-the-worlds-easiest-guide-to-beginning-redux-c695f45546f6/\">https://www.freecodecamp.org/news/understanding-redux-the-worlds-easiest-guide-to-beginning-redux-c695f45546f6/</a></p><p>- Complete MERN Application: <a href=\"https://www.youtube.com/watch?v=PBTYxXADG_k&amp;list=PLillGF-RfqbbiTGgA77tGO426V3hRF9iE\">https://www.youtube.com/watch?v=PBTYxXADG_k&amp;list=PLillGF-RfqbbiTGgA77tGO426V3hRF9iE</a></p><p><br /></p><p>Other resources:</p><p>- FlexBox: <a href=\"https://flexboxfroggy.com/\">https://flexboxfroggy.com/</a></p><p>-&nbsp;Passport (1-14): <a href=\"https://www.youtube.com/watch?v=sakQbeRjgwg&amp;list=PL4cUxeGkcC9jdm7QX143aMLAqyM-jTZ2x\">https://www.youtube.com/watch?v=sakQbeRjgwg&amp;list=PL4cUxeGkcC9jdm7QX143aMLAqyM-jTZ2x</a></p><p><br /></p>",
    "conflPageId": "294354945",
    "conflChildrenId": [

    ]
  },
  {
    "title": "React Recruiter Coding Task (Part Time)",
    "content": "<h2>Email from company</h2><p style=\"\">Hi there,&nbsp;</p><div style=\"\"><p><br /></p></div><div style=\"\"><p>thank you for your application in our company.<span>&nbsp;</span></p></div><p><span style=\"color: rgb(34,34,34);\">What we want to accomplish, is to get a feeling for your code styling. So please share your repository in the end and provide deployment instructions.&nbsp;</span><br style=\"\" /><br style=\"\" /><span style=\"color: rgb(34,34,34);\">We would like the app to use a modern JavaScript framework such as React.</span><br style=\"\" /><br style=\"\" /><span style=\"color: rgb(34,34,34);\">Prepare two simple screens:&nbsp;</span><br style=\"\" /><br style=\"\" /><span style=\"color: rgb(34,34,34);\">1. List of all beers including name, abv, ibu After a click on one list item you get a second screen&nbsp;</span><br style=\"\" /><br style=\"\" /><span style=\"color: rgb(34,34,34);\">2. Details of beer including: name, abv, ibu, isOrganic, labels, year, status, if available: related glass data&nbsp;</span><br style=\"\" /><br style=\"\" /><span style=\"color: rgb(34,34,34);\">please use:&nbsp;</span><a style=\"\" href=\"https://www.brewerydb.com/\">https://www.brewerydb.com/</a><span style=\"color: rgb(34,34,34);\">&nbsp;</span><br style=\"\" /><br style=\"\" /><br style=\"\" /><br style=\"\" /><span style=\"color: rgb(34,34,34);\">It would be great if you could answer share the GitHub repository in your next mail.&nbsp;</span><br style=\"\" /><br style=\"\" /><br style=\"\" /><span style=\"color: rgb(34,34,34);\">&nbsp;Best,&nbsp;</span><br style=\"\" /><br style=\"\" /><span style=\"color: rgb(34,34,34);\">Recruiter</span></p><h2 class=\"adL\" style=\"\">Ressources</h2><ul><li>CORS policy issue. Find information about CORS issues. Use this serveur as a prefix of the URL to bypass this issue :&nbsp;<a style=\"text-decoration: underline;text-align: left;\" href=\"https://ubiqum-cors-anywhere.herokuapp.com/\">https://ubiqum-cors-anywhere.herokuapp.com/</a></li><li>Paginated API. Notice that the API has been paginated, it means that every response only returns a limites number of results. Find a solution to this issue</li></ul>",
    "conflPageId": "296976386",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Career Services - Student Tasks",
    "content": "<p />",
    "conflPageId": "298090497",
    "conflChildrenId": [
      "300843039",
      "300449834",
      "306839553"
    ]
  },
  {
    "title": "Practice a Data Technical Test with your mentor",
    "content": "<ac:image ac:align=\"center\" ac:layout=\"center\" ac:src=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\"><ri:url ri:value=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\" /></ac:image><p><strong>FROM:</strong> Rachel Mildred <br /><strong>Subject:</strong> Technical test</p><p>Good morning,</p><p>As a Recruiter at Blackwell Electronics, I am very interested in your profile and think you'd be a good fit for a position in our company as a Data Analyst. The open position requires knowledge of machine learning, predictive analysis, business insights and reporting. You would be in charge of the Data Analysis department and in close contact with Marketing and Sales, so communication is also a must for this position.</p><p>We have found you through LinkedIn but we would like to see your work as well. Do you have a Rpubs account? That way we can see your portfolio so far. If you don't have a Rpubs account at this point, please create one and share the link with us.</p><p>For this interview, we have provided you with a set of technical tests so please choose the one that you think will better suit your interests. You can either choose the one that fits better with your skills or the one that is more challenging, it's up to you.</p><p>Good luck, and I hope you get the position.</p><p>Best regards,</p><p>Rachel</p><p /><p>Rachel Mildred</p><p>Head of Recruitment</p><p>Blackwell Electronics</p><p><br /></p>",
    "conflPageId": "298123283",
    "conflChildrenId": [
      "298287143"
    ]
  },
  {
    "title": "Plan of Attack T5",
    "content": "<p><a href=\"https://gbstool.learningbydoingtools.com/mc/poa?productID=3724&amp;taskID=3987#introduction\">INTRODUCTION</a></p><p><strong>The most common questions in a job interview&hellip;</strong></p><p>A job interview is a challenge for both the person in charge of the selection and the candidate. The recruiter wants to find the ideal candidate for the position and you want to be the chosen one. For this reason you must be ready for answering the questions he/she asks in the best way possible and effectively.</p><p>We have compiled a <strong>list of questions</strong> you will see in the sections below, that are common to all the interviewers and that will help you be prepared for any interview challenge.</p><p>How to answer them?</p><ul><li><p>Shortly but meaningful</p></li><li><p>Quick response</p></li><li><p>Well structure and clear language</p></li><li><p>Using real life experiences</p></li><li><p>Mentioning the abilities learned</p></li><li><p>Highlighting your main achievements</p></li><li><p>Showing clear goals and motivations</p></li><li><p>Adapting your speech to the position</p></li><li><p>Being yourself</p></li><li><p>Showing interest in the company</p></li><li><p>Don&rsquo;t forget anything relevant!</p></li></ul><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"45de3e1f-e690-4c98-a877-ce0ec5a59e6b\"><ac:parameter ac:name=\"title\">1. Introduction</ac:parameter><ac:rich-text-body><p><strong>Tell me a bit about yourself. /Can you tell me about [this] interesting point in time in your career?</strong></p><p>This is usually the first question of every interview. It&rsquo;s a challenging question used to get a first impression about you and to break the ice. The interviewer wants to see how you handle explaining the most relevant aspects of your career and profile in a brief but meaningful time or starts directly asking for some specific experience. You don&rsquo;t need to extend too much (4/5 points) and you can help yourself with your elevator pitch we worked on earlier. Remember to have a look at the candidate requirements of the job offer and adapt your speech to these.</p><p /><p><strong>What do you know about us?</strong></p><p>The company will appreciate some research about them (main values, goals, missions, roles, impacts, services&hellip;). This will prove your interest in the position and that you are seriously involved. You can also check the company's social media and make a comment about some of the information shared lately. This answer will help you with the next question.</p><p /><p><strong>What is your motivation for working with us?</strong></p><p>This question is basic for demonstrating again your interest and motivation for working in their company and for showing that you really fit with their philosophy. This is a good time to explain your trust in their company, express interest in growing professionally with them, highlight past employment within the same sector, etc. Always be honest about your intentions. Add that you think it really fits with your profile and personal interests. Justify this, using examples.</p><p /><p><strong>Why did you decide to make a career change?</strong></p><p>Here, try to avoid making negative comments about your previous company or experiences, because every experience teach you something and they may think you could talk about them in the same way later on in your career.</p><p>Try to focus on your need to face new challenges, to try something different, (another kind of company or role for example), to learn new competencies or to contribute in another sector/position where you think you can perform better or you are more motivated to work.</p><p /><p><strong>Can you walk me through your most significant career achievement?</strong></p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"dda4b8ef-b1fd-4543-b12d-3584fd78e1ae\"><ac:parameter ac:name=\"title\">2. Adaptability</ac:parameter><ac:rich-text-body><p><strong>Tell me about a time when you were asked to do something you had never done before. How did you react? What did you learn?</strong></p><p /><p><strong>Describe a situation in which you embraced a new system, process, technology, or idea at work that was a major departure from the old way of doing things.</strong></p><p /><p><strong>Recall a time when you were assigned a task outside of your job description. How did you handle the situation? What was the outcome?</strong></p><p /><p><strong>Tell me about the biggest change that you have had to deal with. How did you adapt to that change?/ What was harder for you during the course?</strong></p><p /><p><strong>Tell me about a time when you had to adjust to a colleague&rsquo;s working style in order to complete a project or achieve your objectives.</strong></p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"279ba0f9-f4ff-4918-9a0d-1c1b4519fb51\"><ac:parameter ac:name=\"title\">3. Culture Fit</ac:parameter><ac:rich-text-body><p><strong>What are the three things that are most important to you in a job?</strong></p><p /><p><strong>Tell me about a time in the last week when you&rsquo;ve been satisfied, energized, and productive at work. What were you doing?</strong></p><p /><p><strong>What&rsquo;s the most interesting thing about you that&rsquo;s not on your resume?</strong></p><p /><p><strong>What would make you chose our company over others?</strong></p><p /><p><strong>What&rsquo;s the biggest misconception your coworkers have about you and why do they think that?</strong></p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"c7d315e6-fce2-4b67-8c8a-6b80f2b64610\"><ac:parameter ac:name=\"title\">4. Out of The Box</ac:parameter><ac:rich-text-body><p><strong>How many wheels roll in the airport of Barcelona in one day long?</strong></p><p>Of course, you don't know the exact number, neither do I nor the recruiter! What they are going to evaluate here is your capacity to extract a number by using your logic and reason. You have to extract different deductions that will lead you to a specific number.</p><p>How can you do that?</p><p>By proposing a hypothesis, for example:</p><p>&quot;If the planes have x wheels, and there are x planes landing every hour and x taking off... If one day has 24 hours... If there is approximately one suitcase per person that has x wheels, and every hour they are x people walking with their suitcase...<strong>The answer will be</strong>... &quot;</p><p>By saying which information you will need to get to this number:</p><p>&quot; I should know how many planes land and take off every hour... then I will do x calculation... I should know how many people walk with suitcases in an hour... then do this calculation...I should...</p><p /><p><strong>How many </strong><em><strong>la Caixa </strong></em><strong>banks are in Barcelona? /</strong></p><p><strong>What 3 objects would you pick up with you to the moon?</strong></p><p>Same as the previous one.</p><p /><p><strong>How would you explain Facebook to your grandmother?</strong></p><p>This question is asked to evaluate your capacity of explaining something complex in the most practical and easy way to make everybody understand it.</p><p>In your job processes, you will have to deal with that, when being interviewed by a recruiter who doesn't control coding or data technologies.</p><p>Here you can find a <a href=\"https://drive.google.com/file/d/0B1U9Xh4FelDnbExRMUlTb09PT0ZzSThRdHZiS1ZMZXhEbWt3/view?usp=sharing\">logical test</a> that a company send to one of our students. Get some practice!</p><p /><p><strong>How would you describe yourself in one word? / If you could be an animal, which one would you choose?</strong></p><p>There is no wrong response, just explain why.</p><p /></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"0b6e0bb4-8a4e-4d31-9ea2-dad210ef0723\"><ac:parameter ac:name=\"title\">5. Collaboration</ac:parameter><ac:rich-text-body><p><strong>Give an example of when you had to work with someone who was difficult to get along with. How did you handle interactions with</strong></p><p><strong>that person?</strong></p><p /><p><strong>Tell me about a time when you were communicating with someone and they did not understand you. What did you do?</strong></p><p /><p><strong>Tell me about one of your favourite experiences working with a team and your contribution.</strong></p><p /><p><strong>Describe the best partner or supervisor with whom you&rsquo;ve worked. What part of their managing style appealed to you?</strong></p><p /><p><strong>Can you share an experience where a project dramatically shifted directions at the last minute? What did you do?</strong></p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"eb9a0a7f-4ac4-4ab7-95f7-f58cc0b64a85\"><ac:parameter ac:name=\"title\">6. Growth Potential</ac:parameter><ac:rich-text-body><p><strong>Recall a time when your manager was unavailable when a problem arose. How did you handle the situation? With whom did you consult?</strong></p><p /><p><strong>What professional milestones are you hoping to achieve at our company?</strong></p><p /><p><strong>What would motivate you to make a move from your current role?</strong></p><p /><p><strong>When was the last occasion you asked for direct feedback from a superior? Why? What&rsquo;s the biggest career goal you&rsquo;ve ever achieved?</strong></p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"107cd258-86b1-4d15-ba21-6a1667d84073\"><ac:parameter ac:name=\"title\">7. Emotional Intelligence</ac:parameter><ac:rich-text-body><p><strong>Give me an example of a time that you lost your temper. Tell me what happened. What was the outcome?</strong></p><p /><p><strong>Here&rsquo;s problem, X. Can you offer a win-win solution?</strong></p><p /><p><strong>Tell me about a time that a client was disappointed with your work. How did you respond?</strong></p><p /><p><strong>How you managed to quit your last job? How is your relationship with your ex-boss?</strong></p><p /><p><strong>Did you have some conflict with a peer? Did you solve it? How?</strong></p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"bcefd6ef-4dfb-45e3-8006-0d461d606688\"><ac:parameter ac:name=\"title\">8. Prioritization</ac:parameter><ac:rich-text-body><p><strong>ell me about a time when you had to juggle several projects at the same time. How did you organize your time? What was the result?</strong></p><p /><p><strong>Tell me about a project that you planned. How did you organize and schedule the tasks?</strong></p><p><strong>Describe a time when you felt stressed or overwhelmed. How did you handle it?</strong></p><p /><p><strong>How do you determine what amount of time is reasonable for a task?</strong></p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"f7137bf5-cc0f-4eb9-a314-57887bc3a701\"><ac:parameter ac:name=\"title\">9. Leadership</ac:parameter><ac:rich-text-body><p><strong>Tell me about the last time something significant didn&rsquo;t go according to plan at work. What was your role? What was the outcome?</strong></p><p /><p><strong>Describe a situation where you needed to persuade someone to see things your way. What steps did you take? What were the results?</strong></p><p /><p><strong>Give me an example of a time when you felt you led by example. What did you do and how did others react?</strong></p><p /><p><strong>Tell me about the toughest decision you had to make in the last six months.</strong></p><p /><p><strong>Have you ever had to &ldquo;sell&rdquo; an idea to your co-workers or group? How did you do it? What were the results?</strong></p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"51fde54d-308c-44cd-8f27-ca8faec8f203\"><ac:parameter ac:name=\"title\">10. Regarding Technology</ac:parameter><ac:rich-text-body><p><strong>How you stay updated with data analysis/development?</strong></p><p>It is important you show interest in the market and follow other professionals, youtubers, bloggers or assist to the main events to demonstrate that you are very passionate about what you are doing. This is a good way to be up to date with the news and actual tendencies of the Tech world. Check these articles to get some ideas of who to follow:</p><p>- <a href=\"https://phraseapp.com/blog/posts/10-must-read-blogs-for-software-developer/\">10 Must-Read Blogs for Software Developer</a></p><p>- <a href=\"https://usersnap.com/blog/12-best-web-development-blogs-reading-right-now/\">11 best web development blogs you should be reading right now</a></p><p>- <a href=\"https://www.blendo.co/blog/the-best-blogs-every-data-analyst-should-follow/\">The best blogs every data analyst should follow</a></p><p /><p><strong>How do you document yourself to resolve a coding challenge?</strong></p><p>The recruiter wants to see the ability you have to learn by your own, that you describe the tools you use to solve specific problems related to coding (websites, blogs, Ubiqum program, etc.). You can talk about these two websites for the Java course (<a href=\"https://stackoverflow.com/\">Stackoverflow</a>, <a href=\"https://www.w3schools.com/\">W3schools</a>), for example.</p><p /><p><strong>Tell me about the most difficult technical challenge you&rsquo;ve encountered and how you resolved it.</strong></p><p>Companies are not looking for people who can just churn through bugs, but people who can understand the big picture as part of a larger product team.</p><p /><p><strong>What technologies could you not live without?/What are your favorite gadgets? Apps? Websites?</strong></p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"f14f96b6-8a52-46af-a992-c244d0d1dd5e\"><ac:parameter ac:name=\"title\">11. Technical Questions for Developers</ac:parameter><ac:rich-text-body><ul><li><p>Watch the following <a href=\"https://www.youtube.com/watch?v=gNLvqV2KrjQ\">video</a> that will help you prepare the answers to the technical questions</p></li></ul><ol><li><p>Check and be prepared for this <a href=\"https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/questions\">technical questions in GitHub</a> and also these ones:</p><ol><li><p>Which design patterns do you implement? How can you develop a web from 0?</p></li><li><p>Which is the difference between MVVM and MVC?</p></li><li><p>What is an Event Loob in Node Js?</p></li><li><p>What is a closhure?</p></li><li><p>How do you test code? Which systems do you use?</p></li><li><p>Which is the difference between a Null Variable and an undefined?</p></li><li><p>Which version controls do you use?</p></li></ol></li></ol></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"04c30c6f-f9cb-4f67-9235-3ca3f949aee5\"><ac:parameter ac:name=\"title\">12. Closing</ac:parameter><ac:rich-text-body><p><strong>Are you currently in any other selection processes?</strong></p><p>Do not be afraid to tell the interviewer that you are actively seeking for employment and that you have already attended other interviews. Having a high demand is an interesting quality.</p><p><strong>What is your salary expectations?</strong></p><p>To answer this question, it is best that you find out in advance what the market standard is. For the first position as a junior, the salary usually ranges between 18,000&euro; gross/year and 21,000&euro; for developers and between 18.000 and 26.000&euro; for junior data analysts. In some cases where there is technical career or previous experience relevant to the company, salary can be higher. You do not have to give a specific amount, but comment that you expect at least a minimum or more, depending on your qualifications.</p><p><strong>Do you have any other question for us? </strong><br /></p><p>This is a perfect time to show your motivation regarding the position. We recommend that you do not leave it unanswered with an &quot;everything is clear&quot;. You can take the opportunity to show again your interest in their project by asking them any curiosity you have in mind about the company or the position.</p><p>What can you ask regarding the company? The culture of the company, their plans for expansion, if they have a presence in any other country or which is their main competitor&hellip;</p><p>What can you ask regarding the position? Your situation inside the company (who are you dependent on), the dynamic (in team or autonomous), the possibilities of promotion, the trainings&hellip;</p><p>You can also ask about the hiring process (when they will let you know if you passed to the next phase, which is the next steps if you can keep in contact via email to know how the process is advancing...)</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"8bfa93d9-fbc0-4d49-8475-4233913b037c\"><ac:parameter ac:name=\"title\">13. What NOT To Say or Do</ac:parameter><ac:rich-text-body><p><strong>1. A candidate who refuses to admit to any failures</strong></p><p><strong>2. When a candidate says they want a new job because they are bored</strong></p><p><a href=\"https://www.linkedin.com/profile/view?id=AAkAAAB1rxUBmY5oeRkClY-bML_Bli4VluICGsk&amp;authType=NAME_SEARCH&amp;authToken=85EZ&amp;locale=en_US&amp;trk=tyah&amp;trkInfo=clickedVertical%3Amynetwork%2CclickedEntityId%3A7712533%2CauthType%3ANAME_SEARCH%2Cidx%3A1-3-3%2CtarId%3A1442512822046%2Ctas%3Asarah%20smith\">Smith</a>, the vice president of HR and user operations at Quora, always asks candidates why they are interested in the offered role. If they say they want it because they are &ldquo;bored&rdquo; at their current company, she sees it as a general lack of intellectual curiosity by the applicant.</p><p>I've worked in some very mundane jobs earlier in my career and have never been &lsquo;bored&rsquo;, there is always something to learn.&rdquo;</p><p><strong>3. Someone who is late and blames the commute</strong></p><p><strong>4. People who ask questions just for the sake of asking questions</strong></p><p><strong>5. Someone who applies to every job at your company</strong></p><p>Full-time professionals should have enough focus and self-awareness to apply for only the job they are most qualified for.</p><p><strong>6. Not answer what is being asked</strong></p></ac:rich-text-body></ac:structured-macro>",
    "conflPageId": "298123326",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Plan of Attack T4",
    "content": "<p><a href=\"https://gbstool.learningbydoingtools.com/mc/poa?productID=3724&amp;taskID=3986#introduction\">INTRODUCTION</a></p><p>The recommended structure for your pitch is:</p><ol><li><p>Presentation: Who am I, what do I do?</p></li><li><p>Competitive advantages and strengths</p></li><li><p>What are you passionate about in regards to the project?</p></li><li><p>What do you want them to remember about you?</p></li></ol><p>Collect your answers from the questions in order to complete your pitch. Check it and try to make the result a smooth and meaningful pitch.</p><p /><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"865f8986-b085-49a9-8dc3-5cc8fd5a2bac\"><ac:parameter ac:name=\"title\">1. Get Inspired</ac:parameter><ac:rich-text-body><ul><li><p>Watch the following videos to know the basis of this technique: <a href=\"https://vimeo.com/118741104\">https://vimeo.com/118741104</a> (in Spanish)</p></li><li><p><a href=\"https://www.youtube.com/watch?v=GqsWKaR9Q6M\">https://www.youtube.com/watch?v=GqsWKaR9Q6M</a> (in English)</p></li><li><p>Look at <a href=\"https://drive.google.com/file/d/0B5ZzfeqDu4sWLVBRODItYXVFNUU/view\">this</a> example of alumni to inspire you.</p></li></ul><p><br /></p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"195c5948-4f97-408e-8833-ce65c4639c28\"><ac:parameter ac:name=\"title\">2. Presentation: Who I am, What I do...</ac:parameter><ac:rich-text-body><ul><li><p>Watch this video: <a href=\"https://vimeo.com/118741107\">What we have to include in a pitch</a> (Spanish)</p></li><li><p>Think of at least 5 different ways to introduce yourself and choose the best one.</p></li><li><p>Make a list of the things you want them to know about you and remember to include all the important points.</p></li><li><p>Classify your professional career in two or three statements, giving them each a title. This way you can briefly explain your history.</p></li></ul></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"b2dddd5e-cfb8-4cf3-9567-ca5fd931717d\"><ac:parameter ac:name=\"title\">3. Think About What Your Audience Needs to Hear</ac:parameter><ac:rich-text-body><p>Think about and answer the following questions about your audience (Recruiter, CTO...):</p><ul><li><p>What do they want to hear?</p></li><li><p>What do they want to feel?</p></li><li><p>What interests them?</p></li><li><p>What are your strengths and competitive advantages?</p></li><li><p>What are the benefits that the company obtains by hiring you?</p></li></ul><p>Some suggestions: Most Recruiters are looking for the following:</p><ul><li><p>passion</p></li><li><p>commitment</p></li><li><p>trustworthiness and honesty</p></li><li><p>prior experience</p></li><li><p>that you'll be a good fit for the team</p></li><li><p>listening skills</p></li><li><p>ability to learn</p></li></ul><p /><p>By the end of the pitch, they should be able to see how they would benefit by hiring you. To show them this, remember the following important points:<br /><br /><strong>Demonstrate self-confidence:</strong> Talking about your qualities such as honesty, commitment, experience, and enthusiasm. In addition, show your achievements from your previous experiences.<br /><br /><strong>Highlight your competitive advantages in comparison to the rest:</strong> Think about the advantages compared to the market competition, such as recent university graduates. Highlight how many hours you've invested, the projects you've worked on, the programming languages you use, the Learn By Doing methodology, and your spoken languages - English is a great plus for employers. <br /><br /><strong>Be convincing. Why YOU?:</strong> Mention your strengths and present them credibly.</p><p><br />At the time of writing your pitch, you must take into account the words you decide to use.<br /><br /></p><p>Avoid using words that convey strange meanings such as:</p><ul><li><p>treatment</p></li><li><p>sign</p></li><li><p>tried</p></li><li><p>difficult</p></li><li><p>failure</p></li><li><p>cost</p></li><li><p>worry</p></li><li><p>decision</p></li><li><p>responsibility</p></li><li><p>difficulty</p></li></ul><p>Words that create a good atmosphere, attract attention and are useable:</p><ul><li><p>beneficial</p></li><li><p>passionate</p></li><li><p>current</p></li><li><p>interesting</p></li><li><p>value</p></li></ul><ul><li><p>opportunity</p></li><li><p>comfortable</p></li></ul><ul><li><p>faithful</p></li></ul><ul><li><p>happy</p></li><li><p>pleasure</p></li></ul><ul><li><p>insurance</p></li></ul></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"0b92e46c-e398-4f1a-ad7c-040b41037a8e\"><ac:parameter ac:name=\"title\">4. What Do You Love About the Project?</ac:parameter><ac:rich-text-body><ul><li><p>Why do you want to work with them and not another company? Choose one that you already know and create an example pitch.</p></li><li><p>What has motivated you to apply?</p></li><li><p>Why do you think you'd be a good fit for this company?</p></li></ul><p>This is a very important part: Companies love to feel special and receive real interest in their project. They want to hire people who are also passionate about the project.</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"2064751c-ae3f-4161-baea-e2223e030054\"><ac:parameter ac:name=\"title\">5. What Do You Want Them To Remember About You?</ac:parameter><ac:rich-text-body><p>Find an emotional / impactful final phrase that you want them to remember about you.</p></ac:rich-text-body></ac:structured-macro>",
    "conflPageId": "298156069",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Task 1: Defining My Professional Profile",
    "content": "<ac:image ac:align=\"center\" ac:layout=\"center\" ac:src=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\"><ri:url ri:value=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\" /></ac:image><p><strong>FROM:</strong> Jane Phillips <br /><strong>Subject:</strong> Boost your career!</p><p>Hello!</p><p>My name is Jane Phillips, I am a Job Consultant who specialises in IT profiles. I like the look of your profile and believe you have a promising career ahead of you. I have a list of candidates for the IT sector that I would like to add you to so that you can be well placed in the job market. In order to begin creating your professional profile for this competitive market, I am going to first ask you for a few things.</p><p>In the attached document, you will see the steps you have to follow in order to complete this task, as well as some useful pieces of advice along the way. The Career Advisors from your school will help you with that.</p><p>Remember that the more effort you put in, the greater the possibility that you'll get your dream job!</p><p>Please send this to me by the end of the day!</p><p>Regards,</p><p>Jane</p><p><br /></p><p class=\"media-group\"><ac:structured-macro ac:name=\"view-file\" ac:schema-version=\"1\" ac:macro-id=\"214d25dd-7207-44a1-a9c3-2940d7587287\"><ac:parameter ac:name=\"name\"><ri:attachment ri:filename=\"My Professional Profile.docx\" ri:version-at-save=\"1\" /></ac:parameter></ac:structured-macro></p><p />",
    "conflPageId": "298188801",
    "conflChildrenId": [
      "298483733",
      "298254337"
    ]
  },
  {
    "title": "Creating an Optimized CV",
    "content": "<ac:image ac:align=\"center\" ac:layout=\"center\" ac:src=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\"><ri:url ri:value=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\" /></ac:image><p><strong>FROM:</strong> Jane Phillips <br /><strong>Subject:</strong> Create a new CV</p><p /><p>Good morning,</p><p>You're ready to create your new Curriculum Vitae (CV) and include all of your strengths that will help you to achieve your goal. Your resume is a way of marketing yourself to potential employers quickly and effectively.</p><p>I want you to work on a very specific resume for the IT sector based on your skills. Remember that a good CV is the first step to getting an interview and a position in a credible company, so investing your time and energy in your CV now will have priceless results.</p><p>I have created a guide to help you create a CV that will make you stand out from the others based on my professional experience. Just follow the steps in the 'Plan of Attack' and the tips I suggest in 'Resources' to get started. The Career Advisors will help you have the final version of the CV ready for today!</p><p>Best regards,</p><p>Jane</p><p><br /></p>",
    "conflPageId": "298254337",
    "conflChildrenId": [
      "298319895",
      "300351492",
      "298418191"
    ]
  },
  {
    "title": "Plan of Attack T6",
    "content": "<p><a href=\"https://gbstool.learningbydoingtools.com/mc/poa?productID=3724&amp;taskID=3982#introduction\">INTRODUCTION</a></p><h2><strong>Your Task</strong></h2><p>Blackwell Electronics' Head of Recruitment, Rachel Mildred, has asked you to take a technical test in order to test your data analytics skills. It is very typical for a Recruiter to send you a problem and expect to get a reasonable solution from you in a few days. Remember that communication is as important as the analysis itself so you will be asked to:</p><ul><li><p>Explore the problem and perform an analysis.</p></li><li><p>Submit your analysis to kaggle so that you can measure the quality of your analysis.</p></li><li><p>Present your findings and insights in a brief report to the Recruiter.</p></li></ul><p /><p>The technical test requires you to present one deliverable:</p><p><strong>Technical test number #. </strong>A zip file that includes a two-page report summarising your findings and conclusions.</p><p /><p>Now it's time to choose one of the technical tests given to you.</p><h2>The Titanic disaster</h2><p>The sinking of the RMS Titanic is one of the most infamous shipwrecks in history. On April 15, 1912, during her maiden voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew. This sensational tragedy shocked the international community and led to better safety regulations for ships.</p><p>One of the reasons that the shipwreck led to such loss of life was that there were not enough lifeboats for the passengers and crew. Although there was some element of luck involved in surviving the sinking, some groups of people were more likely to survive than others, such as women, children, and the upper-class.</p><p>In this challenge, we ask you to complete the analysis of what sorts of people were likely to survive. In particular, we ask you to apply the tools of machine learning to predict which passengers survived the tragedy.</p><p>In this case, we will ask you to define which are the most important variables in the case of survival or not of the people on board the ship and to submit the accuracy of your prediction as well as to send your predictions of the competition to kaggle.</p><p>Follow this <a href=\"https://www.kaggle.com/c/titanic\">link</a> to start with your technical test.</p>",
    "conflPageId": "298287143",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Task 2: Using Linkedin Like a Pro",
    "content": "<hr /><ac:image ac:align=\"center\" ac:layout=\"center\" ac:src=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\"><ri:url ri:value=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\" /></ac:image><p><strong>FROM:</strong> Jane Phillips <br /><strong>Subject:</strong> Your Linkedin Profile</p><p>Hello again!</p><p>Our Recruiters are demanding more and more quality candidates like yourself. But apart from having a look at your CV, they are also searching for your profile on LinkedIn! If you don't have one already, it is very important that you create a profile and keep it up-to-date!</p><p>LinkedIn is a very useful tool to connect you to companies, find interesting job offers, and create relevant connections. It is heavily used by Recruiters when looking for specific profiles so it will increase your exposure to these companies. Having a profile on LinkedIn will also show more professionalism from your side and make your profile more competitive. Prepare and use your LinkedIn profile to get more job opportunities easily!</p><p>P.s: Have you started applying for any open job listings?</p><p>Regards,</p><p>Jane</p><p /><p /><p><br /></p>",
    "conflPageId": "298319873",
    "conflChildrenId": [
      "298319904",
      "298516501",
      "300613635"
    ]
  },
  {
    "title": "Plan of Attack 1",
    "content": "<p><a href=\"https://gbstool.learningbydoingtools.com/mc/poa?productID=3724&amp;taskID=3980#introduction\">INTRODUCTION</a></p><ol><li><p>Review the resources and examples of Ubiqum graduates for inspiration.</p></li><li><p>Choose a CV template.</p></li><li><p>Think about the different sections of your CV.</p></li><li><p>Complete each section, taking into consideration the tips and the examples given.</p></li><li><p>Share your CV with colleagues and ask them if your CV is easy to read, clear and results orientated.</p></li><li><p>Finally, go over your CV as if you were a Recruiter who receives hundreds of applications. Try to make changes that you feel make your CV stand out from the crowd.</p></li></ol><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"c2eb0780-cc33-4792-ba1e-4477d2df915b\"><ac:parameter ac:name=\"title\">1. Get Inspired</ac:parameter><ac:rich-text-body><p>To create an idea of what kind of CV we are asking you to create, find some <a href=\"https://drive.google.com/open?id=0B6HP-xHxatxNQkRBLUJDdkxndDg\">examples of CVs</a> from Ubiqum graduates. A quick LinkedIn Search for Ubiqum will also bring up the profiles of some of our former graduates where you should be able to find descriptions about their projects during the course. Feel free to copy paste those descriptions.</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"1b6e9828-2e03-4bcc-aabc-aad429e1c7d9\"><ac:parameter ac:name=\"title\">2. Choose a Template</ac:parameter><ac:rich-text-body><p>First impressions count - the format and presentation of your CV is what a recruiter will instantly consider. To assist with the design, on the internet there are thousands of pre-prepared CV templates for you to use.</p><p>Based on recruiter feedback and student outcomes we recommend the following services:</p><ol><li><p>Have a look at this template <a href=\"http://plantillas-curriculum.com/\">website</a> where you can find all kind of professional CVs and download them by free.</p></li><li><p><a href=\"http://craft-cv.com/es\">Craft-cv</a></p></li></ol><p>You can use the free version, but Ubiqum students get a discount on the Premium package. With premium, you get 90 days access to create and download unlimited versions.</p><p /><p><strong>TIP:</strong></p><p><strong>Discount Code: ubiqum</strong></p><p /><p><strong>Prices</strong><em> (all are one off payments)</em>:</p><p>Starter 2&euro;</p><p>Premium 3&euro;</p><p>Duo Elite 6&euro;</p><p /><p>3.<a href=\"https://enhancv.com/\">Enhance-cv</a></p><p>This is a great alternative and comes with some added features including sharing with colleagues and auto-correct features. Again there are free and paid versions. You can download a word version <a href=\"https://drive.google.com/file/d/0B6HP-xHxatxNS1I4cUFFbWFENHBHLXE2WDlyaC1xNnB5Qnhv/view\">here</a> created by one of our students.</p><p /><p>4. <a href=\"https://www.topcv.com/\">TopCV.com</a></p><p>Once you are done building your CV and you adapted it for a certain position, you can get your version checked here for free and get a Data related feedback aswell as job invitations.</p><p /><p>5.<a href=\"https://resume.io/create-resume\"> Resume.io</a></p><p>Use professional field-tested resume templates that follow the exact &lsquo;resume rules&rsquo; employers look for. Easy to use &amp; done within minutes - we believe you can try this for free!</p><p /><p>6. <a href=\"https://smashresume.com/downloads/simple-word-cv/\">Smash Resume</a></p><p /><p>7. <a href=\"https://www.resume-now.com/build-resume/choose-template\">Resume now</a></p><p /><p>8. <a href=\"https://resumegenius.com/resume-samples/web-developer-resume-example\">Resume Genius</a></p><p /><p><a href=\"https://www.canva.com/create/resumes/\">9. Canva </a></p><p>Free Resume Builder </p><p /><p>10.<a href=\"https://flowcv.io\"> Flow CV</a></p><p>Free Resume Builder </p><p>- Extremely flexible (makes templates obsolete)<br />- All functionality works without a paywall<br />- Intuitive design<br />- Live preview<br />- Easy versioning<br />- Data privacy<br />- Beautiful resumes</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"0fc8628c-cab9-4722-882c-364664666339\"><ac:parameter ac:name=\"title\">3. Personal Information</ac:parameter><ac:rich-text-body><p>Make sure you include:</p><ul><li><p>Complete Name</p></li><li><p>Job Title</p></li><li><p>Contact (email and phone)</p></li><li><p>Github or portfolio</p></li><li><p>Linkedin (optional)</p></li><li><p>City</p></li><li><p>Extract/About your profile</p></li><li><p>Recent and Professional photo</p></li></ul><p><br /></p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"201\" ac:original-width=\"597\"><ri:attachment ri:filename=\"cabecera.png\" ri:version-at-save=\"1\" /></ac:image><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"274\" ac:original-width=\"599\"><ri:attachment ri:filename=\"neus.png\" ri:version-at-save=\"1\" /></ac:image><p>Include a title that best suits your current role. At Ubiqum it makes sense that you would mention that your studies with us, the projects completed and place this as your desired future <strong>job title</strong>.</p><p /><p><strong>***TIP:***</strong></p><p>Write a extract about your profile including strengths, what can you offer and what are you looking for. </p><p /><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"126\" ac:original-width=\"400\"><ri:attachment ri:filename=\"pasted image 0 (5).png\" ri:version-at-save=\"1\" /></ac:image><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"103\" ac:original-width=\"212\" ac:width=\"204\"><ri:attachment ri:filename=\"Capturabr.png\" ri:version-at-save=\"1\" /></ac:image><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"182\" ac:original-width=\"519\"><ri:attachment ri:filename=\"pasted image 0 (4).png\" ri:version-at-save=\"1\" /></ac:image><p /></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"9cf9e3c7-5865-4bb5-a0ff-bcac9ed4234d\"><ac:parameter ac:name=\"title\">4. Experience and Education</ac:parameter><ac:rich-text-body><p>When explaining your experience and education remember always to put emphasis on your <strong>achievements</strong> as seen in Session 2. This will add value to your profile. Try also to add numbers in order to make it more representative.</p><p>If you have unrelated work experience, but have some personal successes which demonstrate certain skills, be sure to mention them. This could include: technical skills, interpersonal skills, communication ability and management experience. Don't focus on the functions you did in your previous jobs, because maybe they are not related and relevant for the position you are applying.</p><p><br /></p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"243\" ac:original-width=\"275\"><ri:attachment ri:filename=\"exp1.png\" ri:version-at-save=\"1\" /></ac:image><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"253\" ac:original-width=\"278\" ac:width=\"340\"><ri:attachment ri:filename=\"exp2.png\" ri:version-at-save=\"1\" /></ac:image><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"424\" ac:original-width=\"391\"><ri:attachment ri:filename=\"phd.png\" ri:version-at-save=\"1\" /></ac:image><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"317\" ac:original-width=\"290\"><ri:attachment ri:filename=\"est.png\" ri:version-at-save=\"1\" /></ac:image><p /><p><em><strong>If you have several unrelated and not really relevant work experiences you can agroup them by sector or skills:</strong></em></p><p><br /></p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"239\" ac:original-width=\"346\" ac:width=\"442\"><ri:attachment ri:filename=\"Captura.png\" ri:version-at-save=\"1\" /></ac:image><p /></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"68aab4e1-af9d-406f-929f-aae1f4f876e0\"><ac:parameter ac:name=\"title\">5. Where Should I Put My Ubiqum Experience and Projects?</ac:parameter><ac:rich-text-body><p>It doesn&rsquo;t mind, as long as it is the first thing people see when looking at your CV. You can put it with your work experience or with your education experience. We recommend you to place it in the weakest area so you can add value to it. These are the advantages of the method learning by doing. Don&rsquo;t forget to mention the projects you have worked on.</p><p>You can also do a quick LinkedIn Search for Ubiqum, where you will see how our graduates reflect their Ubiqum experience in their profiles. This will help you get ideas on how to describe your projects.</p><p /><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"371\" ac:original-width=\"388\"><ri:attachment ri:filename=\"ub.png\" ri:version-at-save=\"1\" /></ac:image><p>Also, you can add it to both sections like in this example. Just focus on different aspects and if they ask you in the interview explain that it can be considered both because it is a course but you work in real projects, so it is also a work experience. In the section experience, you can add the projects you worked on during the course or create another section about that. Make sure you include a very short description of the project and the technologies you have used.</p><p>The structure is:</p><p><em><strong>Name of the project</strong></em></p><p><em>Short description</em></p><p><em>Technologies Used</em></p><p /><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"200\" ac:original-width=\"287\"><ri:attachment ri:filename=\"ub2.png\" ri:version-at-save=\"1\" /></ac:image><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"166\" ac:original-width=\"281\"><ri:attachment ri:filename=\"un3.png\" ri:version-at-save=\"1\" /></ac:image><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"341\" ac:original-width=\"287\"><ri:attachment ri:filename=\"proje.png\" ri:version-at-save=\"1\" /></ac:image><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"369\" ac:original-width=\"253\"><ri:attachment ri:filename=\"projee.png\" ri:version-at-save=\"1\" /></ac:image><p /></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"661877e5-d478-41cc-8fec-9aa5a075b1b3\"><ac:parameter ac:name=\"title\">6. Technical Skills and Soft Skills</ac:parameter><ac:rich-text-body><p>It is very important (especially in your sector) to include your <strong>Technical Abilities</strong> in a legible place. Put it always in the first page.</p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"179\" ac:original-width=\"343\"><ri:attachment ri:filename=\"skills.png\" ri:version-at-save=\"1\" /></ac:image><p>You can also include a section about your Soft Skills and achievements.</p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"363\" ac:original-width=\"237\"><ri:attachment ri:filename=\"ss.png\" ri:version-at-save=\"1\" /></ac:image><p>Do not forget to make a section about the languages you speak and if you want you can also include the level.</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"263abe09-c414-4de9-bd79-0738f57e54cb\"><ac:parameter ac:name=\"title\">7. Additional Sections</ac:parameter><ac:rich-text-body><p>You can include other sections like Hobbys, References, achievements and other information, courses and seminars you have attended, non profit causes you have participated...</p><p>Make sure it adds value to your profile and do it only if you have available space. Do not create a new page only to include this additional info.</p><p><br /></p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"269\" ac:original-width=\"289\"><ri:attachment ri:filename=\"ACHIV.png\" ri:version-at-save=\"1\" /></ac:image><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"178\" ac:original-width=\"572\"><ri:attachment ri:filename=\"OTHERS.png\" ri:version-at-save=\"1\" /></ac:image><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"233\" ac:original-width=\"256\"><ri:attachment ri:filename=\"non.png\" ri:version-at-save=\"1\" /></ac:image><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"119\" ac:original-width=\"417\"><ri:attachment ri:filename=\"cc.png\" ri:version-at-save=\"1\" /></ac:image><p /></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"70282469-8d41-4304-b729-e1fad3b0fae6\"><ac:parameter ac:name=\"title\">8. Put Yourself In the Recruiters' Shoes</ac:parameter><ac:rich-text-body><p><strong>What impression does your colleague's CV gives you?</strong></p><p>Take one of your colleague's updated CV and putting yourself in the recruiter shoes evaluate his resume taking into account the following <a href=\"https://docs.google.com/document/d/1cfaQlu6k7z2OLRT4_2wfbCwWcS6awGCwY-owF6jOSN0/edit\">criteria. </a>He will have to do the same with yours.</p><p>Give constructive feedback, and take your colleague's in order to do the proper changes.</p><p>Consult it with the advisors.</p><p><br /></p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"89554ab3-8d3b-49e2-80c5-32f27bb83e08\"><ac:parameter ac:name=\"title\">9. Find a Job in Barcelona</ac:parameter><ac:rich-text-body><p>Once you have the validation of your final CV, you can start applying for job offers.</p><p>How to do it?</p><p>Use generic job boards/ social networks such as <a href=\"https://www.linkedin.com/feed/\">Linkedin </a>and <a href=\"https://www.infojobs.net/\">InfoJobs</a></p><p>You can also use <a href=\"https://docs.google.com/document/d/15L3HggL_nBs5jd6UXR7YZAf2NBogv4pPEEJLEuBrwbQ/edit\">tech websites</a> that have exclusive offers related to the sector.</p><p>Use <a href=\"https://www.glassdoor.com/index.htm\">Glassdoor</a> to search millions of jobs and get the inside scoop on companies with employee reviews, personalized salary tools, and more.</p><p /></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"073174a9-c1e1-4680-b2bc-39f2ede40343\"><ac:parameter ac:name=\"title\">10. Find a Job in Germany</ac:parameter><ac:rich-text-body><p>Once you have the validation of your final CV, you can start applying for job offers.</p><p>How to do it?</p><p><a href=\"https://trabajarporelmundo.org/portale-de-trabajo-dgenerales-de-alemania/\">Here</a> you can find general and specialized job portals, job portals for Spanish people and another web of interest like the best companies to work for. <em>Translate the article if you do not understand Spanish (right click on the page and Translate to your language)</em></p><p><a href=\"https://www.make-it-in-germany.com/en/for-qualified-professionals/working/guide/looking-for-a-job\">Here</a> you can find everything you need to find a job in Germany if you are a nonresident (Work permission, job portal, living in Germany....)<br /><br />Some usefull platforms are: <a href=\"https://www.stepstone.de/en/\">Stepstone</a>, <a href=\"https://www.talent.io/\">talent.io</a>, <a href=\"https://jobboerse.arbeitsagentur.de/vamJB/startseite.html?aa=1&amp;m=1&amp;kgr=as&amp;vorschlagsfunktionaktiv=true\">Jobb&ouml;rse,</a> <a href=\"https://www.monster.de/en/?intcid=swoop_TopNav_English\">Monster</a> or <a href=\"http://berlinstartupjobs.com/\">Berlin Startup Jobs</a></p><p>Use <a href=\"https://www.glassdoor.com/index.htm\">Glassdoor</a> to search millions of jobs and get the inside scoop on companies with employee reviews, personalized salary tools, and more.</p><p>We recommend you to use <a href=\"https://www.honeypot.io/pages/how_it_works\">Honeypot</a>, where companies apply to developers and not the other way. They also help you with the whole process and do code review.</p><p>We collaborate with:</p><p><a href=\"https://www.talent.io/\">Talent.io</a></p><p><a href=\"https://gb.wantedly.com/\">Wantedly</a></p><p><a href=\"https://4scotty.com/en?setLanguage=true\">4scotty</a></p><p>For internships please register with this link: <a href=\"https://www.campusjaeger.de/?rId=f4OLhj4w5zpi\">https://www.campusjaeger.de/?rId=f4OLhj4w5zpi</a></p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"9a6fc0a7-40c3-4ea3-8482-21f67e81773b\"><ac:parameter ac:name=\"title\">11. Find a Job in The Netherlands</ac:parameter><ac:rich-text-body><p>Your CV is a Marketing document built to sell your profile. If something doesn't sell you, do not include it.</p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"679\" ac:original-width=\"914\"><ri:attachment ri:filename=\"AMS job platforms.png\" ri:version-at-save=\"1\" /></ac:image><p /><p><strong>TIP:</strong></p><p>The one single focused objective of your resume is to <strong>get you a job interview</strong>. Nothing else.</p><p /><p>Now that your CV is fully optimised, you can start A/B test it on the job market.</p><p>Please click <a href=\"https://www.expatica.com/nl/employment/finding-a-job/work-in-the-netherlands-finding-a-job-102331/\">here</a> for the ultimate job guide to working in the Netherlands, including information on the Dutch job market, vacancies, work permits, job websites and other places to find jobs in the Netherlands.</p><p>Another <a href=\"https://undutchables.nl/working-and-living/working-in-the-netherlands\">resource</a> for everything you need to know about getting employed in the Netherlands. To work in the Netherlands, you will need a Citizen Service Number; BSN in Dutch. Please click <a href=\"https://www.government.nl/topics/personal-data/citizen-service-number-bsn\">here</a> for more info.</p><p /><p>We collaborate with <a href=\"https://www.honeypot.io/\">Honeypot</a> and recommend you to sign up on their platform, where companies apply to you.</p><p><code>*there might be a coding challenge involved, they will discuss this with you*</code></p><p><a href=\"https://www.talent.io/\">Talent.io</a> is another platform you can sign up for - they pride themselves on having a personal touch with each and every candidate.</p></ac:rich-text-body></ac:structured-macro>",
    "conflPageId": "298319895",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Plan of Attack 2",
    "content": "<p>It is time to start creating your <a href=\"https://www.linkedin.com/\">LinkedIn</a> profile.</p><p>Follow the following <a href=\"https://docs.google.com/presentation/d/1w-W9Jt1XpOetJlTYB7eEw4UiUcrU4D8AGH0aeroHoKY/edit#slide=id.p3\">steps</a> to make your profile as competitive and professional as possible, increasing your job opportunities and grabbing the Recruiter's attention.</p><p /><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"5bf86a09-210c-471d-962b-a6c6c84c510d\"><ac:parameter ac:name=\"title\">1. Getting Started</ac:parameter><ac:rich-text-body><p>Create a Linkedin account if you do not already have one.</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"a53686ef-bffa-41f6-8f3f-e680eb140e69\"><ac:parameter ac:name=\"title\">2. Choose the Language</ac:parameter><ac:rich-text-body><p>Decide if you will create your profile in Spanish, German, Portuguese, Dutch, French etc and English or both. You can find more information on this topic h<a href=\"http://www.exprimiendolinkedin.com/2014/12/crear-perfil-linkedin-diferentes-idiomas/\">ere</a>.</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"f0a136df-cde3-496e-872b-cf7244f1bf88\"><ac:parameter ac:name=\"title\">3. Complete Your Profile</ac:parameter><ac:rich-text-body><p>Transfer your CV information to your Linkedin profile and complete it with the most relevant information in each of the Linkedin sections (remember the importance of the <strong>introduction </strong>and actual <strong>career situation</strong>). In resources you will find tips to do it in the most efficient way. You can include skills and achievements that you could not include in your CV due to lack of space, and also upload some projects. This allows you to go into more detail than you could in your CV.</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"d26879e2-57ac-4f00-aefc-28fdbd2eb204\"><ac:parameter ac:name=\"title\">4. Recommendations</ac:parameter><ac:rich-text-body><p><a href=\"https://www.linkedin.com/help/linkedin/answer/608/solicita-una-recomendacion?lang=en\">Ask for recommendations</a> from your peers, mentors and former co-workers/colleagues. It helps to offer your sincere recommendation for them.<br /><br />This is really an option that will make you stand out towards other candidates. <br /><br />Creating video content about you and uploading it on your profile is almost a garantuee for interview invites.</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"271772e9-d9f5-4206-80d7-50f8d7b016ac\"><ac:parameter ac:name=\"title\">5. Skills Validation</ac:parameter><ac:rich-text-body><p>Validate the skills of your peers and ask them to validate yours too. Put the 3 main skills companies are looking for in the top.</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"f9bacb92-3873-4fd7-b3b7-b9ac951b709f\"><ac:parameter ac:name=\"title\">6. Networking</ac:parameter><ac:rich-text-body><p>Send requests to your contacts suggested by Linkedin and connect with the maximum number of people who can help you in your job search (i.e your colleagues, Ubiqum team, headhunters). You can contact recruiters or other professionals in your industry by following them or even by sending them a private message with your interest. They spend all day looking for talent like you! Do not hesitate to do it with the companies you want to work in. Also, apply to job offers in the section of <a href=\"https://www.linkedin.com/jobs/\">Jobs</a>.</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"5701ce6d-f8d8-4638-8207-6c530e8c1e19\"><ac:parameter ac:name=\"title\">7. Be Part of the Industry</ac:parameter><ac:rich-text-body><p>Share industry relevant content in your profile regularly to get the attention of the recruiters who review Linkedin daily and positioned yourself as an expert in the field. Try to share:</p><ol><li><p>a screenshot of the project you are working on</p></li><li><p>a presentation of a project you are proud of</p></li><li><p>an update that you are about to graduate as a Developer/Data Analyst</p></li><li><p>Articles/Resources that interested you and are related with the industry you are interested in</p></li></ol></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"2a5b2424-ac5a-4dee-962f-b878d2491c1b\"><ac:parameter ac:name=\"title\">8. Actively Seeking</ac:parameter><ac:rich-text-body><p>Make sure you allow the <a href=\"https://blog.linkedin.com/2016/10/06/now-you-can-privately-signal-to-recruiters-youre-open-to-new-job\">option</a> to let recruiters know you are looking for new job opportunities.</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"2022e085-ba1d-44e4-95ec-b14444d123c0\"><ac:parameter ac:name=\"title\">9. Improve your Network</ac:parameter><ac:rich-text-body><p>One of the biggest benefits of LinkedIn is the huge network. The side is growing by the day and so should you. <br />Make sure to follow interesting persons and companies. There you should be actively commenting, sharing and participating.</p><p>Also don't hesitate to get connected to the community which you try to enter. With the string search you are able to find usefull people, companies or topics. <br /><br />For example you could use: Data AND Barcelona AND hiring</p><p>or Java AND Job AND junior AND Berlin <br /><br />One first step for you to make more contacts is the Ubiqum Alumni, students and staff group:<br /><a href=\"https://www.linkedin.com/groups/12212214/\">https://www.linkedin.com/groups/12212214/</a></p></ac:rich-text-body></ac:structured-macro><p />",
    "conflPageId": "298319904",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Practice a Java Technical Test with your Mentor",
    "content": "<ac:image ac:align=\"center\" ac:layout=\"center\" ac:src=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\"><ri:url ri:value=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\" /></ac:image><p><strong>FROM:</strong> Jane Phillips <br /><strong>Subject:</strong> Technical test</p><p>Hello, it's Jane again.</p><p>I am very satisfied with the work you did for the client I introduced your profile to. I am therefore happy to inform you that they would like for you to continue to the next phase of the process: the technical test.<br /><br />All of our candidates must go through the same test. This helps us verify that we are not making a mistake in hiring you and that you really have the skills and knowledge to join the client's company.<br /><br />I'm not in charge of supervising and receiving the results of these tests, as we have a department dedicated to this, but I'm interested in you joining the team.<br /><br />You can choose the test that you prefer depending on if you are more interested in being considered for a Front-end or Back-end Developer position. Normally, the exercise is designed to be done in approximately 4 hours, but only if you do it face-to-face. As you're doing it online, we will give you all day, so tomorrow you will have to send the results to me via email.<br /><br />Without further delay, here it goes. Good luck.</p>",
    "conflPageId": "298418180",
    "conflChildrenId": [
      "298451021"
    ]
  },
  {
    "title": "Resources 1",
    "content": "<p>Above all, try to remember what a CV is designed to do.</p><p>If you don&rsquo;t put some effort into your CV it&rsquo;s quite possible that an employer may overlook your hidden talents. Below are some top tips on how to get noticed:</p><p /><p>1.<strong> A well-structured CV will help the Recruiter</strong></p><p>A well-structured CV should:</p><ul><li><p>Be easy to read</p></li><li><p>Include the most important info at the top</p></li><li><p>Use a concise summary for each area</p></li></ul><p /><p>2.<strong> Make your CV as relevant as possible</strong></p><p>A CV isn&rsquo;t just a list of everything you&rsquo;ve done! It&rsquo;s a chance sell and tailor your profile to the desired role.</p><p>As you describe your experience, make sure to include the key successes in each position. This may be a team or individual target, goal or achievement. Include numbers where possible.</p><p>The work completed in Session 2: Achievements and learnings should help you complete this.</p><p /><p>3.<strong> An attractive design should be easy to read</strong></p><p /><p>When we say make your CV original we don&rsquo;t mean make your CV a work of art. If we remember that the goal of a CV is to allow a Recruiter to quickly appraise your qualities for the job, then the design can help facilitate that.</p><p /><p>Try to think about how each section best represents your strengths for the given role and adopt the order accordingly. Try to always use a legible font and give the CV some generous spacing between lines and sections.</p><p /><p>Make sure all the info on your CV is relevant to the position you are applying for. For a Junior profile, one CV page should be enough.</p><p /><p>4.<strong> Adapt your CV to the position</strong></p><p>The goal of a CV is to allow the Recruiter to quickly appraise your qualities for the job. <strong>You must adapt your CV to your desired position</strong>. In order to achieve this, you must study the company and the job role advertised and make changes to your CV accordingly, being always fair and asking yourself which of your strengths will attract the Recruiter for this position.</p><p /><p><strong>TIP:</strong></p><p>Your CV should be in the same language as the offer you are applying for.</p><p /><p><strong>TIP:</strong></p><p>Always keep in mind what the Recruiter is looking for. Analyse the job offer thoroughly and use the same keywords they are asking for (only if it's true).</p><p /><p><strong>TIP:</strong></p><p>Do not get frustrated because you don't have all the skills they are asking for. Every company is looking for the ideal candidate but in the end, they need to adapt their demands to the reality of the market. When applying for a job, make sure that you meet 60% of their requirements.</p><p /><p><em>Source: http://blog.infoempleo.com/a/5-aspectos-revisar-saber-curriculum-da-la-talla/</em></p><h2>Optional Resources</h2><h3>Cover Letter</h3><p /><p><strong>The purpose of a cover letter</strong></p><p>A cover letter needs to:</p><ul><li><p>introduce you</p></li><li><p>mention the job (or kind of job) you're applying for (or looking for)</p></li><li><p>match your skills and experiences with the skills and experiences required by the job</p></li><li><p>encourage the reader to read your resume</p></li><li><p>finish with a call to action (for example, requesting an interview or asking to meet).</p></li></ul><p /><p><strong>How long should a cover letter be?</strong></p><p>A cover letter shouldn't be more than one page. It's only meant to be a summary of the information you put in your resume, so remember to keep things short.</p><p /><p><strong>Matching your cover letter to the job</strong></p><p>You should never use the same cover letter for different job applications. Your cover letter needs to show that you know what the job involves and what the organisation is looking for.</p><p>To do this you need to be as specific as you can about your skills and qualities and how they match the job or organisation's needs.</p><ol><li><p>Find out who to address it to</p></li><li><p>Find out more about the job</p></li><li><p>Find out more about the company</p></li></ol><p /><p><strong>What you should include in your cover letter</strong></p><p>Here's a list of things you should include in your cover letter. For examples of how to include these things, visit our <a href=\"https://www.youthcentral.vic.gov.au/jobs-and-careers/applying-for-a-job/what-is-a-cover-letter/sample-cover-letters\">Sample cover letters</a> page.</p><p /><p><u>Your name and contact details</u></p><p>Put your name and contact details at the top of your cover letter. You don't have to give your postal address, but you do need to include your email and phone number.</p><p /><p><u>Their name and contact details</u></p><p>Under your own name and contact details you should include:</p><ul><li><p>the name of the person you're writing to</p></li><li><p>their position or the name of their company</p></li></ul><p>You can also use &quot;To Whom It May Concern&quot;, but try to only use this as a last resort.</p><p /><p><u>The name of the job you're going for</u></p><p>At the start of your cover letter you need to explain which job you're applying for.</p><p>You can either do this on a line by itself (for example, &quot;Re: Application for Stock Controller position&quot;) or in the opening paragraph (for example, &quot;I am writing to apply for the recently advertised Stock Controller position.&quot;)</p><p>For examples of how to do this, visit our <a href=\"https://www.youthcentral.vic.gov.au/jobs-and-careers/applying-for-a-job/what-is-a-cover-letter/sample-cover-letters\">Sample cover letters page</a>.</p><p /><p><u>A list of your relevant skills</u></p><p>Your letter should include a brief summary that matches your skills and experiences to the job description.</p><p>If you're answering a job ad, either the ad or the position description may provide a list of skills and experiences that are essential for doing the job. It may also provide a list of &quot;desirable&quot; skills and experience. Your cover letter needs to respond to all of the items on the &quot;essential&quot; list and as many items as possible on the &quot;desirable&quot; list in as short a way as possible.</p><p>Remember that if you say you have a skill or experience, you need to show how you've used it or how you got it (for example, if you say you've got child-minding skills, mention some jobs where you've used them).</p><p /><p><u>A summary of why you're right for the job</u></p><p>After listing your skills and experience you should explain why these mean you're suited to the job (for example, &quot;The combination of my interest in AFL and my experience with book-keeping makes me ideally suited for this job.&quot;)</p><p /><p><u>Speak their language</u></p><p>Using the same language as people who do a particular job is a good way to convince people you're suited to the job.</p><p /><p>For example, if there's a tool or software or skill the job requires, like machining tools or cash handling, mention it in your cover letter (but make sure you mention it correctly!).</p><p /><p><u>Ask them to read your resume &amp; contact you</u></p><p>Your cover letter should finish by asking the reader to read your resume. It should also ask them to contact you about an interview.</p><p /><p>Try something simple like, &quot;I have attached a copy of my resume. I look forward to hearing from you about this job.&quot;</p><h2>Examples of Cover Letters</h2><p>Enter to this <a href=\"https://resumegenius.com/cover-letters-the-how-to-guide/information-technology-cover-letter-sample\">link</a><u><a href=\"https://resumegenius.com/cover-letters-the-how-to-guide/information-technology-cover-letter-sample\"> </a></u>and see some cover letter examples directly related to the IT field.</p><p />",
    "conflPageId": "298418191",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Task 5: Preparing Interviews That Will Get You Hired",
    "content": "<hr /><ac:image ac:align=\"center\" ac:layout=\"center\" ac:src=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\"><ri:url ri:value=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\" /></ac:image><p><strong>FROM:</strong> Jane Phillips <br /><strong>Subject:</strong> Interview</p><p>Hello!</p><p>How are you?</p><p>Today we'll have an intensive day preparing for interviews (both technical and personal questions). Also, you will work on your body language in the roleplay session we've prepared! We'll make sure to cover everything so that you're ready for the Hiring Day!</p><p>First of all, download the attached document and prepare your own answers. Consider all the previous work you have done (especially the first day) and the Plan of Attack section.</p><p>Once you have the answers prepared, you will do a roleplay session with your peers and improve according to their feedback. I have also attached the rubric you are going to use to evaluate each other.</p><p>You will also have a workshop on technical questions with mentors!</p><p>At the end of the day, professional Recruiters will come to do the final roleplaying and give you some feedback on your performance in the first interviews. So there is no time to lose!</p><p>Regards and good luck,</p><p>Jane.</p><p><br /></p><p class=\"media-group\"><ac:structured-macro ac:name=\"view-file\" ac:schema-version=\"1\" ac:macro-id=\"10932eb5-65ed-4eae-963f-f15d03d5aa15\"><ac:parameter ac:name=\"name\"><ri:attachment ri:filename=\"Interview Rubric (1).docx\" ri:version-at-save=\"1\" /></ac:parameter></ac:structured-macro><ac:structured-macro ac:name=\"view-file\" ac:schema-version=\"1\" ac:macro-id=\"8326b324-a3b4-4f57-b3f3-a65f17368bc1\"><ac:parameter ac:name=\"name\"><ri:attachment ri:filename=\"Interview questions.docx\" ri:version-at-save=\"1\" /></ac:parameter></ac:structured-macro></p><p />",
    "conflPageId": "298450953",
    "conflChildrenId": [
      "298123326",
      "298450997",
      "300580888"
    ]
  },
  {
    "title": "Resources T5",
    "content": "<hr /><p><strong>Other important aspects that matter...</strong></p><p>Preparing the previous questions in writing will help you to well perform in the real-life interview. It is a way to don&rsquo;t black out and forget representative information.</p><p>There are other factors than the questions that matter when having the real interview like:</p><ul><li><p>Punctuality</p></li><li><p>Presence and <a href=\"https://s3.amazonaws.com/gbstool/courses/949/docs/what-to-wear-to-a-startup-or-tech-job-interview-story.jpg?AWSAccessKeyId=AKIAJBIZLMJQ2O6DKIAA&amp;Expires=1565168400&amp;Signature=vFWNyMGo5rVzBVOJZ0VvxyKpQKQ%3D\">Dress code</a></p></li><li><p>Education</p></li><li><p>That you call him by his/her name</p></li><li><p>The body language: this aspect matters in a big percentage, watch the following <a href=\"https://www.youtube.com/watch?v=PCWVi5pAa30\">video</a> and take some notes</p></li><li><p>The tone of voice, articulation and polite</p></li><li><p>Better to bring your CV print</p></li></ul><p><strong>Optional resources</strong></p><p /><h2>TESTS</h2><p>Some selection processes include tests that help the recruiter to determine the professional capacity, personality and personal skills of the candidate. Even if these tests aren&rsquo;t always demandable it is advisable to prepare them in order to have more possibilities when applying to a job.</p><p>We distinguish three main types of selection tests:</p><ol><li><p><strong>Professional Tests:</strong> These tests are exercises that evaluate the knowledge and skills you have to perform a determine job position. You will see this in the next tasks, when you will have to carry out some technical tests focused on Java and Data knowledge that will be useful for your career path. Here we can also include language tests.</p></li><li><p><strong>Personality Tests: </strong>These tests are used to extract the main traits of your personality and help the recruiter to evaluate your adaptability to the job position. They are also useful for you, to distinguish your strengths and weaknesses, and work on them as seen in task 1.There are aspects that are evaluated in practically any job position and it is important you know: initiative, persuasion, empathy, social adaptability, adaptability to changes, level of responsibility and maturity, motivations and emotional stability. Be honest with your questions and answer spontaneously. Here you have one <a href=\"https://www.16personalities.com/free-personality-test\">example of a test</a> you can do on your own to practice and know you better.</p></li><li><p><strong>Psycho-technical Tests:</strong> Also called intelligence tests, they are used to evaluate your logic and skills to see how you would manage current and new tasks in the company. They evaluate things such as general intelligence, memory, perception, attention&hellip; and have a limited time. <a href=\"https://www.123test.com/iq-test/#classical-intelligence-test\">Here</a> you have one website with an example that can help you get to practice.</p></li></ol><h2>GROUP INTERVIEWS</h2><ol><li><p>Read this <a href=\"http://blog.infoempleo.com/a/consejos-entrevista-trabajo-grupo/\">article</a> to learn more about group interviews.</p></li></ol>",
    "conflPageId": "298450997",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Plan of Attack T6(2)",
    "content": "<p><a href=\"https://gbstool.learningbydoingtools.com/mc/poa?productID=3724&amp;taskID=3983#introduction\">INTRODUCTION</a></p><p>Remember how dealing with problems in the simplest way possible can be the fastest way to reach the final solution.</p><p>Always try to follow the steps indicated to face each test. Sometimes a simple distraction can cause you to make an erroneous decision at the beginning.</p><p /><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"1fe7c1bf-b4f6-4c4c-bbff-283dbbdb0ed1\"><ac:parameter ac:name=\"title\">Front-End Test</ac:parameter><ac:rich-text-body><h1>GITHUB API EXERCISE</h1><h2>Instructions:</h2><h4>The main goal of this tech test is to create a client-side web application that reproduces the screenshots below by using <a href=\"https://developer.github.com/v3/\">GitHub API</a>.</h4><p>We will only evaluate the client side code and the criteria will be based mainly on:</p><ol><li><p>Good use of <strong>pure JavaScript</strong> language without external libraries and frameworks like jQuery, React...</p></li><li><p>Clean HTML and CSS markup</p></li><li><p>Clean, maintainable &amp; easy&shy; to&shy; read</p></li><li><p>Good architectural practices</p></li></ol><h2>HOW TO START</h2><p>Option 1:</p><ol><li><p>Investigate the GitHub API calls for user and repositories (for example: test them in the browser)</p></li><li><p>Launch the web application, for example with: Python -m SimpleHTTPServer 1337</p></li><li><p>Open the browser with http://localhost:1337/ and start coding!</p></li></ol><p>Option 2:</p><ol><li><p>Investigate the GitHub API calls for user and repositories (for example: test them in the browser)</p></li><li><p>Launch the web application, for example with the &quot;lighting option&quot; in brackets.</p></li><li><p>Be sure that you are testing the URL: &quot;127.0.0.1:xxxxx&quot;</p></li></ol><h2>SCREENSHOTS</h2><h4>First Screen</h4><p>The user can search a GitHub username</p><h4>Success Screen</h4><p>If the searched username does exist: The searched user profile is displayed with all his repositories</p><p /><p>If the searched username does not exist: An error is shown</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"8763c4b3-3f3f-4c43-ad35-60b787376875\"><ac:parameter ac:name=\"title\">Back-End Test</ac:parameter><ac:rich-text-body><h1>PETS EXERCISE</h1><h2>Instructions:</h2><p>At Ubiqum we have two pets that help us improve our services day by day. The first pet is called Jukes. Jukes is a charming puppy that at the time of playing barks every 5 seconds. In contrast, when Feeder the quiet kitten plays, he meows every 1 second.<br /><br />The two pets, like animals, have the following:</p><p>Name, Age, Skin colour, Eye colour and Number of legs.</p><p>Also, the actions that they usually do during the day are:</p><p>Eat, Drink, Sleep, and Play.</p><p>Dogs, in addition to barking, have an Identity Number and the size of this is known. On the other hand, it is known if cats are allergic and there is a list of forbidden foods they cannot eat.<br /><br />Create a scenario for Jukes and Feeder:<br /><br />Play for 120 seconds, then drink water, eat [bread and ham] and finally rest for 200 seconds.</p><p><br /><br /><strong>NOTES:</strong><br /><br /></p><ul><li><p>1. Use the <strong>inheritance</strong> to solve this exercise.<br /><br /></p></li><li><p>2. The sizes of a dog are: <strong>XS, S, M, L or XL.</strong><br /><br /></p></li><li><p>3. Available Food: <strong>Cereals, Fodder, Bread, and Ham.</strong><br /><br /></p></li><li><p>4. Feeder is allergic to Ham, is grey, is 2 years old and has blue eyes.<br /><br /></p></li><li><p>5. Jukes has the identifier C3P0, is size M, has green eyes, is 3 years old and is brown.<br /><br /></p></li><li><p>6. All actions must print by console: &quot;Hi, I'm&quot; + name + &quot;and I'm&quot; + action.<br /><br /></p></li><li><p>7. You must bear in mind that you can not instantiate an Animal, only Dogs or Cats.<br /><br /></p></li><li><p>8. In case a cat should eat a prohibited food, it should say: &quot;I can not eat&quot; + food + &quot;because I am allergic&quot;.<br /><br /></p></li><li><p>9. The execution of the actions can be synchronous, they do not need to be executed in parallel.</p></li></ul></ac:rich-text-body></ac:structured-macro>",
    "conflPageId": "298451021",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Task 4: Building My Pitch",
    "content": "<hr /><ac:image ac:align=\"center\" ac:layout=\"center\" ac:src=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\"><ri:url ri:value=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\" /></ac:image><p><strong>FROM:</strong> Jane Phillips <br /><strong>Subject:</strong> Your Pitch</p><p>Hi,</p><p>You completed one of the most important steps in the job seeking process: you completed your CV! This is imperative and will help you in the process of getting hired, but don't forget that the important thing is you. Companies are looking for real, enthusiastic and positive people who are willing to add value to their projects. So now its time to prepare yourself to meet with Recruiters and potential employers in networking events, job fairs or interviews.</p><p>Knowing how to present yourself and having a clear speech and adequate non-verbal communication is a key point in making any good interview or networking opportunity a success. That's why you will now prepare your pitch of no more than 2 minutes. This will contain the most relevant information about your profile and should be presented in an interesting way. You also might have heard it called the elevator pitch. You can record yourself and use it as a video CV or share it on your Linkedin!</p><p>Follow the steps in the Plan of Attack and prepare your pitch.</p><p>Keep in touch,</p><p>Jane</p><p /><p><br /></p>",
    "conflPageId": "298483713",
    "conflChildrenId": [
      "298156069",
      "300744719"
    ]
  },
  {
    "title": "Resources T1",
    "content": "<p /><p><a href=\"https://docs.google.com/document/d/1cfaQlu6k7z2OLRT4_2wfbCwWcS6awGCwY-owF6jOSN0/edit\">CV EVALUATION </a></p><p />",
    "conflPageId": "298483733",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Resources T2",
    "content": "<p>Here you will find some useful recommendations that will help you make your profile easy to find among Recruiters and make you an attractive candidate in the industry market. Please follow the advice!</p><hr /><p><br />Recruiters use LinkedIn to seek suitable candidates for their positions by using keywords. It is important that you take a look at the <a href=\"http://www.mejorartucv.com/10-claves-para-aparecer-en-el-buscador-de-linkedin/\">10 keys to appearing in the LinkedIn search engine</a> (use Google to translate the content). Complete the steps indicated in the article to create a successful profile<br /></p><ul><li><p>Use one of the following titles to make it clear what position you are interested in: <br /></p><ul><li><p>Java Developer</p></li><li><p>Junior Java Full Stack Developer</p></li><li><p>Java FullStack</p></li><li><p>FullStack Developer</p></li><li><p>Data Analyst</p></li><li><p>Junior Data Analyst</p></li><li><p>Junior Javascript Full Stack Developer ( MERN)</p></li></ul></li></ul><p /><ul><li><p>Do not use symbols or it can be hard to find you!</p></li><li><p>In the current position section you can put that you are working at Ubiqum Code Academy and explain the projects that you have developed.</p></li><li><p>We also recommend this short LinkedIn tutorial &ldquo;<a href=\"https://www.linkedin.com/learning/j-t-o-donnell-on-making-recruiters-come-to-you/delight-a-recruiter-with-your-resume\">Making Recruiters come to you</a>&rdquo;. There are lots of interesting tutorials in <a href=\"https://www.linkedin.com/learning/me\">LinkedIn Learning</a> that can also help you improve your LinkedIn.</p></li></ul>",
    "conflPageId": "298516501",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Submit Your Work T1",
    "content": "<p>Please send your cv and LinkedIn to your allocated Career Advisor for feedback.</p><p>Ana Popov: <a href=\"mailto:ana@ubiqum.com\">ana@ubiqum.com</a> </p><p>Alinne Shedid: <a href=\"mailto:alinne@ubiqum.com\">alinne@ubiqum.com</a></p><p>Jost Lepere: <a href=\"mailto:jost@ubiqum.com\">jost@ubiqum.com</a> </p><p />",
    "conflPageId": "300351492",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Day 2 with Career Advisor",
    "content": "<p />",
    "conflPageId": "300449834",
    "conflChildrenId": [
      "300515378",
      "298483713",
      "298450953"
    ]
  },
  {
    "title": "Task 3: Strengths /Weaknesses and Market Review",
    "content": "<p>During this workshop, we will review the Market situation and each type of company.</p><p /><p class=\"media-group\"><ac:structured-macro ac:name=\"view-file\" ac:schema-version=\"1\" ac:macro-id=\"660a53bc-79b4-4eba-97ac-08c4c4609d95\"><ac:parameter ac:name=\"name\"><ri:attachment ri:filename=\"Market Situation.pdf\" ri:version-at-save=\"1\" /></ac:parameter></ac:structured-macro></p><p>We will do a search on the job you would like to apply to and search for the key technical words as well as the soft skills companies are recruiting for today.</p><p>You will see how your Tech skills obtained at Ubiqum Code Academy and your soft skills,  match what the market is looking for and how you are ready to start your job search.</p><p>More and more, we will do a Personality test to have more of an idea of the strenghts and weaknesses you have.</p><p><a href=\"https://www.outofservice.com/bigfive/\">Personality Test</a></p><p /><p>After this, we will do a role play based in strenghts and weaknesses to understand more how to present them during your job interview.</p><p /><p /><p />",
    "conflPageId": "300515378",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Submit Your Work T5",
    "content": "<p>Please send your work to your allocated Career Advisor for feedback.</p><p>Ana Popov: <a href=\"mailto:ana@ubiqum.com\">ana@ubiqum.com</a> </p><p>Alinne Shedid: <a href=\"mailto:alinne@ubiqum.com\">alinne@ubiqum.com</a></p><p>Jost Lepere: <a href=\"mailto:jost@ubiqum.com\">jost@ubiqum.com</a> </p><p />",
    "conflPageId": "300580888",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Submit Your Work 2",
    "content": "<p>Please send your work to your allocated Career Advisor for feedback.</p><p>Ana Popov: <a href=\"mailto:ana@ubiqum.com\">ana@ubiqum.com</a> </p><p>Alinne Shedid: <a href=\"mailto:alinne@ubiqum.com\">alinne@ubiqum.com</a></p><p>Jost Lepere: <a href=\"mailto:jost@ubiqum.com\">jost@ubiqum.com</a> </p><p />",
    "conflPageId": "300613635",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Submit Your Work T4",
    "content": "<p>Please send your work to your allocated Career Advisor for feedback.</p><p>Ana Popov: <a href=\"mailto:ana@ubiqum.com\">ana@ubiqum.com</a> </p><p>Alinne Shedid: <a href=\"mailto:alinne@ubiqum.com\">alinne@ubiqum.com</a></p><p>Jost Lepere: <a href=\"mailto:jost@ubiqum.com\">jost@ubiqum.com</a> </p><p />",
    "conflPageId": "300744719",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Day 1 with Career Advisor",
    "content": "<p />",
    "conflPageId": "300843039",
    "conflChildrenId": [
      "298188801",
      "298319873"
    ]
  },
  {
    "title": "Day 3 With Your Mentor",
    "content": "<p>Please contact your mentor for the Web Development Program or Data Analytics to prepare for a technical interview.</p>",
    "conflPageId": "306839553",
    "conflChildrenId": [
      "298418180",
      "298123283"
    ]
  },
  {
    "title": "Arduino Project",
    "content": "<p>The Arduino Uno is a microcontroller board that you can program to interact with the world around you. With the right components, your Arduino board can become a machine that solves Rubiks' Cubes or prints 3D objects, a drone that flies around collecting environmental data, a robot that can navigate and memorize mazes, it can even be used to control IoT environments. These are all things that people have done using Arduino. Once you have mastered the use of Arduino, the limit is your imagination. </p><p>This page is where you&rsquo;ll find everything you need to start creating your own Arduino projects.</p><p /><p>For inspiration check out some of these projects that people have made using Arduino.</p><ac:structured-macro ac:name=\"widget\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"5b5d6eaf-11ce-47b9-8230-4c996e83450a\"><ac:parameter ac:name=\"overlay\">youtube</ac:parameter><ac:parameter ac:name=\"_template\">com/atlassian/confluence/extra/widgetconnector/templates/youtube.vm</ac:parameter><ac:parameter ac:name=\"width\">400px</ac:parameter><ac:parameter ac:name=\"url\"><ri:url ri:value=\"https://www.youtube.com/watch?v=enyIGWev7HQ\" /></ac:parameter><ac:parameter ac:name=\"height\">300px</ac:parameter></ac:structured-macro><p />",
    "conflPageId": "312246281",
    "conflChildrenId": [
      "312344583",
      "312344601",
      "312508417",
      "312279046",
      "312344608"
    ]
  },
  {
    "title": "Temperature and Humidity Data Collection with Arduino",
    "content": "<p>For this project, the circuitry is quite straight forward. We will be using a DHT11 temperature and humidity multi sensor. The sensor itself is a small box with a pattern of holes on the front. Contained within this box is a thermistor (a resister that changes its resistance depending on the ambient temperature) and a capacitive humidity sensor (a capacitor that changes its capacitance depending on the percent relative humidity; further reading on capacitors can be found at the bottom of this page).</p><table data-layout=\"default\"><colgroup><col style=\"width: 708.0px;\" /><col style=\"width: 51.0px;\" /></colgroup><tbody><tr><td><p style=\"text-align: center;\">You Will Need</p></td><td><p style=\"text-align: center;\">#</p></td></tr><tr><td><p style=\"text-align: center;\">Arduino Uno (with USB cable)</p></td><td><p style=\"text-align: center;\">1</p></td></tr><tr><td><p style=\"text-align: center;\">Breadboard</p></td><td><p style=\"text-align: center;\">1</p></td></tr><tr><td><p style=\"text-align: center;\">Wires (m/m)</p></td><td><p style=\"text-align: center;\">3</p></td></tr><tr><td><p style=\"text-align: center;\">DHT11 multi sensor</p></td><td><p style=\"text-align: center;\">1</p></td></tr></tbody></table><p>It is possible to buy the DHT11 multi sensor either on its own or as part of an integrated circuit. This page will tell you how to set up the project with either option. Neither option is necessarily better than the other. The circuit design is similar and the same code will work for both.</p><p>In addition to the hardware needed for this project, you will need to install a couple Arduino libraries (provided below). You will also need to find a software that can read serial port data and store it in a csv file. Tera Term is a good option for this.</p><p /><p><strong>Arduino Setup &ndash; with Integrated Circuit (IC)</strong></p><p>The IC connected to the sensor will have three pins which are labelled: positive, negative, and data (the last pin may have a different label, but it is used for data collection). We can use these pins to connect the sensor to our breadboard. Ensure that all three pins are in separate nodes. The positive and negative terminals of the IC are what we use to power the sensor. Using jumper wires, connect the 5-Volt pin of your Arduino board to the node containing the positive terminal of the IC. Use a second jumper wire to connect a ground pin on your Arduino board to the node containing the negative terminal of the IC. Connect the last terminal of the IC to digital pin 7 on your Arduino board using the last jumper wire. The circuit is now complete.</p><p><strong>Arduino Setup &ndash; without Integrated Circuit</strong></p><p>The multi sensor has four pins along the bottom as shown in Figure 1 below. Insert the sensor into your breadboard in such a way that each pin is in a different node. We will number the nodes according to the numbering scheme shown in figure 1 (i.e. node 1 is the node containing pin 1). Using jumper wires, connect node 1 to the 5-Volt pin on your Arduino board, connect node 2 to digital pin 7, and connect node 4 to one of the ground pins. The circuit is now complete.</p><p style=\"text-align: center;\">Figure 1 &ndash; DHT11 Multi Sensor Pin Key</p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"227\" ac:original-width=\"297\"><ri:attachment ri:filename=\"image-20190911-130833.png\" ri:version-at-save=\"1\" /></ac:image><p><strong>The Code</strong></p><p>We want to collect data points at given time intervals over a long period of time. In order to do this, we need to install two libraries to be used in Arduino: DHT_Library and Time-master. These libraries are attached to this page as zip files. Extract their contents to the libraries folder nested within the Arduino folder. DHT_Library allows us to read the digital data we will be receiving from the DHT11 multi sensor. Time-master allows us to track the time of our measurements.</p><p /><p style=\"margin-left: 30.0px;\"><em>The libraries you will need to install:</em></p><p class=\"media-group\"><ac:structured-macro ac:name=\"view-file\" ac:schema-version=\"1\" ac:macro-id=\"4e4f85e9-b3f7-4cef-aee4-8e8e1701dd21\"><ac:parameter ac:name=\"name\"><ri:attachment ri:filename=\"Time-master.zip\" ri:version-at-save=\"3\" /></ac:parameter></ac:structured-macro><ac:structured-macro ac:name=\"view-file\" ac:schema-version=\"1\" ac:macro-id=\"1dd1783e-1278-46d7-84ae-be8ac838f29e\"><ac:parameter ac:name=\"name\"><ri:attachment ri:filename=\"DHT_Library.zip\" ri:version-at-save=\"2\" /></ac:parameter></ac:structured-macro></p><p /><p style=\"margin-left: 30.0px;\">&middot; If you are using a multi sensor that has an attached integrated circuit, it is possible that the provided DHT library won&rsquo;t be compatible. If this is the case, you will need to search the web for a library that will work with your sensor.</p><p style=\"margin-left: 30.0px;\">&middot; If the provided software is not up to date, you may have to find more recent versions.</p><p /><p>Once you have installed the libraries you need to include them in your Arduino IDE code. To do this, open a new Arduino IDE file, go to the &ldquo;Sketch&rdquo; dropdown menu, and hover over the &ldquo;Include Library&rdquo; option. If you have correctly installed the libraries, they should appear in the &ldquo;contributed libraries&rdquo; section of the dropdown menu. Selecting both libraries will generate the code that loads them into your program. Below the generated line <strong>#include &lt;dht.h&gt;</strong> add the line: <strong>dht DHT; </strong>. Don&rsquo;t forget to define constants and pin designations before moving on to the setup function.</p><p /><p>From here, the coding is up to you, although some useful information is provided below. Your code can be written using the given information. However, further research can be done to improve efficiency.</p><p><strong>Library Syntax:</strong></p><ul><li><p><strong>second() </strong>returns the number of seconds <u>since the program started</u>. Resets to 0 after 59.</p></li><li><p><strong>minute() </strong>returns the number of minutes <u>since the program started</u>. Resets to 0 after 59.</p></li><li><p><strong>hour()</strong> returns the number of hours <u>since the program started</u>. Resets to 0 after 19.</p></li><li><p><strong>int varName = DHT.read11(sensorPin) </strong>reads the data, storing the temperature (˚C) and the percent relative humidity (%) as integers in <strong>DHT.temperature </strong>and <strong>DHT.humidity </strong>respectively. <strong>varName </strong>can be any name that isn&rsquo;t defined elsewhere in the code and <strong>sensorPin</strong> is a variable containing the number corresponding to the digital pin we are using to collect data.</p></li><li><p>Since we will be using a software that reads serial data, you will need to use <strong>Serial.print()</strong> or <strong>Serial.println()</strong> in order to store your data.</p></li></ul><p><strong>Tips</strong>: </p><ul><li><p>For each data point you should record 5 values: temperature, humidity, hour, minute, second. Since we will be storing these values in a csv file, be sure to use <strong>Serial.print(&ldquo;,&rdquo;) </strong>between printing each value. Also, when printing the last value, use <strong>Serial.println()</strong> (not followed by a comma). This will put each successive data point on a new line.</p></li><li><p>Any code you write will take a short amount of time to run (on the order of 10 milliseconds). If you use the <strong>delay()</strong> function to regulate the interval between data points, you must consider the additional delay of running the code. If you are collecting a large set of data points, this additional delay cannot be ignored.</p><p /></li></ul><p>Once you have constructed your circuit and written your code, you will need to figure out how to store the serial data into a csv file. The next section discusses how to do that using the Tera Term software.</p><p /><p><strong>Data Storage with Tera Term</strong></p><p>Once you have installed Tera Term, using it for data collection is relatively easy. Once you have set up Tera Term to read the serial port, you won&rsquo;t be able to upload the program to your Arduino. Therefore, before you run Tera Term, you must upload your code. Once the code has been uploaded, you can open Tera Term. Click on the Serial option in the window that pops up and ensure that the correct USB port is selected before clicking OK. This will open a new window where the collected data will be displayed.</p><p>When you have reached the data collection window, you need to set up the storage of the data. Open the &ldquo;File&rdquo; dropdown menu and select &ldquo;log.&rdquo; This will open another window where you can set up a path for accessing your file. Save the data in a place you will remember it and be sure that the file name ends in .csv. The data collection will now continue until the Tera Term window is closed or the Arduino is disconnected.</p><p /><p /><p><br /></p><p /><p /><p style=\"text-align: center;\"><strong>Capacitors (Optional Reading):</strong></p><p>A capacitor is an electrical component that is comprised of two conductive plates separated by a dielectric material. A dielectric material is an electric insulator meaning it does not conduct electricity and no current can flow through it. However, in the case of a capacitor, the dielectric material only forms a thin layer of separation between the plates. How does this work in circuits? We know that electrical current is the flow of electrons through a conductive material. When an electron flows into one of the plates of a capacitor, the plate takes on a slight negative charge. To account for the negative charge on plate 1, plate 2 wants to become positively charged. In order to gain a positive charge, it forces an electron out. In summary, when an electron flows into one plate, a different electron flows out of the other. This seems to suggest that current flows normally through capacitors despite the dielectric material. This would be true, however, as current continues to flow, the charge on both plates continues to grow. The more negatively charged plate 1 becomes, the less willing it is to take on electrons. The amount of charge that can be held by the plates depends on the capacitance of the component. Once the plates reach this maximum charge, current will stop flowing. The capacitance depends on three characteristics of the capacitor: the surface area of the plates, the distance between the plates, and the dielectric material separating the plates. The behavior of capacitors can be further understood in the example given below.</p><p>The capacitor in the DHT11 multi sensor has a fixed area and distance between the plates. However, the dielectric material used in the capacitor can absorb moisture from the air. As it absorbs moisture, the dielectric properties of the material change. Increasing the amount of water particles in the dielectric, increases the capacitance of the capacitor. We can detect these changes in capacitance in order to determine the relative humidity of the air.</p><p><em>Capacitor Example</em></p><p>In this example, we have an RC circuit which is the simplest capacitor circuit. Initially, when a voltage drop is applied across a capacitor, the effective resistance of the capacitor is zero. This means that if we did not include the resistor, the circuit would be shorted when the voltage is applied. From Ohm&rsquo;s law (V = iR), we can see that for a fixed, non-zero voltage, as the resistance approaches zero, the current approaches infinity. An infinite current is of course impossible, so the resistance can never be zero. This is reconciled by the fact that all electrical conductors have an intrinsic resistance. However, this resistance is typically quite small meaning, even though the current isn&rsquo;t infinite, it does become extremely large. Shorting a circuit like this will likely destroy the power source, which is something we want to avoid.</p><p /><p style=\"text-align: center;\">Figure 2 &ndash; Capacitor Example</p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"369\" ac:original-width=\"416\" ac:width=\"680\"><ri:attachment ri:filename=\"image-20190911-140128.png\" ri:version-at-save=\"1\" /></ac:image><p>Given that our example circuit contains a 500 Ohm resistor and a 5-Volt power source, we can calculate that the initial current through the circuit will be 10 milliamps. As the capacitor fills up, its effective resistance increases exponentially which means that the current through the circuit follows an exponential decay approaching zero. The time dependent behavior of the current in this circuit is given by the following equation:</p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"82\" ac:original-width=\"412\" ac:width=\"224\"><ri:attachment ri:filename=\"image-20190911-140723.png\" ri:version-at-save=\"1\" /></ac:image><p>In this equation, 10mA is the initial current, R is the resistance of the resistor, and C is the capacitance of the capacitor.</p>",
    "conflPageId": "312279046",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Purchasing your Arduino Board",
    "content": "<p>In the Arduino project, you will be introduced to the abilities of the Arduino Uno Board and software. In this project you will first learn how to construct basic circuits and program them using the Arduino IDE. Next you will learn how to use the DHT11 multi sensor to collect and store ambient temperature and humidity data. Finally, you will learn how to program your Arduino board using JavaScript. By the end of this project, you should have the tools and resources necessary to develop your very own Arduino projects suited to your own needs. </p><p>This project doesn&rsquo;t require much hardware or prior knowledge of electrical circuits. The project will use a small collection of electrical components which can be purchased at relatively low costs. (LEDs and resistors are not required for the data collection portion of the project, but are recommended and can be purchased very cheaply.) Ask your mentor if any of these components are already available from past projects.</p><p /><p><strong><u>What you will need:</u></strong></p><table data-layout=\"default\"><tbody><tr><td><p style=\"text-align: center;\"><a href=\"https://es.aliexpress.com/item/32967816885.html?src=google&amp;albslr=226710689&amp;src=google&amp;albch=shopping&amp;acnt=494-037-6276&amp;isdl=y&amp;slnk=&amp;plac=&amp;mtctp=&amp;albbt=Google_7_shopping&amp;aff_platform=google&amp;aff_short_key=UneMJZVf&amp;&amp;albagn=888888&amp;albcp=1633820309&amp;albag=63890294393&amp;trgt=539263010115&amp;crea=es32967816885&amp;netw=u&amp;device=c&amp;gclid=Cj0KCQjwwb3rBRDrARIsALR3Xebh34VuCyewbVy4pWws5tKQOv68nU4gpuHb_8O0tZTWJ8-pTJl12DgaAsmWEALw_wcB&amp;gclsrc=aw.ds\">Arduino Uno</a> (with USB Cable)</p></td></tr><tr><td><p style=\"text-align: center;\"><a href=\"https://www.tiendatec.es/arduino/modulos/627-modulo-h1-dht11-temperatura-y-humedad-para-arduino-8406271480015.html?gclid=Cj0KCQjwwb3rBRDrARIsALR3XeaJctl2nbc671_91zAaNsc0WGbILqz1jF3-LZUfn04gjNSyVmgfTncaAkBvEALw_wcB\">DHT11</a> Temperature/Humidity Multi-Sensor</p></td></tr><tr><td><p style=\"text-align: center;\"><a href=\"https://es.aliexpress.com/item/32857051841.html?src=google&amp;albslr=227552571&amp;src=google&amp;albch=shopping&amp;acnt=494-037-6276&amp;isdl=y&amp;slnk=&amp;plac=&amp;mtctp=&amp;albbt=Google_7_shopping&amp;aff_platform=google&amp;aff_short_key=UneMJZVf&amp;&amp;albagn=888888&amp;albcp=2047572441&amp;albag=80829465588&amp;trgt=743612850714&amp;crea=es32857051841&amp;netw=u&amp;device=c&amp;gclid=Cj0KCQjwwb3rBRDrARIsALR3XeaAET1I2EUnqykCz9Ua-FMWx0ImFL_6y7R26Sh_tAvysrIfhRk5LmwaAu5iEALw_wcB&amp;gclsrc=aw.ds\">Breadboard</a></p></td></tr><tr><td><p style=\"text-align: center;\"> <a href=\"https://es.aliexpress.com/item/1847829829.html?spm=a2g0o.detail.1000060.1.50ba7812yTHv2F&amp;gps-id=pcDetailBottomMoreThisSeller&amp;scm=1007.13339.139618.0&amp;scm_id=1007.13339.139618.0&amp;scm-url=1007.13339.139618.0&amp;pvid=db18b36f-55ad-4709-983f-7b448ab5696a\">Jumper Wires</a></p></td></tr><tr><td><p style=\"text-align: center;\"><a href=\"https://es.aliexpress.com/item/32885166741.html?src=google&amp;albslr=225542106&amp;src=google&amp;albch=shopping&amp;acnt=494-037-6276&amp;isdl=y&amp;slnk=&amp;plac=&amp;mtctp=&amp;albbt=Google_7_shopping&amp;aff_platform=google&amp;aff_short_key=UneMJZVf&amp;&amp;albagn=888888&amp;albcp=2047572441&amp;albag=80829465588&amp;trgt=743612850714&amp;crea=es32885166741&amp;netw=u&amp;device=c&amp;gclid=CjwKCAjwtuLrBRAlEiwAPVcZBkiz4tss6iFdSB62lW1iTGzhsRbspFkNTWG873-pHxQgnUtXH9evKxoCDwUQAvD_BwE&amp;gclsrc=aw.ds\">LEDs</a> + <a href=\"https://www.banggood.com/300pcs-16W-1-Metal-Film-Resistor-Kit-10-ohm-1M-ohm-Color-Ring-Resistance-10R-1MR-Resistor-Assorted-Set-30-Values-p-1469115.html?rmmds=buy&amp;cur_warehouse=CN\">Resistors</a></p></td></tr></tbody></table><p /><p>The Arduino hardware designs are open sourced so it&rsquo;s very easy to find low cost options for these items (the table contains links to some of the best options). AliExpress seems to be a good place to look.</p><p /><p>There are countless possible projects that can be made using Arduino. The project you will be working on barely scratches the surface of what is possible. Because it doesn&rsquo;t involve many components, you will be greatly limited in the possible projects you can develop in the future. Therefore, if you are interested in exploring more of the abilities of Arduino, it is highly recommended that you investing in a starter kit instead of buying the components listed above. There are many of these kits available online. If you choose to buy one of these kits, ensure that they contain the components necessary for the project.</p><p>&middot; <a href=\"https://es.aliexpress.com/item/33001724839.html?src=google&amp;albslr=221668190&amp;src=google&amp;albch=shopping&amp;acnt=494-037-6276&amp;isdl=y&amp;slnk=&amp;plac=&amp;mtctp=&amp;albbt=Google_7_shopping&amp;aff_platform=google&amp;aff_short_key=UneMJZVf&amp;&amp;albagn=888888&amp;albcp=2047572441&amp;albag=80829465588&amp;trgt=743612850714&amp;crea=es33001724839&amp;netw=u&amp;device=c&amp;gclid=Cj0KCQjwwb3rBRDrARIsALR3XeZUGvnDTIpaWJd0A1vAHmDbjQIoLD9KJEPVCbCoaUFdkeJDJjnBhBQaAtSvEALw_wcB&amp;gclsrc=aw.ds\">Super Starter Kit for Arduino UNO R3 with the Tutorial</a></p><p>&middot; <a href=\"https://hobbyking.com/es_es/kingduino-4wd-ultrasonic-robot-kit-1.html?countrycode=ES&amp;gclid=Cj0KCQjwwb3rBRDrARIsALR3XeYXkRZmyW_UpVXiqNgCqFDD1Ojj88VGEUrGOE-npty7XcQ1MFDKh6EaAigXEALw_wcB&amp;gclsrc=aw.ds\">Kingduino 4WD Ultrasonic Robot Kit</a></p><p /><p /><p>While you&rsquo;re waiting for your new Arduino board, take a look at the next page, &ldquo;An Introduction to Basic Circuits.&rdquo;</p>",
    "conflPageId": "312344583",
    "conflChildrenId": [

    ]
  },
  {
    "title": "An Introduction to Basic Circuits",
    "content": "<p>There are a few concepts you need to understand before designing your first circuit. These concepts may seem confusing at first, but they&rsquo;re not too complicated. If you take the time to understand them now then working with Arduino will become a lot easier. These concepts are best introduced using the most well known equation in electrical circuits. </p><p /><p style=\"text-align: center;\">Ohm&rsquo;s law: <strong>V = iR</strong> (Voltage = Current ∙ Resistance)</p><p style=\"text-align: center;\" /><p>Breaking this equation into its three pieces:</p><p /><p><em><u>Current (measured in Amperes)</u></em> is the most intuitive of the factors in this equation. Current measures the flow of electricity through a conductive material (such as a wire). Physically, electrical current simply means the flow of electrons.</p><p><em><u>Resistance (measured in Ohms)</u></em> impedes the flow of electrical current and, in doing so, absorbs power. Many of the components you will use in your circuits have a certain amount of resistance to the flow of current. If these components create a resistance, then it must mean they are absorbing power. This is exactly how power is provided to components in your circuits.</p><p><em><u>Voltage (measured in Volts)</u></em> is a measure of the electric potential difference between two points. A voltage difference across a resistor is what is needed to &ldquo;pull&rdquo; electrons through that resistor. A large voltage drop between two points will &ldquo;pull&rdquo; electrons harder than a small voltage drop. Voltage is complicated because it can only be measured as a difference between two points in a circuit. It physically doesn&rsquo;t make sense to measure the voltage at a single point. This is why batteries always have two terminals. A 5-Volt battery has a voltage difference of 5 Volts between it&rsquo;s two terminals.</p><p /><p>Bringing the pieces back together: </p><p>If you connect the two terminals of a 5-Volt battery with a 5 Ohm resistor, a voltage drop of 5 Volts will force electrical current to flow through the resistor. Ohm&rsquo;s law can be applied to this scenario to calculate that 1 Ampere of current will flow through the resistor:</p><p style=\"text-align: center;\">V = iR</p><p style=\"text-align: center;\">(5V) = i (5&Omega;)</p><p style=\"text-align: center;\">i = (5/5) A = 1A</p><p style=\"text-align: center;\">(&Omega; is the symbol used for Ohms)</p><p style=\"text-align: center;\">Note: 1 Ampere is a very large current in most applications and would likely damage your hardware. It would be more realistic to use a resistor of 500 Ohms which would make the equation: 5 = i(500). This yields a more realistic current of 0.01 Amperes</p><p /><p /><p>A fun way to try to understand these concepts is to think about drinking through a straw:</p><p>Your goal is to get liquid flowing from the glass, up the straw, and into your mouth. In order to do that, you suck on the straw. When you suck on the straw, what you are actually doing is decreasing the pressure of the air in the straw to be lower than the pressure of the air outside of the straw (We are creating a pressure difference). This essentially means the air outside the straw pushes down on the liquid&rsquo;s surface harder than the air inside the straw does. The stronger push wins meaning that the liquid is pushed up through the straw and into your mouth. </p><p>Using this example to think about circuits: a pressure difference causing the fluid to flow is the same as a voltage difference causing electrons to flow. The straw causes a resistance to the flow. If you don&rsquo;t believe this, consider what would happen if you were to suck on a thinner straw just as hard. Less liquid would flow through the straw. For the same pressure difference, a larger resistance to flow means a smaller flow. </p><p>This last statement demonstrates Ohm&rsquo;s law (V = iR) quite nicely. If voltage stays the same, then a higher resistance means a lower current.</p>",
    "conflPageId": "312344601",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Setting up your Arduino Project with JavaScript",
    "content": "<p>Johnny-Five is Node.js module that allows users to program Arduino boards (and similar microcontrollers) using JavaScript. This platform was developed in order to extend the capabilities of the Arduino board with an emphasis in the field of robotics. One of the benefits of using Johnny-Five is the fact that it allows you to program microcontrollers without having to write any code in the Arduino IDE. Therefore, Johnny-Five is a great option for experienced JavaScript programmers who want to get a quick start without having to learn the Arduino development language.</p><p /><p><em>Johnny-five Installation</em></p><p>Because Johnny-Five is a Node.js module, in order to install it, you must first have Node.js installed on your computer. If you have not already done so, please install Node.js.</p><p>With Node.js now on your computer, you can install the Johnny-Five module. To do this, open the command prompt window on your computer and enter <strong>npm init</strong>. This will initialize the node package manager which you will need for the installation. After running this command, the window will begin to walk you through the process of setting up a package.json file. The default options should be adequate for the installation, so you may press enter until it prompts you with the final line <strong>Is this OK? (yes)</strong>. This time, after you hit enter, you will be able to access the node package manager. At this point, you can install Johnny-five. This can be done by entering the command <strong>npm install johnny-five</strong>.</p><p /><p><em>Configuring your Arduino Board to Run JavaScript Code</em></p><p>Before you can start programming your Arduino with JavaScript, you need to configure the board to understand JavaScript code. Johnny-Five uses a Firmata protocol to communicate with Arduino. Conveniently enough, the Arduino IDE already has some Firmata protocols built into the software. These are prewritten programs that you can upload to your Arduino board. In order to access the program, open your Arduino IDE and follow the path of dropdown menus: <strong>File&gt;Examples&gt;Firmata&gt;StandardFirmataPlus</strong>. Doing this will generate a script which you can upload to your Arduino board. Once you upload this, your board will be configured for Johnny-Five.</p><p /><p><em>Programming Your Arduino with JavaScript</em></p><p>With Johnny-five installed and the Firmata protocol now running on your Arduino board, you can start programming it using JavaScript. To do this, open a new .js file where you can start writing your code. The following lines of code should be used for any program you write to your Arduino board.</p><p /><p><strong>var five = require(&ldquo;johnny-five&rdquo;);</strong></p><p><strong>var board = new five.Board();</strong></p><p /><p><strong>board.on(&ldquo;ready&rdquo;, function() {</strong></p><p style=\"margin-left: 30.0px;\"><strong>//All your code will be written in this function.</strong></p><p><strong>});</strong></p><p /><p>The Johnny-Five <a href=\"http://johnny-five.io/\">website</a> has everything you will need to start learning how to use the module, including pages dedicated to <a href=\"http://johnny-five.io/api/\">API </a>and <a href=\"http://johnny-five.io/examples/\">examples</a>. The examples cover everything from basic code and board configuration to the integration of complex components and sensors into your projects. Work through a few of these examples on your own and you will be well on your way to developing your own projects using JavaScript.</p><p />",
    "conflPageId": "312344608",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Getting Started with Arduino",
    "content": "<p><strong>Introduction to Arduino</strong></p><p>Start by taking a second to inspect your Arduino board. Notice that there is a row of pins along each side of the device. You can connect jumper wires to these pins to connect your Arduino Board to any circuit you desire.</p><p /><p><em>Power Pins</em></p><p>Start by looking along the left side of the board (with the main ports oriented away from you). The top grouping of pins is used to provide power to our circuits and there is no coding associated with the use of these pins. The important pins here are the ones labeled 3.3V, 5V, and GND. Recall that it doesn&rsquo;t make sense to know the voltage at a point, so how are there pins for 3.3V and 5V? This is where the GND (ground) pin comes in. The 3.3V and 5V pins are measuring voltages relative to the ground pin, so you can think of the ground pin as having a voltage of zero. If this seems confusing, refer back to the page that discusses the basics of circuits.</p><p /><p><em>Digital Pins</em></p><p>Now shift your attention to the pins along the right side of the board. These are the digital input/output pins which can read or write voltages in binary states: on/off (high/low voltage). These voltages are again measured relative to your Arduino&rsquo;s ground pins. The digital pins can act as output pins (sending information to your circuit) or input pins (collecting information from the circuit). </p><p /><p><strong>digitalWrite(pinNumber, HIGH); </strong>will set the voltage of the specified pin to 5 Volts (relative to ground).</p><p><strong>digitalWrite(pinNumber, LOW); </strong>will set the voltage of the specified pin to 0 Volts (relative to ground).</p><p><strong>digitalRead(pinNumber); </strong>will return a 1 if the pin reads a voltage not equal to ground and a 0 if it reads a voltage equal to ground.</p><p /><p><em>Analog Pins</em></p><p>The last grouping of pins are the analog pins. These are the 6 pins along the lower left side of the board. These pins allow you to work with a wider range of voltages instead of just the on/off digital states. Again, these pins can be used for both output and input. If you are writing a voltage to your circuit, you will specify a value between 0 and 255 (an 8-bit value). The specified value is linearly scaled to a voltage between 0 and 5 Volts (example: 255 &rarr; 5V). If you are using the analog pins to read a voltage at some point in a circuit, the pin reading will return a value between 0 and 1023 (a 10-bit value). This value is linearly scaled from a voltage between 0 and 5 Volts (example: 5V &rarr; 1023).</p><p /><p><strong>analogWrite(pinNumber, value); </strong>will set the voltage of the specified pin to (<strong>value</strong> * 5 / 255) Volts.</p><p><strong>analogRead(pinNumber); </strong>will return a value between 0 and 1023. If you multiply the result by (5 / 1023), you will obtain the measured voltage. </p><p /><p><strong>Software</strong></p><p>Before you can start interacting with your Arduino Uno board you need to install the <a href=\"https://www.arduino.cc/en/Main/Software\">Arduino IDE</a> software. The software is open sourced and works with all operating platforms. It can be downloaded for free through the Arduino website. The Arduino IDE is one of the main reasons that microcontroller programming has become so popular and accessible to so many people. The software, based in c/c++, is relatively intuitive and is quite easy to learn regardless of your previous knowledge of coding.</p><p>When you first open the program, you will have to check the settings to ensure the software can properly communicate with your board. First, open <strong>Tools&gt;Board</strong> and select the board you are using (likely Arduino/Genuino Uno). Next, open <strong>Tools&gt;Port</strong> and ensure that the correct USB port is selected (your Adruino will have to be plugged in for this part).</p><p>You will notice that there is already some script written for you. This code sets up two functions: setup and loop. The setup function is where you will write any of the code you need to setup your project. This code will only run once. The loop function is where the important stuff happens. After the setup function runs once, the loop function will start and will continue to loop until the Arduino stops receiving power. You can start learning about the software by building the following LED circuit.</p><p /><p><strong>Basic LED Circuit</strong></p><p>The goal of this circuit will be to use the Arduino IDE to control a basic LED circuit. This will help you to start understanding both how electrical components work together and how to use the software.</p><table data-layout=\"default\"><colgroup><col style=\"width: 711.0px;\" /><col style=\"width: 48.0px;\" /></colgroup><tbody><tr><td><p style=\"text-align: center;\">You Will Need</p></td><td><p style=\"text-align: center;\">#</p></td></tr><tr><td><p style=\"text-align: center;\">Arduino Uno (with USB cable)</p></td><td><p style=\"text-align: center;\">1</p></td></tr><tr><td><p style=\"text-align: center;\">Breadboard</p></td><td><p style=\"text-align: center;\">1</p></td></tr><tr><td><p style=\"text-align: center;\">Wires (m/m)</p></td><td><p style=\"text-align: center;\">2</p></td></tr><tr><td><p style=\"text-align: center;\">~220 Ohm Resistor</p></td><td><p style=\"text-align: center;\">1</p></td></tr><tr><td><p style=\"text-align: center;\">LED</p></td><td><p style=\"text-align: center;\">1</p></td></tr></tbody></table><p /><p><em>Breadboard</em></p><p>Breadboards are a useful tool for circuit design (reference Figure 1). They are composed of a grid of small holes into which we can plug our components (jumper wires, resistors, LEDs, etc.). Across the center of the board there are two grid sections comprised of a series of five-hole columns. In each column of five (a node), all the holes are connected to each other with conductive material, but each column is isolated from all other columns. This means that all holes in a node have the same voltage and any current that flows into the node through one (or more) of the holes must flow out of one (or more) of the others. Along the top and bottom of the board are the power strips (two rows labelled positive and negative). Each full row acts as a node (connected all the way across the board) and these are typically used if many components need to be powered. Using jumper wires, ground the negative row by connecting any of the holes to one of the ground pins on the Arduino Board. Now connect one of the voltage pins to the positive row in the same manner. Any components that are connected to these nodes will now be powered by the voltage drop.</p><p /><p style=\"text-align: center;\"><em>Figure 1 - Breadboard</em></p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"171\" ac:original-width=\"415\" ac:width=\"557\"><ri:attachment ri:filename=\"image-20190912-120800.png\" ri:version-at-save=\"1\" /></ac:image><p /><p><em>The Circuit</em></p><p>For this basic circuit, the goal is to power an LED on and off over a given time interval. LEDs have very small resistance which means that if a voltage drop of 5 Volts is directly applied across the terminals, a very large current will flow through the LED. This means that the LED will be receiving far too much power and will likely blow out quickly. The current must somehow be reduced which means the resistance of the circuit needs to be increased. Resistors have the important property that if they are connected in series, their resistances add together (illustrated in Figure 2). This property permits an easy way to increase the resistance of the LED circuit. Simply connecting the LED to a resistor.</p><p /><p style=\"text-align: center;\"><em>Figure 2 &ndash; Equivalent Resistance (Series)</em></p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"56\" ac:original-width=\"415\" ac:width=\"557\"><ri:attachment ri:filename=\"image-20190912-120823.png\" ri:version-at-save=\"1\" /></ac:image><p /><p style=\"margin-left: 30.0px;\">Setup:</p><p style=\"margin-left: 30.0px;\">1. Link any two nodes of the breadboard with the resistor.</p><p style=\"margin-left: 30.0px;\">2. Connect one terminal of the LED to one of these nodes and plug the other terminal into a free node.</p><p style=\"margin-left: 30.0px;\">(Note: LEDs are directional which means that it matters which direction current flows through them. One of the wires is longer than the other. The longer wire needs to have a higher voltage than the shorter wire. It doesn&rsquo;t matter which side connects to the resistor, or what order the resistor and LED are connected, but remember which side of the LED/resistor pair needs to have an applied voltage and which side needs to be grounded.)</p><p style=\"margin-left: 30.0px;\">3. Use a jumper wire to connect the digital ground pin of your Arduino board to the appropriate node of your circuit.</p><p style=\"margin-left: 30.0px;\">4. Use another jumper wire to connect one of the numbered digital pins of your Arduino board to the other side of your circuit.</p><p /><p><em>The Code</em></p><p>A basic code for this circuit is attached to this page. Upload it to your Arduino to see what happens (The serial monitor can be accessed through the Tools dropdown menu).</p><p>This code uses some of the basic operations that you can do with the Arduino IDE. Take some time to look through the code and watch what it&rsquo;s doing. Notes are included in the code to help guide you. You can also use the <a href=\"https://www.arduino.cc/reference/en/#page-title\">Arduino website</a> as a resource. Notice that constants are defined above the setup and loop functions and a few commands are written to the setup function, but the bulk of the code is contained within the loop function. Remember the setup function runs once at the beginning then the loop function runs repeatedly until we disconnect the Arduino.</p><p>Once you understand the code, try making the following alterations so you can practice working with the code yourself:</p><p /><p style=\"margin-left: 30.0px;\">&middot; Set different intervals for the light to be on and off</p><p style=\"margin-left: 30.0px;\">&middot; Add a second LED/resistor pair which turns on when the first turns off (and vice versa)</p><p style=\"margin-left: 30.0px;\">&middot; Use 6 LEDS (2 Red, 2 Yellow, 2 Green) to program a traffic light simulation.</p><p style=\"margin-left: 30.0px;\">&middot; If you have any other components available to you (buttons, dials, etc.) integrate them into your circuit to turn your lights on and off manually. You will probably need to do further research to figure out how to integrate new components. Don&rsquo;t forget you can reference the <a href=\"https://www.arduino.cc/reference/en/#page-title\">Arduino website</a> for more documentation.</p><p /><p>LED Code: </p><p class=\"media-group\"><ac:structured-macro ac:name=\"view-file\" ac:schema-version=\"1\" ac:macro-id=\"a50c2865-4c5b-4192-b78e-920b1f30ac93\"><ac:parameter ac:name=\"name\"><ri:attachment ri:filename=\"BasicLED.ino\" ri:version-at-save=\"1\" /></ac:parameter></ac:structured-macro></p><p>In the &ldquo;Arduino&rdquo; file on your computer, create a folder called BasicLED. Save this file to the BasicLED folder.</p>",
    "conflPageId": "312508417",
    "conflChildrenId": [

    ]
  },
  {
    "title": "MERN Project",
    "content": "<h3 style=\"text-align: center;\">Welcome the MERN Full Stack Resources</h3><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"744\" ac:original-width=\"1300\" ac:width=\"340\"><ri:attachment ri:filename=\"MERN.jpeg\" ri:version-at-save=\"1\" /></ac:image><h3>About M.E.R.N</h3><p>Before we start, here are a few terms that should be familiar to you. If they are not, conduct your own research before continuing:</p><ul><li><p>Progressive Web App (PWA)</p></li><li><p>Full Stack</p></li><li><p>M.E.R.N acronym </p></li></ul><h3><ac:emoticon ac:name=\"blue-star\" ac:emoji-shortname=\":office:\" ac:emoji-id=\"1f3e2\" ac:emoji-fallback=\"🏢\" /> My Itinerary</h3><p>You have been hired by &ldquo;My Itinerary&rdquo;, a startup that plans to build a progressive web app (PWA) for travelers. This collaborative app will provide access to different itineraries and activities for users wanting to discover or share experiences in a city.</p><p>You will be working with a young, (fictional), and dynamic team. Your colleagues will communicate with you via email throughout the development of the app. </p><p>The team:</p><ul><li><p><strong>Sabrina Miller:</strong> The digital product owner, is responsible for the product and team management. She will guide you through the required tasks and the deadlines you need to meet.</p></li><li><p><strong>Martin Wright</strong>: Technical development team leads. Oversees the technical development of the company. He will assist you with the technical steps of the project.</p></li><li><p><strong>Sai Patel</strong>: UX Designer. In charge of user interface (UI) and design, he will send you wire-frames of what the app should look like.</p></li><li><p><strong>You</strong>: Junior Full Stack Developer</p></li></ul><h3><ac:emoticon ac:name=\"blue-star\" ac:emoji-shortname=\":twisted_rightwards_arrows:\" ac:emoji-id=\"1f500\" ac:emoji-fallback=\"🔀\" /> Paths:</h3><p>There are two ways to carry out the My Itinerary MERN project. If needed, have a discussion with your mentor about which option is most suited to you:</p><ul><li><p>The first and more realistic path is to develop the Front and Back end in parallel. This represents the normal life-cycle of an app's development. For this, follow the tasks tagged:<br /><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"a0c2e888-9ea9-4994-8cf7-d3fd8c8d78f0\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro> and <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"d704d650-31d6-4c93-b52e-7b1ffaaca131\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  </p></li><li><p>Alternatively, you can follow the &lsquo;Front End first&rsquo; alternative. During this process, you will focus on building a front end using a ready made back end. For this option, follow the tasks tagged:<br /><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"261999af-447a-44e5-ab3e-1e81b09b73ba\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  and <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"718a5aec-b884-4fc8-980a-9343d8570265\"><ac:parameter ac:name=\"title\">FRONT END ALT</ac:parameter><ac:parameter ac:name=\"colour\">Green</ac:parameter></ac:structured-macro> </p></li></ul><p style=\"margin-left: 30.0px;\">If time allows, once you have successfully built the front end you will be able to restart the task and build your own Back End. </p><p>If you are developing fast, spend some time on the tasks marked <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"b62e98f9-e045-4a42-8d56-65ce76b4bc9d\"><ac:parameter ac:name=\"title\">NICE TO HAVE</ac:parameter><ac:parameter ac:name=\"colour\">Purple</ac:parameter></ac:structured-macro>. Implementing these extra features will help further develop your skill set and prove valuable in future projects.</p><p /><h3><ac:emoticon ac:name=\"blue-star\" ac:emoji-shortname=\":bar_chart:\" ac:emoji-id=\"1f4ca\" ac:emoji-fallback=\"📊\" />  Presentations &amp; Code review</h3><p>During the project, you will have to present your work on many aspects:</p><ul><li><p>Application functional architecture</p></li><li><p>End user demonstrations</p></li><li><p>Code reviews</p></li></ul><p>Being able to prioritise tasks and provide feedback on work you carry out is an essential part of being a developer. To assist with preparation for the task, you will need to create a slideshow that clearly illustrates the individual elements of the MERN stack, and how they work together. You have been provided with a set of slide templates with some content to get you started:<br /><a href=\"https://docs.google.com/presentation/d/1DAvoCY3rOOHyUHz8RDpX_n5gF_0OiRFuLCIy5VlSwSk/edit?usp=sharing\">My Itinerary MERN Presentation</a></p><p>You can of course, re-design the slides to your liking.</p><p /><h3><ac:emoticon ac:name=\"blue-star\" ac:emoji-shortname=\":page_facing_up:\" ac:emoji-id=\"1f4c4\" ac:emoji-fallback=\"📄\" /> Sprint summary</h3><ol><li><p> <ac:link ac:card-appearance=\"inline\"><ri:page ri:content-title=\"V2 MERN Sprint 1\" ri:version-at-save=\"35\" /><ac:link-body>V2 MERN Sprint 1</ac:link-body></ac:link>  -  Create stack diagram, install and configure React and use it to build the app&rsquo;s Landing Page.</p></li><li><p><ac:link ac:card-appearance=\"inline\"><ri:page ri:content-title=\"V2 MERN Sprint 2\" ri:version-at-save=\"11\" /><ac:link-body>V2 MERN Sprint 2</ac:link-body></ac:link>   - Set up the foundations of the backend using Node.js libraries and connect to Mongo DB database. GET and POST data.</p></li><li><p> <ac:link ac:card-appearance=\"inline\"><ri:page ri:content-title=\"V2 MERN Sprint 3\" ri:version-at-save=\"12\" /><ac:link-body>V2 MERN Sprint 3</ac:link-body></ac:link>  - Implement state management with Redux and create new models and routes</p></li><li><p> <ac:link ac:card-appearance=\"inline\"><ri:page ri:content-title=\"V2 MERN Sprint 4\" ri:version-at-save=\"15\" /><ac:link-body>V2 MERN Sprint 4</ac:link-body></ac:link>  User management and web token security</p></li><li><p> <a href=\"https://ubiqum.atlassian.net/wiki/spaces/PRODUCT/pages/346816530/V2+MERN+Sprint+5\" data-card-appearance=\"inline\">https://ubiqum.atlassian.net/wiki/spaces/PRODUCT/pages/346816530/V2+MERN+Sprint+5</a> Favorite and comments features</p></li></ol><p /><p><ac:emoticon ac:name=\"blue-star\" ac:emoji-shortname=\":construction:\" ac:emoji-id=\"1f6a7\" ac:emoji-fallback=\"🚧\" />  This course is still in the process of being improved. Please feel free give us any feedback using the form below:</p><p /><ac:structured-macro ac:name=\"iframe\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"4b653bc9-4fcb-454d-bbaf-eecbc9166777\"><ac:parameter ac:name=\"src\"><ri:url ri:value=\"https://docs.google.com/forms/d/e/1FAIpQLScx5F_-Mq6kG4uDFQTX61HddFr2oPgucBA8AHtNqZPb1KDOsg/viewform?embedded=true\" /></ac:parameter><ac:parameter ac:name=\"width\">100%</ac:parameter><ac:parameter ac:name=\"name\">MERN Feedback</ac:parameter><ac:parameter ac:name=\"frameborder\">hide</ac:parameter><ac:parameter ac:name=\"align\">middle</ac:parameter><ac:parameter ac:name=\"height\">1000</ac:parameter><ac:rich-text-body><p /></ac:rich-text-body></ac:structured-macro>",
    "conflPageId": "320045084",
    "conflChildrenId": [
      "321191968",
      "321978430",
      "323452933",
      "324403201",
      "346816530"
    ]
  },
  {
    "title": "V2 MERN Sprint 1",
    "content": "<p>In this first sprint, you will discover, or further your knowledge of the most popular JavaScript framework, <strong>React</strong>. You will create a simple landing page for the MYtinerary mobile app, learn about, and build interactive and reusable UI components.</p><p><br /></p><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"30f545a3-fb90-42a2-9980-79927e82804f\"><ac:parameter ac:name=\"title\">Front end</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro> Epic 1: MERN Stack Diagram</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"wide\" ac:macro-id=\"c57cb5ca-fd14-4181-bb3c-b30a0d82b35d\"><ac:rich-text-body><h4>Task 1: Conduct research into the MERN stack architecture</h4><p>Start by learning about the stack. This introduction to the MEAN and MERN stacks made by a MongoDB developer is a great place to start. It describes the primary elements in the stack as well as some of the benefits of modern javascript-based architecture.</p><p><a href=\"https://www.mongodb.com/blog/post/the-modern-application-stack-part-1-introducing-the-mean-stack\">The Modern Application Stack</a></p><h4>Task 2: Build the MERN stack diagram</h4><p>Make a copy and complete the slides for the presentation of the <a href=\"https://docs.google.com/presentation/d/1DAvoCY3rOOHyUHz8RDpX_n5gF_0OiRFuLCIy5VlSwSk/edit?usp=sharing\">MERN Diagram slides</a>. Make sure to add useful comments to describes every aspect of the diagram. </p><p>The diagram should not be an exact replica of what you find on the web and must be explained in your own words (no copy and paste!).</p><h4>Task 3: Share your presentation with your Slack group</h4><p>When you've completed your presentation, share the link on the Slack channel. To get the link, click Share (top right corner of Google Slides) &gt; Get Shareable Link. Note: make sure that the viewer has comment access!</p><p /></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"3599d4e0-c252-4b1f-801a-31e4db81f371\"><ac:parameter ac:name=\"title\">Front end</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Epic 2: Install and configure React</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"wide\" ac:macro-id=\"3654b7d5-2712-4f83-8890-f29924af3f5a\"><ac:rich-text-body><p>React (also known as React.js) runs in a Node.js environment, and is a JavaScript framework for building user interfaces. It is maintained by Facebook and a community of individual developers and companies.</p><h4>Task 1: Install Node.js on your machine if you haven't already</h4><p>To Install Node.js on your local machine, download it <a href=\"https://nodejs.org/en/\">here</a></p><h4>Not familiar with React yet? Take a moment to do a crash course before you go any <ac:inline-comment-marker ac:ref=\"6ebf0a1e-dcd4-4c27-8d41-0bd3bd1cd308\">further.</ac:inline-comment-marker></h4><p>Being the most widely used JS framework, you will find many crash courses on React. If you haven't used it in previous modules, it is advised to carry out one of these tutorials before going any further. Here are some examples, but you can of course find your own.</p><ul><li><p><a href=\"https://medium.freecodecamp.org/a-complete-beginners-guide-to-react-4d490abc349c\">A Complete Beginner&rsquo;s Guide to React</a></p></li><li><p><a href=\"https://reactjs.org/tutorial/tutorial.html#what-is-react\">Tutorial: Intro to React</a></p></li></ul><ac:structured-macro ac:name=\"widget\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"ae99a986-fea7-4ba9-8d22-da309a153422\"><ac:parameter ac:name=\"overlay\">youtube</ac:parameter><ac:parameter ac:name=\"_template\">com/atlassian/confluence/extra/widgetconnector/templates/youtube.vm</ac:parameter><ac:parameter ac:name=\"width\">400px</ac:parameter><ac:parameter ac:name=\"url\"><ri:url ri:value=\"https://www.youtube.com/watch?v=sBws8MSXN7A\" /></ac:parameter><ac:parameter ac:name=\"height\">300px</ac:parameter></ac:structured-macro><h4>Task 2: Create React project, and name it &ldquo;client&rdquo;</h4><p>Create a new repository for your project and open a terminal at the root path of this repository. <br />Tip for Windows users: In your repository hold Shift and right click too have the option to &quot;open a Powershell here&quot; in the context menu.<br />For Mac users, first enable this in settings &gt; keyboard &gt; shortcuts &gt; services, tick the box for &ldquo;New Terminal at Folder&rdquo;. Now, in Finder, you can right click on any folder &gt; services &gt; New terminal at folder.</p><p>run command: <code>npx create-react-app client</code></p><p><strong>Project Structure</strong></p><p>Take some time to analyse the structure of the project created with client and server.</p><table data-layout=\"default\"><tbody><tr><td data-highlight-colour=\"initial\"><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"95a52d1a-fa7f-44cf-afc2-45f47e74a686\"><ac:parameter ac:name=\"language\">text</ac:parameter><ac:plain-text-body><![CDATA[client/\n  README.md\n  node_modules/\n  package.json\n  public/\n    index.html\n    favicon.ico\n  src/\n    App.css\n    App.js\n    App.test.js\n    index.css\n    index.js\n    logo.svg]]></ac:plain-text-body></ac:structured-macro></td></tr></tbody></table><p>For the project to build, these files must exist with exact filenames:</p><p>public/index.html is the page template;<br />src/index.js is the JavaScript entry point.<br />You can delete or rename the other files.</p><p>You may create sub directories inside src. For faster rebuilds, only files inside src are processed by Webpack (packager tool to build and deploy web projects). You need to put any JS and CSS files inside src, otherwise Webpack won&rsquo;t see them.</p><p>Only files inside public can be used from public/index.html. Read instructions below for using assets from JavaScript and HTML.</p><p>You can, however, create more top-level directories. They will not be included in the production build so you can use them for things like documentation.</p><p>If you have Git installed and your project is not part of a larger repository, then a new repository will be initialised, resulting in an additional top-level .git directory.</p><p><strong>Advice</strong>: A popular way to structure a React project is to create a &quot;screen&quot; folder for all higher level components directly called from the entry point and a &quot;component&quot; folder for other components</p><p><strong>Run the client app</strong></p><p>Lets run the react app template with the following command. Make sure your terminal is at the root of the client directory (you might have to change directory using the command &quot;cd client&quot;): <code>npm run</code></p><p>More documentation from the Create React App Github project is located <a href=\"https://github.com/facebook/create-react-app\">here</a>.</p><h4>Task 3: Optional: Add React developer tools to Chrome</h4><p>The developer tools, while not required, provide some automated tasks like tests that will simplify and speed up some of your React tasks.</p><p><a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\">React Developer Tool Chrome extension</a></p></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"92d20fa1-ae8b-42ea-8a22-ef5472d3ce93\"><ac:parameter ac:name=\"title\">Front end</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Epic 3: Confirm your knowledge of React</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"25a83d34-d18f-41f3-964a-0baa2cedceec\"><ac:rich-text-body><p>With React comes a whole new set of concepts and terms that you need to familiarise yourself with. Conduct some research on the following:</p><ul><li><p><strong>Node dependencies</strong></p></li><li><p><strong>node_modules folder and the package.json file</strong></p></li><li><p><strong>Functional and Class-based Components and the difference between them</strong></p></li><li><p><strong>JSX and component rendering</strong></p></li><li><p><strong>Props</strong></p></li><li><p><strong>State</strong></p></li><li><p><strong>Lifecycle Hooks (in particular &quot;componentDidMount)</strong></p></li></ul><p>Some useful links to help you:</p><h4>Components</h4><p><a href=\"https://reactjs.org/docs/components-and-props.html\">Components and Props</a></p><p>Learn about two different types of React components: <a href=\"https://medium.com/@Zwenza/functional-vs-class-components-in-react-231e3fbd7108\">Functional vs Class Components</a></p><h4>JSX</h4><p><a href=\"https://reactjs.org/docs/introducing-jsx.html\">Introduction to JSX</a></p><p><a href=\"https://reactjs.org/docs/rendering-elements.html\">Render a React elemen</a>t</p><p><a href=\"https://daveceddia.com/display-a-list-in-react/\">Render a list (map)</a></p><h4>React state</h4><p>As you know, one of the benefits of React is its ability to manage dynamic, front-end JS objects. Dynamic objects typically have different &ldquo;states&rdquo;&hellip;the most obvious is a clicked vs un-clicked button, but state also includes components like comments and all the data contained in comments (think for a second how much data in one day the comments feature in Facebook generates!). React states are how these dynamic features are managed (for now&hellip;later on we will learn about Redux a tool for managing this management&hellip;yes it&rsquo;s all very &lsquo;meta&rsquo;).</p><p><a href=\"https://reactjs.org/docs/state-and-lifecycle.html\">State and Lifecycle</a></p></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"31c5e642-b25a-4ee1-8ffb-47427741959a\"><ac:parameter ac:name=\"title\">Front end</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Epic 4: Landing Page component</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"f259fd35-4ca1-444e-953a-041a746e3126\"><ac:rich-text-body><h4>Task 1: Define the Landing Page component hierarchy</h4><p>Because components can contain sub-components React pages have a &ldquo;component hierarchy&rdquo;. It&rsquo;s important to understand how the features of a wire frame translate into this hierarchy before you begin to build it.</p><p>Create a small diagram defining the components hierarchy throughout your project. It should answer the following problematic:</p><ul><li><p>What is the functionality (rendering or app logic)</p></li><li><p>What is the parent component?</p></li><li><p>What is the child component (if any)?</p></li><li><p>What are the props</p></li><li><p>Re-usability of the component</p></li></ul><p>This will help you define if it should be functional or class based</p><p>More info: <a href=\"https://reactjs.org/docs/thinking-in-react.html\">Thinking in React</a></p><h4>Task 2: Create a landing page following instructions sent by the UX designer.</h4><ul><li><p>Create a new functional component, Landing.js. If you would like to personalise and use your design skills, you may edit and adapt the logo and page layout to your preferences. Make sure to name the component with a capital &quot;L&quot; as it is a standard that all components are named starting with a capital letter. In general component should be name using Pascal Case standard: <a href=\"https://wprock.fr/en/blog/conventions-nommage-programmation/\">More info</a></p></li><li><p>As we are building a PWA, remember the golden rule to always design mobile first!</p></li><li><p>In order to save time when creating new component, you might want to install an extension to quickly create a template from a keyboard shortcut, such as the following extension for Visual Studio Code:</p></li></ul><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"81\" ac:original-width=\"613\"><ri:attachment ri:filename=\"ext.PNG?version=1&amp;modificationDate=1569249991537&amp;cacheVersion=1&amp;api=v2\" ri:version-at-save=\"1\" /></ac:image><p>You will then just have to type <span style=\"color: rgb(255,86,48);\">rfc</span> to create the template of a react functional component and <span style=\"color: rgb(255,86,48);\">rcc</span> for a class component</p><h4>Task 3: Render the component</h4><p>Import your newly made component into the entry point of react (App.js) and test that it is being rendered correctly.</p><p><strong>Choose a packaged CSS framework!</strong> </p><p>The most efficient way to use CSS frameworks with React is to use one that has been packaged with Node. There are many and you are welcome to search for the one you prefer. Here are our recommended ones.</p><p><a href=\"https://material-ui.com/\">MaterialUI</a> : Material UI is the React implementation of the material design system from Google. It has advanced features like handling of global theme. It can be hard to handle at first so be ready to spend some time on documentation.</p><p><a href=\"https://react-bootstrap.github.io/\">React-Bootstrap</a>: React Bootstrap is the React implementation of the official Bootstrap 4 UI kit. It provides support for all original components with no 3rd party dependency. Easier to implement than MaterialUI.</p></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"ca61bb67-c0a2-405a-b54b-c2939e3940d6\"><ac:parameter ac:name=\"title\">Front end</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Epic 5: Implement Router functionality</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"535ea5ab-8fde-4aa4-b270-9b3b282586c3\"><ac:rich-text-body><h4>Task 1: Install the React Router</h4><p>The React Router Dom is a dependency to manage the &ldquo;routes&rdquo; between your different web pages as well your different React components. Make sure your terminal is at the root of the client folder, then run: <code>npm i react-router-dom</code></p><h4>Task 2: Configure the Router</h4><p>Main utilities provided by this package are the BrowserRouter, Route and Switch. Let's start by importing them in the entry point of our React project: App.js</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"0d2b7b69-3151-47c6-b929-9816c1f3033a\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[import { BrowserRouter, Route, Switch } from 'react-router-dom']]></ac:plain-text-body></ac:structured-macro><p><br /></p><p>We can now wrap the BrowserRouter around our app and define the first route to be used for our Landing component as shown below</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"378938de-58cb-4f43-ba9e-be53a2b0e5db\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport Landing from './screen/Landing';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Switch>\n            <Route exact path='/' component={Landing} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}]]></ac:plain-text-body></ac:structured-macro><p>Run the app from your terminal (npm run) and ensure that you are routing correctly to the Landing component</p><p>For more info: <a href=\"https://codeburst.io/getting-started-with-react-router-5c978f70df91\">react-router</a></p><p /><h4>Task 3: Use the same process to create a class based component called &quot;Cities&quot;  and a route &quot;/cities&quot; that will render it.</h4></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"67a95561-5fb8-476b-a584-c70c0699a001\"><ac:parameter ac:name=\"title\">Front end</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Epic 6: Introduction to React <ac:inline-comment-marker ac:ref=\"e1ee98d4-9e65-4db4-8826-cbfecfb3b69e\">Testing</ac:inline-comment-marker></h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"f3cbf41c-f991-4172-b4e9-9fa2e57ea0de\"><ac:rich-text-body><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"395\" ac:original-width=\"1024\" ac:width=\"442\"><ri:attachment ri:filename=\"react-jest.png\" ri:version-at-save=\"1\" /></ac:image><p>To conduct unit testing in React, we will use a tool called Jest, a Javascript testing framework published by Facebook that requires no configuration. The dependency has already been packaged at the project creation (create-react-app) so there is no need to install it.</p><p>The structure a Test suite is as below.</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"077f2b9e-86c3-4db0-9d3c-d242f49889e2\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[// posible test\ndescribe(\"what is the unit under test?\", () => {\n  it(\"define a test scenario that should be tested\", () => {\n    //write your test here\n  });\n  it(\"define an other test scenario that should be tested\", () => {\n    //write your test here\n  });\n});]]></ac:plain-text-body></ac:structured-macro><p><strong>Task 1: Writing assertion tests</strong></p><p>We start by writing assertion test, these are the different scenario to test: </p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"46fd9b7a-f935-4786-8447-ca5e5ad8f64b\"><ac:plain-text-body><![CDATA[it('renders without crashing');\nit('Landing component should render without crashing');\nit(\"Landing component snapshot with Enzyme\")]]></ac:plain-text-body></ac:structured-macro><p /><p><strong>Task 2: First test</strong></p><p> From your terminal run <code>npm test</code></p><p>You will see in your terminal that a test it running and being passed (hopefully). The testing feature is being reran every time you save.</p><p>In your project structure, a App.test.js has been created in your project and it already contains a test that has been generated automatically:</p><p /><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"1c82cd31-162d-4089-b73c-4fec9048bbed\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[it('renders without crashing', () => {\n  const div = document.createElement('div');\n  ReactDOM.render(<App />, div);\n  ReactDOM.unmountComponentAtNode(div);\n});]]></ac:plain-text-body></ac:structured-macro><p>This tests the general good rendering of the full react App. As you can see here we use the default assertion library ReactDOM to conduct the test.</p><p><strong>Task 3: Component Unit Testing with Enzyme</strong></p><p>The same way we tested our App component we will start by testing the general rendering of our Landing component.</p><p>Lets&rsquo;s start by creating a Landing.test.js file next to the Landing component and add our unit test description.</p><p>However this time to conduct the test, we will use the Enzyme library developed by Airbnb. This package is a set of utilities making React component testing easier. The <code>shallow</code> method, allows unit testing by compiling our React component, but not its children. Allowing easier individual component testing.</p><p>Start by installing it <code>npm i enzyme </code>. In order to use enzyme with react you will also need to <ac:inline-comment-marker ac:ref=\"e25f7f1a-473a-4f91-8d39-1963632117cd\">install this adapter </ac:inline-comment-marker><code><ac:inline-comment-marker ac:ref=\"e25f7f1a-473a-4f91-8d39-1963632117cd\">npm i enzyme-adapter-react-16</ac:inline-comment-marker></code> and create a new file <code>setupTests.js</code> (make sure the name of the file is identical) in which you will instantiate the adapter as follow</p><p /><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"a52c20e0-6716-4146-85c2-f572b6c84164\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[import { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\n\nconfigure({ adapter: new Adapter() });]]></ac:plain-text-body></ac:structured-macro><p>We are now ready to write our test in Landing.test.js using shallow method</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"a47c5c15-9d91-477f-ba89-5598e7996e30\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[import React from 'react';\nimport { shallow } from 'enzyme';\nimport Landing from './Landing';\n\nit('Landing component should render without crashing', () => {\n    shallow(<Landing />);\n});]]></ac:plain-text-body></ac:structured-macro><p>The Adapter is responsible for rendering the UI library (React 16, in this case), and shallow allows us to test the Landing component without having to render its children, allowing for a pure unit test. Run and verify that the test is passed.</p><p><strong>Task 4: Snapshot Testing</strong></p><p>Snapshots are a nifty tool specific to Jest. It captures snapshot artefacts, files that contain rendered HTML snippets from your UI and compares it against a stored artefact of the expected result. When the files don&rsquo;t match, it triggers an error.</p><p>We will here need to add a serialize module to convert Enzyme wrappers to a format compatible with Jest snapshot testing. <code>npm install --save-dev enzyme-to-json</code></p><p>We now need to the module to our Jest config. To do so, edit your <code>package.json</code> file and add the following configuration to the object:</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"b915bfa2-ff87-406d-8138-bc7c7d60493b\"><ac:parameter ac:name=\"language\">json</ac:parameter><ac:plain-text-body><![CDATA[ \"jest\": {\n    \"snapshotSerializers\": [\n      \"enzyme-to-json/serializer\"\n    ]\n  },]]></ac:plain-text-body></ac:structured-macro><p>Add the following snapshot test to your Landing.test.js file and run <code>npm test</code></p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"81ba0212-bd41-43b5-9baf-8e7fad301293\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[import React from 'react';\nimport { shallow } from 'enzyme';\nimport Landing from './Landing';\nimport toJson from 'enzyme-to-json';\n\nit('Landing component should render without crashing', () => {\n    shallow(<Landing />);\n});\n\nit(\"landing component snapshot with Enzyme\", () => {\n    const wrapper = shallow(<Landing />);\n    expect(toJson(wrapper)).toMatchSnapshot();\n});]]></ac:plain-text-body></ac:structured-macro><p>You will notice that Jest has create a new folder <code>__snapshots__</code> containing the HTML image at the time you ran the test. </p><p>Now edit your Landing component&rsquo;s render and re run your tests. You should see the snapshot as obsolete. It is a good way to verify the integrity of your components as you add more features to your app.</p><p>If you want to re generate a new snapshot, press <code>u</code> in the terminal.</p><p><strong>More documentation:</strong></p><p>Basics of  <a href=\"https://www.gistia.com/react-testing-javascript-best-practices/\">React Testing</a></p><p>More about <a href=\"https://www.jonathan-petitcolas.com/2017/10/31/learning-jest-through-practice.html\">Jest and React</a></p></ac:rich-text-body></ac:structured-macro><h2>Extra: Trello Board</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"b1212ef0-0805-4fb8-9768-ef7e03b0415d\"><ac:rich-text-body><ac:structured-macro ac:name=\"trello-board\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"ee09c312-0450-4881-b1c3-83ed6d8821f0\"><ac:parameter ac:name=\"url\">https://trello.com/b/OdYcCJaY/mern-v2-project-sprint-1</ac:parameter></ac:structured-macro></ac:rich-text-body></ac:structured-macro>",
    "conflPageId": "321191968",
    "conflChildrenId": [

    ]
  },
  {
    "title": "V2 MERN Sprint 2",
    "content": "<h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"94a1ffe8-402e-4f24-94eb-0925581f3b26\"><ac:parameter ac:name=\"title\">FRONT END ALT</ac:parameter><ac:parameter ac:name=\"colour\">Green</ac:parameter></ac:structured-macro> Getting data from Ubiqum MERN API</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"f299a7f3-fb45-47e9-9d64-4723e953cf12\"><ac:rich-text-body><h4>Task 1: Install POSTMAN</h4><p>Install POSTMAN on your local machine. You can download it here:</p><ul><li><p><a href=\"http://toolsqa.com/postman/download-and-install-postman/\">http://toolsqa.com/postman/download-and-install-postman/</a></p></li></ul><h4>Task 2: Get familiar with the different endpoints available</h4><ul><li><p>API Endpoints documentation : <a href=\"https://documenter.getpostman.com/view/6286651/SVmyQH9C\">https://documenter.getpostman.com/view/6286651/SVmyQH9C</a></p></li></ul><h4>Task 3: Run in Postman and test that you have the JSON responses</h4><ul><li><p>Click on &quot;Run in Postman&quot; at the top right of the page to import the collection of endpoints in Postman</p></li><li><p>Analyse the different GET endpoints and the way they pass parameters in their queries</p></li></ul></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"c6883dcf-34f2-479f-9268-9a3c60b19871\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  Epic 1: Set up and Configure MongoDB Database</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"4ce5f680-0606-4376-8802-fad6bd04f79c\"><ac:rich-text-body><p><strong>MongoDB</strong> is a general purpose, document-based, distributed database, which means it stores data in JSON-like documents.<br />We will use it as distant repository to store data for our project.</p><h4>Task 1: Create a MongoDB Atlas account</h4><p>Follow the instructions of the first 2 steps to create a MongoDB Atlas:</p><ul><li><p><a href=\"https://cloud.mongodb.com/user#/atlas/register/accountProfile\">https://cloud.mongodb.com/user#/atlas/register/accountProfile</a></p></li></ul><h4>Task 2: Create a new database and user</h4><p>Watch the video until 7:00 min and follow the instructions on how to create a MongoDB database.</p><ac:structured-macro ac:name=\"widget\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"94d50621-a872-4d00-be32-49a74fea7c9a\"><ac:parameter ac:name=\"overlay\">youtube</ac:parameter><ac:parameter ac:name=\"_template\">com/atlassian/confluence/extra/widgetconnector/templates/youtube.vm</ac:parameter><ac:parameter ac:name=\"width\">400px</ac:parameter><ac:parameter ac:name=\"url\"><ri:url ri:value=\"https://www.youtube.com/watch?v=KKyag6t98g8\" /></ac:parameter><ac:parameter ac:name=\"height\">300px</ac:parameter></ac:structured-macro><h4>Task 3: Create a new Collection called &ldquo;cities&rdquo;</h4><p><strong>TIP:</strong> Make sure you use ALL lowercase for collection titles in ATLAS!</p><h4>Task 4: Populate MongoDB &lsquo;cities&rsquo; collection with name, country and image (URL)</h4><p>Manually populate the collection &quot;cities&quot; with 5 cities that you like. No other cities are required at this point.</p><p>Each entry must have a name and country value (ex: name: &quot;Barcelona&quot;, country: &quot;Spain&quot;).</p><p>This resource refers to general conventions and best practises for MongoDB: <a href=\"http://arkusnexus.com/2016/09/12/coding-guidelines-mongodb/\">MongoDB guidelines</a></p></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"8c7645eb-e66f-4d43-9896-f64917073c92\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  Epic 2: Setup Node.js Back End</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"3d0b4000-2716-45a8-a27a-6da06af6c803\"><ac:rich-text-body><p>Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code outside of a browser.</p><p>It allows developers to use JavaScript to write back end server scripts.</p><p><strong>Project structure:</strong> Start by creating a server folder in your project repository alongside the client folder and open a terminal in the server folder.</p><h4>Task 1: Create new Node.js project</h4><p>run command <code>npm init </code>in your terminal and follow the prompts to initialise the project. This will create a <em>package.json</em> file that is used to keep track of your project information and dependencies.</p><p>For more details: <a href=\"https://nodesource.com/blog/your-first-nodejs-package/\">Node Setup</a></p><h4>Task 2: Install and configure the latest version of Express</h4><p>Express.js, or simply Express, is a web application framework for Node.js, and is designed to build web applications and APIs.</p><p>We will use it to build our backend server. Install with command: <code>npm i express</code></p><p><a href=\"https://www.npmjs.com/package/express\">Express Documentation</a></p><h4>Task 3: Install utility Nodemon globally</h4><p>This utility allows automatic reload of the server on saves. To install globally run command: <code>npm i nodemon -g</code></p><p>FYI: <a href=\"https://alligator.io/workflow/nodemon\">Nodemon workflow</a></p><h4>Task 4: Install Mongoose</h4><p>run command : <code>npm i mongoose</code></p><p>Mongoose is a library to help you manage your data structures and interactions in MongoDB. The following resources explain the need for Mongoose as a dependency and refer to the process of connecting the dependency with Mongo DB:</p><p><a href=\"https://www.npmjs.com/package/mongoose\">Mongoose Documentation</a></p><p><a href=\"https://mongoosejs.com/docs/4.x/docs/connections.html\">Connect to Mongo DB</a></p><h4>Task 5: Create server.js file</h4><p>The server.js file is is the most important of the Node.js app. It is the entry point and the file executed by the back end server.</p><p><strong>Step 1</strong>: The first thing to do is to initialise the server and assign it to a port:</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"8f38be11-a2d9-41d2-829e-45a726c8eb06\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[const express = require(\"express\");\nconst app = express();\nconst port = process.env.PORT || 5000;\napp.listen(port, () => {\n  console.log(\"Server is running on \" + port + \"port\");\n});]]></ac:plain-text-body></ac:structured-macro><p>When hosting your application on another service (like Heroku, Nodejitsu, and AWS), your host may independently configure the process.env.PORT variable for you; after all, your script runs in their environment. So process.env.PORT || 5000 means: whatever is in the <strong>env</strong>ironment variable PORT, or 5000 if there's nothing there.</p><p><strong>Step 2:</strong> In package.json, change the main field from index.js to server.js if you haven't already. In this way the entry point for your backend will be the server file. The field &quot;start&quot; should contain &quot;nodemon server.js&quot; in order to run your server in watch mode. Run <code>npm start</code> and verify the output in the terminal.</p><p><strong>Step 3: </strong>Middleware is used to do something before a request is processed (eg: check if a user is authenticated).</p><p>It's good practice to install at least these two middlewares:</p><ul><li><p>body-parser: in POST requests, you need to use bodyParser() if you want the form data to be available in req.body. Here there is an article that explains what body parser does in more detail: <a href=\"https://medium.com/@adamzerner/how-bodyparser-works-247897a93b90\">https://medium.com/@adamzerner/how-bodyparser-works-247897a93b90</a></p></li><li><p>cors: a JavaScript application running in the browser can usually only access HTTP resources on the same domain (origin) that serves it. If you don&rsquo;t set up a CORS policy on the server that allows to serve third party origins, the request will fail. This is there for your security but if you control both the server and the client, then you&rsquo;ll have all the good reasons to allow them to talk to each other. You can find more informations here: <a href=\"https://expressjs.com/en/resources/middleware/cors.html\">https://expressjs.com/en/resources/middleware/cors.html</a></p></li></ul><p>You should insert this code before you start to listen to the port (server.js):</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"b86198c9-bf05-4108-a33f-ca276a6648d4\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[const bodyParser = require(\"body-parser\");\nconst cors = require(\"cors\");\n\napp.use(bodyParser.json());\napp.use(\n  bodyParser.urlencoded({\n    extended: true\n  })\n);\napp.use(cors());]]></ac:plain-text-body></ac:structured-macro><h4>Task 6: Write a Script to run back end and front end servers simultaneously</h4><p><strong>Step 1</strong>: Install concurrently utility: run command : <code>npm i concurrently</code></p><p>FYI : <a href=\" https://www.npmjs.com/package/concurrently\">Concurrently Documentation</a></p><p><strong>Step 2</strong>: In the package.json file of the back-end, write a Script to run back-end and front-end concurrently. Depending on your folder adapt the following script : </p><p /><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"2086f0f5-86b2-43e8-9f55-9ddec29ee388\"><ac:parameter ac:name=\"language\">json</ac:parameter><ac:plain-text-body><![CDATA[\"scripts\": {\n  \"start\": \"concurrently \\\"nodemonserver.js\\\" \\\"cd../client&&npmstart\\\"\"\n    }]]></ac:plain-text-body></ac:structured-macro><p /><h4>Task 7: Setup git &amp; GitHub</h4><p>You might have already notice that the React project initialiser has set up the client as git repository. However this doesn't include the full stack project .</p><p><strong>Step 1</strong>: Place your terminal at the root of the project and run command : <code>git init</code></p><p><strong>Step 2</strong>: Open the <code>.gitignore</code> file and add lines to ignore the node_modules folders by adding the line: <code>node_modules/</code> to ignore all sub folders with named <code>node_modules</code></p><p>Step 3: Make your initial commit and push to a new remote GitHub repository</p><p><strong>What you should have so far:</strong></p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"803\" ac:original-width=\"965\"><ri:attachment ri:filename=\"Capture.PNG\" ri:version-at-save=\"1\" /></ac:image><h4>Task 8: Write first test route</h4><p>Before we start to write our predefined operations, we should start with some sort of uniform folder structure so that following along with these articles is as clear as possible.</p><p><strong>Step 1: </strong>Create a folder in the backend along side the server.js file and name it &ldquo;routes.&rdquo;</p><p><strong>Step 2: </strong>Inside this folder we will code all of our predefined operations related to each collection type in our database. Start by creating a file named cities.js.</p><p><strong>Step 3: </strong>Navigate back to the server.js file and make a call to &ldquo;app.use&rdquo; and pass in two arguments, the api route and the relative path to the file where we will defining our route methods.<br /></p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"cbd7d508-256a-4a45-9ec5-5142b91b4e4b\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[app.use('/cities', require('./routes/cities'))]]></ac:plain-text-body></ac:structured-macro><p><strong>Step 4: </strong>Back in our cities.js file let&rsquo;s write a test route just to make sure everything is connected correctly. At the top of our file, require &ldquo;express&rdquo; by setting it to a variable and create an instance of the express router by setting it to a variable called &ldquo;router.&rdquo;</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"177c62c5-7286-4cf5-8f10-7aaeb684395a\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[const express = require('express')\n\nconst router = express.Router()]]></ac:plain-text-body></ac:structured-macro><p><strong>Step 5: </strong>Write a test route.</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"2a83a55b-d8a9-412b-84ba-383462ae6add\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[router.get('/test', (req, res) => {\n})]]></ac:plain-text-body></ac:structured-macro><p>We pass two arguments into our get method. The path and a callback function with our request object and response object as parameters. Don&rsquo;t forget to export the router</p><p>Since we made the call to app.use() in our server.js file we only need to pass in &ldquo;/test&rdquo; as our first argument here, however this refers to the endpoint &ldquo;localhost:3000/cities/test&rdquo;.</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"b9cfa1f9-5110-4806-b1d9-dbbb8c00efcf\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[res.send({ msg: 'Cities test route.' })\n\n})\nmodule.exports = router]]></ac:plain-text-body></ac:structured-macro><p>In our response object we send back a simple string in JSON format.</p><h4>Task 8: Test route with Postman</h4><p><strong>Step 1: </strong>Make sure our server is running and move into the Postman desktop application.</p><p><strong>Step 2: </strong>Make a &ldquo;GET&rdquo; request to &ldquo;localhost:5000/cities/test&rdquo; and hit send.</p><p><strong>Step 3: </strong>You should receive the message &rdquo;Cities test route&rdquo; in your response body. See Postman screenshot bellow.</p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"335\" ac:original-width=\"1074\"><ri:attachment ri:filename=\"postman.png\" ri:version-at-save=\"2\" /></ac:image></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"18a87fba-61d4-4a9e-88e9-22ca7c7969af\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  Epic 3: Linking the Database to the Back End</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"db6ad59b-4cff-4974-80eb-677b3e348a45\"><ac:rich-text-body><h4>Task 1: Learn about CRUD</h4><p>&quot;CRUD&quot; is an acronym that describes the four operations you can perform in a database: Create, Read, Update, and Delete. This article explains each in detail: <a href=\"https://www.javascriptjanuary.com/blog/basic-routing-http-requests-and-crud-operations-with-express-and-mongodb\">CRUDS</a></p><h4>Task 2: Create configuration file for linking MongoDB to local Express instance</h4><p>You will need to connect MongoDB with Mongoose.</p><p><strong>Step 1</strong>: retrieve your DB credentials on Mongo DB admin page (mongoURI)</p><p><strong>Step 2</strong>: <ac:inline-comment-marker ac:ref=\"3814cd88-5577-46da-ab3e-c541ce9a4c1f\">create a file keys.js to hold the credentials.</ac:inline-comment-marker> This file contains the sensitive information to connect to the DB and should be added in the .gitignore so it doesn't end up on your GitHub!</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"a66cde75-2cbc-4b14-a670-b2e44f96f696\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[module.exports = {\n  mongoURI:\n    \"mongodb+srv://...\",\n};]]></ac:plain-text-body></ac:structured-macro><p><strong>Step 3</strong>: In our server.js, we import our key as follow</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"6d41f6f7-9ce0-407f-a037-c3162a777cd5\"><ac:plain-text-body><![CDATA[const db = require('./keys').mongoURI;]]></ac:plain-text-body></ac:structured-macro><p><strong>Step 4</strong>: Finally, in the same file we connect using mongoose;</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"4653a11b-7e21-4579-bcef-dbc28c579711\"><ac:plain-text-body><![CDATA[const mongoose = require(\"mongoose\");\n\nmongoose.connect(db, { useNewUrlParser: true, useCreateIndex: true })\n    .then(() => console.log('Connection to Mongo DB established'))\n    .catch(err => console.log(err));]]></ac:plain-text-body></ac:structured-macro><p><strong>Step 5</strong>: Run your server and verify the connection</p><p>For more info on mongoose connect function: <a href=\"https://mongoosejs.com/docs/connections.html\">Mongoose Connection</a></p></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"57686e86-df9e-4a03-b4e3-df25b5d77c14\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  Epic 4: Creating the Model</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"9f9da8e6-8d57-4e9d-8578-1e2dad52f0eb\"><ac:rich-text-body><p>Before we start writing routes that manipulate resources, we need to create a model of our resource so that we may ensure some sort of structure for the documents in our database collection.</p><p><strong>Task 1: </strong>Create a &quot;model&quot; folder at the root of our back end and create a cityModel.js file in it.</p><p><strong>Task 2: </strong>At the top of our file import mongoose and set it to a constant.</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"9010a49c-07aa-4ea9-a46c-bb10e4285bec\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[const mongoose = require('mongoose')]]></ac:plain-text-body></ac:structured-macro><p><strong>Task 3: </strong>We then need to create a new instance of a mongoose.Schema and set it to a constant.</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"772e7476-4776-46d1-97c5-d0b3c891b1b8\"><ac:plain-text-body><![CDATA[const citySchema = new mongoose.Schema({]]></ac:plain-text-body></ac:structured-macro><p><strong>Task 4: </strong>Now we define the properties for the citySchema. You can adapt the model to the need of your app</p><p>- name</p><p>- country</p><p>-&hellip;</p><p><strong>Task 5: </strong>Set the values of each property to an object.</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"b3a344b9-4471-4d4a-9049-9e7d720f875a\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[name: {\n    type: String,\n    required: true\n  },\ncountry: ...]]></ac:plain-text-body></ac:structured-macro><p>By setting the value of each property to an object we have a wide range of options when it comes to customising each field.</p><p>The first property of the object is the &ldquo;type&rdquo; which defines which type of data our server can expect to receive when we send our request for the respective property of our schema.</p><p>For instance, if our administrator tries to enter a number into the name field for a city. An error will be thrown and the resource will not be saved to our database.</p><p>The next property of the object is the &ldquo;required&rdquo; field which is a boolean we set to true. This way our admin will also receive an error if they leave an input on our form blank.</p><p><strong>Task 6: </strong>Repeat Step 5 for the country field.</p><p><strong>Task 7</strong>: Export model. Below is an example of a city model that you can adapt.</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"2e24da61-86b2-44d9-89c8-f32483de47d1\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[const citySchema = new mongoose.Schema({\n    name: {\n        type: String,\n        required: true,\n        unique: true\n    },\n    country: {\n        type: String,\n        required: true\n    },\n    img: {\n        type: String,\n    }\n})\n\n//name of module is the singular version (city) of the database name (cities)\nmodule.exports = mongoose.model('city', citySchema)]]></ac:plain-text-body></ac:structured-macro><p>Line 17: We set the export to a variable &lsquo;city&rsquo; and define it as a call to mongoose.Model().</p><p>The first argument is a string of our Schema, this will automatically convert to plural once we post the first city to our database.</p><p>The second argument is the Schema we just defined.</p><h4>Useful documentation:</h4><p>A schema is a skeletal structure that represents an entity within a database.</p><ul><li><p><a href=\"https://medium.freecodecamp.org/introduction-to-mongoose-for-mongodb-d2a7aa593c57\">https://medium.freecodecamp.org/introduction-to-mongoose-for-mongodb-d2a7aa593c57</a></p></li></ul><p>The following resource refers to defining a schema and its pathway from the database</p><ul><li><p><a href=\"https://mongoosejs.com/docs/guide.html\">https://mongoosejs.com/docs/guide.html</a></p></li></ul></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"5f4b0d32-91a8-4bc2-bbc6-6e52fb23f36c\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"9b67bc11-eebc-4fc5-b351-ccdd592216e9\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>    Epic 5: City List GET route and Component</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"ae37cf9a-6090-42bf-a942-8a0d52edfece\"><ac:rich-text-body><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"4082b117-96cc-445c-b260-64e915e70c5b\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  Task 1: Update the route cities.js</h4><p>Let's create a route that allows us to retrieve all the cities from the DB. Use the same process you used to create your test route.</p><p><strong>Step 1</strong> : import our cityModel</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"ce478849-7c7e-40b8-92fc-2e12d75572ee\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[const cityModel = require('../model/cityModel')]]></ac:plain-text-body></ac:structured-macro><p><strong>Step 2:</strong> Create route to retrieve all the cities from the database</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"61b350e6-ee5b-4a92-9b01-4baf05647c16\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[/*get all cities*/\nrouter.get('/all',\n    (req, res) => {\n        cityModel.find({})\n            .then(files => {\n                res.send(files)\n            })\n            .catch(err => console.log(err));\n    });]]></ac:plain-text-body></ac:structured-macro><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"3796d983-15b9-4118-a7e3-8ae3e3e3e6ab\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Task 2: Test retrieval of all cities route through Postman</h4><p>Ensure that your server is running and fetch the URL: <em>http://localhost:5000/cities/all</em> that we have defined in our GET operation.</p><p>Under status Response 200 OK, you should see all the previously created cities from the database. It should look similar to this:</p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"400\" ac:original-width=\"713\"><ri:attachment ri:filename=\"postman2.png\" ri:version-at-save=\"1\" /></ac:image><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"5fa07360-6ca5-4406-adac-6cc0998035d3\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>   Task 3: Create Cities.js Component and fetch Cities List</h4><p>This resource refers to the process of fetching data from MongoDB using a React component:</p><ul><li><p><a href=\"https://code.tutsplus.com/tutorials/fetching-data-in-your-react-application--cms-30670\">https://code.tutsplus.com/tutorials/fetching-data-in-your-react-application--cms-30670</a></p></li></ul><p>NOTE: You should have created a link to the Cities page in Sprint 1 as part of the React Router epic. If you haven&rsquo;t completed this task, please do so now. This resource refers to creating a link within the image that retrieves all the cities data.</p><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"a4b75f5f-b063-4070-ab80-cea029188d9b\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Task 4: Render database results</h4><p>This essential resource from the React documentation explains how to render the data retrieved from the database:</p><ul><li><p><a href=\"https://reactjs.org/docs/lists-and-keys.html\">https://reactjs.org/docs/lists-and-keys.html</a></p></li></ul><p>Your webpage should now look pretty similar to this:</p><ul><li><p><a href=\"https://medium.com/@pshrmn/a-simple-react-router-v4-tutorial-7f23ff27adf\">https://medium.com/@pshrmn/a-simple-react-router-v4-tutorial-7f23ff27adf</a></p></li></ul><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"cfc01b91-458b-4da6-92ea-eda436922e9c\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Task 5: Filter Cities by input field</h4><p>You should create a filter that narrows down your results based on cities that begin with the first letter(s) you type. For instance, if you type &quot;b&quot; you should see Barcelona, Berlin, Bucharest, and Budapest. If you type &quot;bu&quot;, it should now show Budapest and Bucharest. It should ONLY display results beginning with &quot;bu&quot;, not results that simply include &ldquo;bu&rdquo;.</p><p>This resource shows you how to make a filter component:</p><ul><li><p><a href=\"https://medium.com/@AndrewBonner2/filter-results-with-react-f746dc7984c\">https://medium.com/@AndrewBonner2/filter-results-with-react-f746dc7984c</a></p></li></ul></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"85aa54ad-da28-4902-9f6f-038810a1e1f5\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"298ff08f-fa1e-4c8c-9a69-cc923bf83caa\"><ac:parameter ac:name=\"title\">FRONT END ALT</ac:parameter><ac:parameter ac:name=\"colour\">Green</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"60cfee4a-d3f3-4d80-b4ff-4ba8be7fed9b\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"cab8a0b5-d439-4573-a9cc-229de9e06b7b\"><ac:parameter ac:name=\"title\">NICE TO HAVE</ac:parameter><ac:parameter ac:name=\"colour\">Purple</ac:parameter></ac:structured-macro>  Epic 6: City List POST route</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"0f7b1f8b-ce92-4856-bfc7-ae4cd5a51580\"><ac:rich-text-body><p>In the previous Sprint you created a route to get the cities in the database, but what if you wanted to add new ones?</p><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"c72ea6c6-4472-4b46-aee2-4c5cdfb81e1e\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  Task 1: Create POST route in cities.js</h4><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"e6727b94-1023-466c-8c47-1e663ad38135\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[router.post('/', (req, res) => {\n    const newCity = new cityModel({\n        name: req.body.name,\n        country: req.body.country\n    })\n    newCity.save()\n      .then(city => {\n      res.send(city)\n      })\n      .catch(err => {\n      res.status(500).send(\"Server error\")}) \n});]]></ac:plain-text-body></ac:structured-macro><p>You create a new instance of our City model and you save it in a variable. Your model properties will have the values of what you pass in the req.body.</p><p>Finally you call save(). This mongoose method will return a promise. If resolved you can send back the object you created in your response. If rejected you will debug your code.</p><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"7e243cae-0ddc-43cb-8760-4b8d0feb45ad\"><ac:parameter ac:name=\"title\">FRONT END ALT</ac:parameter><ac:parameter ac:name=\"colour\">Green</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"9c023f0c-8732-4ed3-850f-291691a6e7dd\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>    Task 2: Testing on Postman</h4><p>Ensure that your server is running and create a new request. Set the type to POST and the end point to &ldquo;localhost:5000/cities/&rdquo;. </p><p>If you are following the front end alternative, the endpoint is https://mern-ubiqum-v2.herokuapp.com/cities</p><p><strong>Step 1</strong> : In the &ldquo;Headers&rdquo; tab you need to create a key-value pair. Set the key to &ldquo;Content-Type&rdquo; and its value to &ldquo;<em>application/x-www-form-urlencoded</em>&rdquo;.</p><p><strong>Step 2</strong> : Go to the Body tab and select the &ldquo;<em>x-www-form-urlencoded</em>&rdquo; setting. In the key section you create a City object that corresponds with the City Model. Every key must match exactly our mongooseSchema.</p><p><strong>Step 3</strong> : Send the request. In a few seconds you should either receive a successful response or an error message.</p><p>If successful, a new City object should be returned with an <em>_id</em> property, created by MongoDB. You can then move into your MongoDB Atlas account to double check your database to make sure the object was mapped to a document and stored in your cities collection.</p><p>If the request fails you will need to debug either the request you sent or the route method itself.</p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"483\" ac:original-width=\"1065\"><ri:attachment ri:filename=\"postman.png\" ri:version-at-save=\"2\" /></ac:image><p /><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"f60cbad6-ddd2-48ba-bfd9-65353293b359\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  Task 3: Change your code to avoid duplicates and add 10 more cities</h4><p>Now you are able to post new cities. In the previous task you also learned how to (1) find entries in the database and (2) send them to the front-end. Therefore, you should now be able to combine these processes and change your post route: you want to make sure that the user is not able to post the same city twice.</p><p>Tip: Two cities can have the same country, but not the same name! You can retrieve all cities from the database and check if there is one which has the same name as the one you are trying to post. If yes, you should send back an error, if not you should save it in the database.</p><p>Once this is done, use Postman to add 10 more cities of your choosing.</p></ac:rich-text-body></ac:structured-macro><h2>Extra: Trello Board</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"bfee9a84-7add-4a94-92ff-a1bcb26dd5a4\"><ac:rich-text-body><ac:structured-macro ac:name=\"trello-board\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"85a3b9ec-684e-4c8a-becf-3bf78492098c\"><ac:parameter ac:name=\"url\">https://trello.com/b/l4kRslcB/mern-v2-project-sprint-2</ac:parameter></ac:structured-macro></ac:rich-text-body></ac:structured-macro>",
    "conflPageId": "321978430",
    "conflChildrenId": [

    ]
  },
  {
    "title": "V2 MERN Sprint 3",
    "content": "<p>During this sprint, you will apply what you&rsquo;ve learned about the &quot;MERN&quot; stack to build a complex page with a React front-end. While you're not learning anything completely new this week, you will have to combine what you've learned to create a highly interactive page that calls a complex data schema. Optional but highly recommended implementation of a store management tool is suggested (Redux or React context).</p><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"dd1e14db-5ca2-4967-b2a4-bafb4c1f4d29\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"163309a6-2284-4446-9fcf-2df018188a4d\"><ac:parameter ac:name=\"title\">NICE TO HAVE</ac:parameter><ac:parameter ac:name=\"colour\">Purple</ac:parameter></ac:structured-macro> Epic 1: <ac:inline-comment-marker ac:ref=\"d13097c6-a42b-435d-8628-9500cdb7a75f\">Store management</ac:inline-comment-marker> &amp; Redux</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"459d3dec-cf80-499a-a47e-2aaa6b8d7988\"><ac:rich-text-body><p>Store management is an important concept to understand. It is responsible for the organisation and efficient distribution of data throughout our application.</p><p><strong>Store</strong></p><p>The store is just an object that houses and tracks the state of our application. The &ldquo;state&rdquo; is just another word for data that changes over time.</p><p>If you are familiar with the idea of props, then you may have learned the concept of parent components passing pieces of data as &ldquo;props&rdquo; to child components and vice versa. For simple applications, this type of communication between components is completely fine, however as our applications scale up we don&rsquo;t want to be passing data through multiple components in order to render information to our user. Instead we use a <strong>store</strong>. </p><p>Our components will use &ldquo;actions&rdquo; and &ldquo;reducers&quot; to communicate with the Redux store and change our application state. The components that are subscribed to the data being modified will update and re-render when necessary. This happens without needing to pass information through a parent or child component but by simply receiving the updated application state from the store.</p><p>This is not to say that we will stop passing data between components. In fact we will still employ passing data from components heavily throughout this project. Rather we will receive our data from the store in our components that render views and pass pieces of that data as &ldquo;props&rdquo; to child components, whose sole job will be to handle how the particular data is displayed. This has the added benefit of keeping our project more modular and our code cleaner.</p><p><strong>Actions</strong></p><p>Actions allow us to change the application state in the Redux store. People sometimes get intimidated by all these new terms, but it is actually pretty simple.<strong> An action is just an object.</strong> This object is sent to the store and it must have one property: &ldquo;type&rdquo;.</p><p>The type defines what we would like our action to do. It is good to get into the practice of keeping action names short, but also taking semantics into consideration (keep it descriptive). For example let&rsquo;s say we want an action to create a new city in the database, a good name for that action would be CREATE_CITY. It is short but descriptive. Notice that we name the actions in all uppercase letters and spaced with underscores (snake case). This is convention and although using camel case and lowercase letters would not break your code, it is highly recommended you employ this practice.</p><p>Although the only required property of our Action is the &ldquo;<strong>type</strong>&rdquo;, we can send data along inside of a second property. This second property of an action object is commonly called the &ldquo;<strong>payload</strong>.&rdquo; In our application the payload is <em>often </em>going to be the response we receive when making our api calls and querying data from our database. We can access the &ldquo;data&rdquo; from that response and send it along with the Action type to the <strong>Reducer</strong>.</p><p><strong>Reducers or Mutator</strong></p><p>The Actions takes care of describing the data we want to change in our store, but it doesn&rsquo;t actually execute anything. After all, it is only an object. It is the job of the Reducer, which is a function, to, in a sense, read the action type and decide how to update the store based on the type.</p><p>Reducers are &ldquo;pure functions&rdquo;, meaning the output is only determined by the input. Pure functions do not utilise or change anything outside of their scope. The Reducer function takes two arguments: &ldquo;state&rdquo;, and &ldquo;action&rdquo;, and uses this information to determine the new state.</p><p>This all probably sounds very confusing right now. Application state and Redux are hard concepts to grasp just by reading a short article. After you complete the project or even in between some lessons, come back and re-read this to see if it starts to makes more sense.</p><h4>Task 1: Conduct research on Redux and build explanation diagram</h4><p>Redux can be challenging to understand and fully grasp in the beginning. To tackle this, use these resources to help you create your own Redux diagram to better understand the concepts and uses of Redux.</p><ul><li><p>Net Ninja's introduction to Redux: </p></li></ul><ac:structured-macro ac:name=\"widget\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"6b2b8959-fa55-4be8-8a3c-aa4ac15be5ae\"><ac:parameter ac:name=\"overlay\">youtube</ac:parameter><ac:parameter ac:name=\"_template\">com/atlassian/confluence/extra/widgetconnector/templates/youtube.vm</ac:parameter><ac:parameter ac:name=\"width\">400px</ac:parameter><ac:parameter ac:name=\"url\"><ri:url ri:value=\"http://youtube.com/watch?v=HKU24nY8Hsc\" /></ac:parameter><ac:parameter ac:name=\"height\">300px</ac:parameter></ac:structured-macro><ul><li><p><a href=\"https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6\">https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6</a></p></li></ul><h4>Task 2: Add the Redux developer tools</h4><p>Install the plugin Redux Dev Tools on your local machine. You may download it here:</p><ul><li><p><a href=\"https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=es\">https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=es</a></p></li></ul><p>In order to be able to use Redux Dev Tools follow the link to the resource here:</p><ul><li><p><a href=\"https://codeburst.io/redux-devtools-for-dummies-74566c597d7\">https://codeburst.io/redux-devtools-for-dummies-74566c597d7</a></p></li></ul><h4>Task 3: Install Redux inside the client folder with<code> npm i redux react-redux redux-thunk</code></h4><h4>Task 4: Create store folder structure</h4><p>Inside your src folder create a new folder called &quot;store&quot;. This is where you will put all the files related to your store. Inside this folder, create two more, one for reducers and one for actions. In the reducers folder create two files, one called cityReducer.js and one called rootReducer.js.</p><p>In the root reducer you will combine all the different reducers that you will create into one, like this:</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"127c9345-d044-4be0-b71f-2ddd3a04ec9e\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[import { combineReducers } from \"redux\";\nimport citiesReducer from \"./citiesReducer\";\nconst rootReducer = combineReducers({cities: citiesReducer});\nexport default rootReducer;]]></ac:plain-text-body></ac:structured-macro><h4>Task 5: Create Store</h4><p>In order to be able to use the store we need to configure it first.</p><p><strong>Step 1:</strong> Open your index.js file. This is the entry point of our React application, so this is the place where we want to create our store and make it accessible to all components in our application.</p><p><strong>Step 2:</strong> Import these functions into your index.js file:</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"02976c40-2c0b-4b4c-bb52-1cf99e407340\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[import { composeWithDevTools } from \"redux-devtools-extension\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";]]></ac:plain-text-body></ac:structured-macro><p><strong>Step3:</strong> Import your root reducer to your index.js file:</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"61cb7e7e-e544-4d95-a121-78926df00b73\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[import rootReducer from \"./store/reducers/rootReducer\";]]></ac:plain-text-body></ac:structured-macro><p><strong>Step 4:</strong> Configure the store</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"1b878da8-6ee0-4ee7-928e-f4d9815b5821\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[const store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);]]></ac:plain-text-body></ac:structured-macro><p>In this code, you pass your root reducer to the Redux <code>createStore</code> function, which returns a <code>store</code> object. You then pass this object to the <code>react-redux</code> <code>Provider</code> component, which is rendered at the top of our component tree. This ensures that any time we connect to Redux in our app, the store is available to our components.</p><p>With a basic Redux store, you can only do simple synchronous updates by dispatching an action. Middleware extend the stores abilities, and let you write asynchronous (async) logic (eg. fetching information from external sources) that interacts with the store. This is why we need the <code>redux-thunk</code> middleware.</p><h4>Task 6: Create and code cityActions.js</h4><p>Inside your store/actions folder is where you&rsquo;ll store all files related to redux actions, including cityActions.js.</p><p>Now you have completed all the required set up to start coding your actions.</p><p>Actions are payloads of information that send data from your application to your store. They need to have a <em>type </em>property that defines which kind of action you have to perform.</p><p>Here you can find the documentation about basic actions in redux: <a href=\"https://redux.js.org/basics/actions\">https://redux.js.org/basics/actions</a></p><p>And here about async actions, which is what you want to do: <a href=\"https://redux.js.org/advanced/async-actions\">https://redux.js.org/advanced/async-actions</a></p><p>And now, move your AJAX call from the component to the cityAction file.</p><h4>Task 7: Code your cityReducer.js file</h4><p>Reducers specify how the applications state changes in response to actions sent to the store. Here is also where you will define the initial state of your store (in this case the part related to the cities).</p><p>Here you can find the documentation about reducers in redux: <a href=\"https://redux.js.org/basics/reducers\">https://redux.js.org/basics/reducers</a></p><p>Now code your city reducer in order to handle your city actions.</p><h4>Task 8: Dispatch your fetch cities action and subscribe your city component to the store</h4><p>In for our component to access the store, dispatch your fetch cities action and subscribe your city component to the store.</p><p>Your fetch function is now defined as an action, but we still need to dispatch it at a specific point of time in your application.</p><p>This means that your component will have access to the store and will get notified when there are some changes.</p><p>First, we need to import some functions from the react-redux package and the action you want to dispatch:</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"f29a8006-cbc4-40e0-bfae-719c34812a58\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[import { connect } from \"react-redux\";\nimport { <name of your fetch function> } from \"<path to your cityActions.js file>\";]]></ac:plain-text-body></ac:structured-macro><p>Connect will help you to dispatch and subscribe to the store at the same time. It takes two parameters: &ldquo;mapStateToProps&rdquo; and &ldquo;mapDispatchToProps&rdquo;. They are both functions that are mapping your store or your actions and taking or dispatching only the one that you want.</p><p>Here you can find informations about them and how to use them: <a href=\"https://codebrains.io/react-redux-mapstatetoprops-vs-mapdispatchtoprops/\">https://codebrains.io/react-redux-mapstatetoprops-vs-mapdispatchtoprops/</a></p><h4>Task 9: Add a link to the arrow.png in the landing page that matches the wire frame requirements</h4><p>This resource refers to creating a link within the image that retrieves all the cities data.</p><ul><li><p><a href=\"https://medium.com/@pshrmn/a-simple-react-router-v4-tutorial-7f23ff27adf\">https://medium.com/@pshrmn/a-simple-react-router-v4-tutorial-7f23ff27adf</a></p></li></ul><h4>Task 10: Open Redux dev tool and check that the cities are there</h4><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"538\" ac:original-width=\"1150\" ac:width=\"680\"><ri:attachment ri:filename=\"redux-dev-tool.png\" ri:version-at-save=\"1\" /></ac:image><p /></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"05a34902-df83-447e-b0d8-11920bc6d955\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> Epic 2: Setup Itinerary Schema in Database</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"1ee0a30b-477f-4635-b675-88f4c764d69d\"><ac:rich-text-body><h4>Task 1: Define Itinerary schema by creating a file called *Itinerary.js* in the backend folder</h4><h4>Task 2: Determine Collections and DB&rsquo;s needed for MongoDB</h4><p>Note: Be sure to create a separate collection for itineraries.</p><h4>Task 3: Manually populate itineraries in MongoDB Atlas with data from wire frames</h4><p>Hint: each itinerary should have a title, a profile picture(URL), a rating, a duration, a price and some hashtags. Try to think about the most suitable data type for each of these parameters.</p><p>Note: You&rsquo;ll want to make sure that each itinerary is &quot;linked&quot; to a specific city, you will see why later. Think about how you could do that.</p></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"3e654255-b731-47f8-bc72-c842d4816f24\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"c0f40a7f-77dd-4231-b81a-a69043667539\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Epic 3: Retrieve Itineraries for a city</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"3763fc75-b41d-4d35-be03-c19d4a747797\"><ac:rich-text-body><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"f16a6feb-2691-4aa8-8748-afe87617db0f\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  Task 1: Create GET route for Itinerary by specific city</h4><p>Now you need to implement a route that sends back all the itineraries relating to a specific city. In express there is something called &quot;URL parameters&quot; that allows you to extract parameters from the URL. This means that the user could make a request by using a URL that contains a city name or a city id and in the back-end you would be able to read that value.</p><p>This is an example for the city route that you can adapt to get itineraries link to a specific city: </p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"ccc15a8e-b2d7-4532-872c-dbe514ffc6a1\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[//this is code that you have already implemented in your project\nrouter.get('/all',\n    (req, res) => {\n        cityModel.find({})\n            .then(files => {\n                res.send(files)\n            })\n            .catch(err => console.log(err));\n});\n\n//this is how you implement a city route by specific city\nrouter.get('/:name',\n\t(req, res) => {\n  \t\tlet cityRequested = req.params.name;\n  \t\tcityModel.findOne({ name: cityRequested })\n\t\t\t.then(city => {\n\t\t\t\tres.send(city)\n\t\t\t})\n\t\t\t.catch(err => console.log(err));\n});]]></ac:plain-text-body></ac:structured-macro><h4> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"5fc54896-d288-46c4-85d4-1993518c3704\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Task 2: Test it on Postman</h4><p>If you test this route on Postman, this is what you would get:</p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"585\" ac:original-width=\"1147\"><ri:attachment ri:filename=\"get-one-city.png\" ri:version-at-save=\"1\" /></ac:image><p>The mongoose method <code>findOne()</code> is returning the one query object that meets the condition.</p><p>What you want to do is similar to this, but instead of returning one city, you want to return an array of itineraries according to the city name in the URL.</p><p>Here you can find more detailed explanations about mongoose methods and URL parameters:</p><ul><li><p><a href=\"https://mongoosejs.com/docs/api/model.html#model_Model.find\">https://mongoosejs.com/docs/api/model.html#model_Model.find</a></p></li><li><p><a href=\"https://webapplog.com/url-parameters-and-routing-in-express-js/\">https://webapplog.com/url-parameters-and-routing-in-express-js/</a></p></li><li><p><a href=\"https://coursework.vschool.io/express-params-and-query/\">https://coursework.vschool.io/express-params-and-query</a></p></li></ul><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"3f6039ec-d10b-43ca-a205-d7124f6d1355\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Task 3: Create Itinerary.js Component</h4><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"3971dd5e-3525-4eab-a344-1b38ae288dca\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Task 4: Create itineraryReducer.js and create itineraryActions.js</h4><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"409477b8-03de-419a-bb52-613ce996d354\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Task 5: Retrieve itinerary data for each city</h4><p>Hint: When users clicks on a specific city, they should be able to retrieve all the itineraries of this specific city.</p><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"4e243648-c6dc-4b89-a0cc-48b5318dfc72\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Task 6: Open Redux DevTools and verify Itineraries are there exactly like the cities</h4></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"25f684c2-621b-42bc-94e4-17d9987c0b04\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"f34b1495-91b2-4b89-be85-06e75c875ecb\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"0b722f2f-64c7-401a-a95f-70d4628c0c2f\"><ac:parameter ac:name=\"title\">NICE TO HAVE</ac:parameter><ac:parameter ac:name=\"colour\">Purple</ac:parameter></ac:structured-macro> Epic 4: Activities</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"ca124178-b1c4-4c9c-aea5-a5f6bd35bfd4\"><ac:rich-text-body><p>In this Epic you will have to decide on the model you want to apply to an activity object. There are two main ways to think about activities:</p><ul><li><p>Activities are specific to a city and therefore to an itinerary (eg: activities related to Gaudi can be done only in Barcelona);</p></li><li><p>Activities are independent generic entities, which can be done in different cities and for different itineraries (ex: walking in the city center and pub crawling can be done in any city).</p></li></ul><p>It is up to you to decide how you want to see activities. Depending on what you choose, you will have to think about what it makes more sense in the database: should activity be a new independent collection or should it be just a part of the itinerary collection?</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"5356c73b-bbb9-4a95-8e31-570a0001cd89\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  <strong>Task 1: </strong>Based on the considerations made above, adapt your back end to have activities<br />N.B: It's up to you to decide what you want to show in the activity component (just a title, a title and a picture, only a picture?)</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"c931f0d7-b0d6-4b4e-a22d-10db4cb981fd\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <strong>Task 2:</strong> Create activity component<br /><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"2f611b7a-8c51-4c41-be23-f26ddfd5cf25\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <strong>Task 3:</strong> Nest activity component in itinerary component and add the style of the wire frame<br />Per the functional requirements the component should toggle open and closed on clicks</p></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"289aa8b5-1812-46cd-ad18-66017f5463f4\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Epic 5 : Test Drive Development: WIP</h2><h2>Extra: Trello Board</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"73dbb9f7-e638-4199-8554-f7a8cfb4e336\"><ac:rich-text-body><ac:structured-macro ac:name=\"trello-board\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"50f97f77-522c-4c1a-9447-d7d5a5e77b0e\"><ac:parameter ac:name=\"url\">https://trello.com/b/qjQpyoob/mern-v2-project-sprint-3</ac:parameter></ac:structured-macro></ac:rich-text-body></ac:structured-macro>",
    "conflPageId": "323452933",
    "conflChildrenId": [

    ]
  },
  {
    "title": "V2 MERN Sprint 4",
    "content": "<p>In this sprint you will learn how to create new users and login to your app. You will also create a login feature, and render content differently depending on whether or not a user is logged in.</p><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"6c2d84cf-8191-4c2a-b68a-2b33b9069d79\"><ac:parameter ac:name=\"title\">FONT END ALT</ac:parameter><ac:parameter ac:name=\"colour\">Green</ac:parameter></ac:structured-macro>  User management</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"2faa5204-1a14-4d09-89c5-a0bff2018dd0\"><ac:rich-text-body><p>All endpoints : <a href=\"https://documenter.getpostman.com/view/6286651/SVtTz9Pu?version=latest\">https://documenter.getpostman.com/view/6286651/SVtTz9Pu?version=latest</a></p></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"466d5ce8-f03f-42f9-89e9-28049dcdd150\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"1901c4f5-df27-47d7-bef1-b4b5a61460ec\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> Epic 1: Build &lsquo;Create New Account&rsquo; page and functionality</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"a4ada0db-5f1f-4ce2-a371-46e672095224\"><ac:rich-text-body><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"d70dd28c-928b-4f16-89ce-71369186080b\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <strong>Task 1: Build component that allows users to create new account</strong></p><p>Key points and subtasks:</p><ul><li><p>Acts as a parent view for internal elements</p></li><li><p>Router should be able to route here</p></li><li><p>Add link in global nav if it doesn&rsquo;t already exist</p></li></ul><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"0ee213ff-d43d-4ed7-997a-bbb7288c40e0\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <strong>Task 2: Build out the Form</strong></p><p>Build a form that will collect user information.</p><p>It should contain at least the following input fields: email, password, picture (this will be a URL).</p><p>Tip: your component state should store all the input field values and dispatch an action only when the user clicks on submit.</p><p>You can find more about forms in React here: <a href=\"https://reactjs.org/docs/forms.html\">https://reactjs.org/docs/forms.html</a></p><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"5a931187-e432-40ed-9030-da62af847bb9\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  <strong>Task 3: Code Form Submit</strong></h4><p>Key points and subtasks:</p><ul><li><p>Create user POST route, user model and user collection in Mongodb, if it doesn&rsquo;t already exist.</p></li><li><p>Provide error to the user if account exist</p></li><li><p>Encrypt your password with <a href=\"https://www.npmjs.com/package/bcrypt\">bcrypt</a> before saving the new user to the database</p></li></ul><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"271441d5-66b8-4932-b402-bf6635948382\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"13e4e083-b9dc-4fd8-9bd0-5d8508c5fe2c\"><ac:parameter ac:name=\"title\">nice to have</ac:parameter><ac:parameter ac:name=\"colour\">Purple</ac:parameter></ac:structured-macro> <strong>Task 4: Validation</strong></p><p>Server-side validation is a key feature in developing websites. This stops Javascript-savvy users from forcing our server to send or receive information they are not entitled to.</p><p>Through the validation process, we can check on the back-end to ensure certain conditions are met.</p><p>Here you can find the documentation of express-validator, a set of middleware that you can use to validate: <a href=\"https://express-validator.github.io/docs/index.html\">https://express-validator.github.io/docs/index.html</a></p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"ad80eaa3-c516-483f-8221-6b8d139af8d9\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <strong>Task 5: Use Fecth/Axios and Async Await to make a POST request</strong></p><p>The last step is to create actions and a reducer to make a request to your user route.</p><p>Other than fetch, there is an other method to perform AJAX calls called Axios.</p><p>You can read more about Axios here:</p><ul><li><p><a href=\"https://medium.com/@thejasonfile/fetch-vs-axios-js-for-making-http-requests-2b261cdd3af5\">https://medium.com/@thejasonfile/fetch-vs-axios-js-for-making-http-requests-2b261cdd3af5</a></p></li><li><p><a href=\"https://www.npmjs.com/package/axios\">https://www.npmjs.com/package/axios</a></p></li></ul><p>Async Await was introduced to work with ES6 Promises. This feature is essentially &ldquo;syntactical sugar&rdquo; which allows us to write asynchronous code that looks synchronous.</p><p>You can use it with both fetch and axios in order to replace the chain of .then() and .catch().</p><p>Here an example of how to use it with fetch: <a href=\"https://dev.to/shoupn/javascript-fetch-api-and-using-asyncawait-47mp\">https://dev.to/shoupn/javascript-fetch-api-and-using-asyncawait-47mp</a></p></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"c81092b9-0859-4b34-9456-39f998ef4183\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"6eceba7e-7281-4896-9780-a2adda7d14a0\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> Epic 2: Build Login page and functionality</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"8184e863-4766-421a-b011-6820d2d51b5f\"><ac:rich-text-body><p>The process of securing a system involves two very important steps: authentication and authorisation.</p><p>Authentication is about validating your credentials like User Name/User ID and password to verify your identity. The system determines whether you are what you say you are using your credentials.<br />Authorisation, on the other hand, occurs after your identity is successfully authenticated by the system, which ultimately gives you full permission to access the resources such as information, files, databases, funds, locations, and almost anything. In simple terms, authorisation determines your ability to access the system and to what extent.<br />In this Epic you will focus on the first. You will use two libraries called <a href=\"http://www.passportjs.org/\">Passport</a> and <a href=\"https://jwt.io/\">JWT</a> (JSON Web Token). They will help you to securely authenticate users by passing tokens to them which are then passed to the server with each request.</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"ec34f9a0-20c3-466b-adec-a58c47f91808\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <strong>Task 1: Create a Login component</strong></p><p>Key points and subtasks:</p><ul><li><p>Acts as a parent view for internal elements</p></li><li><p>Router should be able to route here</p></li><li><p>Add link in global nav if it doesn&rsquo;t already exist</p></li></ul><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"309a5ed4-cefe-48ae-a7c0-07cf1c177af9\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <strong>Task 2: Create Form Elements</strong></p><p>Key points and subtasks:</p><ul><li><p>Same steps as build create new account</p></li><li><p>Minor validation to ensure both fields have input</p></li></ul><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"a33608d8-bc14-4658-aade-8aeb02fccdb2\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  <strong>Task 3: Install passport and JWT</strong></p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"f1d62c92-5b46-4f45-9887-d9a3f4e33a65\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[npm i passport passport-jwt jsonwebtoken]]></ac:plain-text-body></ac:structured-macro><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"616b2525-b948-4ec8-ae87-57ef47795cfd\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  <strong><ac:inline-comment-marker ac:ref=\"018db4ea-3153-4b02-b436-9aff83275319\">Task 4: Create a login POST route in your user route</ac:inline-comment-marker></strong></p><p><strong>Step 1:</strong> Go to your config file and under the mongoURI key add a new one similar to this: </p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"3a4228ca-2fe3-46ed-8b01-1ad39fa60a9f\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[secretOrKey: \"secret\"]]></ac:plain-text-body></ac:structured-macro><p>This is a secret key that JWT will use to encrypt the token (it doesn&rsquo;t have to be called secret, then name is up to you). When you receive a JWT from the client, you can verify that JWT with this that secret key.</p><p><strong>Step 2:</strong></p><ul><li><p>import your secret key <code>const key = require(&quot;&lt;path to your config file&gt;&quot;);</code></p></li><li><p>import the jwt module: <code>const&nbsp;jwt&nbsp;=&nbsp;require(&quot;jsonwebtoken&quot;);</code></p></li><li><p>create POST login route</p></li><li><p>provide error if email does not correspond with email of one user in the database</p></li><li><p>if user exists, compare passwords with bycript <code>compare</code> function</p></li><li><p>if password corresponds, create JWT payload, sign token and send it back like so:</p></li></ul><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"32a32d9c-d9e4-449d-9097-cc393ad8f346\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[const payload = {\n            id: user.id,\n            username: user.username,\n            avatarPicture: user.avatarPicture\n};\nconst options = {expiresIn: 2592000};\njwt.sign(\n  payload,\n  key.secretOrKey,\n  options,\n  (err, token) => {\n    if(err){\n      res.json({\n        success: false,\n        token: \"There was an error\"\n      });\n    }else {\n      res.json({\n        success: true,\n        token: token\n      });\n    }\n  }\n);]]></ac:plain-text-body></ac:structured-macro><p>The sign method takes four parameters: </p><ul><li><p>payload: is a series of informations that will be used to create the token (therefore you can decode this token afterwards and access these values)</p></li><li><p>the secret key (explained above)</p></li><li><p>options: expiration time is seconds</p></li><li><p>function: if there is not an error you can send the token to the front-end.</p></li></ul><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"4da0d0bd-5ddb-4637-b402-71d31b837abd\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <strong>Task 5:</strong> <strong>Test it with Postman</strong></p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"977\" ac:original-width=\"1913\"><ri:attachment ri:filename=\"login.jpg\" ri:version-at-save=\"2\" /></ac:image><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"7f0d4dc5-3e25-4d22-982d-21ae19ebbb30\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> <strong>Task 6: Initialise Passport</strong></p><p><strong>Step 1:</strong> Create a file called passport.js: here is where you will declare you passport strategies. Leave it empty for now.</p><p><strong>Step 2:</strong> Go to your server.js file and import passport. </p><p><strong>Step 3:</strong> Set <ac:inline-comment-marker ac:ref=\"f45a5185-617e-4510-b726-fbb1f23aa60d\">up and configure passport middleware</ac:inline-comment-marker>:</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"da608cb4-8e84-4ca8-88dc-f76806fa73e4\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[//passport middleware\napp.use(passport.initialize());\n//passport configuration\nrequire(\"<path to your passport.js file>\");]]></ac:plain-text-body></ac:structured-macro><p>N.B: it is normal that your server will throw an error if you run the code before you have written a passport strategy</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"c276b1fb-1161-4b71-ab02-e6a9d72b043a\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> <strong>Task 7: Write a passport strategy</strong></p><p>Passport has a lot of different modules that help authenticate users in different ways and they are called strategies. Here, you will use a strategy that will allow you to authenticate users by using a JWT.</p><p><strong>Step 1: </strong>Go to the passport.js file and import your secret key and some other modules:</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"812ee536-6504-4f33-b800-6725f3ac8b90\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[const JwtStrategy = require(\"passport-jwt\").Strategy;\nconst ExtractJwt = require(\"passport-jwt\").ExtractJwt;\nconst mongoose = require(\"mongoose\");\nconst User = mongoose.model(\"user\");\nconst key = require(\"<path to your config file>\");]]></ac:plain-text-body></ac:structured-macro><p>The JwtStrategy needs two parameters: the first is an object literal containing options to control how the token is extracted from the request or verified and the second is a function.</p><p>Let&rsquo;s c<ac:inline-comment-marker ac:ref=\"7e79f295-b808-40a1-b464-85e1692f0a6e\">reate the options obj</ac:inline-comment-marker>ect:</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"df83b3fd-fee4-45af-90a4-e2cfd54d65fc\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[const opts = {};\nopts.jwtFromRequest = ExtractJwt.fromAuthHeaderAsBearerToken();\nopts.secretOrKey= key.secretOrKey;]]></ac:plain-text-body></ac:structured-macro><p>And now the JWT strategy:</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"f75e5590-5dba-4141-a501-920cf36d89ea\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[module.exports = passport.use(\n    new JwtStrategy(opts, (jwt_payload, done) => {\n        User.findById(jwt_payload.id)\n        .then(user => {\n          if (user) {\n            return done(null, user);\n          }\n          return done(null, false);\n        })\n        .catch(err => console.log(err));\n    })\n  );\n]]></ac:plain-text-body></ac:structured-macro><p>When you create a JWT for a user, the encrypted string contains all of the information about this user. Therefore if we decode the token, we are able to access the user id. Accessing the decoded token, we can now check if there is a user in your database with the same id. If there is, return that user.</p><p>Therefore, if now you create a GET or POST request that needs authentication, you can use the passport JWT Strategy. Let&rsquo;s write a test get route that will check if you are logged in before sending back the information about your profile:</p><p /><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"a7f0f881-9337-4d4a-8309-4cefb6de5a2c\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[router.get(\n  \"/\",\n  passport.authenticate(\"jwt\", { session: false }),\n  (req, res) => {\n    userModel\n      .findOne({ _id: req.user.id })\n      .then(user => {\n        res.json(user);\n      })\n      .catch(err => res.status(404).json({ error: \"User does not exist!\" }));\n  }\n);]]></ac:plain-text-body></ac:structured-macro><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"5289ca49-32bf-4167-9ebe-8da16a61c892\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <strong>Task 8: Test it with Postman</strong></p><p>In order to test this, go to Postman and make a get request like so:</p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"981\" ac:original-width=\"1917\"><ri:attachment ri:filename=\"current user.jpg\" ri:version-at-save=\"4\" /></ac:image><p>It is important that you take the token from the previous login test and put it in the Header with &ldquo;bearer&ldquo; in front.</p></ac:rich-text-body></ac:structured-macro><h2> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"8cce01ac-749b-4ee2-890a-4897d0fba0b8\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"ebf19d05-bdd9-440a-bdce-ed2896484df3\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> Epic 3: Add login with Google</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"c896c1ed-a0dc-4ccf-ba37-295e7cc1b383\"><ac:rich-text-body><p>In this epic you will add the possibility for the user to login with an external provider, in this case Google. You will use an other passport strategy for that.</p><p><a href=\"https://docs.google.com/presentation/d/1gmGs5Do--rVs00FS0kPbi2lVmg-4mTgcnTQei-gOUCw/edit#slide=id.p\">Here</a> you can find a simple schema of the process you&rsquo;ll have to go through.</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"0f4d5bfb-8c97-46f3-9dd8-745d8b3e21b4\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro> <strong>Task 1: Create a button pointing to a custom route - point 1 of the schema</strong></p><p>N.B: this is not an Ajax request, but a simple link to a route.</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"ac88dc8b-e3c5-4047-a77c-610564f35838\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> <strong>Task 2: Create that custom route (it will be a GET request) - point 2 of the schema</strong></p><p>Don&rsquo;t worry about the code inside for now.</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"349803e9-fb8d-4478-81d7-799898a823a6\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> <strong>Task 3: Create redirected custom route (GET) - point 4 of the schema</strong></p><p>Don&rsquo;t worry about the code inside for now.</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"2d185114-c39f-45a5-9afa-0e393d833649\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> <strong>Task 4: Create a project on the Google Cloud Platform</strong></p><p>After you have created a new project go to the OAuth Consent Screen (it&rsquo;s easier if you type it in the search bar), and give a name to your application.</p><p>Afterwards, go to the Credential tab and click on Create Credentials. Select ID client OAuth. Select type of application (remember it&rsquo;s a PWA- progressive web app). </p><p>Under the Allowed JavaScript origins you should put from which URI you will connect with Google (the route you have created in step 2) and under the Authorised redirected URI you should put the one that you want to redirect to after the Google consent screen (point 4 of the schema).</p><p>Once the credentials are created, save them in your config file (remember that you don&rsquo;t want to push them on GitHub!)</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"285d6d4a-5183-4df6-92c1-733e7bab302c\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  <strong>Task 5: Write a google passport strategy</strong></p><p><strong>Step 1: </strong><code>npm i passport-google-oauth20</code></p><p><strong>Step 2:  </strong>Follow the instruction in <a href=\"http://www.passportjs.org/packages/passport-google-oauth20/\">this document</a> to create your google strategy under the JwtStrategy.</p><p>Remember to check if the user exists in the same way you did for the previous strategy.</p><p>If it doesn&rsquo;t exists, create an entry in the database and return it in the <code>done</code> function (point 5 and 6 of the schema).</p><p><strong><span style=\"color: rgb(255,86,48);\">N.B: When a user registers using google, there is no password required. Think about how to solve this in your user model.</span></strong></p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"3b1ec1cb-450e-4beb-9deb-eb2261de00ad\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> <strong>Task 6: Write code for the user routes</strong></p><p><strong>Step 1:</strong> Write the code for the route which you will hit once the user clicks on the Google+ button (follow the passport document).</p><p><strong>Step 2:</strong> Write the code for the redirected route.</p><p><strong><span style=\"color: rgb(255,86,48);\">TIP</span></strong>: Here is where you want to create the JWT (point 6 of the schema).</p><p><strong><span style=\"color: rgb(255,86,48);\">TIP</span></strong>: Since the google passport strategy has to redirect you back to a page in the front-end, think about a way to send the token to the client through the URL.</p></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"cff448be-c847-484d-ae33-a315ad5b7c9b\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"d50ff127-1cf4-4ab2-936e-c78b824db361\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> Epic 4: Store the token and use it for authorised routes</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"710f699a-77cf-45ad-bfa8-c666f038162d\"><ac:rich-text-body><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"f9d6f964-2033-47e7-856d-6fa6aefc584f\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <strong>Task 1: Create register action and reducer</strong></p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"3ee53387-59fa-4125-8166-78931795533c\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro> <strong>Task 2:</strong> <strong>Create login action and reducer to and store your token</strong></p><p>Key points:</p><ul><li><p>store token in the local storage</p></li><li><p>when refreshing pages, check if the token exists</p></li><li><p>use the decoded token to show avatar picture and/or username of the logged-in user (<code>npm i jwt-decode</code>) and use redux to store it in central store</p></li></ul><p><strong><span style=\"color: rgb(255,86,48);\">TIP</span></strong>: If you are using a node package for fetch or axios you could think about a way to include the token in the header for every request if the a user is logged in.</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"7d16c92e-69d0-4b1d-9f9b-eb3fb676219a\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <strong>Task 3: Create logout action and reducer</strong></p><p><strong><span style=\"color: rgb(255,86,48);\">TIP: </span></strong>To logout, you need to clean the local storage and the user object in the central store</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"42695cd3-0bdf-466c-8a9a-3ba830e33c75\"><ac:parameter ac:name=\"title\">nice to have</ac:parameter><ac:parameter ac:name=\"colour\">Purple</ac:parameter></ac:structured-macro>  <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"9444c871-3f19-490b-b7a7-5bd97cc9d254\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> <strong>Task 4: Implement logout route </strong></p><p>This process should logout a user from both client and server side. This is simple on the client side, while on the server side it's a bit more complicated (<a href=\"https://medium.com/devgorilla/how-to-log-out-when-using-jwt-a8c7823e8a6\">you can read why here</a>). However, differently from the article, you could think about storing in the user collection a parameter that it is true or false depending on whether or not the user is logged in, and when checking for the JWT, you could check for this parameter as well.</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"df793bfa-8793-48d9-bb6c-3ca2f7b15b98\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  <strong>Task 5: Lock all the POST routes that you have to allow only logged-in users to use them</strong></p></ac:rich-text-body></ac:structured-macro><h2>Extra: Trello Board</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"a242b282-e3d1-4635-8cf2-02b31c8b073e\"><ac:rich-text-body><ac:structured-macro ac:name=\"trello-board\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"f5583de8-5390-46b4-8b4d-763f35a22b14\"><ac:parameter ac:name=\"url\">https://trello.com/b/BYBChZNv/mern-v2-project-sprint-4</ac:parameter></ac:structured-macro></ac:rich-text-body></ac:structured-macro>",
    "conflPageId": "324403201",
    "conflChildrenId": [

    ]
  },
  {
    "title": "JAVA Course",
    "content": "<p />",
    "conflPageId": "344064019",
    "conflChildrenId": [
      "260931585",
      "282263572",
      "524352"
    ]
  },
  {
    "title": "External Side Projects",
    "content": "<p />",
    "conflPageId": "344162305",
    "conflChildrenId": [
      "312246281"
    ]
  },
  {
    "title": "V2 MERN Sprint 5",
    "content": "<p>In this sprint you will have to manage users' favourite itineraries and comments.</p><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"c37d901d-77b6-4b94-97dd-09e5a08192f6\"><ac:parameter ac:name=\"title\">back end</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"8a59f96c-2dfb-496e-852b-7ed1b0983aed\"><ac:parameter ac:name=\"title\">front end</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro> Epic 1: Save itineraries as favourites</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"d44ed6bc-e4b8-4ee4-a3f6-bb6ee93bb5bc\"><ac:rich-text-body><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"50fbebc3-2f65-4957-b950-a54b4dece78b\"><ac:parameter ac:name=\"title\">back end</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  <strong>Task 1: Update your back-end to support users favourites.</strong></p><p>You will need to update your user model and add a get and post route for the favourites.</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"d531fc3c-da7f-437e-bb08-9f046c80944d\"><ac:parameter ac:name=\"title\">front end</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <strong>Task 2: Update your front-end to allow users to like itineraries.</strong></p><p>Create a button that changes colour when the itinerary has been liked by the user (like on Instagram).</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"76b8a72f-59e3-4bc3-8976-b81bfbca9791\"><ac:parameter ac:name=\"title\">front end</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <strong>Task 3: Create logic for favourites itineraries</strong></p><p>You need to think that by clicking the favourite button you will add this itinerary to the user&rsquo;s favourites. As a consequence the button will change colour. Once you refresh the page, the button still has to show the correct colour (eg: red if liked, white if not liked). When a liked itinerary gets clicked again, this should delete the itinerary from the user&rsquo;s favourites and the button should return to its original state.</p></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"8048def3-22e1-4ba5-8a55-7013e2977aa7\"><ac:parameter ac:name=\"title\">back end</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"0d0260bb-6496-4b0d-a91e-2f49957c7b22\"><ac:parameter ac:name=\"title\">front end</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro> Epic 2: Allow users to create, read, update and delete comments on itineraries</h2><p>In this epic you will focus on the CRUD operations. Create and read is something you have used before. Beside them, now you will have to use the other two as well.</p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"bce73fea-f588-4f12-a919-451883c82046\"><ac:rich-text-body><p><strong>Task 1: Update both front-end and back-end to allow users to write and read comments.</strong></p><p><strong>Task 2: Once the Create and Read operations are working, investigate the Update and Delete actions and implement them in your project.</strong></p></ac:rich-text-body></ac:structured-macro><p />",
    "conflPageId": "346816530",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Hello World",
    "content": "<ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"2045\" ac:original-width=\"6000\" ac:width=\"442\"><ri:attachment ri:filename=\"ubiqum.png\" ri:version-at-save=\"2\" /></ac:image><p /><h2 style=\"text-align: center;\">On behalf of the<span style=\"color: rgb(255,86,48);\"> Ubiqum</span> team, we welcome you to the world of web development.</h2><p /><p style=\"text-align: center;\"><ac:emoticon ac:name=\"blue-star\" ac:emoji-shortname=\":compass:\" ac:emoji-id=\"1f9ed\" ac:emoji-fallback=\"🧭\" /> </p><p style=\"text-align: center;\">During the next 3 months if you have chosen our <strong><span style=\"color: rgb(255,86,48);\">MERN</span></strong> course and 5 months if you have picked <strong><span style=\"color: rgb(255,86,48);\">JAVA</span></strong>, we will guide you through the journey into becoming a developer.</p><p style=\"text-align: center;\">This won&rsquo;t be an easy task but through commitment and dedication to the work we ensure you that our immersive courses will give you all the tools necessary to find your first developer job.</p><p style=\"text-align: center;\"><ac:emoticon ac:name=\"blue-star\" ac:emoji-shortname=\":books:\" ac:emoji-id=\"1f4da\" ac:emoji-fallback=\"📚\" /> </p><p style=\"text-align: center;\">The <strong><span style=\"color: rgb(255,86,48);\">Confluence </span></strong>platform will guide you through the different tasks that are expected from you in the different projects. It will not  however provide you the solutions to your problems.</p><p style=\"text-align: center;\">Indeed, our story centered methodology is a project-based, <strong><span style=\"color: rgb(255,86,48);\">learn-by-doing</span></strong> approach. This means you will have to research on your own solutions to each problem by your own means. </p><p style=\"text-align: center;\">This might seem scary at first but is necessary in obtaining the <strong><span style=\"color: rgb(255,86,48);\">coding logic </span></strong>that is fundamental to become a developer.</p><p style=\"text-align: center;\"><ac:emoticon ac:name=\"blue-star\" ac:emoji-shortname=\":busts_in_silhouette:\" ac:emoji-id=\"1f465\" ac:emoji-fallback=\"👥\" /> </p><p style=\"text-align: center;\">It can however happen that you are not able to find the answers you need. </p><p style=\"text-align: center;\">You will then have the possibility to book an appointment with one of your <strong><span style=\"color: rgb(255,86,48);\">mentor </span></strong>whom will guide you through materials and solutions to explore. </p><p style=\"text-align: center;\">To do so you will use the platform <strong><span style=\"color: rgb(255,86,48);\">Calendlys </span></strong>where it is important that you explain your issue and how you tried to solve it. (find mentors Calendly&rsquo;s <a href=\"https://ubiqum.atlassian.net/wiki/spaces/STUDENTS/pages/226328603/Calendlys\">here</a>)</p><p style=\"text-align: center;\"><ac:emoticon ac:name=\"blue-star\" ac:emoji-shortname=\":chart_with_upwards_trend:\" ac:emoji-id=\"1f4c8\" ac:emoji-fallback=\"📈\" /> </p><p style=\"text-align: center;\">Each of the project development structure is adapted from the widely used Agile Scrum methodology, today present in most IT companies.</p><p style=\"text-align: center;\">Hence, you will work on different features in small increments of 5 days called <strong><span style=\"color: rgb(255,86,48);\">sprints</span></strong><span style=\"color: rgb(255,86,48);\">. </span>Project are between 1 and 8 sprints.</p><p style=\"text-align: center;\">You will use <strong><span style=\"color: rgb(255,86,48);\">Trello </span></strong>management tool to track a backlog of features in development.</p><p style=\"text-align: center;\"><ac:emoticon ac:name=\"blue-star\" ac:emoji-shortname=\":calendar_spiral:\" ac:emoji-id=\"1f5d3\" ac:emoji-fallback=\"🗓\" /> </p><p style=\"text-align: center;\">Your day will start with a daily 10 min <strong><span style=\"color: rgb(255,86,48);\">stand up meeting</span></strong> where each students will talk about his work from the previous day with mentors and identify potential blockers that were encountered before briefly explaining the plan of action for the day.</p><p style=\"text-align: center;\">Every now and then, you will also have <strong><span style=\"color: rgb(255,86,48);\">spikes. </span></strong>These are<strong><span style=\"color: rgb(255,86,48);\"> </span></strong>short and dynamic presentations led by mentors to clarify known difficulties or blockers identified during stand ups.</p><p style=\"text-align: center;\"><ac:emoticon ac:name=\"blue-star\" ac:emoji-shortname=\":man_office_worker:\" ac:emoji-id=\"1f468-200d-1f4bc\" ac:emoji-fallback=\"👨&zwj;💼\" /> </p><p style=\"text-align: center;\">At the end of every <strong><span style=\"color: rgb(255,86,48);\">project</span></strong>, you will present in front of the group your project as if it were a presentation for a client.</p><p style=\"text-align: center;\">Then mentors will give you feedback and <strong><span style=\"color: rgb(255,86,48);\">code review.</span></strong></p><p style=\"text-align: center;\"><ac:emoticon ac:name=\"blue-star\" ac:emoji-shortname=\":office:\" ac:emoji-id=\"1f3e2\" ac:emoji-fallback=\"🏢\" /> </p><p style=\"text-align: center;\">Some of the projects are accompanied by fictional characters acting as your colleagues and simulate a real <strong><span style=\"color: rgb(255,86,48);\">work environment</span></strong>. </p><p style=\"text-align: center;\">This role playing can give you a good idea of what the life of developers can be.</p><p style=\"text-align: center;\">The content from the emails can also be found in confluence.</p><p style=\"text-align: center;\"><ac:emoticon ac:name=\"blue-star\" ac:emoji-shortname=\":curly_loop:\" ac:emoji-id=\"27b0\" ac:emoji-fallback=\"➰\" /> </p><p style=\"text-align: center;\"><strong><span style=\"color: rgb(255,86,48);\">Ubiqum </span></strong>staff is here for you, so come to us for any issue you might encounter</p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"400\" ac:original-width=\"400\" ac:width=\"102\"><ri:attachment ri:filename=\"logo-ubiqum-round-color-white.jpg\" ri:version-at-save=\"2\" /></ac:image><p /><h1 style=\"text-align: center;\"><span style=\"color: rgb(255,86,48);\">Happy Coding</span></h1>",
    "conflPageId": "354844755",
    "conflChildrenId": [
      "226328603",
      "221413398",
      "228524142",
      "238125072",
      "320045084",
      "344064019",
      "298090497",
      "294354945",
      "344162305"
    ]
  },
  {
    "title": "Web Development Students Home",
    "content": "<ac:layout><ac:layout-section ac:type=\"single\"><ac:layout-cell><p class=\"auto-cursor-target\">Welcome to the Student's Space!</p><p><br /></p></ac:layout-cell></ac:layout-section><ac:layout-section ac:type=\"two_equal\"><ac:layout-cell><h2>Recent space activity</h2><p><ac:structured-macro ac:name=\"recently-updated\" ac:schema-version=\"1\" ac:macro-id=\"a615744d-28fc-4e13-ab88-945d556ea1db\"><ac:parameter ac:name=\"types\">page, comment, blogpost</ac:parameter><ac:parameter ac:name=\"max\">5</ac:parameter><ac:parameter ac:name=\"hideHeading\">true</ac:parameter><ac:parameter ac:name=\"theme\">social</ac:parameter></ac:structured-macro></p></ac:layout-cell><ac:layout-cell><h2>Space contributors</h2><p><ac:structured-macro ac:name=\"contributors\" ac:schema-version=\"1\" ac:macro-id=\"9352e9d9-ecc8-4570-8bb7-89f78cf808b4\"><ac:parameter ac:name=\"mode\">list</ac:parameter><ac:parameter ac:name=\"scope\">descendants</ac:parameter><ac:parameter ac:name=\"limit\">5</ac:parameter><ac:parameter ac:name=\"showLastTime\">true</ac:parameter><ac:parameter ac:name=\"order\">update</ac:parameter></ac:structured-macro></p></ac:layout-cell></ac:layout-section><ac:layout-section ac:type=\"single\"><ac:layout-cell><p><br /></p></ac:layout-cell></ac:layout-section></ac:layout>",
    "conflPageId": "426041",
    "conflChildrenId": [

    ]
  },
  {
    "title": "JAVA Battleship Project",
    "content": "<p><a href=\"https://codeacademy.ubiqum.com/mc/poa?productID=5708&amp;taskID=3009#introduction\">INTRODUCTION</a><br /><span style=\"color: rgb(35,31,32);\">You've been asked to build a web-based multi-player game application. Your first task is to implement and display a database of players. The structure of the web application is more than just HTML pages. There needs to be</span></p><ul><li><span style=\"color: rgb(35,31,32);\">a database table with player data</span></li><li><span style=\"color: rgb(35,31,32);\">a web service that can send a list of those players, in JSON form, in response to the URL&nbsp;<strong>/players</strong></span></li><li><span style=\"color: rgb(35,31,32);\">a web page that can display&nbsp;the desired list in a readable way, using JavaScript to get the data and construct the HTML</span></li></ul><p><span style=\"color: rgb(35,31,32);\"><strong>DON'T PANIC!</strong>&nbsp;There's are many things mentioned in the email that are probably completely mysterious to you. That's normal, especially at the start of a new project. It's not expected you know or understand all these terms and concepts. This is where you get to learn them.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Java</span></h2><p><span style=\"color: rgb(35,31,32);\">Java is an object-oriented programming language used for many purposes, but especially useful for creating the back end for web applications. The email refers to a number of Java concepts.&nbsp;<strong>Classes</strong>&nbsp;are a way to&nbsp;organize Java code. Classes specify how and where data should be stored. Classes also define&nbsp;<strong>methods</strong>&nbsp;for manipulating that data. When a Java program runs, it creates&nbsp;<strong>instances</strong>&nbsp;of those classes to hold particular data values. You'll be learning a lot about Java in each task. The&nbsp;<strong>Resources</strong>&nbsp;tab above has links to get you started.</span></p><h2><span style=\"color: rgb(153,153,153);\">Java Development Kit (JDK)</span></h2><p><span style=\"color: rgb(35,31,32);\">The Java Development Kit, also sometimes called the Java System Development Kit (SDK), refers to a set of programs that&nbsp;compile and run Java code. There are quite a few programs but here are the most important:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">The Java Runtime Engine (JRE) &ndash; this is the program that executes compiled Java programs.</span><ul><li><span style=\"color: rgb(35,31,32);\">The JRE&nbsp;must be installed to run Java.</span></li><li><span style=\"color: rgb(35,31,32);\">Most systems used to install the JRE by default, because web browsers used it. Because of security issues, this is no longer true.</span></li><li><span style=\"color: rgb(35,31,32);\">If you install the JDK, you may end up&nbsp;with&nbsp;two copies of the JRE, one installed on its own for browsers, and one installed by the JDK. This is not a problem.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">The Java Compiler &ndash; this is a program that compiles Java source code into compiled&nbsp;Java.</span><ul><li><span style=\"color: rgb(35,31,32);\">This is only installed if you have the JDK.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">The Java Archive tool &ndash; this is a program that assembles compiled Java files into a runnable program, called a JAR file.</span></li></ul><h2><span style=\"color: rgb(153,153,153);\">Integrated Development Environment (IDE)</span></h2><p><span style=\"color: rgb(35,31,32);\">The JDK does not include an editor. You can edit Java source code with any plain text editor, even&nbsp;<strong>Notepad</strong>, though this is not recommended. At the very least you want a programmer editor. There are many lists of such editors, e.g.,&nbsp;</span><a href=\"https://www.elegantthemes.com/blog/resources/the-11-best-code-editors-available-in-2015\"><span style=\"color: rgb(51,122,183);\">this one</span></a><span style=\"color: rgb(35,31,32);\">.</span><br /><span style=\"color: rgb(35,31,32);\">For Java, it's more common to install an integrated development environment (IDE) that includes</span></p><ul><li><span style=\"color: rgb(35,31,32);\">a text editor, with syntax coloring and indentation customized for Java code</span></li><li><span style=\"color: rgb(35,31,32);\">a file management system, so you can open and edit many files in a project at once</span></li><li><span style=\"color: rgb(35,31,32);\">compile and run tools, so it takes just one button click to save files, run the compiler, run the JAR tool, then run the final program</span></li><li><span style=\"color: rgb(35,31,32);\">debugging tools so that you can tell Java to pause execution at certain points in the code so that you can inspect the values of variables</span></li></ul><p><a href=\"http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/keplersr1\"><span style=\"color: rgb(51,122,183);\">Eclipse</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;and&nbsp;</span><a href=\"https://netbeans.org/features/java/\"><span style=\"color: rgb(51,122,183);\">Netbeans</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;are two popular, mature, free Java IDEs. Increasingly popular and very similar to Eclipse and Netbeans is&nbsp;</span><a href=\"https://www.jetbrains.com/idea/\"><span style=\"color: rgb(51,122,183);\">Intellij IDEA</span></a><span style=\"color: rgb(35,31,32);\">. Google selected Intellij IDEA to be the basis of&nbsp;</span><a href=\"http://developer.android.com/tools/studio/index.html\"><span style=\"color: rgb(51,122,183);\">Android Studio</span></a><span style=\"color: rgb(35,31,32);\">,&nbsp;their IDE for&nbsp;Android Java development.</span><br /><span style=\"color: rgb(35,31,32);\">You wil be using the&nbsp;<strong>Community</strong>&nbsp;editon of Intellij IDEA. The Community edition is free, but&nbsp;lacks some of the advanced features of the commercial version.</span></p><h2><span style=\"color: rgb(153,153,153);\">Gradle</span></h2><p><span style=\"color: rgb(35,31,32);\">Most modern&nbsp;programs, in any language, are a combination of many source code files plus libraries of pre-written code from other sources. Building such&nbsp;programs involves a number of steps, such as</span></p><ul><li><span style=\"color: rgb(35,31,32);\">setting various options needed for properly compiling files, including specifying which directories have the project code</span></li><li><span style=\"color: rgb(35,31,32);\">downloading any library files needed that are not currently present</span></li><li><span style=\"color: rgb(35,31,32);\">detecting which files have changed and re-compiling them</span></li><li><span style=\"color: rgb(35,31,32);\">moving compiled files and other resources to special directories, e.g., a web server's application area</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The steps needed to build an application are&nbsp;kept in&nbsp;a&nbsp;project build file. &nbsp;Most IDEs have their own internal format, but there are also&nbsp;standard systems for managing Java projects that are independent of specific IDEs. Two popular ones are&nbsp;</span><a href=\"https://maven.apache.org/\"><span style=\"color: rgb(51,122,183);\">Maven</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;and&nbsp;</span><a href=\"http://gradle.org/\"><span style=\"color: rgb(51,122,183);\">Gradle</span></a><span style=\"color: rgb(35,31,32);\">. One of the nice features of these systems is that you can re-build someone else's Java project by just downloading the code directory, which includes a Maven (or Gradle) file. Simply running Maven (or Gradle) will then download all the other files you need, compile the source code, and build the program.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Most Java IDEs let you import and use a Maven or Gradle file, making it easy to edit and run the project. Intellij IDEA can import either.</span></p><h2><span style=\"color: rgb(153,153,153);\">JavaScript</span></h2><p><span style=\"color: rgb(35,31,32);\">JavaScript &ndash; no relation at all to Java &ndash; is a scripting language, available for use on web pages in&nbsp;all modern&nbsp;browsers. A very common use of JavaScript on web pages these days is to respond to user interactions with a web page, fetch data from a back-end web service, and construct HTML to display that data to the user.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">JavaScript Object Notation (JSON)</span></h2><p><span style=\"color: rgb(35,31,32);\">When computers need to pass data to each other, it helps to have a standard format for representing that data. Programs may have very complicated data, e.g., a scoreboard with a list of players and how many games they've won, lost, or drawn. Therefore it helps to have a data format that is simple, clear, and general enough to hold any structured information.&nbsp;<strong>JSON</strong>&nbsp;is one such notation that has become very popular. It is based on a data format that was developed for JavaScript. There are libraries for creating and using&nbsp;JSON for all modern programming languages. &nbsp;JSON is a modern alternative to the&nbsp;<strong>eXtensible Markup Language (XML)</strong>, an HTML-like format that was very general, but suffered from being more complicated.</span></p><h2><span style=\"color: rgb(153,153,153);\">REST and RESTful Web Services</span></h2><p><span style=\"color: rgb(35,31,32);\">REST is not a programming language or library, though there are many libraries to help do REST. REST is an approach to designing web application interfaces. The key idea is to think of a web application as a collection of documents, i.e., resources. This seems obvious when talking about HTML files, images, sound files, and so on. It becomes less obvious when thinking about a shopping site or a game.</span><br /><span style=\"color: rgb(35,31,32);\">Many people approached such dynamic applications as &quot;remote procedure calls,&quot; i.e., a client program would send a command, in URL form, to a server, and wait for a response. Roy Fielding, in his doctoral dissertation, pointed out that this was not a scalable way to build services. It also led to unbookmarkable web sites with no &quot;back&quot; button support and many other user-unfriendly features.</span><br /><span style=\"color: rgb(35,31,32);\">Fielding proposed making resources the central concept in any web service, no matter how dynamic.&nbsp;A shopping site has a shopping cart resource. A game has a game view. All resources can be gotten with&nbsp;unique unchanging URLs. Some URLs can be used to send&nbsp;requests to modify a&nbsp;resource.</span></p><h2><span style=\"color: rgb(153,153,153);\">Spring and Spring Boot</span></h2><p><span style=\"color: rgb(35,31,32);\"><strong>Spring</strong>&nbsp;is a large set of libraries for Java to make it easier to build modern Java web applications and RESTful web services.&nbsp;<strong>Spring Boot</strong>&nbsp;is a set of tools to make it easier to use&nbsp;<strong>Spring</strong>.</span><br /><ac:structured-macro ac:name=\"anchor\" ac:schema-version=\"1\" ac:macro-id=\"e03eefbe-19d8-44d2-b8ee-d64dd658018d\"><ac:parameter ac:name=\"\">_GoBack</ac:parameter></ac:structured-macro></p>",
    "conflPageId": "524352",
    "conflChildrenId": [
      "260997121",
      "260472849"
    ]
  },
  {
    "title": "NYSL Project",
    "content": "<ac:layout><ac:layout-section ac:type=\"two_right_sidebar\"><ac:layout-cell><h1><span style=\"color: rgb(0,0,0);\"><strong>About This Project...</strong></span></h1><h2><span style=\"color: rgb(0,0,0);\"><strong><ac:image ac:border=\"true\" ac:width=\"500\"><ri:attachment ri:filename=\"NYSL banner.png\" ri:version-at-save=\"1\" /></ac:image></strong></span></h2><h2><span style=\"color: rgb(0,0,0);\">NYSL Website</span></h2><p>Welcome!</p><p>In this course, you are an independent contractor who develops custom websites for small organizations. The Northside Youth Soccer League (NYSL) has hired you to develop a website for their soccer teams. You will work on this website on your own and will learn to use modern HTML and CSS to produce an attractive, informative multi-page website based on the client's requirements.</p><p>To do this, you'll work through a series of tasks designed by experts in programming and web development to help you create a robust and useful website, and to reflect real challenges that arise during the website development process.</p><h2>Course Resources</h2><p>This project consists of two one-week sprints (&quot;sprints&quot; are a term to describe short, intense work periods per the Agile Methodology. You'll learn more about this soon!). Each sprint is described briefly below. Click the links to view that sprint's Resources.</p><h4><strong><a href=\"https://ubiqum.atlassian.net/wiki/spaces/STUDENTS/pages/222625843/Getting+Started\">Getting Started &gt;</a></strong></h4><p>Before you start coding, read this introduction the basics of website development with HTML and CSS.</p><h4><strong><a href=\"https://ubiqum.atlassian.net/wiki/spaces/STUDENTS/pages/221413402/NYSL+Project+Sprint+1\">Sprint 1 &gt;</a></strong></h4><p>You will use HTML to build the first three webpages for NYSL, a youth football league, and learn how to apply some basic styles with CSS.&nbsp;</p><h4><ac:link><ri:page ri:content-title=\"NYSL Project Sprint 2\" ri:version-at-save=\"10\" /><ac:plain-text-link-body><![CDATA[Sprint 2 >]]></ac:plain-text-link-body></ac:link></h4><p>Learn some more advanced HTML/CSS techniques to create and style interactive website elements, like forms and menus.</p><h2>Essential Skills</h2><p>In this project you will learn the following skills of coding and development:</p><ul><li>Creating basic webpages with HTML</li><li>Adding styles with CSS</li><li>Reading and interpreting requirements</li><li>Applying basic html/css syntax standards</li><li>Creating lists and tables with HTML/CSS</li><li>Building interactive form elements with HTML/CSS</li><li>Using I-frames to embed external elements onto webpages</li><li>Storing projects using Git and Github</li><li>Participating in code reviews and product demos</li></ul><p><br /></p></ac:layout-cell><ac:layout-cell><h2>FAQs</h2><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"2db88199-c07c-44c0-9568-abe7f11c9033\"><ac:parameter ac:name=\"title\">What is website development?</ac:parameter><ac:rich-text-body><p>Website Development is the process of creating a website. The web development process includes:</p><ul><li>Gathering the information to display on the website</li><li>Deciding on a look and feel for the website</li><li>Coding the web pages using HTML and CSS</li><li>Validating that the HTML and CSS coding is correct and follows industry standards</li><li>Testing that the web pages work as specified, on multiple browsers</li></ul><p><br /></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"71e9be22-0ea0-491b-b91a-4961217d4ab8\"><ac:parameter ac:name=\"title\">What's the difference between HTML and CSS?</ac:parameter><ac:rich-text-body><p>The simplest way to think about the difference between HTML and CSS is that HTML is the content and CSS the design/style of a webpage. If you understand that, and only that, you already know enough to begin building webpages. But if you want to dig a little bit deeper, check out the infographic in the article below:</p><p><a href=\"https://www.codingdojo.com/blog/html-vs-css-inforgraphic\">HTML vs CSS Infographic</a></p><p><br /></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"e23ea93b-4cee-4a21-9cbc-b10f9a0200cf\"><ac:parameter ac:name=\"title\">Do I have to build the NYSL website or can I build my own?</ac:parameter><ac:rich-text-body><p>For now, you should build the NYSL project as it is designed to allow you to build the elements that are essential to learning the basics of webpage development. However, if you have time left over at the end of the project or want to apply your work on NYSL to your own project outside of class, go for it!</p><p><br /></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"b60b905b-dfbd-476f-b119-c1a2a25109c8\"><ac:parameter ac:name=\"title\">What are &quot;requirements&quot;?</ac:parameter><ac:rich-text-body><p>&quot;Requirements&quot; are what you will build as a developer. They are often communicated via text and &quot;wireframes&quot;, which are simple, low fidelity product designs. There are 3 types of requirements:</p><p><strong>Business requirements</strong>: what is the impact of what your building on the client's business?</p><p><strong>User requirements</strong>: how will your end users interact with your product? What are the most common &quot;stories&quot; for what they will do and why?</p><p><strong>Functional requirements</strong>: what technically is happening when users interact with the system? For example, let's say a user fills out a form. Their information typically won't just sit in the browser...so when they submit it, where it goes and how it gets there are examples of functional requirements.</p><p><br /></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"10cc7325-8180-42e8-bd42-28e289451766\"><ac:parameter ac:name=\"title\">What is &quot;Agile&quot;?</ac:parameter><ac:rich-text-body><p>Agile is a modern method of project management that emphasizes iteration and adaption in place of extensive, highly detailed planning. It is the standard for nearly all modern technology development projects.&nbsp;&nbsp;</p><p>We will conduct multiple workshops thoughout the duration of the program but if you would like to read more now, this website offers a nice, simple overview:</p><p><a href=\"http://www.agilenutshell.com/\">http://www.agilenutshell.com/</a></p><p><br /></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p></ac:layout-cell></ac:layout-section></ac:layout>",
    "conflPageId": "221413398",
    "conflChildrenId": [
      "222625843",
      "221413402",
      "228425766",
      "222363670"
    ]
  },
  {
    "title": "NYSL Project Sprint 1",
    "content": "<h2>Overview Of Your Task</h2><p>You have been asked by League Director, Tom Denton, to create a website for NYSL. Tom's sketch shows three web pages:</p><ul><li>A Home Page to be the main page for the website.</li><li>An About NYSL Page with general information on NYSL.</li><li>A Contact Page with general contact information for the league.</li></ul><p>There are two parts to this task:</p><ol><li>Entering the content.</li><li>Creating a look that matches the design sketch.</li></ol><p>A good practice is to complete the first part, and get approval from the client that the material is correct, before completing the second part. That way, the client can add information they forgot and remove material that no longer looks that important before the effort is spent on designing the layout. So for this task, focus on the <strong>content</strong> shown in the sketch (i.e., text, images, and links), the <strong>organization</strong> shown in the sketch (i.e., headers and paragraphs) and the <strong>steps</strong> here and in your Trello board that outlines one way to get the content in place. Don't worry yet about layout and indentation. You will do that in the next task.</p><h2>Epic 1:&nbsp;<span style=\"color: rgb(61,71,77);\">Install and configure the web development toolkit</span></h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"595e8797-2294-42d1-a331-a052105610e9\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources...</ac:parameter><ac:rich-text-body><h4>Task 1:&nbsp;Install and set up your web development tools</h4><p>The tools you need for web development are pretty simple. See Shay Howe's site <a href=\"https://learn.shayhowe.com/\">Learn to Code HTML &amp; CSS: Develop &amp; Style Websites</a>, which discusses tools in Lesson 1.</p><ol><li>A modern browser. We recommend Chrome.</li><li>Visual Studio Code:&nbsp;<a href=\"https://code.visualstudio.com/?wt.mc_id=vscom_freedevoffers\">https://code.visualstudio.com/?wt.mc_id=vscom_freedevoffers</a>&nbsp;<ul><li>Also, you can install the Live Server plugin for Visual Studio Code, here's a <a href=\"https://www.youtube.com/watch?v=8pOv1V4w3N8\">link </a>that can help you with the setup.</li></ul></li></ol><p><strong>Task 2:&nbsp;Use a text editor to create basic.html</strong></p><p>Use your text editor to create basic.html with the HTML for the &quot;Most basic web page in the world&quot; example from Lloyd's book. Alternatively, you could use the &quot;Hello World&quot; example from Howe's site. (Note: .html is the standard file extension for HTML code.)</p><ul><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> Make sure the file is not called basic.html.txt!</span></li></ul><p>After saving the file, in your operating system's file manager (Windows Explorer on a PC or Finder on a Mac), double-click on basic.html.</p><p><strong>Task 3:&nbsp;Verify that your page looks like it should</strong></p><p>Your default browser should open and display your web page.</p><ul><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> If your text editor opens when you double-click the file, then close the file and start up your browser. Use the File | Open File command in your browser to open your file.</span></li></ul><p>Make sure the page looks the way you expected it to from Howe's site.</p></ac:rich-text-body></ac:structured-macro><h2><span style=\"color: rgb(61,71,77);\"><span style=\"color: rgb(61,71,77);\">Epic 2: Create About Us, Home, and Contact pages</span></span></h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"ba020ada-dd4a-43e8-b7c7-d428562aa9f5\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources...</ac:parameter><ac:rich-text-body><p><strong>Task 1: Create about.html</strong></p><p>This is a good starting point for working on HTML with text. The page has a lot of text and some headers.</p><p>First, call the file &quot;about.html&quot;. Use HTML skeleton code as a template:</p><p style=\"margin-left: 30.0px;\">&lt;!DOCTYPE html&gt;</p><p style=\"margin-left: 30.0px;\">&lt;html lang=&quot;en&quot;&gt;</p><p style=\"margin-left: 30.0px;\">&lt;head&gt;</p><p style=\"margin-left: 60.0px;\">&lt;meta charset=&quot;utf-8&quot;&gt;</p><p style=\"margin-left: 60.0px;\">&lt;title&gt;Hello World&lt;/title&gt;</p><p style=\"margin-left: 30.0px;\">&lt;/head&gt;</p><p style=\"margin-left: 30.0px;\">&lt;body&gt;</p><p style=\"margin-left: 60.0px;text-align: left;\">&lt;h1&gt;Hello World&lt;/h1&gt;</p><p style=\"margin-left: 60.0px;\">&lt;p&gt;This is a web page.&lt;/p&gt;</p><p style=\"margin-left: 30.0px;\">&lt;/body&gt;</p><p style=\"margin-left: 30.0px;\">&lt;/html&gt;</p><p><strong>Task 2: Add title and page body text to About Us</strong></p><p>Next, title the page &quot;About NYSL&quot;. (This is the name of the Tab, this title goes within the &lt;head&gt;)</p><p>Just work on the paragraphs, headers, and text that will eventually become links. You can ignore the images for now. And don't worry about underlining the links. That will happen when you turn them into real links later.</p><p>Work in small steps:</p><ul><li>Add paragraphs and headings one at a time.</li><li>Save and view in a browser after each addition.</li><li>If something looks wrong, stop, figure out why, and fix.</li></ul><p><strong>Task 3: Create home.html</strong></p><p><strong>Task 4: Add title and page body text to Home</strong></p><p>Follow the process you used for the About NYSL page to create the text content for the Home and Contact pages. Use titles that are short but distinctive.</p><ul><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> Titles identify each page in a browser's history. &quot;Home&quot; and &quot;Contact&quot; are not helpful titles in a history list.</span></li></ul><p>It's also important to use filenames that are short but distinctive.</p><ul><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> Avoid spaces, punctuation, capitalization, etc. Such files may not work properly when moved to a web server with a different operating system.</span></li><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> Special case: Use index.html for a Home Page. This is the standard name for any website's home (or starting) page.</span></li></ul><p><strong>Task 5: Create contact.html</strong></p><p><strong>Task 6: Add title and page body text to Contact Us</strong></p></ac:rich-text-body></ac:structured-macro><h2><span style=\"color: rgb(61,71,77);\"><span style=\"color: rgb(61,71,77);\"><span style=\"color: rgb(61,71,77);\">Epic 3: Add images to your pages and link them together</span></span></span></h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"420f9fb3-8650-4b63-a642-c2cda591cf30\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources...</ac:parameter><ac:rich-text-body><p><strong>Task 1: Add images to all 3 pages</strong></p><p>Add the images and logo to the web pages as indicated in the design sketch. See Howe's site for guidance on adding images.&nbsp;</p><p>Then, test the pages to ensure the images appear and are correctly positioned.</p><ul><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> It is helpful to specify both the height and width attributes for an image. When these are set, space is automatically reserved for the image on the web page.</span></li></ul><p><strong>Task 2: Review and resize as necessary</strong></p><p>Make sure all of your images are scaling correctly and look normal. If you want to take a slightly different approach from the initial wireframes with the size and position of your images, you can try it now.&nbsp;&nbsp;</p><p><strong>Task 3: Add links to each page that link them together</strong></p><p>Time to make those links at the top of each page work. Lesson 2 of Howe's site provides a nice overview of this.</p><ul><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> Do not make a link from a page to itself! While harmless, this is an example of poor &quot;ux design&quot;, which means that it is probably confusing to your users. (Howe's directions do link a page to itself, so you'll need to modify. You'll come back to this common problem in Task 2.)</span></li></ul><p>Test to be sure that each link on each page goes to the right place.</p><p><strong>Task 4: Add a link to the Contact page that opens an email window</strong></p><p>On the Contact Page, turn the email address into a link that when clicked, opens the user's email client. Test by clicking on the email in your browser. Your email application should open up with the email address from the link in the To field.</p><p><strong>Task 5: Test and validate HTML</strong></p><p>Run your HTML code through the <a href=\"https://validator.w3.org/\">validator</a>. Once it's clean it's time to move onto CSS!</p></ac:rich-text-body></ac:structured-macro><h2><span style=\"color: rgb(61,71,77);\"><span style=\"color: rgb(61,71,77);\"><span style=\"color: rgb(61,71,77);\"><span style=\"color: rgb(61,71,77);\">Epic 4: Add CSS styles to your website</span></span></span></span></h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"1adcd1e1-0de2-474b-aa80-78b7c35b1365\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources...</ac:parameter><ac:rich-text-body><p><strong>Task 1: Create your root folders</strong></p><p>Note: We&rsquo;ll call the folder where your HTML files are located your root folder. Everything for your website should be in this folder.</p><p>In the root folder, create a new subfolder called &quot;styles&quot;.</p><p><strong>Task 2: Create .css files and save</strong></p><p>In your text editor, create a new file with no text or code in it. Save the file under the styles directory, and name it &quot;nysl_1.css&quot;.</p><p>Create two more files the same way.</p><ul><li>Name one file &quot;nysl_2.css&quot;.</li><li>Name the other file &quot;nysl_3.css&quot;.</li></ul><p><strong>Task 3: Link your CSS stylesheet to the HTML pages</strong></p><p>In the HEAD section of each of your HTML pages, create a link to the nysl_1.css stylesheet, using the syntax shown in Lesson 1 of Howe's site.</p><p>Test each web page to make sure nothing visible on the page has been altered.</p><ul><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> An empty stylesheet should have no effect on your web pages.</span></li></ul><p><strong>Task 4: Write CSS to create design 1</strong></p><p>Use your text editor to add the CSS needed to match the first design sketch. Chapters 3-5 of Howe's site can help you. For help on images, see Lesson 9 of Howe's site.</p><p>Add the CSS to nysl_1.css to make the HTML elements in your HTML pages, e.g., fonts and headings, closely match the first design sketch.</p><p>Test the stylesheet. Reload your pages in your browser to see how they look.</p><ul><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> Be sure to save both your HTML and CSS files!</span></li><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> If the styles you've selected do not display, check to make sure the filename and style link in your HTML pages match exactly.</span></li></ul><p><strong>Task 5: Write CSS to implement design 2</strong></p><p>Change your HTML files to link to nysl_2.css,&nbsp; then verify that the HTML pages now look unstyled.</p><p>Edit nysl_2.css to have the CSS for the look and feel of the second design sketch.</p><p>Test the stylesheet.</p><ul><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> Reloading the pages in your browser should show the new styles.</span></li></ul><p><strong>Task 6:&nbsp;Create your own original design and build it out</strong></p><p>Repeat the steps from Task 5 for the file nysl_3.css.</p><p>Browse the Internet to find pages you like for inspiration. Then, create a design that you think the client will like. We've included some links to sites for inspiration that you can find in the External Resources page.&nbsp;&nbsp;</p><p>Don't forget to test the stylesheet!</p><p><strong>Task 7: Validate your HTML <a href=\"https://validator.w3.org/\">validator</a>&nbsp;and CSS&nbsp;<a href=\"https://jigsaw.w3.org/css-validator/\">validator</a></strong></p></ac:rich-text-body></ac:structured-macro><h2><span style=\"color: rgb(61,71,77);\"><span style=\"color: rgb(61,71,77);\"><span style=\"color: rgb(61,71,77);\"><span style=\"color: rgb(61,71,77);\">Extra: Trello Board</span></span></span></span></h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"74c43cca-6322-4e4f-9366-c8133c23e295\"><ac:parameter ac:name=\"title\">View</ac:parameter><ac:rich-text-body><p><ac:structured-macro ac:name=\"trello-board\" ac:schema-version=\"1\" ac:macro-id=\"e220cacd-d3aa-4905-87c6-493dfd61bd79\"><ac:parameter ac:name=\"url\">https://trello.com/b/Hg9ZgOrA</ac:parameter></ac:structured-macro></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><h2>Extra: Email Attachments</h2><p class=\"auto-cursor-target\"><a href=\"https://drive.google.com/open?id=1djpTxqV5UMFI8JcfFfwWR8wYY3L0XJNj\"><br /></a></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"357fd131-2f39-4c53-a9ac-444b917f5a8f\"><ac:rich-text-body><p><a href=\"https://drive.google.com/open?id=1djpTxqV5UMFI8JcfFfwWR8wYY3L0XJNj\">Sprint</a><a href=\"https://drive.google.com/open?id=1djpTxqV5UMFI8JcfFfwWR8wYY3L0XJNj\">&nbsp;1 attachments</a></p><p><a href=\"https://drive.google.com/open?id=1UNpO6-XL64XeudWgMyFjq8HARLujCpKB\">Sprint 2 attachments</a></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><p><br /></p>",
    "conflPageId": "221413402",
    "conflChildrenId": [

    ]
  },
  {
    "title": "External Resources",
    "content": "<p><span style=\"color: rgb(255,0,0);\"><strong>PRO TIP: Create a folder in your browser called something like &quot;HTML/CSS Resources&quot; and bookmark the webpages linked below!</strong></span></p><h2>HTML</h2><ul><li><a href=\"https://learn.shayhowe.com/\">Learn to Code HTML &amp; CSS: Develop &amp; Style Websites</a> by Shay Howe<ul><li>TIP: You'll come back to using CSS on the NYSL site in a later task.</li><li>Lessons discuss concepts first, then demonstrate them in practice through building a sample site.</li><li><a href=\"https://learn.shayhowe.com/html-css/building-your-first-web-page/\">Lesson 1</a> introduces HTML and CSS basics, text editors, and sets up the structure of a simple web page, including using CSS to style it (minimally).</li><li><a href=\"https://learn.shayhowe.com/html-css/getting-to-know-html/\">Lesson 2</a> gets more into HTML, which you'll need to structure the NYSL site, and how to set up multiple pages, linked to each other.</li><li><a href=\"https://learn.shayhowe.com/html-css/adding-media/\">Lesson 9</a> introduces adding images.</li></ul></li></ul><h2>HTML Validator</h2><ul><li><a href=\"http://validator.w3.org/#validate_by_input\">The W3C HTML Validator</a> - This website will scan your HTML and report on everything incorrect, incomplete, or non-standard.<ul><li>Because your web pages are not available on a server, you'll need to use the provided interactive form, where you can copy and paste your entire HTML code.</li></ul></li></ul><h2>Web Browser</h2><p>You need at least one up-to-date version of one of the more popular browsers, such as Internet Explorer 9+, Mozilla Firefox 38+, Google Chrome 43+, Opera 20+, Safari 7+.</p><p><br /></p>",
    "conflPageId": "222363670",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Getting Started",
    "content": "<h2>Background</h2><p>The magic of web pages is that they use nothing more than plain text files. Plain text files have no fancy fonts, no colors, no pictures, no clickable links, and no animations. How then do web pages appear with all these things? With markup. Markup means that some of the text in a web page file is code that describes what to do with other text in the file. This code can say &quot;make the following text be blue and bold&quot; or &quot;display the image that is in the following file.&quot;</p><p>There are two important coding languages used to do this. HTML and CSS.</p><p>HTML stands for Hypertext Markup Language. Hypertext refers to the fact that HTML web pages can have links, i.e., text that when you click on it, you jump to another web page. This markup lets us hyperlink HTML files together into the web of documents we know so well today. HTML is used to label what different pieces of content are for, such as titles, the sections, links, lists, tables, and images.</p><h2>A Quick Demonstration</h2><p>You can see for yourself how HTML works. There is a neat web site called JS Bin where you can create, run, and share little snippets of web page code.</p><p><a href=\"https://jsbin.com/?html,output\">Open JS Bin</a>&nbsp;</p><p><ac:image ac:border=\"true\" ac:height=\"315\" ac:width=\"600\"><ri:attachment ri:filename=\"jsbin-home.png\" ri:version-at-save=\"1\" /></ac:image></p><p>Click the big X in the upper left to close the big banner. (If you want to get it back later, click on the small bin icon in the upper left.)</p><p>On the left, there is some HTML. This is boilerplate, i.e., HTML that every page has to have. The things between angle brackets, like &lt;head&gt; and &lt;body&gt;, are HTML instructions. They aren't displayed on a web page, but they can affect how things will look. You will learn what this HTML does very soon.</p><p>Let's add some HTML to show something.</p><p><ac:image><ri:attachment ri:filename=\"htmlJSBin.png\" ri:version-at-save=\"1\" /></ac:image></p><p>This is HTML code that says &quot;make a paragraph (p) containing the text 'Hello, World!' and label this paragraph 'test'. You'll see what the label is for in a second.</p><p>Copy the lines of HTML code above, switch to JS Bin, click on the line between &lt;body&gt; and &lt;/body&gt;, and paste the copied HTML.</p><p>As soon as you enter or change the HTML on the left, JS Bin displays the results that a browser would show on the right. Your screen should look like this now.</p><p><ac:image ac:border=\"true\" ac:width=\"600\"><ri:attachment ri:filename=\"jsbin-html-results.png\" ri:version-at-save=\"1\" /></ac:image></p><p>Congratulations! You just ran your first bit of working HTML code.</p><p>It is pretty plain though. HTML is all you need to make a readable web page, but it won't make a very pretty one. To make a page pretty, you use CSS.</p><p>CSS stands for Cascading Style Sheets. CSS is a language that lets you specify fonts, colors, indentation, positioning, table formats, and many other visual aspects of an HTML page.</p><p>Let's use CSS to make our HTML on JS Bin much more interesting. In JS Bin, click on the tab at the top that says CSS. This will open a box where you can enter CSS code. (You can open or close any JS Bin box by clicking on the appropriate tab.)</p><p><ac:image ac:border=\"true\" ac:width=\"600\"><ri:attachment ri:filename=\"jsbin-css-blank.png\" ri:version-at-save=\"1\" /></ac:image></p><p>Copy the lines of CSS code below and paste them into the CSS box.</p><p><ac:image><ri:attachment ri:filename=\"cssJSBin.png\" ri:version-at-save=\"1\" /></ac:image></p><p>You'll learn soon enough what all these things mean. For now, here's a quick summary of what each line of this CSS is telling a web browser to do:</p><ul><li><u>#test</u>: apply this styling information to the HTML item that has the ID test</li><li><u>background</u>: use a picture of the moon as the background; the picture is in a file at Flickr</li><li><u>background-size</u>: resize the picture to exactly cover the paragraph box</li><li><u>color</u>: make the text light green (here's a <a href=\"https://drafts.csswg.org/css-color-3/#svg-color\">list of CSS color names</a>)</li><li><u>font</u>: use a bold 14 pixel Arial font (a pixel is a standard tiny unit of size)</li><li><u>width</u> and <u>height</u>: make the paragraph box 140 pixels wide and high</li><li><u>border</u>: put a 2-pixel gray border around the paragraph</li></ul><p>If you copied all of the above CSS correctly, JS Bin should now look like this:</p><p><ac:image ac:width=\"600\"><ri:attachment ri:filename=\"jsbin-css-results.png\" ri:version-at-save=\"1\" /></ac:image></p><p><span style=\"color: rgb(35,31,32);\">Sweet! You've mixed text and graphics, using HTML and CSS.</span></p><h2>Browsers, Servers and HTTP</h2><p>The web works because of programs running on computers on the Internet send HTML and CSS files to each other, and display those files to you.</p><p>A <strong>web browser</strong> is a program you run on your computer that reads HTML and CSS and creates the visual display so familiar to web surfers. Web browsers are very complicated programs, but HTML and CSS files are comparatively quite simple.</p><p>A <strong>web server</strong> is a program running on some other computer that sends HTML and other types of files over a network to web browsers. It does this when it gets a request for a file. Those requests are themselves written in a language called <strong>HTTP</strong>, which stands for <strong>HyperText Transfer Protocol</strong>. You don't need to know what HTTP looks like to create web pages.</p><p>A web server and network connection are not required to see what an HTML file looks like. A web browser can open an HTML file you have on your own computer. This makes initial development and testing of web pages very easy.</p><p>A very useful tool when creating and testing web pages is an <strong>HTML validator</strong>. This is a program that checks your HTML for bad HTML syntax, from punctuation problems to the use of outdated HTML tags. The fact that a page looks OK in your browser is not a good test of your HTML. Browsers try to handle bad HTML, but they do so in different ways. A page with bad HTML might look fine in Firefox and completely broken in Internet Explorer. Fortunately, the <strong>World Wide Web Consortium (W3C)</strong> provides a free online HTML validator.&nbsp;</p><p><br /></p><p><br /></p><p><br /></p>",
    "conflPageId": "222625843",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Calendlys",
    "content": "<h2><strong>Barcelona</strong></h2><h3>Web Development</h3><ul><li><a href=\"https://calendly.com/lluis-ubiqum/barcelona\">Llu&iacute;s Garc&iacute;a</a>&nbsp;</li><li><a href=\"https://calendly.com/vasil-ubiqum/appointment-java\">Vasil Markov</a></li><li><a href=\"https://calendly.com/carolina-ubiqum/barcelona\">Carolina Garcia-Loygorri</a></li><li><a href=\"http://www.calendly.com/rj-ubiqum\">RJ Macasaet</a>&nbsp;(Part-Time Course, 6-10pm, Tuesdays and Wednesdays)</li></ul><h3>Data analytics</h3><ul><li><a href=\"https://calendly.com/ubiqum_gabriel/15min\">Gabriel Ristow</a></li><li><a href=\"https://calendly.com/ubiqum_giammarco/15min\">Giammarco Quaglia</a></li><li><a href=\"https://calendly.com/ubiqum_val\">Val&eacute;rian Virmaux</a></li><li><a href=\"https://calendly.com/ubiqum_dani/appointment-data\">Daniel Castej&oacute;n</a></li></ul><h2><strong>Berlin</strong></h2><p><a href=\"https://docs.google.com/presentation/d/1erQ1pDxq44DCJvjr9ava13XZljrzAGUt7YXVxr4lEOc/edit?usp=sharing\"><strong>Organisational&nbsp;</strong><strong>Chart</strong></a></p><h3>Web Development</h3><ul><li><a href=\"https://calendly.com/lucas-ubiqum\">Lucas Dupias</a></li><li><a href=\"https://calendly.com/ottavia-ubiqum/berlin\">Ottavia Feletig</a></li></ul><h3>Data analytics</h3><ul><li><a href=\"https://calendly.com/guillem-ubiqum-berlin/15min\">Guillem Perdig&oacute;</a></li><li><a href=\"https://calendly.com/shekhar_ubiqum\">Shekhar Biswas</a></li></ul><h2><strong>Amsterdam</strong></h2><h3>Web Development</h3><ul><li><a href=\"https://calendly.com/pol-ubiqum/appointment-java\">Pol Benedito</a></li><li><a href=\"https://calendly.com/ray-ubiqum-amsterdam/15min\">Ray Woolman</a></li></ul><h3>Data analytics</h3><ul><li><a href=\"https://calendly.com/joanclave/15min\">Joan Claverol</a></li></ul><ul><li><a href=\"https://calendly.com/pbeirao/15min\">Pericles Beirao</a></li></ul><h2><strong>Madrid</strong></h2><h3>Web Development</h3><ul><li><a href=\"https://calendly.com/gonzalo-ubiqum\">Gonzalo Fern&aacute;ndez</a></li></ul><p>Data analytics</p><ul><li><a href=\"https://calendly.com/ubiqum_ignacio/mentoring\">Ignacio Soteras</a></li></ul><h2><strong>Lisbon</strong></h2><h3>Web Development</h3><ul><li><a href=\"https://calendly.com/lucas-souza-ubiqum-lisbon/mern-appointment\">Lucas Souza</a></li></ul>",
    "conflPageId": "226328603",
    "conflChildrenId": [

    ]
  },
  {
    "title": "NYSL Project Sprint 2",
    "content": "<h2>Overview Of Your Task</h2><p>You have been asked by League Director, Tom Denton, to add two pages to the website:</p><ol><li>A Game Information Page for members to find out logistical information about each game.</li><li>A Rules &amp; Policies Page for members to read about the rules of play and the policies that NYSL follows.</li><li>Add a Registration Page for members to register to play on a team.</li><li>Update the Game Information Page with maps to show the various game locations.</li></ol><p>The following steps outline one way to break down the creation of the Game Information Page and the Rules &amp; Policies Page into small testable steps. Here&rsquo;s what you need to include in the web pages:</p><ul><li>Tables to present the game information data that Tom provided in a nice tabular fashion.</li><li>Lists and sublists to present the rules that Tom provided in a readable and organized way.</li><li>Create an HTML form that matches the Registration Form provided by Tom.</li><li>Create a testing page that displays the information entered on the Registration Form when the form's submit button is clicked.</li><li>Update the Game Info page to include maps for each of the game locations.</li><li>Links to all your new pages in the navigation bar.</li></ul><p><span style=\"color: rgb(255,0,0);\"><strong>TIP:&nbsp;</strong></span>As you develop each page, remember to:</p><ol><li>Update your CSS stylesheet as needed for the list and table styles, as well as any other formatting needs for the page.</li><li>Validate the HTML and CSS by using the <a href=\"https://validator.w3.org/#validate_by_input\">W3C HTML Validator</a> and the <a href=\"http://jigsaw.w3.org/css-validator/#validate_by_input\">W3C CSS Validator</a>.</li><li>Test all changes in a browser to ensure everything still looks and functions correctly.</li></ol><p><strong>Deliverables</strong></p><p>At the end of this Sprint, you will present the website and the code for all of the pages explained above, as well as your code from Sprint 1.&nbsp;&nbsp;</p><h2>Epic 1:&nbsp;Create the Rules &amp; Policies page</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"595e8797-2294-42d1-a331-a052105610e9\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources...</ac:parameter><ac:rich-text-body><p>The Rules &amp; Policies Page is simpler to do than the Game Info; so start with that. It involves creating HTML elements called Lists.&nbsp;Lists (and tables, which you'll create in the next Epic) are relatively easy HTML concepts to learn. The main mistake novices make is not using them appropriately. Tables and lists convey semantic information about the text they contain. They should not be used for visual effect. That's the job of CSS.</p><p>One rule of thumb for semantically well-formed HTML is whether the page makes sense when CSS styles are turned off.</p><p>Before you build the page, check out:&nbsp;<a href=\"https://learn.shayhowe.com/html-css/creating-lists/\">https://learn.shayhowe.com/html-css/creating-lists/</a></p><h4>Task 1:&nbsp;Create rules.html</h4><p>When you're ready to begin, create a rules.html page to display the Rules &amp; Policies that Tom provided. Title it: &quot;<strong>Rules of Play &amp; Policies</strong>&quot;. Test to make sure the page displays correctly.</p><p><strong><em>Proper use of lists</em> </strong></p><p>DO NOT use lists just to indent some text. Use BLOCKQUOTE or CSS styled paragraphs for that.</p><p>DO use lists for things like a navigation bar. Even though CSS may make the navigation bar look like a set of tabs, really you have a list of links. If the CSS went away, a list would be the best way to show those links. Use numbered (OL) lists when order matters, like steps in a recipe. Use unordered lists (UL) when you have a list of points but the order is not critical.</p><h4>Task 2: Add standard paragraph content</h4><p>Add the content from the Rules &amp; Policies document that Tom sent, one paragraph at a time. Start with the top headings. Then, save and view the page.</p><h4>Task 3:&nbsp;Create list with Rules content</h4><p>Next, add the Sportsmanship heading and paragraph, which is a list with one bullet. Save, test, and view.</p><p>Repeat for the FIFA Field Regulations, a numbered list. Because this list is so long, do one major item at a time. Save and view after each item.</p><p><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> </span>Note which lists are numbered and what kinds of numbers are used. Don&rsquo;t generate the number by hand! Let HTML do it for you automatically.</p><p><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> </span>If something appears to be indented too much, it means a list was not closed. A common mistake is using the wrong closing element, e.g., trying to close a numbered OL list with a UL closing tag.</p><h4>Task 4: Validate HTML&nbsp;</h4><p>Check your page in the validator before moving to the next Epic!</p></ac:rich-text-body></ac:structured-macro><h2><span style=\"color: rgb(61,71,77);\"><span style=\"color: rgb(61,71,77);\">Epic 2: Create the Game Info page</span></span></h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"ba020ada-dd4a-43e8-b7c7-d428562aa9f5\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources...</ac:parameter><ac:rich-text-body><p><strong>Task 1:&nbsp;Create game_info.html</strong></p><p>Create a page, game_info.html, to display the Game Information that Tom provided. Title the page: &quot;<strong>Game Information</strong>&quot;. Put in just the headings. Save and view.</p><p><strong>Task 2:&nbsp;Build table 1 and add content</strong></p><p><a href=\"https://learn.shayhowe.com/html-css/organizing-data-with-tables/\">https://learn.shayhowe.com/html-css/organizing-data-with-tables/</a></p><p>Try making a table for just the dates.</p><p><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong></span> Leave borders showing until you've made all your tables. Borders can help pinpoint table structure problems.</p><p>Save and view. Do the right number of columns appear with data in the right place? When it's working, add the remaining rows of the first table. Save and view.</p><p><em>Proper Use of Tables</em></p><ul><li>Do not use tables for page layout, e.g., to arrange things into columns. For this, you should use DIVs and CSS.</li><li>Do use tables for tabular data, e.g., a schedule or a list of scores.</li><li>Use TH for column and row headers. Don't use CSS to make TD elements look like headers.</li></ul><p><strong>Task 3: Add CSS to table 1</strong></p><p>Now, define the CSS for the tables so that they look like the page Tom provided. Your tables should meet these 3 criteria:</p><ol><li>No borders.</li><li>Text alignment as shown.</li><li>Fonts similar to what's shown.</li></ol><p><span style=\"color: rgb(255,0,0);\"><strong>TIPS:</strong></span></p><ul><li>Use TH for all header cells, and TD for data cells. Style the cells as needed using CSS.</li><li>Do not use TD for the header cells, and then style them to look like headers using CSS.</li><li>In addition, proper use of TH will help screen reading software, such as the validators, work better.</li></ul><p>Test the page to make sure the content displays as intended.</p><p><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> </span>Look for rows with missing or extra elements.</p><p><strong>Task 4: Build remaining tables and add content and CSS</strong></p><p>Repeat the above steps for at least one of the remaining tables from Tom's document.</p><p><strong>Task 5: Validate HTML &amp; CSS</strong></p></ac:rich-text-body></ac:structured-macro><h2>Epic 3: Create the Registration page</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"420f9fb3-8650-4b63-a642-c2cda591cf30\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources...</ac:parameter><ac:rich-text-body><p>There are two key parts to understanding an HTML form:</p><ol><li>The FORM itself</li><li>The form widgets, i.e., the interactive elements like buttons and textboxes</li></ol><p>The original purpose of a form was to allow users to enter information onto a web page and then submit that information to a web server. The action attribute of a form gives the URL to submit the information to. The method attribute of a form specifies one of two ways the data can be submitted. The differences are beyond the scope of this task, but in order for you to be able to test your form without a web server, you need to specify the GET method for the form.</p><p>Most form widgets have name and value attributes. For text fields, the value is whatever the user enters into the field, if anything. For drop-down menus, the name is on the SELECT element, and the value is on the OPTION element inside the menu that the user selects. Checkboxes, radio buttons, and submit buttons have name and value attributes.</p><p>When a form is submitted, the browser does not send the entire form you see on screen. It only sends:</p><ul><li>The name and text of non-empty text fields</li><li>The name and value of checked checkboxes and radio buttons</li><li>The name and selected value of drop-down menus</li><li>The name and value of the submit button that was clicked</li><li>Elements that are not checked, selected, or filled, or that have no name or value, are ignored.</li></ul><p>Before getting started with Task 1 make sure to check out:&nbsp;<a href=\"https://learn.shayhowe.com/html-css/building-forms/\">https://learn.shayhowe.com/html-css/building-forms/</a></p><p><strong>Task 1:&nbsp;Download show_data.txt and save as show_data.html in your root folder</strong></p><p>Create registration.html and title it: <strong>Registration Form</strong>&quot;. Then, download show_data.txt and save as show_data.html in your root folder</p><p><ac:structured-macro ac:name=\"view-file\" ac:schema-version=\"1\" ac:macro-id=\"09a4bc6a-2bd0-4e30-b05c-ede69c3f5c47\"><ac:parameter ac:name=\"name\"><ri:attachment ri:filename=\"show_data.txt\" ri:version-at-save=\"1\" /></ac:parameter><ac:parameter ac:name=\"height\">150</ac:parameter></ac:structured-macro></p><p><strong>Task 2:&nbsp;Build form element: 'text field' and test it</strong></p><p>Let's create the field where a player can enter their first name:</p><ol><li>Add an empty FORM element to the page.</li><li>Inside the form put:<ol><li>The label for the Player&rsquo;s First Name</li><li>A text input field with the name &quot;first_name&quot;</li><li>A Submit button</li></ol></li><li>Set the<span>&nbsp;</span><strong>action</strong><span>&nbsp;</span>attribute of the form to &ldquo;show_data.html.&rdquo;</li><li>Set the<span>&nbsp;</span><strong>method</strong><span>&nbsp;</span>attribute of the form to &quot;GET.&quot;</li></ol><p>Now, let's test it to make sure that it works:</p><ol><li>Open registration.html in your browser.</li><li>Make sure that the form looks reasonable, with a labeled text field for the Player&rsquo;s First Name and a submit button at the bottom labeled Submit.</li><li>Enter something in the name field and click Submit.</li><li>Verify that the show_data.html page appears with the name you entered displayed as the value of the &quot;first_name&quot; field.</li></ol><p><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> </span>If the information you entered does not display on the show_data.html page, then verify JavaScript is turned on in your browser. Exactly how you do this depends on your browser, but it&rsquo;s usually in the Options or Preferences settings under the Tools menu.</p><p><strong>Task 3: Build remaining text fields and test them</strong></p><p>Create text fields for the following information with their appropriate internal form names:</p><ul><li>Last Name</li><li>Street Address</li><li>City</li><li>Zip Code</li><li>Birth Date</li><li>Parent/Guardian</li><li>Contact Phone</li><li>Contact E-mail</li></ul><p>Test!</p><p><strong>Task 4: Build form elements: 'drop down menu' and test them</strong></p><p>Since there is only one choice for the closest and second closest school, a drop-down menu is the best choice here. Create a SELECT menu in the form for both drop-downs (closest school and second closest school). Enter in the school names.</p><p>Test! Select two schools and verify that they show up correctly in show_data.html.</p><p><strong>Task 6: Build form elements: 'checkbox' and 'radio button' and test each</strong></p><p>Use radio buttons (or drop-down menus) when it doesn't make sense to pick more than one option. Use checkboxes when multiple options do make sense.</p><p>Enter the appropriate labeled options for each set of buttons.</p><p>Test! Try clicking various checkboxes and radio buttons. Verify that the options you selected are passed correctly to show_data.html. Make sure only one option in each radio button set can be selected.</p><p><strong>Task 8: Apply correct input to each field: email, phone number, date</strong></p><p><strong>Task 9: Validate HTML and CSS</strong></p></ac:rich-text-body></ac:structured-macro><h2>Epic 4: Add maps to the Game Info page</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"1adcd1e1-0de2-474b-aa80-78b7c35b1365\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources...</ac:parameter><ac:rich-text-body><p><strong>Task 1:&nbsp;Implement Google Maps on your page</strong></p><p>Add maps to the Game Information Page to show each game location.</p><p>To add each map, follow the steps in the <a href=\"https://support.google.com/maps/answer/144361?hl=enation/staticmaps/index&amp;visit_id=636938781544184264-1339397471&amp;rd=1\">Google Maps Guide</a>. You also may want to check out Howe's tutorial on adding i-frames:&nbsp;<a href=\"https://learn.shayhowe.com/html-css/adding-media/#adding-iframes\">https://learn.shayhowe.com/html-css/adding-media/#adding-iframes</a>.</p><p>Do one map and test. Does the map appear? Is it in the right location on the page?</p><p>(Optional): If you have time and want to embed some additional maps on your page, go for it!</p><p><strong><strong>Task 2:&nbsp;Add styling to the map(s)</strong></strong></p><p>Take a few minutes to play around with the CSS for your maps to get them to look how you want.&nbsp;</p><p><strong>Task 3: Validate your HTML and CSS</strong></p></ac:rich-text-body></ac:structured-macro><h2>Epic 5: Cleanup, post code, refactor and demo your website</h2><p><br /></p><h2>Extra: Trello Board</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"63f00783-909e-4c2a-aa86-37754dac1d16\"><ac:parameter ac:name=\"title\">View</ac:parameter><ac:rich-text-body><p><ac:structured-macro ac:name=\"trello-board\" ac:schema-version=\"1\" ac:macro-id=\"4f193b26-70b3-470f-b2ec-23a62ae2ace8\"><ac:parameter ac:name=\"url\">https://trello.com/b/4ycSGzJt</ac:parameter></ac:structured-macro></p></ac:rich-text-body></ac:structured-macro><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p>",
    "conflPageId": "228425766",
    "conflChildrenId": [

    ]
  },
  {
    "title": "TGIF Sprint 1",
    "content": "<h1><strong>Your Task</strong></h1><p>You have been asked to create a demo web app displaying Congressional data from the ProPublica&nbsp;Congress API on an HTML page. Specifically, you need to create three pages, Home, and one each for the Senate and one for the House of Representatives. Both will look very similar. You should try to avoid duplicating code as much as possible.</p><p>There are several steps to this task divided in 4 epics:</p><ul><li>Set up your environment and get API data</li><li>Build Senate and House web pages</li><li>Build Home page and connect them together</li></ul><h2>Epic 1: Set up your environment and get API data&nbsp;</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"afcb0448-c2ab-4b6f-97fc-850172ae01fb\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources...</ac:parameter><ac:rich-text-body><h4>Task 1: Register your API Key</h4><h5>API Keys</h5><p>Web services that return data in JSON or XML form have become very popular. They allow a<span>&nbsp;</span><strong>data consumer</strong><span>&nbsp;</span>web site A to get data from a<span>&nbsp;</span><strong>data producer</strong><span>&nbsp;</span>web site B (or several web sites), manipulate that data, and display it to end users. One concern for the producer is that some consumers may overwhelm the producer&rsquo;s servers with frequent requests for large amounts of data.</p><p>To control this, many web services require that all requests include an<span>&nbsp;</span><strong>API key</strong>. This is a long sequence of characters that you need to include in every call to the data producer. You can often get an API key for free. The producer uses the key to track who is asking for data. The producer can easily limit how often you can ask for data and how much data you can get in one call. The producer may allow a consumer to pay for increased access.</p><h5>JSON</h5><p>JSON (JavaScript Object Notation) is a format for representing complex data in plain text form. As the name suggests, the format originated with JavaScript, but Douglas Crockford proposed using it as a general data exchange format instead of the more verbose XML (Extensible Markup Language). While XML was very general, powerful and popular, JSON quickly became more popular, because it was easier to code with and was comparatively more compact.</p><h5>Get a ProPublica Congress API Key</h5><ol><li>Go to<span>&nbsp;</span><a style=\"text-decoration: none;\" href=\"https://projects.propublica.org/api-docs/congress-api/\">the ProPublica site</a>. There's a link there to a form for requesting an API key. This is free.</li><li>Wait for the API key to be emailed&nbsp;to you.</li><ol><li>Be patient. This can take a day, perhaps more on weekends.</li><li>If you don't receive a key within a day, check your email spam folder.&nbsp;Automated emails of this sort often trigger spam filters.</li></ol></ol><h4>Task 2: Create your local project folder structure</h4><h4>Task 3: Setup your tools (VS code or Bracket)</h4><h4>Task 4: Add extensions and plugins to your IDE</h4><p>Code faster and easier by only adding some extensions directly from your integrated development environment (IDE) such as:</p><ul><li><strong>Emmet</strong> for quick code template generation from keywords</li><li>&nbsp;<strong>Beautify</strong> or <strong>Prettier</strong> for code auto formatting&nbsp;</li></ul><h4>Task 5: Create new GitHub repository for your local Git</h4><h4>Task 6: Get the JSON data and convert to JS</h4><p>For developing and testing your code, it's best&nbsp;to have a local copy of some real data.</p><ul><li>Testing will be faster</li><li>You won't bother the ProPublica server.&nbsp;</li></ul><p>To get a local copy, make one AJAX call to get the JSON you need, save that data in a JavaScript file, then use the JavaScript file. In a later task, it will be easy to switch to using live data.</p><ol><li>Go to&nbsp;<a style=\"text-decoration: none;\" href=\"http://static.socraticarts.com/AjaxTester/\">our AjaxTester web page</a><ol><li>AjaxTester&nbsp;is a general form that can be used to&nbsp;test&nbsp;AJAX JSON web APIs.</li></ol></li><li>Construct a URL for the ProPublica Congress web service to get the members of the Senate for the<span>&nbsp;</span><span style=\"text-decoration: underline;\">113th</span><span>&nbsp;</span>Congress.<ol><li>Use<span>&nbsp;</span><a style=\"text-decoration: none;\" href=\"https://projects.propublica.org/api-docs/congress-api/members/\">this&nbsp;page</a>&nbsp;to see what that looks like.&nbsp;</li></ol></li><li>Enter the URL in the<span>&nbsp;</span><strong>Endpoint</strong><span>&nbsp;</span>field of<span>&nbsp;</span><strong>AjaxTester</strong>.</li><li>Click the&nbsp;<strong>+ Add header</strong><span>&nbsp;</span>button.</li><li>Enter<span>&nbsp;</span><strong>X-API-Key</strong>&nbsp;as the header name.</li><li>Put your API key as the header value.</li><li>Click&nbsp;the<span>&nbsp;</span><strong>Ajax request</strong>&nbsp;button. If the URL and key are correct, JSON should appear in the textbox on the right.</li><ul><li>You will get an HTTP 0 error if you have an incorrect URL or invalid&nbsp;API key.</li></ul><li>When you have JSON in the textbox, click on it and hit control-A (Windows and Linux) or command-A (Macintosh), to select the entire JSON text.</li><li>Open the text editor you use for programming, create a new file, paste the JSON into it, and save under a clear name, e.g., pro<span class=\"tt2015\">-Congress-113-senate.json</span></li><li>Repeat the above steps, but for the House of Representatives. Since this has almost 10 times as much data, it will take a little longer to appear.&nbsp; Save in another file, e.g., pro<span class=\"tt2015\">-congress-113-house.json</span></li></ol><h5><span class=\"tt2015\">Convert JSON to JavaScript</span></h5><ul><li>Although you&rsquo;ll use these JSON files in later tasks, to create a standalone demo you need files that are executable JavaScript code. If you try to load the JSON in HTML with<span>&nbsp;</span><span class=\"tt2015\">&lt;script src=&quot;pro-congress-113-senate.json&quot;&gt;&lt;/script&gt;</span>, you will get a syntax error. A JSON object is not executable code. Fortunately, it&rsquo;s easy to fix.</li></ul><ol><li>Open your JSON Senate file in your editor, and insert<br /><span class=\"tt2015\">var data =<br /></span>at the very start. This is JavaScript for &quot;save the JSON object in the variable named data.&quot;&nbsp;<em>Save this as a new file</em><span>&nbsp;</span>with the same name but the extension<span>&nbsp;</span><span class=\"tt2015\">.js</span>, for JavaScript.</li><li>Repeat with your JSON House file.</li></ol><p><br /></p></ac:rich-text-body></ac:structured-macro><h2 class=\"auto-cursor-target\">Epic 2: Build Senate and House web pages</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"1b1c2016-e932-4100-804d-a98cd4085965\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources...</ac:parameter><ac:rich-text-body><h4>Task 1: Verify that files are connected and log into the console</h4><p>Confirm that you can load the JSON data from your JavaScript files into a web page.</p><ol><li>Using the basic html file provided in the email, create an HTML page<span>&nbsp;</span><span class=\"tt2015\">senate-data.html</span><span>&nbsp;</span>with the following elements</li><ul><li>a PRE element with the ID &quot;senate-data&quot;</li><li>a SCRIPT element that loads the JavaScript file you previously saved with Senate data</li><li>a SCRIPT element that has source code that puts the value of the variable data (pulled from the JavaScript file you loaded) into the PRE element</li></ul></ol><div class=\"tipLabel2015\"><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> </span>Do not <span style=\"color: rgb(255,0,0);\">put</span> SCRIPT tags in the HEAD, in the middle of the BODY, and at the end of the BODY.&nbsp; Middle is definitely not good.&nbsp; Common practice these days is to<span>&nbsp;</span><a style=\"text-decoration: none;\" href=\"http://stackoverflow.com/questions/143486/unobtrusive-javascript-script-at-the-top-or-the-bottom-of-the-html-code\">bottom-load scripts</a>.</div><div class=\"tipLabel2015\"><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong></span> To make the data variable's contents a string (easier to read), use the<span>&nbsp;</span><a style=\"text-decoration: none;\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">stringify method</a>:&nbsp;<span class=\"tt2015\">JSON.stringify(data,null,2)</span></div><p>2. In order to write JavaScript that stores text into an HTML element, you can use getElementbyId. You can check Resources for more information.</p><p>Example:</p><pre class=\"language-javascript\"><code class=\"language-javascript\" style=\"text-align: left;\">document<span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">.</span><span class=\"token function\" style=\"color: rgb(221,74,104);\">getElementById</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">(</span><span class=\"token string\" style=\"color: rgb(102,153,0);\">&quot;senate-data&quot;</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">)</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">.</span>innerHTML <span class=\"token operator\" style=\"color: rgb(166,127,89);\">= </span>JSON<span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">.</span><span class=\"token function\" style=\"color: rgb(221,74,104);\">stringify</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">(</span>data<span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">,</span><span class=\"token keyword\" style=\"color: rgb(0,119,170);\">null</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">,</span><span class=\"token number\" style=\"color: rgb(153,0,85);\">2</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">)</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">;</span></code></pre><p>3. Open the HTML page in your browser.</p><p>4. If you see the JSON data, go on to the next step. If you don&rsquo;t, open your browser&rsquo;s Developer Console, reload the page, and look for error messages.</p><h4>Task 2: Format the Senate data as a table</h4><p>Once you are successfully getting the JSON data into your page, you can focus on displaying that data in a user-friendly HTML table.</p><ol><li>Replace the PRE element on your page with a TABLE element with the same ID.</li><li>The<span>&nbsp;</span><span class=\"tt2015\">data</span><span>&nbsp;</span>variable contains a<span>&nbsp;</span><span class=\"tt2015\">results</span><span>&nbsp;</span>field. The<span>&nbsp;</span><span class=\"tt2015\">results&nbsp;</span>field contains an array of members of the Senate.</li><li>Change your JavaScript code to be a loop over that array. (This code will be in place of the code you had in the last step that put content into the PRE element.) The loop should construct a string of HTML using an approach such as the following:<ul><li>full name, built from the array element fields for last, first, and middle names</li><li>party (D, R, or I)</li><li>state (two letter code)</li><li>seniority (years in the office they currently hold)</li><li>percentage of votes with party, with a % added</li></ul></li><ul><li>For each element of the array, it should build a TR element. Within that TR element, it should create strings with TD elements, filled with the following data from the array element:</li></ul><li>After building the string, the JavaScript should store the HTML in the TABLE element. See<span>&nbsp;</span><em>Resources</em><span>&nbsp;</span>for review material on arrays, loops, and using both to construct and display a string combining data and HTML markup.</li><li>Open the page in your browser. If the page looks correct, go to the next step. If not, open the Developer Console and look for error messages.</li></ol><p class=\"tip2015\"><br /></p><div class=\"tipLabel2015\"><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong> </span>Do not put SCRIPT tags in the HEAD, in the middle of the BODY, and at the end of the BODY.&nbsp; Middle is definitely not good.&nbsp; Common practice these days is to<span>&nbsp;</span><a style=\"text-decoration: none;\" href=\"http://stackoverflow.com/questions/143486/unobtrusive-javascript-script-at-the-top-or-the-bottom-of-the-html-code\">bottom-load scripts</a>.</div><div class=\"tipLabel2015\"><strong><span style=\"color: rgb(255,0,0);\">TIP:</span></strong> Use (... || &quot;&quot;) to avoid null's in the table, like the middle name.</div><h4>Task 3: Style Page with Bootstrap</h4><p>Style/build out page per wireframes included in the email. Check the <a href=\"https://getbootstrap.com/\">Bootstrap documentation</a> for help.</p><ol><li>Add code to load the Bootstrap 3 CSS file.</li><li>Add the appropriate elements and attributes to your HTML to build out the navigation bar with dropdown menu.</li><li>Add the appropriate elements and attributes to your HTML to build out the page body and footer per the wireframes.</li><li>Add the appropriate elements and attributes to your HTML to use the default Bootstrap table styling. The table styling will not have borders, which is what our client prefers.</li><li>Check your page in the browser</li></ol><h4>Task 4: Repeat for House Data</h4><p>Do the same process for the House data starting with creating an HTML page named<span>&nbsp;</span><span class=\"tt2015\">house-data.html</span>. When you're through, this will be a much longer page than the Senate page, but you should have very little new work to do.</p><p><br /></p></ac:rich-text-body></ac:structured-macro><h2 class=\"auto-cursor-target\">Epic 3: Build Home page and connect them together</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"451184db-a523-4c55-8330-3f600d3e50db\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources...</ac:parameter><ac:rich-text-body><h4>Task 1: Create Home page and load CSS</h4><p>Using the basic html file provided in the email, create an HTML page (home<span class=\"tt2015\">.html</span>).</p><h4>Task 2: Apply universal page elements (navbar, page body, footer)</h4><p>Build out the navigation bar,&nbsp;the page body, and the footer like you did for the House and the Senate pages</p><h4>Task 3: Add logo to your page</h4><p>Select an image for the TGIF Logo and an image for the Home page.</p><p>Call these images in your HTML file and format with Bootstrap per the wireframes.</p><h4>Task 4: Interlink all your current pages</h4><p>Now update your displayed content with helpful links (to the Senators' home pages) and descriptions of your table's contents (with headers).</p><ol><li>Change your code so that when it constructs the HTML, the name is a link to the Senator's official home page, as given by the URL field in the results array.&nbsp;</li><li>Open the page, and test several of the links. Make sure they go to the right web page.</li><li>Add headers for your table to describe the contents of each column (e.g. 'Senator', 'Party Affiliation').&nbsp;</li></ol><h4>Task 5: Build accordion UI element</h4><p>Add the appropriate elements and attributes to your HTML to use the Bootstrap Accordion feature. &nbsp;</p><p>The content on the home page should expand out when a link or button is clicked.&nbsp; For help on using&nbsp;Bootstrap&rsquo;s classes to create an accordion feature consult the&nbsp;<a href=\"https://getbootstrap.com/docs/4.0/components/collapse/\">Bootstrap Documentation</a>.</p><h4>Task 6: Post to GitHub&nbsp;</h4></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><h2 class=\"auto-cursor-target\">Extra: Trello Board</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"abc6bb4e-1a4c-4da6-b256-db8e4a1223b7\"><ac:parameter ac:name=\"title\">View</ac:parameter><ac:rich-text-body><p><ac:structured-macro ac:name=\"trello-board\" ac:schema-version=\"1\" ac:macro-id=\"2c9f6941-752b-46ae-961c-9159957d6d24\"><ac:parameter ac:name=\"url\">https://trello.com/b/dlJCIejL</ac:parameter></ac:structured-macro></p></ac:rich-text-body></ac:structured-macro><p><br /></p><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "228425875",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Getting started with JavaScript",
    "content": "<h2>Background</h2><p>HTML and CSS are the languages for describing the content and visual appearance of web pages. They let you make very beautiful and useful web sites. But if you want to make an interactive web application, like a game or an interactive data display, you need<span>&nbsp;</span><strong>JavaScript</strong>.</p><p>Every web browser knows how to run JavaScript code. With JavaScript, you can</p><ul><li>make parts of&nbsp;web pages&nbsp;appear, disappear, and move around</li><li>respond to mouse clicks, finger taps, drag and drop, and keyboard entry</li><li>calculate complex mathematical formulas</li><li>repeat operations in loops that can run hundreds or thousands of times</li></ul><p>Basically, with JavaScript on a web page, you can do anything you can do in any other programming language, with one exception.JavaScript in a web page is not allow to read or&nbsp;write files on your computer. It is&nbsp;prevented from doing that&nbsp;so that hackers can't write web pages that steal information from you or damage your computer files.</p><h2>A Quick Demonstration</h2><p>You can use&nbsp;<strong>JS Bin</strong>&nbsp;to see what JavaScript can do.&nbsp;</p><ol><li>Click on&nbsp;<a style=\"text-decoration: none;\" href=\"https://jsbin.com/?html,css,js,output\">this JS Bin&nbsp;link</a>&nbsp;to open a new JS Bin&nbsp;window. This link has been defined so that you should see boxes for entering HTML, CSS, and JavaScript.</li><li>Copy and paste the HTML below into the HTML box.<pre class=\"language-markup\"><code class=\"language-markup\" style=\"text-align: left;\"><span class=\"token tag\" style=\"color: rgb(153,0,85);\"><span class=\"token tag\" style=\"color: rgb(153,0,85);\"><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">&lt;</span>p</span> <span class=\"token attr-name\" style=\"color: rgb(102,153,0);\">id</span><span class=\"token attr-value\" style=\"color: rgb(0,119,170);\"><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">=</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">'</span>test<span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">'</span></span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">&gt;</span></span>\nHello, Moon!\n<span class=\"token tag\" style=\"color: rgb(153,0,85);\"><span class=\"token tag\" style=\"color: rgb(153,0,85);\"><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">&lt;/</span>p</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">&gt;</span></span></code></pre></li><li>Copy and paste the CSS below into the CSS box:<pre class=\"language-css\"><code class=\"language-css\" style=\"text-align: left;\"><span class=\"token selector\" style=\"color: rgb(102,153,0);\">#test</span> <span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">{</span>\n  <span class=\"token property\" style=\"color: rgb(153,0,85);\">background</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">:</span> <span class=\"token url\" style=\"color: rgb(166,127,89);\">url(https://c1.staticflickr.com/9/8500/8315697815_69cb2a99ba_b.jpg)</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">;</span>\n  <span class=\"token property\" style=\"color: rgb(153,0,85);\">background-size</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">:</span> cover<span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">;</span>\n  <span class=\"token property\" style=\"color: rgb(153,0,85);\">color</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">:</span> lightgreen<span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">;</span>\n  <span class=\"token property\" style=\"color: rgb(153,0,85);\">font</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">:</span> bold 14px arial<span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">;</span>\n  <span class=\"token property\" style=\"color: rgb(153,0,85);\">width</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">:</span> 140px<span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">;</span>\n  <span class=\"token property\" style=\"color: rgb(153,0,85);\">height</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">:</span> 140px<span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">;</span>\n  <span class=\"token property\" style=\"color: rgb(153,0,85);\">border</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">:</span> 2px solid #999999<span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">;</span>\n<span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">}</span></code></pre></li><li>Make sure that the Moon image URL&nbsp;<a style=\"text-decoration: none;\" href=\"https://c1.staticflickr.com/9/8500/8315697815_69cb2a99ba_b.jpg\">https://c1.staticflickr.com/9/8500/8315697815_69cb2a99ba_b.jpg</a>&nbsp;still works. Pictures come and go from the Internet all the time. If this one is gone, use your search engine to find another comparable small picture of the Moon and use that URL instead.<br /><br />JS Bin should automatically display this HTML and CSS for you.&nbsp;<br /><br /></li><li>So far, this is just&nbsp;HTML and CSS. Now let's add some JavaScript so that something happens when we click on the Moon image.&nbsp; For this code to work though, you have&nbsp;to tell JS Bin&nbsp;to include the jQuery library.&nbsp; &nbsp;Click on&nbsp;<strong>Add Library</strong>&nbsp;in the upper left and&nbsp;select a current version of&nbsp;<strong>jQuery</strong>.&nbsp;<br /><br />After you do this, you should now see some extra code added to your HTML on the left that loads the jQuery library you selected.<br /><br /></li><li>Now copy and paste this JavaScript code into the&nbsp;JavaScript box on the right.<pre class=\"language-javascript\"><code class=\"language-javascript\" style=\"text-align: left;\"><span class=\"token function\" style=\"color: rgb(221,74,104);\">$</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">(</span><span class=\"token string\" style=\"color: rgb(102,153,0);\">'#test'</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">)</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">.</span><span class=\"token function\" style=\"color: rgb(221,74,104);\">on</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">(</span><span class=\"token string\" style=\"color: rgb(102,153,0);\">'click'</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">,</span> <span class=\"token keyword\" style=\"color: rgb(0,119,170);\">function</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">(</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">)</span> <span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">{</span>\n  <span class=\"token function\" style=\"color: rgb(221,74,104);\">$</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">(</span><span class=\"token keyword\" style=\"color: rgb(0,119,170);\">this</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">)</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">.</span><span class=\"token function\" style=\"color: rgb(221,74,104);\">text</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">(</span><span class=\"token string\" style=\"color: rgb(102,153,0);\">'Goodbye, Moon!'</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">)</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">.</span><span class=\"token function\" style=\"color: rgb(221,74,104);\">fadeOut</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">(</span><span class=\"token number\" style=\"color: rgb(153,0,85);\">4000</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">)</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">;</span>\n<span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">}</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">)</span><span class=\"token punctuation\" style=\"color: rgb(153,153,153);\">;</span></code></pre></li><li>Your JS Bin should look like this:<br /><span><ac:image ac:height=\"250\"><ri:attachment ri:filename=\"jsbin-js-entered.png\" ri:version-at-save=\"1\" /></ac:image>&nbsp;</span><br /><br />Briefly, this JavaScript code says<br /><br /><ul><li>When the user&nbsp;clicks on the HTML element with the ID&nbsp;<span class=\"tt2015\">test</span>...</li><li>Change the text of that element to say &quot;Goodbye, Moon!&quot;...</li><li>Then take 4 seconds (4000 milliseconds) to make the element fade away.<br /><br />This code does quite a bit in a few lines, because it uses functions defined in&nbsp;a very popular library called&nbsp;<strong>jQuery</strong>. It could be written with plain JavaScript, but would take about twice as much code and be much harder to read. You will learn how to use&nbsp;jQuery later on.<br /><br /></li></ul></li><li>Now click on the Hello, Moon image in the&nbsp;<strong>Output</strong>&nbsp;box. The text on the image should immediately change to &quot;Goodbye, Moon!&quot; Then the image and text should fade away after several seconds.</li></ol><p>Congratulations! You just wrote and ran your first JavaScript!</p><h2>Video Tutorials</h2><p>Code along videos are a good way to learn coding. As everyone has his own preferences, it is up to you to find your preferred code along tutor! For instance here is Net Ninja's code along for JavaScript beginners:&nbsp;<a href=\"https://www.youtube.com/playlist?list=PL4cUxeGkcC9i9Ae2D9Ee1RvylH38dKuET\">Net Ninja YouTube</a></p><p><br /></p>",
    "conflPageId": "228491341",
    "conflChildrenId": [

    ]
  },
  {
    "title": "TGIF Project",
    "content": "<ac:layout><ac:layout-section ac:type=\"two_right_sidebar\"><ac:layout-cell><h2><strong>Welcome!</strong></h2><p>In this course, you are a developer at<span>&nbsp;</span><strong>Code of the Web</strong>, a small software shop that creates custom JavaScript-based web applications.<span>&nbsp;</span><strong>Transparent Government in Fact</strong><span>&nbsp;</span>(TGIF), a non-partisan non-profit organization working to increase&nbsp;the public&rsquo;s involvement in government, has hired you to develop a Congressional tracking web site for them. You will work on this web application using modern JavaScript technologies, including AJAX, JSON, and RESTful APIs.</p><p>To do this, you'll work through a series of tasks designed by experts in programming and web app development&nbsp;to help you create a robust and useful web application.</p><h2>Course Resources</h2><p>The TGIF project consists of three Sprints. Click the links to view each Sprint's Resources. (Note: Sprint resources will become available as you work through the project requirements).</p><p><ac:link><ri:page ri:content-title=\"Getting started with JavaScript\" ri:version-at-save=\"5\" /><ac:plain-text-link-body><![CDATA[Getting started with JavaScript >]]></ac:plain-text-link-body></ac:link></p><p><a href=\"https://ubiqum.atlassian.net/wiki/spaces/STUDENTS/pages/234389544/JavaScript+Practice+Exercises\">JavaScript Practice Exercises &gt;</a></p><p><a href=\"https://ubiqum.atlassian.net/wiki/spaces/STUDENTS/pages/228425875/TGIF+Sprint+1\">Sprint 1 &gt;</a></p><p><a href=\"https://ubiqum.atlassian.net/wiki/spaces/STUDENTS/pages/228622497/TGIF+Sprint+2\">Sprint 2 &gt;</a></p><p><a href=\"https://ubiqum.atlassian.net/wiki/spaces/STUDENTS/pages/233635841/TGIF+Sprint+3\">Sprint 3 &gt;</a></p><p><br /></p></ac:layout-cell><ac:layout-cell><h2>FAQs</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"d96f3fa6-2b6c-4552-a56e-020ec4d2e02c\"><ac:parameter ac:name=\"title\">What is Web Application Development?</ac:parameter><ac:rich-text-body><p>Web application development is the process of creating a web site that acts like an application program. Web applications collect, manipulate, calculate and display data, using the same programming constructs as apps you download and install. But unlike apps, there is nothing to install. The code is run within your browser, using data collected on demand from web services.</p><p>Modern web applications use the following key technologies and organizing frameworks:</p><ul><li>JavaScript and sophisticated JavaScript libraries, such as AngularJS</li><li>AJAX (Asynchronous JavaScript and XML) to communicate directly with web services from a web page</li><li>JSON (JavaScript Object Notation) to encode complex data in a portable compact human-readable format</li><li>RESTful (Representational State Transfer) APIs (Application Program Interfaces) to standardize the messages used to get JSON objects with AJAX calls</li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p></ac:layout-cell></ac:layout-section></ac:layout>",
    "conflPageId": "228524142",
    "conflChildrenId": [
      "228491341",
      "234389544",
      "228425875",
      "228622497",
      "233635841",
      "238419984"
    ]
  },
  {
    "title": "TGIF Sprint 2",
    "content": "<h1><strong>Your Task</strong></h1><p>You have been asked to create two pages with statistics on the Senate and the House. This will involve:</p><ul><li>looping over the data about the members of the two houses, counting and adding as you go</li><li>constructing an HTML table to display the final results with clear labels and properly formatted numbers</li></ul><p>Each statistic requires different logic to calculate. Some are simple counts, others are complex. The best way to organize such code is to define a function to calculate each statistic. Each function may in turn call other functions.</p><p>Best practice also suggests separating the calculation of the statistics from the construction of the HTML. This is called separating the<span>&nbsp;</span><strong>model</strong><span>&nbsp;</span>from the<span>&nbsp;</span><strong>view</strong>. That way your calculation code can be written and tested separately from the HTML code. Also, the calculation code could more easily be reused in future programs.</p><p>So the steps in this Plan of Attack&nbsp;first focus on creating a JSON object to hold all the statistics. We'll refer to this JSON object as the<span>&nbsp;</span><em>statistics</em><span>&nbsp;</span>object.</p><p>You'll create an HTML page for the Senate, but you won't&nbsp;worry about the HTML itself at first. Just write the JavaScript to do the statistics you need, and use the Developer Console to test how your code works.</p><p>Once the JSON statistics object is constructed correctly,<span>&nbsp;</span><em>then</em>&nbsp;you'll add the code to create the HTML to display the JSON, just as you did in a previous task with the JSON returned by the Congress API.&nbsp;</p><p>This sprint is divided into 5 EPICS:</p><ul><li>Build the Senate at a glance table</li><li>Build Senator Attendance page</li><li>Build Senator Party Loyalty page</li><li>Build House Attendance and Party Loyalty Pages</li><li>Implement Checkbox filters into your website</li></ul><h2>Epic 1: Build Senate at a glance table</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"8a33b54b-84bb-4490-97f9-c60163d2ed8c\"><ac:parameter ac:name=\"title\">View Tasks &amp; Ressources...</ac:parameter><ac:rich-text-body><h4>Task 1: Create your JavaScript object to store the statistics</h4><p>To hold your calculation results, you need a JavaScript object, which we'll call the<span>&nbsp;</span><em>statistics</em><span>&nbsp;</span>object.</p><p>The statistics object will have a<span>&nbsp;</span><strong>key</strong><span>&nbsp;</span>for each statistic, e.g., &quot;Number of Democrats&quot;, and the<span>&nbsp;</span><strong>value</strong><span>&nbsp;</span>for that statistic. Use strings for the keys that are what you will want printed on the web page. The values you will calculate in later steps.</p><ol><li>Open the Attendance starter HTML file. &nbsp;Create a Senate Attendance statistics page from this file.</li><li>Create a new JavaScript file that is going to contain all your statistic functionalities and instantiate an object named statistics.&nbsp;</li><li>In the statistics object, include fields for all the statistics the client has requested (e.g., &quot;Number of Democrats&quot;). For now, initialize each value to zero.</li></ol><p>When you create the statistic object, remember that you will read from that same object to build table. A good structure of the object would facilitation the task!</p><p><strong><em>To get the number of members in each party...</em></strong></p><p>There are two obvious ways to do this.</p><ul><li>Go through the list of all members in one of the chambers and count the Democrats, Republicans, and Independents<br />OR</li><li>Make three lists, one for each party, and get the length</li></ul><p>If all you needed was the counts, the first approach would be more efficient for that task. But since some of the other statistics will need lists of party members, the second approach will be more efficient overall. So:</p><ol><li>Open your Senate Attendance HTML file.</li><li>Write code to create and fill three variables, one for a list of the Democrat objects, one for the Republican objects, and one for the Independents.</li><li>Then update&nbsp;your statistics object with the number of members in each party, e.g. for the key &quot;Number of Democrats&quot; replace the default value of zero with the length of the list of Democrat objects.</li><li>Use<span>&nbsp;</span><span class=\"tt2015\">console.log()</span><span>&nbsp;</span>to print your updated statistics&nbsp;object to the Developer Console so that you can inspect it to verify that it contains the correct answers. See<span>&nbsp;</span><em>Resources&nbsp;</em>for help with<span>&nbsp;</span><span class=\"tt2015\">console.log()</span></li><li>Open your Senate Party Loyalty HTML file. &nbsp;In order to be DRY (Don't Repeat Yourself), move your statistics object code to a separate javascript file and load&nbsp;it in both the Senate Attendance page and the Part Loyalty Page.&nbsp;</li></ol><h4>Task 2: Calculate the average &quot;votes with party&quot; for each party</h4><ol><li>Open your statistics javascript file.</li><li>To get an average of an array of data, you first sum up the relevant numbers from that array, then divide by the size of the array. Do that with the list of Democrats, using the percent party votes for each member.</li><li>Store the result in your statistics object.</li><li>Repeat for the list of Republicans.</li><li>Call your results in your Senate Party Loyalty HTML file. &nbsp;</li><li>Use console.log to print this object to the Developer Console so that you can inspect and verify it contains the correct answers.&nbsp;</li></ol><h4>Task 3: Build the Senate at a Glance table for Senators</h4><p>Since you've already built a table in the previous sprint, you should have a pretty good idea how to represent this data in a table based on the wireframes from the client.&nbsp;</p></ac:rich-text-body></ac:structured-macro><h2>Epic 2: Build Senator Attendance Page</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"545bdadf-2cad-474e-a57d-b7c6e29a7cc9\"><ac:parameter ac:name=\"title\"> View Tasks &amp; Resources...</ac:parameter><ac:rich-text-body><h4>Task 1: Calculate least engaged based on missed votes data for bottom 10%</h4><ol><li><span style=\"color: rgb(0,0,0);\">Open the Party Loyalty starter HTML file. </span></li><li><span style=\"color: rgb(0,0,0);\">Create the Senate Party Loyalty statistics page from this file. &nbsp;</span></li><li><span style=\"color: rgb(0,0,0);\">Repeat steps 2-3 that you did to calculate the average votes with party, only do the calculation for missed votes</span></li></ol><h4>Task 2: Display top 10% least engaged in the table, sort, and handle duplicate data points</h4><p><span style=\"color: rgb(0,0,0);\">Since you've done a similar data sorting task in the previous epics, the real challenge now is to generalize your code into a few functions that can get these answers, with as little repeated code as possible. Can you come up with one function that, given the appropriate parameters, can do all these statistics?<br /></span></p><p><span style=\"color: rgb(0,0,0);\">When you are happy with your results, collect and store them in your statistics object with the appropriate keys. Call the results in Senate Party Attendance HTML file and in the Senate Attendance HTML file.</span></p><h4>Task 3: Calculate most engaged based on missed votes data for top 10%</h4><p>Now, execute the same process only for the opposite problem...which Senators missed the FEWEST number of votes?&nbsp;</p><h4>Task 4: Display top 10% most engaged in table and sort</h4><p><span style=\"color: rgb(34,34,34);\"><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong></span> Don't forget to consider missed votes! As Paula explains in the email, you should include all the Senators (and Representatives in the later epic) with the same attendance. Just taking 10% might remove some members who actually attended the same percentage of sessions as ones that you included.&nbsp;</span></p></ac:rich-text-body></ac:structured-macro><h2>Epic 3: Build Senator Party Loyalty page</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"3faa7457-3ba7-4582-a5a4-c8a7e82ab972\"><ac:parameter ac:name=\"title\">View Tasks &amp; Ressources...</ac:parameter><ac:rich-text-body><h4>Task 1: Build Least Loyal table by calculating and displaying top 10% of Senators who didn't vote with party</h4><p>This is a non-trivial problem, and there are multiple ways to solve it, some simpler than others.</p><ol><li>Think about the problem in general, which is<ul><li>Example: 100 values, with duplicates, and you want to find the 10% of those values that are&nbsp;the smallest values in the set.</li></ul><ul><li>Example: The smallest value in the set is 84.2%, and that value occurs 3 times.</li></ul><ul><li>Example: 3/100 is not greater than or equal to 10% so repeat for the next smallest value:</li><ul><li>The next smallest value is 84.5%, and that value occurs 2 times.</li><li>Now you have the 5 smallest values.</li><li>5/100 is still not greater than or equal to 10% so choose the next smallest value and repeat again.</li><li>Stop when your set of smallest values represents 10%&nbsp;or more of the total.</li></ul></ul></li><ul><li>Given a list of N numbers, with duplicates and a percentage K</li><li>Find the<span>&nbsp;</span><em>smallest</em><span>&nbsp;</span>value X such that there are M numbers less than or equal to X</li><li>M / N is greater than or equal to K</li></ul><li>Develop and test code to solve this problem, then apply it to the data on voting with one's party. Your goal is to generate a list of the names of the 10% of Senators who vote least often with their party.</li><li>Call your code in the Senate Party Loyalty HTML file and use console.log to check your answers on different test data.</li></ol><h4>Task 2: Build Most Loyal table by calculating and displaying to 10% Senators who didn't vote with party.</h4><p>Again, follow the steps only for Senators who voted most often with their party.</p></ac:rich-text-body></ac:structured-macro><h2>Epic 4: Build House Attendance and Party Loyalty Pages</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"00153301-8182-4212-9c74-2527ec4f8a51\"><ac:parameter ac:name=\"title\">View Tasks &amp; Ressources</ac:parameter><ac:rich-text-body><h4>Task 1: Build House At A Glance table</h4><p>Follow the steps you executed for the Senate data only apply it to the larger data set of the House members.&nbsp;</p><p><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong></span> there are 100 members of the Senate and 435 members of the House of Representatives.</p><h4>Task 2: Build House Attendance page</h4><h4>Task 3: Build House Party Loyalty page</h4></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><h2 class=\"auto-cursor-target\">Epic 5: Implement Checkbox filters into your website</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"ee6e5b49-ee0b-4ed2-8ad2-60eb716d4dab\"><ac:parameter ac:name=\"title\">View Tasks &amp; Ressources...</ac:parameter><ac:rich-text-body><h4>Task 1: Build checkbox that triggers a function to filter for Senate Democrats only</h4><p><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong>&nbsp;<span style=\"color: rgb(0,0,0);\">Do not use &quot;onClick&quot; property on the HTML tags, use .addEventListener() on the JS file instead.</span></span></p><h4>Task 2: Build check-boxes that trigger functions to filter for Senate Republicans and Independants</h4><h5>Add Filter by Party Checkboxes</h5><p>Add three checkboxes to filter the data table by party (Democrat, Republican, and Independent).&nbsp;Look at checkbox examples&nbsp;in&nbsp;<em>Resources</em>.</p><ol><li>Open the senate HTML file.</li><li>Create checkbox input section with three checkboxes and the appropriate labels.</li><li>Write the javascript code that will filter the data by party:</li><ol><li>Get checked box values and put them into an array.</li><li>Use that array to filter the list of members to pass to your function to create the&nbsp;table.&nbsp;&nbsp;</li><li>Call this code whenever a checkbox is changed, i.e., use an&nbsp;<em>onchanged</em><span>&nbsp;</span>event listener.</li></ol><li>Open the page in your browser. If the checkboxes filter the table correctly, go to the next step. If not, open the Developer Console and look for error messages.</li></ol><h4>Task 3: Build functionality to allow users to filter by multiple checkboxes</h4><h4>Task 4: Repeat for House data</h4><p><br /></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><h2 class=\"auto-cursor-target\">Extra: Trello Board</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"dd20a35f-f0f6-48cf-8e93-994b6e6bd6e6\"><ac:parameter ac:name=\"title\">View</ac:parameter><ac:rich-text-body><p><ac:structured-macro ac:name=\"trello-board\" ac:schema-version=\"1\" ac:macro-id=\"bac8a1f3-f1a1-423c-9882-af8534e233e2\"><ac:parameter ac:name=\"url\">https://trello.com/b/xMkTNOAu</ac:parameter></ac:structured-macro></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "228622497",
    "conflChildrenId": [

    ]
  },
  {
    "title": "TGIF Sprint 3",
    "content": "<h2><span style=\"color: rgb(61,71,77);\">Epic 1: Implement dropdown filters into your website and integrate</span></h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"5433445d-5264-4957-825f-815c10470d2f\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources</ac:parameter><ac:rich-text-body><h4><span>Task 1: Create dropdown selector to&nbsp;filter Senate members by State<br /></span></h4><p>Add a dropdown menu&nbsp;to filter the data table by state.&nbsp;The filter default state should show all the data.&nbsp;Look at dropdown filter examples&nbsp;in&nbsp;<em>Resources</em>.</p><ol><li>Open the senate HTML file.</li><li>Create dropdown input section with the appropriate labels and options.</li><li>Write the javascript code that will filter the data by state:</li><ol><li>Get the selected value. &nbsp;</li><li>Use the same approach to filtering&nbsp;that you did with the party checkboxes.</li></ol><li>Open the page in your browser. If the dropdown&nbsp;filters the table correctly, go to the next step. If not, open the Developer Console and look for error messages.</li></ol><p>Some random HTML and JavaScript coding tips:</p><ul><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong></span> You will have two distinct filters on this page. You definitely don't want the checkboxes and drop down to have the same name. Use content-based names like party-filter and state-filter.</li><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong></span> Use separate functions to handle changes on party and state. All each function should do is update the relevant variable, e.g., what parties and state(s) are selected. Then each can call the same createTable() function to draw the updated table.</li><li><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong></span> When setting up the state dropdown menu, make sure that one of the options is &quot;all states&quot;.</li></ul><h4>Task 2: Define every different scenario of filtering possible</h4><p><span>Think about every different ways that the filters can be used in combination to render different results. If needed, your mentors will discuss this task with you and then lead a spike to share the different scenarios.</span></p><h4><span>Task 3: Code integrated filtering by party and state</span></h4><p><span>Now that you've defined your scenarios for using multiple filters, code it to achieve your expected results.&nbsp;</span></p><h4><span>Task 4: Repeat for House members</span></h4><p>Do the same process to create filters (checkboxes to filter by party and a dropdown to filter by state) for the House data by repeating the steps from task 1. This will be a much longer page than the Senate page, but you should have very little new work to do.</p></ac:rich-text-body></ac:structured-macro><h2><span style=\"color: rgb(61,71,77);\">Epic 2: Use AJAX to call ProPublica data<br /></span></h2><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"5845e402-d84e-4deb-b762-141d33156153\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources</ac:parameter><ac:rich-text-body><h4>Task 1: Fetch JSON data from ProPublica server</h4><p>You have been asked to upgrade the code you have to use live data with AJAX.</p><p>The first important change you'll make will be to replace the code that gets the test data from local files with AJAX calls using <strong>fetch()</strong> to get real data from the ProPublica site instead. The second change is to follow best practices and clean up the JavaScript and HTML code.</p><p><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong></span> it's a good practice to move most of the JavaScript from the HTML file over into its own .js file.&nbsp;</p><p><strong>AJAX and Browser Security</strong></p><p>AJAX gives code on a web page the ability to send information to another web server. This raises security concerns. A malicious or hacked web page might contain code that sends your personal information wherever it pleases. To be safe, therefore, by default browsers only allow a web page to send AJAX if:</p><ul><li>It is running on a web server, under some domain, e.g., <a href=\"http://superior.widgets.com\">superior.widgets.com</a></li><li>The AJAX is sending information to a URL in the same domain, or</li><li>The web service on the other domain implements cross-origin resource sharing (CORS)</li></ul><p><strong>DRY</strong><br />You always want to avoid duplicating code. Duplicated code means that when you find a bug or see a way to improve something, you have to make the same change in multiple places. In software development, this is called being DRY (Don't Repeat Yourself).</p><p>In JavaScript, one technique to avoid duplication is to refactor the bits that make code different into a data object. Then you write one body of code, and pass it different data objects for different situations.</p><p>For example, suppose you have several pages where some part of each page is to be filled in with data from an AJAX call, and then stored/rendered with Vue. A DRY solution would define a function, call it <strong>renderRemoteData()</strong>, that is called on each page with code like this:</p><p><ac:image><ri:attachment ri:filename=\"getLiveData03.png\" ri:version-at-save=\"1\" /></ac:image></p><p>Here, the target is the ID for elements on the page where the Vue data appears, and the URL gives the function the information it needs to make the AJAX call. Just one code file to define <strong>renderRemoteData()</strong> and its subfunctions is needed.</p><h4>Task 2: Refactor code so that it can handle asynchronous behavior</h4><p>Now, refactor your code so the functions are able to use the data from the fetch call. As you refactor, think about why it matters to use asynchronous fetching instead of local static data.&nbsp;</p><h4>Task 3: Add loaders</h4><p>Add a loader to your website while the data is being fetched, so users know they&nbsp;have to wait for the page to load.</p></ac:rich-text-body></ac:structured-macro><h2><span style=\"color: rgb(61,71,77);\">Epic 3: Refactor to merge JS files<br /></span></h2><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"217ec306-5ed1-4365-8ebb-9afeb12a5b63\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources</ac:parameter><ac:rich-text-body><h4>Task 1: Refactor your code down to 1-2 JS files</h4><p>Now you should have about 4 JS files. These files contain functions that are quite similar. An excellent practice is to refactor your code so that these functions, that operate in the exact same way but with different data, all exist within the same JS file(s). Review your files and create a plan for how to merge your code so that there is only ONE or TWO JS files. When you have come up with a strategy for your refactoring, check your plan with a mentor and then execute.&nbsp;</p><h4>Task 2: Submit your code to GitHub&nbsp;</h4><p>You should already have a dedicated repository for the TGIF project, but if not please create one now.&nbsp;</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><h2 class=\"auto-cursor-target\">(Optional but recommended) Epic 4: Incorporate VUE into your project</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"4eef7fa1-28e9-4cd3-9ae8-f3ea2b6a8f94\"><ac:parameter ac:name=\"title\">View Tasks &amp; Resources</ac:parameter><ac:rich-text-body><p><strong>HTML Templating</strong></p><p>Constructing HTML by concatenating strings is simple at first, but rapidly gets very hard to maintain as the HTML and CSS gets more complex. Therefore, virtually all web programming frameworks include templating libraries that let you define HTML patterns, in HTML files, and then combine those patterns with data to create the actual HTML on the final pages.</p><p>Vue is a JavaScript framework for building user interfaces. It lets you write the HTML you want to use, and add attributes and {{ value }} forms to insert data and repeat forms.</p><p>For example, suppose we want to display a simple list of links to employees. Here's how you could write that in your HTML file using Vue:</p><p><ac:image><ri:attachment ri:filename=\"getLiveData01.png\" ri:version-at-save=\"1\" /></ac:image></p><p>This is nice and readable, and much easier to edit than JavaScript concatenating strings. Vue adds a few special notations for your HTML. The ones shown here are:</p><ul><li>{{ expression }} to insert the value of a JavaScript expression into HTML text</li><li>v-bind:attribute=&quot;expression&quot; to insert the value of a JavaScript expression into a tag attribute</li><li>&lt;tag v-for=&quot;var in expression&quot;&gt;...&lt;/tag&gt; to repeat some HTML element for every item in the list returned by a JavaScript expression. var will be set to each item in turn, just like a JavaScript for loop.</li></ul><p>For Vue annotations to work requires a few additional steps:</p><ul><li>Put the HTML that you want Vue to scan and change inside an HTML element with some distinct ID. The ID app is often used but not required.</li><li>Load the Vue JavaScript library.</li><li>Add JavaScript code to create a Vue object that connects the HTML with the data.</li><li>Set the data.</li></ul><p>Here's an outline of how that might work here:</p><p><ac:image ac:width=\"1000\"><ri:attachment ri:filename=\"getLIveData02.png\" ri:version-at-save=\"1\" /></ac:image></p><p>The Vue object is a place to store data to be displayed. Only when you want to update the display should you update the Vue data. Internally Vue is smart about checking to see what needs to be changed on the page. More complex calculations should be done in JavaScript when preparing the data to pass to the HTML.</p><p><strong>CDN (Content Distribution Networks)</strong></p><p>Strictly speaking, a Content Distribution Network (CDN) is a network of web servers that contain duplicated content, placed at various locations around the world to reduce congestion and long-distance network traffic. The term has informally been extended to refer to web sites that host commonly needed web resources, such as JavaScript libraries.</p><p><br /></p><p><br /></p><p><br /></p></ac:rich-text-body></ac:structured-macro><h2 class=\"auto-cursor-target\">Extra: Trello Board</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"6320f7e5-82f8-48f1-86b4-656821b0d61c\"><ac:parameter ac:name=\"title\">View</ac:parameter><ac:rich-text-body><p><ac:structured-macro ac:name=\"trello-board\" ac:schema-version=\"1\" ac:macro-id=\"945e518b-2604-4f13-b57a-30c6ec46d67c\"><ac:parameter ac:name=\"url\">https://trello.com/b/S9SsHB5U</ac:parameter></ac:structured-macro></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "233635841",
    "conflChildrenId": [

    ]
  },
  {
    "title": "JavaScript Practice Exercises",
    "content": "<p>While your boss, Paula Davis, is working with the client let's do some practice exercises to understand some of the basic practices of coding in JavaScript.</p><h2>JavaScript Basics</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"50cb2a5b-5f4c-4eb4-b3ad-83601c960ff0\"><ac:parameter ac:name=\"title\">View Explanation &amp; Exercises...</ac:parameter><ac:rich-text-body><h4>Part 1: Set up a JavaScript playground</h4><p>Since you''ll be learning to write JavaScript for web pages, the best way to experiment is by making a very simple web page that loads and runs some JavaScript. You may find this page useful when testing out ideas in later tasks.</p><ol><li>Create a directory for your code, e.g., playground.</li><li>Inside that directory, create an HTML file, e.g., index.html.</li><li>In the HTML file, put some simple HTML to show some text that will let you know you''re looking at the right file. Be sure to include &lt;!DOCTYPE HTML&gt; at the top.</li><li>Add a script element to this file to load JavaScript from the file main.js. See this example for the syntax. Use the version listed for HTML5.</li><li>In the same directory, create the file main.js.</li><li>In the JavaScript file, add a line into your JavaScript file to print the following text in the console: &quot;Starting javascript...&quot;.<br /><ol><li>In programming, printing to some console window is often called &quot;logging&quot;. Hence the function to use in JavaScript is console.log.</li></ol></li><li>Open your HTML file in a browser.</li><li>Open the developer console. Is your message there? If not, try reloading the file.</li></ol><p><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong></span> If you still don't see the message, check your HTML and JavaScript file for typos. Make sure file names match exactly, including case. Make sure the JavaScript file is in the same directory as the HTML file.</p><p><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong></span> As you do the exercises below, keep adding new code to do what each exercise asks for. At the end, you''ll be asked to submit all the JavaScript for mentor feedback.</p><h4>Part 2: Writing expressions with variables</h4><p>To get started, here are some simple exercises to create and use variables and expressions. Variables are how you store data and results of calculations. Expressions are how you calculate values.</p><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 1: </strong></span></p><p>In your JavaScript file create a variable called myName with your name as the value. Put your name inside string quotes, e.g., &quot;my name&quot;. Then add a line of code to print the variable name to the console after the previous message.</p><p>Save your JavaScript file in your editor. Reload the HTML page in your browser. You should see your name printed. If not, investigate and fix.</p><p><strong><span style=\"color: rgb(0,0,255);\">Exercise 2: </span></strong></p><p>Create a variable called age with a number that is your age. Do not use string quotes for numbers.</p><p>Add a line to print that variable in the console. Save the file and reload the page. You should see your name, and your age.</p><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 3: </strong></span></p><p>Create a variable called ignasiAge with a value 32. Create another variable called ageDiff and set it to an expression that calculates your age minus Ignasi''s age. Print the value of ageDiff.</p><p>Save the file and reload the page. You should see your age, and the difference. If you are younger than Ignasi, you should see a negative number.</p><h4>Part 3: Writing code with conditionals</h4><p>Conditionals are forms used programming to tell the computer to do different things, depending on some test, e.g., &quot;if the user is logged in, say &quot;Hi&quot; else say &quot;Please log in.&quot;</p><p>The most basic conditional form is the if...then...else.... See the ebook for a discussion.</p><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 4: </strong></span></p><p>Write a conditional that compares the variable with your age with the number 21. It should print either &quot;You are older than 21&quot; or &quot;You are not older than 21&quot;, appropriately, depending on your age.</p><p>Save your JavaScript file and reload the page. Make sure you see the correct message. Try changing your age in the JavaScript file to make sure the other message prints when it should.</p><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 5: </strong></span></p><p>Write a conditional that compares your age with Ignasi''s age. This conditional will need to test if you are older, younger, or the same age, and print, appropriately, either &quot;Ignasi is older than you&quot;, Ignasi is younger than you&quot;, or &quot;You have the same age as Ignasi&quot;.</p><p>Save your changes and reload the file.</p><p><br /></p></ac:rich-text-body></ac:structured-macro><h2>JavaScript Array Functions&nbsp;</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"fb63068d-0f5c-4d6c-a210-1a52db4c561c\"><ac:parameter ac:name=\"title\">View Explanation &amp; Exercises...</ac:parameter><ac:rich-text-body><h4><span style=\"color: rgb(51,51,51);\"><strong>Sorting an Array</strong></span></h4><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 1:</strong></span><span>&nbsp;</span></p><p>Create an array with all the names of your class (including mentors).&nbsp; Sort the array alphabetically.&nbsp; Print the first element of the array&nbsp;in the console.&nbsp; Print the last element of the array in the console.&nbsp; Print all the elements of the array in the console.&nbsp; Use a &quot;for&quot; loop.</p><p>Save the file and reload the page. You should see the first element of the sorted array, the last element of the sorted array, and a list of all the elements in order in the array in the console.</p><h4>Looping Over an Array</h4><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 2:</strong>&nbsp;</span></p><p>Create an array with all the ages of the students in your class.&nbsp; Iterate the array using a while loop, and then print every age in the console.&nbsp; Add a conditional inside the while loop to only print even numbers.&nbsp; Change the loop to use a &quot;for&quot; loop instead of a &quot;while&quot; loop.</p><p>Save your changes to your JavaScript file. Reload the HTML page in your browser. You should see every age printed, then only the even numbers printed.&nbsp; If not,&nbsp;investigate&nbsp;and fix.</p><h4><strong style=\"font-size: 1.0em;\">Functions that Use Arrays</strong></h4><p>For&nbsp;the following&nbsp;exercises, you cannot sort your array. Be sure your solution works for any array that it is passed!</p><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 3:</strong>&nbsp;</span></p><p>Write a function which receives an array as a parameter and prints the lowest number in the array to the console.</p><p>Save&nbsp;the changes to your JavaScript file. Reload the HTML page in your browser. You should see the lowest number in the array printed in the console.&nbsp; If not,&nbsp;investigate&nbsp;and fix.</p><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 4:</strong>&nbsp;</span></p><p>Write a function which receives an array as a parameter and prints the biggest number in the array to the console.</p><p>Save&nbsp;the&nbsp;changes to your JavaScript file. Reload the HTML page in your browser. You should see the&nbsp;biggest number in the array printed in the console.&nbsp; If not,&nbsp;investigate&nbsp;and fix.</p><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 5:</strong>&nbsp;</span></p><p>Write a function which receives two parameters, an array and an index.&nbsp; The function will print the value of the element at the given position (one-based) to the console.</p><p>For example, given the following array and index, the function will print '6'.&nbsp;&nbsp;</p><pre class=\"language-markup\"><code class=\"language-markup\" style=\"text-align: left;\">var array = [3,6,67,6,23,11,100,8,93,0,17,24,7,1,33,45,28,33,23,12,99,100];\nvar index = 1;\n</code></pre><p>Save&nbsp;the&nbsp;changes to your JavaScript file&nbsp;and check your browser console.&nbsp; You should see the number at the correct index printed in the console.&nbsp; If not,&nbsp;investigate&nbsp;and fix.</p><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 6:</strong>&nbsp;</span></p><p>Write a function which receives an array and only prints the values that repeat.&nbsp;&nbsp;</p><ul><li>For example, given the following array and index, the function will print '6,23,33,100'.<br /><pre class=\"language-markup\"><code class=\"language-markup\" style=\"text-align: left;\">var array = [3,6,67,6,23,11,100,8,93,0,17,24,7,1,33,45,28,33,23,12,99,100]; </code></pre></li></ul><p>Save&nbsp;the&nbsp;changes to your JavaScript file. Reload the HTML page in your browser. You should see an array of the repeated numbers printed in the console.&nbsp; If not,&nbsp;investigate&nbsp;and fix.</p><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 7:</strong>&nbsp;</span></p><p>Write a simple JavaScript function to join all elements of the following array into a string.&nbsp;</p><pre class=\"language-markup\"><code class=\"language-markup\" style=\"text-align: left;\">myColor = [&quot;Red&quot;, &quot;Green&quot;, &quot;White&quot;, &quot;Black&quot;];</code></pre><p>Save&nbsp;the&nbsp;changes to your JavaScript file. Reload the HTML page in your browser. You should see&nbsp;the following in your console:</p><p>&quot;Red&quot;, &quot;Green&quot;, &quot;White&quot;, &quot;Black&quot;</p><p>&nbsp;If not,&nbsp;investigate&nbsp;and fix.&nbsp;</p><p><br /></p></ac:rich-text-body></ac:structured-macro><h2 class=\"auto-cursor-target\">JavaScript String Functions</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"b6c1453a-5f6e-423f-8cd8-968cd1df3b85\"><ac:parameter ac:name=\"title\">View Explanation &amp; Exercises...</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 1:</strong>&nbsp;</span></p><p>Write a<span>&nbsp;</span>JavaScript&nbsp;function that reverses a number.&nbsp;For example, if x = 32443 then the output should be 34423.</p><p>Save your JavaScript file and reload the page. Make sure you see the correct output.&nbsp;&nbsp;If not,&nbsp;investigate&nbsp;and fix.</p><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 2:</strong>&nbsp;</span></p><p>Write a JavaScript function that returns a string in alphabetical order.&nbsp;For example, if x = 'webmaster' then the output should be&nbsp;'abeemrstw'.&nbsp; Punctuation and numbers aren't passed in the string.</p><p>Save your JavaScript file and reload the page. Make sure you see the correct output.&nbsp;&nbsp;If not,&nbsp;investigate&nbsp;and fix.</p><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 3:</strong>&nbsp;</span></p><p>Write a JavaScript function that converts the first letter of every word to uppercase.&nbsp;For example, if x = &quot;prince of persia&quot; then the output should be &quot;Prince Of Persia&quot;.</p><p>Save your JavaScript file and reload the page. Make sure you see the correct output.&nbsp;&nbsp;If not,&nbsp;investigate&nbsp;and fix.</p><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 4:</strong>&nbsp;</span></p><p>Write a JavaScript function that finds the longest word in a phrase.&nbsp;For example, if x = &quot;Web Development Tutorial&quot;, then the output should be &quot;Development&quot;.</p><p>Save your JavaScript file and reload the page. Make sure you see the correct output.&nbsp;&nbsp;If not,&nbsp;investigate&nbsp;and fix.</p><p><br /></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><h2 class=\"auto-cursor-target\">Extra: More Functions Exercises (optional)</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"bb080f64-f2e3-4274-82ae-266b3d17a6d4\"><ac:parameter ac:name=\"title\">View More Exercises</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(0,0,255);\"><strong>Exercise 1:</strong>&nbsp;</span></p><p>Write a<span>&nbsp;</span>JavaScript function that returns nothing and has no parameters. This function should print the result of multiply two number (the numbers that you want).&nbsp;</p><p><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong>Exercise 2:</strong>&nbsp;</span></strong><br /></span></p><p><span style=\"color: rgb(0,0,255);\"><span style=\"color: rgb(0,0,0);\">Write a<span>&nbsp;</span>JavaScript function with no parameters. This function should return the result of multiply two number (the numbers that you want), and in your main program, you should print the result.&nbsp;&nbsp;</span><br /></span></p><p><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong>Exercise 3:</strong> <br /></span></span></strong></span></p><p><span style=\"color: rgb(0,0,255);\"><span style=\"color: rgb(0,0,0);\">Write a<span>&nbsp;</span>JavaScript function two parameters. These parameters are the numbers that have to be multiplied. The function should return the result of multiply both numbers (the numbers that you want), and in your main program, you should print the result. Test the function with 3 examples. <br /></span></span></p><p><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong>Exercise 4:</strong> </span></span></strong></span></strong></span></span></strong></span></strong><br /></span></span></strong></span></strong></span></span></strong></span></p><p><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,0);\">Write a function that determines the type of a triangle given the length of its three sides.</span></span></span></p><p><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong>Exercise 5:</strong> </span></span></strong></span></strong></span></span></strong></span></p><p><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\" style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\">Write a function that receives as a parameter an array of characters and replaces all a by a '1'. e.g.: casa &rarr; c1s1</span></span></span><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><br /></span></strong></span></strong></span></span></strong></span></strong></span></span></strong></span></p><p><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\" style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong>Exercise 6:</strong> </span></span></strong></span></strong></span></span></strong></span></span></span></span></span></p><p><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\" style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\" style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\">Write two functions. The first one should return the sum of all the elements of an array and the second one should return the smallest number in the array. Print&nbsp; the result in the main program.</span></span></span><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><br /></span></strong></span></strong></span></span></strong></span></strong></span></span></strong></span></span></span></span></span></p><p><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\" style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\" style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong>Exercise 7:</strong> </span></span></strong></span></strong></span></span></strong></span></span></span></span></span></span></span></strong></span></strong></span></span></strong></span></span></span></span></span></p><p><span style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\">Write a function that adds the even numbers of an array. For example, the array: <ac:link><ri:page ri:content-title=\"1 2 8 3 2\" /><ac:plain-text-link-body><![CDATA[1 2 8 3 2]]></ac:plain-text-link-body></ac:link> would result in the sum of 2 + 8 + 2, since they are even numbers. Return the result and print it in the main program.<br /></span></span></span></span></span></span></span></p><p><span style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\" style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\" style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong>Exercise 8:</strong> </span></span></strong></span></strong></span></span></strong></span></span></span></span></span></span></span></strong></span></strong></span></span></strong></span></span></span></span></span></span></span></span></span></span></span></span></p><p><span style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\">Write a function that adds the even positions of an array. For example, the array: <ac:link><ri:page ri:content-title=\"1 2 8 3 2\" /><ac:plain-text-link-body><![CDATA[1 2 8 3 2 3 4]]></ac:plain-text-link-body></ac:link> would result in the sum of 8 + 2 + 4 since they are even positions of the array(position 2,4,6). Return the result and print it in the main program.</span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><span style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\" style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\" style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong>Exercise 9:</strong> </span></span></strong></span></strong></span></span></strong></span></span></span></span></span></span></span></strong></span></strong></span></span></strong></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><span style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\">Write a function that by sending a number as parameter, tells you all the even numbers previous to it. For example, if you send to the function the number 9, it should print 2,4,6,8.<br /></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><span style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\" style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\" style=\"color: rgb(0,0,0);\"><span class=\"c-message__body\"><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong><span style=\"color: rgb(0,0,255);\"><strong><span class=\"c-message__body\"><span style=\"color: rgb(0,0,255);\"><strong>Exercise 10:</strong> </span></span></strong></span></strong></span></span></strong></span></span></span></span></span></span></span></strong></span></strong></span></span></strong></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><span style=\"color: rgb(0,0,255);\"><span class=\"c-message__body\" style=\"color: rgb(0,0,0);\">Write a function that by sending two numbers as parameters, it tells you the odd numbers between these. For instance, if you send it the numbers&nbsp; 1 and the 13 as parameters, it should print 1,3,5,7,9,11,13.</span><strong><span class=\"c-message__body\"><br /></span></strong></span></p><p><br /></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "234389544",
    "conflChildrenId": [

    ]
  },
  {
    "title": "JSON exercise: Bookstore",
    "content": "<h3 class=\"sectionedit1\">Hey developers, I have a new task for you! A regular customer has requested a provisional version for one of his latest projects: a bookstore. At the moment it does not need to be an actual store but later on it will be. We just need to show the books on screen, preferably with a search bar. These are the requested requirements:</h3><div class=\"level3\"><ul class=\"fix-media-list-overlap\"><li class=\"level1\"><div class=\"li\">The technologies used will be:<span>&nbsp;</span>HTML,<span>&nbsp;</span>CSS<span>&nbsp;</span>and JavaScript.</div></li><li class=\"level1\"><div class=\"li\">To achieve the flip card effect, you can either use pure CSS or use the library FancyBox (find links below). If you have not worked with them, take a look.&nbsp;</div></li><li class=\"level1\"><div class=\"li\">The project must be finished IN TWO DAYS because he will ask me to show it to him.</div></li><li class=\"level1\"><div class=\"li\">The books data are hosted on a remote JSON. You must access without downloading it since the client can modify the content without modifying the structure and the project should work without touching anything on the web page.</div></li><li class=\"level1\"><div class=\"li\">Books should be displayed with a little responsive behaviour. No need to fight with media queries, only a little adaptation with Bootstrap or plain flexbox would be enough.</div></li><li class=\"level1\"><div class=\"li\">(OPTIONAL) It would be interesting to include a search engine to search for any field in the book. Whether it be title, description or any other.</div></li><li class=\"level1\"><div class=\"li\">The logo (look for one in the web) should be on the top left and the search field (optional) on the top right.</div></li><li class=\"level1\"><div class=\"li\">When doing HOVER on each of the covers, it must be rotated to show the title, the description and a &ldquo;More Info&rdquo; button (This effect is just<span>&nbsp;</span>CSS. Google is your friend). This button will take you to a more detailed image (&ldquo;detalle&rdquo; in the json) of the cover (not the same image) that should be shown in a LIGHTBOX (popup/modal) and NOT in another website (use FancyBox).</div></li></ul><p>RESOURCES: Here are the links for the library:</p><ul class=\"fix-media-list-overlap\"><li class=\"level1\"><div class=\"li\">FancyBox -<span>&nbsp;</span><a class=\"urlextern\" style=\"text-decoration: none;\" title=\"http://fancyapps.com/fancybox/3/\" href=\"http://fancyapps.com/fancybox/3/\" rel=\"nofollow\">http://fancyapps.com/fancybox/3/</a></div></li><li class=\"level1\">With pure&nbsp; CSS :&nbsp;<a href=\"https://www.w3schools.com/howto/howto_css_flip_card.asp\">https://www.w3schools.com/howto/howto_css_flip_card.asp</a></li><li class=\"level1\"><div class=\"li\">And here is the JSON:<span>&nbsp;</span></div><ul><li class=\"level1\"><div class=\"li\"><a href=\"https://api.myjson.com/bins/1h3vb3\">https://api.myjson.com/bins/1h3vb3</a><span>&nbsp;</span>(Spanish version),&nbsp;</div></li><li class=\"level1\"><div class=\"li\"><a href=\"https://api.myjson.com/bins/zyv02\">https://api.myjson.com/bins/zyv02</a>&nbsp;(English version)</div></li></ul></li></ul><div class=\"li\"><br /><br />P.S - The customer just sent me a video with a possible solution. You decide if you want to make it look like this.&nbsp;<a class=\"urlextern\" title=\"https://drive.google.com/file/d/0B7MuB9FR6W82MF9rVFI4QTlvVmc/view\" href=\"https://drive.google.com/file/d/0B7MuB9FR6W82MF9rVFI4QTlvVmc/view\" rel=\"nofollow\">https://drive.google.com/file/d/0B7MuB9FR6W82MF9rVFI4QTlvVmc/view</a></div></div>",
    "conflPageId": "238026826",
    "conflChildrenId": [

    ]
  },
  {
    "title": "STRESS test",
    "content": "",
    "conflPageId": "238125072",
    "conflChildrenId": [
      "238026826",
      "296976386"
    ]
  },
  {
    "title": "TGIF External Resources",
    "content": "<h2>ProPublica API</h2><p><a href=\"https://projects.propublica.org/api-docs/congress-api/\">The ProPublica Congress API home page</a></p><p>Walks you through getting your API key and provides Terms of Use for accessing the data, along with FAQs.</p><h2>JSON</h2><p><a href=\"https://gbstool.learningbydoingtools.com/ebooks/item?id=53\">How to represent data in JavaScript</a></p><ul><li><p>A brief introduction to numbers, strings, and JavaScript objects</p></li></ul><p><a href=\"https://gbstool.learningbydoingtools.com/ebooks/item?id=53#stringify\">How to convert JSON data to a string</a></p><ul><li>Useful for showing JSON data during development and debugging</li></ul><p><a href=\"https://www.elated.com/json-basics/\">JSON Basics: What You Need to Know</a></p><ul><li>An introduction to the JSON data format, including how to create and read JSON strings in JavaScript. (Don''t worry about the sections on XML and PHP.)</li></ul><h2>JavaScript</h2><p><a href=\"https://javascript.info/\">The Modern JavaScript Tutorial</a></p><ul><li>For JavaScript fundamentals: scripts, objects, events, methods<br /><ul><li>JavaScript in an HTML page: how to load JavaScript from an external .js file, how to write JavaScript directly into an HTML file</li><li>JavaScript fundamentals: statements, comments, variables, data types, arrays, operators</li><li>JavaScript to get an HTML element with a specific ID and replace its contents</li></ul></li><li>For JavaScript fundamentals: functions, scope, methods, objects, built-in objects (including DOM)<br /><ul><li>Storing Data, Arrays are Objects for help with accessing specific information within an array</li></ul></li><li>JavaScript fundamentals: decision-making (e.g. comparison, if-else), loops<br /><ul><li>NOTE: a better way to write loops is with forEach() and map(). See <a href=\"https://gbstool.learningbydoingtools.com/ebooks/item?id=55\">here</a>.</li><li><strong><span style=\"color: rgb(255,0,0);\">TIP:</span>&nbsp;</strong>Also see <a href=\"https://www.w3schools.com/js/js_loop_for.asp\">JavaScript For Loops</a> for a very basic, but interactive introduction to for loops in JavaScript</li></ul></li><li>JavaScript to build a string of HTML by looping through an array, and then displaying the final result</li></ul><h2>CSS Styling with Bootstrap</h2><p><a href=\"https://www.w3schools.com/bootstrap/default.asp\">Bootstrap 3 Tutorial</a></p><ul><li>Comprehensive tutorial on the Bootstrap 3 front-end framework. Allows you to play with code samples directly in the tutorial website. Of especial note:<br /><ul><li><a href=\"https://www.w3schools.com/bootstrap/bootstrap_get_started.asp\">Bootstrap Get Started</a>: Goes over how to set up an HTML page to use Bootstrap</li><li><a href=\"https://www.w3schools.com/bootstrap/bootstrap_tables.asp\">Bootstrap Tables</a>: An introduction to the basic classes Bootstrap provides for styling tables</li><li><a href=\"https://www.w3schools.com/bootstrap/bootstrap_ref_css_tables.asp\">Bootstrap CSS Tables Reference</a>: A more comprehensive listing of Bootstrap-provided classes for styling tables</li><li><a href=\"https://www.w3schools.com/bootstrap/bootstrap_collapse.asp\">Bootstrap Accordion/Collapse</a>: Goes over how to hide/show content with Bootstrap</li></ul></li></ul><h2>JSFiddle</h2><p><a href=\"https://jsfiddle.net/\">JSFiddle</a> provides a custom environment to test your JavaScript, HTML, and CSS code right inside your browser. The many features provided by the JSFiddle interface makes it relevant to almost all Web application developers. The main section of the site is divided into four areas:</p><ol><li>CSS: Enter CSS to be applied to the HTML used in your tests.</li><li>HTML: This area allows you to enter HTML to be used in your tests.</li><li>JavaScript: JavaScript source is entered in this area.</li><li>Output: The results of executing the CSS, HTML, and JavaScript.</li></ol><p>To learn more go <a href=\"https://www.techrepublic.com/blog/software-engineer/jsfiddle-an-online-playground-for-your-javascript-html-css/\">here</a>.</p><h2>Debugging</h2><p><a href=\"https://javascript.info/\">The Modern JavaScript</a></p><ul><li>Search 'Debugging'</li></ul><h2>Displaying JavaScript data as HTML</h2><p>Once you have data in JSON form, you can use JavaScript to construct HTML that presents that data in a readable form to users. Typically, only a dozen lines of code, more or less, will be needed to do this, but those lines will involve many of the basic programming concepts in JavaScript. Of especial relevance are</p><ul><li><a href=\"https://gbstool.learningbydoingtools.com/ebooks/item?id=53\">arrays and JSON objects</a></li><li><a href=\"https://gbstool.learningbydoingtools.com/ebooks/item?id=54\">anonymous functions</a></li><li><a href=\"https://gbstool.learningbydoingtools.com/ebooks/item?id=55\">looping over array data</a> using map() with anonymous functions</li><li><a href=\"https://gbstool.learningbydoingtools.com/ebooks/item?id=1458\">using loops to construct HTML</a></li></ul><p>JavaScript Display Possibilities - <a href=\"http://www.w3schools.com/js/js_output.asp\">http://www.w3schools.com/js/js_output.asp</a></p><p><br /></p>",
    "conflPageId": "238419984",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Mobile App - Task 1 Resources",
    "content": "<h1><span style=\"color: rgb(128,130,133);\">Background</span></h1><h2><span style=\"color: rgb(128,130,133);\">User experience design</span></h2><p><span style=\"color: rgb(35,31,32);\">Designing a good user interface is not about being artistic. A good sense of color and spacing helps, but what matters most is&nbsp;<strong>simplicity</strong>&nbsp;and&nbsp;<strong>usability</strong>. Google's&nbsp;search page is the epitome of simplicity: a text field and a search button. Apple has won kudos and customers over and over again, not by&nbsp;having tons of buttons on its devices and interfaces, but by having just one or two.&nbsp;</span><br /><span style=\"color: rgb(255,255,255);\"><strong>Expert Advice</strong></span><br /><span class=\"confluence-embedded-file-wrapper confluence-embedded-manual-size\"><ac:image ac:height=\"102\" ac:width=\"180\"><ri:attachment ri:filename=\"worddave45b4be992df0cc2870de9ceb550384e.png\" ri:version-at-save=\"1\" /></ac:image></span><br /><span style=\"color: rgb(255,255,255);\"><strong>The one-button app</strong></span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Simplicity though can't come from hiding things. Modern&nbsp;digital watches are super simple: just&nbsp;2 or 3 buttons. But how you have to use those buttons to set the time, set the date, set an alarm, and so on, is impossible to figure out without a manual. An interface has to communicate what you can do with it. The best interfaces communicate this with very little clutter and very few words.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">An interface should also be efficient. The most common tasks should take as few steps to accomplish as possible. Apple's Mail program, for example, has no single command to go from one unread message to the next, which is probably the most common action anyone does.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">The key to designing effective user interfaces is to develop&nbsp;<strong>personas&nbsp;</strong>and&nbsp;write&nbsp;<strong>scenarios</strong>. Personas are well-specified fictional people rather than generalizations of classes of people.&nbsp;A scenario is a story of someone using an&nbsp;application in a given context to solve a real problem, e.g., someone sending an &quot;I'm on the way&quot; message while riding a bus, someone checking for flight status in an airport, someone checking how far they've run while jogging, and so on. Through these scenarios, you can determine how the person in each scenario may want to interact with your app's interface to accomplish his or her goal.</span></p><h2><span style=\"color: rgb(128,130,133);\">Interface diagrams</span></h2><p><span style=\"color: rgb(35,31,32);\">Most interface designers think visually, which doesn't mean you have to be an artist. It just implies that the most critical early designs are simple sketches.</span><br /><span style=\"color: rgb(35,31,32);\">Two particularly important types of sketches in the initial design phases are:</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong>User flow diagrams</strong>, also called&nbsp;<strong>the information architecture;</strong></span></li><li><span style=\"color: rgb(35,31,32);\">And&nbsp;<strong>mockups</strong>.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Examples of both types of sketches can be found in&nbsp;<em>Resources</em>.</span></p><h2><span style=\"color: rgb(128,130,133);\">User Flow Diagrams</span></h2><p><span style=\"color: rgb(35,31,32);\">A&nbsp;<strong>user flow diagram</strong>&nbsp;is an overview of how the app being designed will work. The diagram contains small, very simple sketches of the different screens a user will see.&nbsp;For each possible user action on a given screen, there is an arrow&nbsp;labeled with that action leading to&nbsp;the next screen the user would see. For example, in a calendar app:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">One screen might show a sketch of a month view.</span></li><li><span style=\"color: rgb(35,31,32);\">An arrow labeled &quot;user taps a day square&quot; leads from that screen to another showing a list of events for a day.</span></li><li><span style=\"color: rgb(35,31,32);\">An arrow labeled &quot;user taps event&quot; leads from that screen to another showing event details (time, place, attendees).</span></li><li><span style=\"color: rgb(35,31,32);\">An arrow labeled &quot;done&quot; leads from the event detail screen back to the day screen.</span></li><li><span style=\"color: rgb(35,31,32);\">Another arrow labeled &quot;done&quot; leads from the day screen to the month screen.&nbsp;</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The user diagram is sufficient to allow discussion about what screens and options there should be, what actions should trigger transitions, and where the transitions should lead to.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">User diagrams should be tested to see how well they support your scenarios. For example, one&nbsp;calendar scenario is &quot;Joe wants to see who he's meeting with&nbsp;on Tuesday morning.&quot; Doing that scenario with the above example sketch shows that Joe would have to tap on Tuesday, and then tap on the first meeting to see who the attendees are. Then, Joe would have to tap done, tap the next meeting, tap done, tap the next meeting, and so on. The&nbsp;diagram makes it clear there's no way to go directly from an event to the next event on the same day. If the scenario is an important one for our users, our interface needs improving.</span></p><h2><span style=\"color: rgb(128,130,133);\">Mockup</span></h2><p><span style=\"color: rgb(35,31,32);\">A&nbsp;<strong>mockup</strong>&nbsp;is a more detailed drawing of a specific screen. Here you are concerned with color and layout. The first purpose of a mockup is to&nbsp;verify that&nbsp;it's feasible to include all the options desired on a single screen. The second purpose is to do&nbsp;<strong>lo-fi&nbsp;paper prototype user testing</strong>, in which you<strong>&nbsp;</strong>give users examples of tasks to do and show them printed copies of the screens, and see if they understand what to do. Do the mockups only after you've worked out a good user flow for your key scenarios.</span></p><h1><span style=\"color: rgb(128,130,133);\">Required Resources</span></h1><h2><span style=\"color: rgb(128,130,133);\">Mobile Web Programming Concepts</span></h2><ul><li><span style=\"color: rgb(35,31,32);\"><em>Build Mobile Websites and Apps for Smart Devices</em>&nbsp;by Earle Castledine, Myles Eftos, Max Wheeler</span><ul><li><span style=\"color: rgb(35,31,32);\">Chapter 1 discusses options for delivering content in a mobile-friendly way- native apps, mobile web, responsive design, alternate websites.</span></li><li><span style=\"color: rgb(35,31,32);\">Chapter 2 covers design issues.</span></li><li><span style=\"color: rgb(35,31,32);\">Chapter 3 covers how to style with CSS and HTML for mobile devices.</span><ul><li><span style=\"color: rgb(35,31,32);\">Note: Only skim the pictures in Chapter 3 at this time to get an idea of the graphic options available.&nbsp;</span></li></ul></li></ul></li></ul><h2><span style=\"color: rgb(128,130,133);\">Personas</span></h2><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.smashingmagazine.com/2014/08/a-closer-look-at-personas-part-1/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">A Closer Look at Personas</span></span></a><span style=\"color: rgb(35,31,32);\">&ndash; What personas are and why they are important in the design process.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://uxmastery.com/create-ux-personas/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to Create UX Personas</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- A video tutorial on how a business would create personas to guide software development</span></li></ul><h2><span style=\"color: rgb(128,130,133);\">Scenarios</span></h2><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.slideshare.net/KimGoodwin/storytelling-by-design-scenarios-talk-at-confab-2011\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Storytelling by Design</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;by Kim Goodwin &ndash; Great slides on how to approach designing an app, but the title should be &quot;design by story telling!&quot;</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.usability.gov/how-to-and-tools/methods/scenarios.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Scenarios</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- An overview of what scenarios are, with examples</span></li></ul><h2><span style=\"color: rgb(128,130,133);\">User Interface Flow Diagrams</span></h2><p><span style=\"color: rgb(35,31,32);\">No specific format is required for your deliverable other than a box for each distinct screen, and&nbsp;arrows from one screen to the next clearly labeled with the user action for that arrow. More important is to make sure your diagram handles all steps in your intended scenarios, including cases such as canceling an action. The references below all include examples. The later ones get into more depth on how these fit into the design process.</span></p><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.agilemodeling.com/artifacts/uiFlowDiagram.htm\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">User Interface Flow Diagrams</span></span></a></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://signalvnoise.com/posts/1926-a-shorthand-for-designing-ui-flows\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">A shorthand for designing UI flows</span></span></a></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.startuprocket.com/blog/how-to-create-a-user-experience-flow-chart-ux-flow-chart\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to create a UX flow chart</span></span></a></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://conversionxl.com/how-to-design-user-flow/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to design user flow</span></span></a></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.uxbooth.com/articles/designing-for-mobile-part-1-information-architecture/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Design for Mobile, Part I: Information Architecture</span></span></a></li></ul><h1><span style=\"color: rgb(128,130,133);\">Additional Resources</span></h1><h2><span style=\"color: rgb(128,130,133);\">Color Scheme Picker</span></h2><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://colorschemedesigner.com/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Color Scheme Designer</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Provides tools to help you select a color scheme for your app.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.colorcombos.com/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">ColorCombos</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Helps you find the perfect color combination for your app.</span></li></ul><h2><span style=\"color: rgb(128,130,133);\">Mobile Design</span></h2><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.nngroup.com/articles/ten-usability-heuristics/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">10 Usability Heuristics for User Interface Design</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;by&nbsp;Jakob&nbsp;Nielsen --&nbsp;Provides the 10 most general principles in interaction design.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.smashingmagazine.com/guidelines-for-mobile-web-development/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Guidelines for Mobile Web Development from Smashing Magazine</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Provides more links on mobile design than you can shake a&nbsp;stylus&nbsp;at.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.creativebloq.com/mobile/10-principles-mobile-interface-design-4122910\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">The 10 Principles of Mobile Interface Design</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;by Jonathan Stark - A succinct list of important design considerations for mobile interfaces, including the importance of more content, less chrome.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://www.webdesignerdepot.com/2012/02/common-mobile-web-design-mistakes/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Common Mobile Web Design Mistakes</span></span></a></li></ul>",
    "conflPageId": "260472845",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java 2 - Welcome",
    "content": "<h1><span style=\"color: rgb(86,86,86);\">Welcome!</span></h1><p><span style=\"color: rgb(51,51,51);\">In this course, your team of developers continues development of the&nbsp;<strong>Salvo&nbsp;</strong>game. Now that the basic architecture is in place, it's time to implement actual game play!</span><br /><span style=\"color: rgb(51,51,51);\">In this phase of development, you will write code so that players can:</span></p><ul><li><span style=\"color: rgb(51,51,51);\">initiate new games, or join games another player has initiated</span></li><li><span style=\"color: rgb(51,51,51);\">place ships at the start of a game</span></li><li><span style=\"color: rgb(51,51,51);\">fire salvos at other player's ships and receive visual displays of the results</span></li><li><span style=\"color: rgb(51,51,51);\">see the scores for the game, and a leaderboard of scores for all players</span></li></ul><p><span style=\"color: rgb(51,51,51);\">The emphasis is now on implementing the algorithms needed for the Salvo&nbsp;<strong>game engine.</strong></span></p><h1><span style=\"color: rgb(86,86,86);\">What is Algorithm Development?</span></h1><p><span style=\"color: rgb(51,51,51);\">What makes computer programs interesting and userful are the algorithms that they implement. Algorithms are procedures for taking data, calculating values, and making decisions. The field of computer science is focused on the development of algorithms to do things that currently can't be done, or can't be done fast enough. Algorithms are how search engines can find a web page for you from millions of pages in a fractions of a second, how a space probe can be launched from Earth and rendezvous with a comet millions of miles away, and so on.</span><br /><span style=\"color: rgb(51,51,51);\">In this course, you'll learn to develop and implement in Java some simple but non-trivial algorithms for:</span></p><ul><li><span style=\"color: rgb(51,51,51);\">Identifying legal and illegal places where a user can place ships</span></li><li><span style=\"color: rgb(51,51,51);\">Calculating hits and misses</span></li><li><span style=\"color: rgb(51,51,51);\">Determining when a game is ready to begin, when a turn is complete, and when a game is finished</span></li><li><span style=\"color: rgb(51,51,51);\">Calculating final scores, best and worst scores, and so on</span></li></ul><h1><span style=\"color: rgb(51,51,51);\">&nbsp;</span><br /><span style=\"color: rgb(86,86,86);\">What reference materials will I need?</span></h1><p><span style=\"color: rgb(51,51,51);\">The primary resources for this course are available online. Since many of these resources assume a knowledge of Java basics, you may find it handy to have a Java reference book available:</span></p><ul><li><span style=\"color: rgb(51,51,51);\">Burd, Barry.&nbsp;<em>Beginning Programming with Java For Dummies<strong>&nbsp;</strong></em>4th Edition (ISBN-10: 1118407814)</span></li></ul><p><br /></p>",
    "conflPageId": "260472849",
    "conflChildrenId": [
      "263716926",
      "263913599",
      "263913608",
      "263716938",
      "263716943",
      "263716948"
    ]
  },
  {
    "title": "Task 6 - Resources",
    "content": "<h1 style=\"\"><span style=\"color: rgb(128,130,133);\">Background</span></h1><p style=\"\"><span style=\"color: rgb(35,31,32);\"><strong>PhoneGap</strong>&nbsp;is a popular&nbsp;<strong>hybrid app</strong>&nbsp;platform. That means, it creates native apps, but you write code in HTML, CSS, and JavaScript.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Note:&nbsp;PhoneGap&nbsp;is the original product name. It's&nbsp;owned by Adobe. Adobe gave the code to the Apache Foundation, where it is called&nbsp;<strong>Cordova</strong>. We will use the name&nbsp;PhoneGap&nbsp;here, but you will see Cordova in much of the online documentation.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">The basic idea is simple. It turns out that the native apps on&nbsp;iOS, Android, and other devices can display a browser-like web viewer on screen. Normally, this is for viewing external websites, but the&nbsp;PhoneGap&nbsp;developers realized it could be used to show HTML files stored on the device. So they created small&nbsp;native apps for each platform that&nbsp;display a local website. The&nbsp;same app code can be reused for different applications by simply changing the lines that title the app. All the real user interface and application code is in HTML, CSS and JavaScript.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">On its own, there would be no advantage to doing this, but the native apps also include code that extends JavaScript to include functions to access mobile device functionality, such as the camera and contact list. The same web code can be packaged with little or no&nbsp;change inside an&nbsp;iOS PhoneGap app, an Android PhoneGap app, and so on.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Typically, porting a web app to&nbsp;PhoneGap&nbsp;requires:</span></p><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\">Installing the system development kit (SDK)&nbsp;for the intended device, e.g.,</span><ul><li><span style=\"color: rgb(35,31,32);\">Xcode&nbsp;and Objective-C for&nbsp;iOS</span></li><li><span style=\"color: rgb(35,31,32);\">Eclipse or&nbsp;Xcode&nbsp;and Java for Android</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">Installing the&nbsp;PhoneGap&nbsp;tools and framework code</span></li><li><span style=\"color: rgb(35,31,32);\">Creating a&nbsp;PhoneGap&nbsp;project in the SDK</span></li><li><span style=\"color: rgb(35,31,32);\">Copying the web app files into that project</span></li><li><span style=\"color: rgb(35,31,32);\">Compiling the&nbsp;native app and deploying (i.e., installing) it on devices</span></li></ul><p style=\"\"><span style=\"color: rgb(35,31,32);\">Because a&nbsp;PhoneGap&nbsp;app is a native app, all the requirements of native apps apply. For&nbsp;iOS, you must have an&nbsp;iOS&nbsp;developer license ($100 / year), and Apple must approve your app before it can appear on their app store. Android developers do not need developer licenses.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Required resources</strong></span><span>&nbsp;</span></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"c85cbf56-f1de-4de4-a71b-d13a5cafc7cf\"><ac:parameter ac:name=\"title\">PhoneGap </ac:parameter><ac:rich-text-body><p style=\"\"><br /></p><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\">Chapter 7 of&nbsp;<em>Build Mobile Websites and Apps for Smart Devices</em>&nbsp;by Earle Castledine, Myles Eftos, Max Wheeler &ndash; Introduces PhoneGap.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://docs.phonegap.com/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">The PhoneGap Developer Page</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Provides guides and other documentation on getting started and using PhoneGap.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://github.com/apache/cordova-plugin-camera#module_camera\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Cordova/PhoneGap Camera API</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- PhoneGap documentation on how to access the camera on a mobile device.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://github.com/apache/cordova-plugin-file\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Cordova/PhoneGap File Plugin</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- PhoneGap documentation on how to read file path and turn image files into a blob (this format is needed to send images to Firebase storage).&nbsp;&nbsp;</span></li></ul><p style=\"\"><br /></p></ac:rich-text-body></ac:structured-macro><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"51659550-5c1d-4a98-9ce6-01bee577a46d\"><ac:parameter ac:name=\"title\">Firebase</ac:parameter><ac:rich-text-body><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">JavaScript + Firebase</span></h2><ul style=\"\"><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://firebase.google.com/docs/storage/web/upload-files\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Firebase Upload Image File Example</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- example&nbsp;app code that uploads files to Firebase.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://github.com/firebase/quickstart-js/tree/master/storage\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Firebase quickstart guide</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;for storage of files.</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "260472952",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Mobile App - Task 5",
    "content": "<p><a class=\"external-link\" style=\"text-decoration: underline;\" href=\"https://gbstool.learningbydoingtools.com/mc/poa?productID=4978&amp;taskID=1738#introduction\" rel=\"nofollow\"><span style=\"color: rgb(38,34,98);\">INTRODUCTION</span></a></p><h1><span style=\"color: rgb(128,130,133);\">Your Task</span></h1><p><span style=\"color: rgb(35,31,32);\">You have been asked by League Director, Tom Denton, to update the web app&nbsp;to use the following features specific to a mobile device:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Location awareness</span></li><li><span style=\"color: rgb(35,31,32);\">Local storage for game data, including posts, to support use while disconnected</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The steps given in this Plan of Attack outline&nbsp;one way to update the web app. They can be completed in any order.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>As part of this task, you will submit the following for review:&nbsp;</strong></span></p><ul><li><span style=\"color: rgb(35,31,32);\">For Mentor Review:</span><ul><li><span style=\"color: rgb(35,31,32);\">The HTML, CSS and&nbsp;JavaScript you changed so that users could see where they are on a game map.</span></li><li><span style=\"color: rgb(35,31,32);\">The HTML, CSS and&nbsp;JavaScript you changed so that users can still use as much of the app as possible when the Internet connection is lost.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">For Client Deliverable: the URL of the updated mobile web app, with notes on: what was built, any changes made to other parts of the web app,&nbsp;and any known issues or limitations.</span><ul><li><span style=\"color: rgb(35,31,32);\">Your mentor will&nbsp;advise you as to when you are ready to submit this package to the client.&nbsp;</span></li></ul></li></ul><p><br /></p><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"a166e1ec-5bd9-4609-8e15-442940b3445d\"><ac:parameter ac:name=\"title\">Step 1 - Show the User's Location</ac:parameter><ac:rich-text-body><p class=\"auto-cursor-target\"><br /></p><div><div class=\"sc-TOsTZ hghlyc\"><div><div class=\"page view\"><div class=\"wiki-content\"><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Enable users to see their own current location on the map on the game details page.</strong></span><ol><li><span style=\"color: rgb(35,31,32);\">Follow the code examples for doing this&nbsp;in&nbsp;<em>Resources</em>.</span><ol><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:&nbsp;</strong></span>If you try opening your index.html file in a browser to test your code you will not be able to access the&nbsp;user location per this&nbsp;<a class=\"external-link\" href=\"http://stackoverflow.com/questions/6181379/w3c-geolocation-api-not-working-in-chrome\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">question/explanation</span></span></a><span style=\"color: rgb(35,31,32);\">. You will need to&nbsp;deploy to Firebase and test your geolocation code from there instead.</span></li><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:&nbsp;</strong></span>Remember to clear your cache and refresh when testing in Firebase. &nbsp;You may also need to click on the icons that appear&nbsp;in the browser URL bar to allow scripts/geolocation to run for your app.</li></ol></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong></span><ol><li><span style=\"color: rgb(35,31,32);\">Since you are probably not located&nbsp;where the client's games are being played, you will need to do two different tests.</span><ol><li><span style=\"color: rgb(35,31,32);\">First, verify that your code is getting the true location of a user.</span></li><li><span style=\"color: rgb(35,31,32);\">Second, verify that your code to place the user on the game maps works correctly, using sample location values.</span><ol><li><span style=\"color: rgb(35,31,32);\">Set a fictional field location near your (the&nbsp;user's)&nbsp;location (<em>temporarily</em>&nbsp;overwrite one&nbsp;field's&nbsp;location code). &nbsp;Then see if both&nbsp;appear in the proper location on the map. &nbsp;Remember to return the field code back to the correct location after you have tested it. &nbsp;</span><ul><li><span style=\"color: rgb(35,31,32);\"><em>Resources</em>&nbsp;has a link to a tool for&nbsp;converting addresses to&nbsp;latitude&nbsp;and longitude.</span></li></ul></li></ol></li></ol></li></ol></li><li><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:&nbsp;</strong></span><strong style=\"color: rgb(35,31,32);\">Submit&nbsp;your modified HTML, CSS and JavaScript&nbsp;</strong><span style=\"color: rgb(35,31,32);\">for mentor review.&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">(Optional)&nbsp;<strong>Enable users to see directions/path from their current location on the map to the game location on the game details page.</strong></span><ol><li><span style=\"color: rgb(35,31,32);\">Follow the code examples for doing this&nbsp;in&nbsp;<em>Resources</em>.</span></li></ol></li></ol></div></div></div></div></div></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"4d10f92e-1e08-4fba-9a3d-b22bdd5e6588\"><ac:parameter ac:name=\"title\">Step 2- Add Cache Manifest </ac:parameter><ac:rich-text-body><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Add a cache manifest to your&nbsp;web app.</strong></span><ol><li><span style=\"color: rgb(35,31,32);\">Collect a list of all resources used by your web app.</span></li><li><span style=\"color: rgb(35,31,32);\">Create a cache.manifest file with this list.</span></li><li><span style=\"color: rgb(35,31,32);\">See the reference in&nbsp;<em>Resources&nbsp;</em>for specific details and an example.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Turn off your network and see if you can use all of the web app features.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Add code to queue posted messages when offline</strong>.</span><ol><li><span style=\"color: rgb(35,31,32);\">Just store them for now. We'll worry about automatically sending them later.</span></li><li><span style=\"color: rgb(35,31,32);\">Put this code in the failure callback of the Firebase&nbsp;function that posts the message.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Verify that if the network is not available, messages are put into local storage.</span></li></ol></ac:rich-text-body></ac:structured-macro><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"05f90ad6-0258-4a9b-957f-dad910181abd\"><ac:parameter ac:name=\"title\">Step 3 - Queue messages when offline</ac:parameter><ac:rich-text-body><ol><li><span style=\"color: rgb(35,31,32);\"><strong>When a message has to be queued, create&nbsp;a JavaScript timer&nbsp;</strong>to try posting again in 1 minute, i.e., 60,000 milliseconds.</span><ol><li><span style=\"color: rgb(35,31,32);\">JavaScript&nbsp;</span><span>&nbsp;</span><span style=\"color: rgb(35,31,32);\"><strong>setTimeOut()</strong>&nbsp;should be sufficient, as long as the function that the timer calls to try posting messages contains code to set yet another timer if the posting fails.</span></li><li><span style=\"color: rgb(35,31,32);\">Be careful! If you use&nbsp;<strong>setInterval()</strong>&nbsp;or some other timer function, be sure the timer is cleared when there are no messages to post, to avoid needless network activity.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Verify that if you restore the network connection, queued messages are sent.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Add a user preference to control queuing posted messages.</strong></span><ol><li><span style=\"color: rgb(35,31,32);\">Queue Messages Preference</span><ul><li><span style=\"color: rgb(35,31,32);\">Add an HTML form that allows user to select the option to queue messages for later posting (e.g., with a checkbox)</span></li><li><span style=\"color: rgb(35,31,32);\">Add a key value pair to local storage to store whether this feature (message queuing) is turned on or off with&nbsp;the checkbox&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">Add a key value pair to local storage in which to save queued messages when user selects that option.</span></li><li><span style=\"color: rgb(35,31,32);\">Add code that runs whenever the page is loaded to get the local storage value for the message queuing feature and check or uncheck the checkbox appropriately. No value stored is the same as false.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">Check Network Frequency Preference</span><ul><li><span style=\"color: rgb(35,31,32);\">Add HTML so user can select&nbsp;how often the app should check the network and try to post messages (e.g. dropdown select or text input) This selection needs to be stored in local storage.</span></li><li><span style=\"color: rgb(35,31,32);\">Modify your message queuing code to use the check network frequency selection appropriately. &nbsp;Add a key value pair to local storage to control how often the app should try to post queued messages.</span></li></ul></li><li>&nbsp;As needed, Update HTML&nbsp;to create&nbsp;a user preference screen with&nbsp;the&nbsp;HTML form to set these values.<ol><li><span style=\"color: rgb(35,31,32);\">For example:</span><ol><li><span style=\"color: rgb(35,31,32);\">A checkbox to turn queuing on and off</span></li><li><span style=\"color: rgb(35,31,32);\">A text input field&nbsp;to specify how often to try re-posting, in minutes.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\">Be sure to alert the user of&nbsp;special cases and let them cancel an operation. For example:</span><ol><li><span style=\"color: rgb(35,31,32);\">Disabling queuing when queued messages exist;</span></li><li><span style=\"color: rgb(35,31,32);\">Or, setting the wait time to 0.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\">Add a settings icon at the top of your web app screens to access the preferences screen.</span></li></ol></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Verify that when you change the settings, the queuing of posted messages responds appropriately, including the cases requiring alerts.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Deploy to Firebase and verify everything works from there.</span></li><li><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:&nbsp;</strong></span><strong style=\"color: rgb(35,31,32);\">Submit your modified HTML, CSS and JavaScript&nbsp;</strong><span style=\"color: rgb(35,31,32);\">for mentor review.</span></li></ol></ac:rich-text-body></ac:structured-macro><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"fa6bb1cb-ef12-44ce-bdca-48dd9225111f\"><ac:parameter ac:name=\"title\">Step 4- Submit your client deliverables</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\"><strong>Submit your client deliverable.</strong></span><span style=\"color: rgb(9,30,66);\"><span>&nbsp;</span></span><span style=\"color: rgb(35,31,32);\">In plain text, send the URL of the web app, plus a brief&nbsp;write-up&nbsp;of what you did.</span><span style=\"color: rgb(9,30,66);\"><span>&nbsp;</span></span><span style=\"color: rgb(35,31,32);\">The mentor will tell you when you are ready to do this.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "260505710",
    "conflChildrenId": [
      "261226631"
    ]
  },
  {
    "title": "Mobile App - Task 6",
    "content": "<h1 style=\"\"><span style=\"color: rgb(128,130,133);\">Introduction</span></h1><h1 style=\"\"><span style=\"color: rgb(128,130,133);\">Your Task</span></h1><p style=\"\"><span style=\"color: rgb(35,31,32);\">You have been asked by League Director, Tom Denton, to add the ability to take pictures in the web app.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">This turns out to require a major change. You will need to transform the web app into a&nbsp;hybrid app in order to gain access to the camera.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">The steps outlined in this Plan of Attack&nbsp;are one way to port the web app to PhoneGap and add the required picture functionality.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\"><strong>As part of this task, you will submit the following for review:&nbsp;</strong></span></p><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\">For Mentor Review: The HTML, CSS and&nbsp;JavaScript you changed so that users could take, post, and display pictures in messages.</span></li><li><span style=\"color: rgb(35,31,32);\">For Client Deliverable: A zip file of your PhoneGap project and a brief write-up (in a plain text file) on what you did.</span><ul><li><span style=\"color: rgb(35,31,32);\">Your mentor will&nbsp;advise you as to when you are ready to submit this package to the client.</span></li></ul></li></ul><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"55a29a90-3c99-4e6c-8bae-dc9682d17314\"><ac:parameter ac:name=\"title\">Step 1 - Port web app to PhoneGap</ac:parameter><ac:rich-text-body><ol style=\"\"><li>&nbsp;<strong>Install&nbsp;PhoneGap for Android.</strong><ol><li>Follow the instructions at&nbsp;PhoneGap. Refer to the references in&nbsp;<em>Resources</em>&nbsp;for guidance.</li><li>Be sure to follow the instructions for your platform, e.g., Windows or MacOS.</li></ol></li><li><strong>Test!</strong>&nbsp;Create one of the simple&nbsp;PhoneGap&nbsp;examples and make sure it works on an emulator and/or mobile device.</li><li><strong>Create a new project for the&nbsp;NYSL&nbsp;app.</strong><ol><li>Move the web app files into the appropriate subdirectory.</li><li>Set up the native app wrapper, as described in the references in&nbsp;<em>Resources.</em></li></ol></li><li><strong>Test!</strong>&nbsp;Make sure your web app performs as before.<ol><li>You may need to adjust permissions in the Android or&nbsp;iOS&nbsp;project settings to allow for communication with <a href=\"http://Firebase.com\">Firebase.com</a>.</li></ol></li></ol><p class=\"auto-cursor-target\"><br /></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"42d3f39e-e359-4756-b764-41a1adaa9412\"><ac:parameter ac:name=\"title\">Step 2 -Add ability to take pictures</ac:parameter><ac:rich-text-body><div class=\"table-wrap\" style=\"\"><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Add a button to take a picture</strong>&nbsp;on the game messages page.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Add the JavaScript code to take a picture</strong>&nbsp;and let the user save it to the phone.</span><ol><li><span style=\"color: rgb(35,31,32);\">Set the quality to 50 or less to reduce how much memory the picture uses.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Verify you can take and save a picture.</span></li><li><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span></li></ol></div><div class=\"table-wrap\" style=\"\"><span style=\"color: rgb(35,31,32);\"><strong>Submit&nbsp;your code for taking pictures&nbsp;</strong>to the mentor for review.</span>&nbsp;</div><p class=\"auto-cursor-target\"><br /></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"76122646-5f7d-496d-994f-c3eaa39e91a0\"><ac:parameter ac:name=\"title\">Step 3 - Add ability to post pictures</ac:parameter><ac:rich-text-body><ol style=\"\"><li><span style=\"color: rgb(35,31,32);\"><strong>Modify the picture taking screen to offer the option to post the picture</strong>&nbsp;just taken.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Add code to upload a picture file to Firebase</strong>&nbsp;as a message.</span><ol><li><span style=\"color: rgb(35,31,32);\">The advantage of key-value databases is that you just need to add a new key, e.g.,&nbsp;<strong>picture</strong>, to your existing Firebase&nbsp;message object.</span></li><li><span style=\"color: rgb(35,31,32);\">Users should still be able to include text with the&nbsp;message.</span></li><li><span style=\"color: rgb(35,31,32);\">Messages with pictures should be queued, if queuing is enabled.</span></li><li><span style=\"color: rgb(35,31,32);\">Whether posted or not, save the picture to the phone so that the user has a copy.</span></li></ol></li></ol><p style=\"\"><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br /><span style=\"color: rgb(35,31,32);\">You will need to install the cordova file plugin, and use the functions it offers to read and format your image file into a blob.&nbsp; Firebase storage will only accept image files formatted into blobs.</span></p><ol style=\"\"><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Verify that messages with pictures are uploaded.</span><ol><li><span style=\"color: rgb(35,31,32);\">Use the Firebase&nbsp;web data browser to see what's been uploaded.</span></li><li><span style=\"color: rgb(35,31,32);\">Verify that queued messages with pictures work.</span></li></ol></li><li><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span></li></ol><p style=\"\"><span style=\"color: rgb(35,31,32);\"><strong>Submit</strong>&nbsp;<strong>your new&nbsp;code for posting pictures</strong>&nbsp;to the mentor for review.</span><span>&nbsp;</span></p><p class=\"auto-cursor-target\"><br /></p></ac:rich-text-body></ac:structured-macro><p><br /></p><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"a5126635-96d1-44da-97bc-2624455e91e5\"><ac:parameter ac:name=\"title\">Step 4 - Display pictures on the message screens</ac:parameter><ac:rich-text-body><ol style=\"\"><li><span style=\"color: rgb(35,31,32);\"><strong>Add code to display small picture thumbnails&nbsp;</strong>in the message list.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Add code so that tapping the thumbnail shows a larger view&nbsp;</strong>of the picture.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Verify the pictures you've uploaded appear in the&nbsp;message&nbsp;display.</span></li><li><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span></li></ol><p style=\"\"><span style=\"color: rgb(35,31,32);\"><strong>Submit&nbsp;your new code</strong>&nbsp;for mentor review.</span></p><p class=\"auto-cursor-target\"><br /></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"8cdb4f61-6017-453e-ab96-87df05c7584e\"><ac:parameter ac:name=\"title\">Step 5 - Submit your client deliverable</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br style=\"\" /><span style=\"color: rgb(35,31,32);\"><strong>Submit your client deliverable.</strong></span><span style=\"color: rgb(9,30,66);\"><span>&nbsp;</span></span><span style=\"color: rgb(35,31,32);\">In plain text, send the URL of the web app, plus a brief&nbsp;write-up&nbsp;of what you did.</span><span style=\"color: rgb(9,30,66);\"><span>&nbsp;</span></span><span style=\"color: rgb(35,31,32);\">The mentor will tell you when you are ready to do this.</span></p></ac:rich-text-body></ac:structured-macro><p><br /></p><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "260735073",
    "conflChildrenId": [
      "260472952",
      "260833290"
    ]
  },
  {
    "title": "Mobile App - Task 3",
    "content": "<p style=\"\"><a class=\"external-link\" style=\"text-decoration: underline;\" href=\"https://gbstool.learningbydoingtools.com/mc/poa?productID=4978&amp;taskID=1736#introduction\" rel=\"nofollow\"><span style=\"color: rgb(38,34,98);\">INTRODUCTION</span></a></p><h1 style=\"\"><span style=\"color: rgb(128,130,133);\">Your Task</span></h1><p style=\"\"><span style=\"color: rgb(35,31,32);\">You have been asked by League Director, Tom Denton, to make the following improvements to the mobile web app:</span></p><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\">Change the layout in landscape orientation to take advantage of the greater width</span></li><li><span style=\"color: rgb(35,31,32);\">Instant or near-instant page transitions</span></li></ul><p style=\"\"><span style=\"color: rgb(35,31,32);\">These two improvements primarily involve restructuring the HTML and CSS to make a single-page responsive design, and adding JavaScript to handle page transitions.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">The steps outlined in the Plan of Attack&nbsp;are one way to update the web app. These steps&nbsp;could be done in any order, but we recommend starting with the responsive web design first, because it introduces just a few new concepts and coding. Doing a single page web app, however, requires getting up to speed with JavaScript and restructuring all of your existing HTML into one file.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\"><strong>As part of this task, you will submit the following for review:&nbsp;</strong></span></p><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\">For Mentor Review:</span><ul><li><span style=\"color: rgb(35,31,32);\">Relevant sections of your CSS and&nbsp;HTML code related to implementing a&nbsp;landscape versus portrait responsive layout.</span></li><li><span style=\"color: rgb(35,31,32);\">JavaScript and relevant fragments of HTML used to implement the page transitions.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">For Client Deliverable: the URL of the updated mobile web app, with notes on any other changes made to the web app,&nbsp;or&nbsp;known issues.</span><ul><li><span style=\"color: rgb(35,31,32);\">Your mentor will&nbsp;advise you as to when you are ready to submit this package to the client.</span></li></ul></li></ul><p style=\"\"><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br /><span style=\"color: rgb(35,31,32);\">When submitting fragments of your CSS and HTML code for mentor review, be sure to clearly label the source file (i.e. give the filename, including folder) for each&nbsp;fragment.</span></p><p style=\"\"><br /></p><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"bcddd0c6-41d0-47ad-ba0b-a3a32ca0bfc9\"><ac:parameter ac:name=\"title\">Step 1 - Make web app responsive </ac:parameter><ac:rich-text-body><div style=\"\"><div class=\"sc-TOsTZ hghlyc\"><div><div class=\"page view\"><div class=\"wiki-content\"><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Migrate to Twitter Bootstrap.&nbsp;</strong></span><ol><li><span style=\"color: rgb(35,31,32);\">Add a LINK in the HEAD section to load the Bootstrap CSS. See&nbsp;<em>Resources</em>&nbsp;for the link.</span><ol><li><span style=\"color: rgb(35,31,32);\">The Bootstrap JavaScript is optional. If you use it, you must also load the jQuery JavaScript library.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\">Update your HTML to use the Bootstrap CSS classes.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Make sure your local pages still look the way you want with every change.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Deploy an updated page to Firebase&nbsp;and verify it still looks as desired there.</span></li><li><span style=\"color: rgb(35,31,32);\">Remove any old CSS you are no longer using.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong></span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Sketch a new layout for landscape</strong>&nbsp;orientation.</span><ol><li><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span></li></ol></li></ol><p><span style=\"color: rgb(35,31,32);\"><strong>Submit</strong>&nbsp;this sketch to your mentor for review.</span></p><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Implement the new layout</strong>.</span><ol><li><span style=\"color: rgb(35,31,32);\">Add CSS media queries to select portrait vs. landscape layouts.</span></li><li><span style=\"color: rgb(35,31,32);\">Add CSS for the landscape layout.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong></span></li></ol><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><strong>After you are done testing, submit&nbsp;your changed HTML and CSS</strong>&nbsp;to your mentor for review.<br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br /><span style=\"color: rgb(35,31,32);\">When submitting fragments of your CSS and HTML code for mentor review, be sure to clearly label the source file (i.e. give the filename, including folder) for each&nbsp;fragment.</span></p></div></div></div></div></div></ac:rich-text-body></ac:structured-macro><p style=\"\"><br /></p><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"5a0d0f6c-d7c7-402c-a937-68c942c5b0c0\"><ac:parameter ac:name=\"title\">Step 2 - Make the web app a single page</ac:parameter><ac:rich-text-body><div style=\"\"><div class=\"sc-TOsTZ hghlyc\"><div><div class=\"page view\"><div class=\"wiki-content\"><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Create a new HTML file combining your current separate HTML files.</strong></span><ol><li><span style=\"color: rgb(35,31,32);\">Don't include the HEAD sections of the old HTML.</span></li><li><span style=\"color: rgb(35,31,32);\">Put each page into a DIV&nbsp;with the appropriate classes to represent a page. Refer to the book for how to do this.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Open the file and make sure you see everything &ndash; no broken images, bad fonts, etc.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Add CSS to make pages hidden by default.&nbsp;</strong>Refer to the book for how to do this.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Add JavaScript for page transitions.&nbsp;</strong>Refer to the book.</span><ol><li><span style=\"color: rgb(35,31,32);\">Work on one layout at a time, i.e., portrait then landscape, or vice versa.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!&nbsp;</strong>Check how your local pages are looking frequently.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!&nbsp;</strong>When one orientation seems correct, deploy it to Firebase&nbsp;and check.</span></li></ol></li></ol><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><strong>Submit your changed HTML, CSS, and JavaScript</strong>&nbsp;for mentor review.&nbsp;<br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />When submitting fragments of your CSS and HTML code for mentor review, be sure to clearly label the source file (i.e. give the filename, including folder) for each&nbsp;fragment.</p></div></div></div></div></div></ac:rich-text-body></ac:structured-macro><p style=\"\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"10ae7a5e-963b-412b-809a-059c9be8a134\"><ac:parameter ac:name=\"title\">Step 3 - Submit your client deliverable</ac:parameter><ac:rich-text-body><div style=\"\"><div class=\"sc-TOsTZ hghlyc\"><div><div class=\"page view\"><div class=\"wiki-content\"><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><strong>Submit your client deliverable.</strong><span>&nbsp;</span>In plain text, send the URL of the web app, plus a brief&nbsp;write-up&nbsp;of what you did. The mentor will tell you when you are ready to do this.<br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span></p></div></div></div></div></div></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "260767861",
    "conflChildrenId": [
      "260997172"
    ]
  },
  {
    "title": "Mobile App Test Page",
    "content": "<p><a href=\"https://gbstool.learningbydoingtools.com/mc/poa?productID=4978&amp;taskID=1737#introduction\"><span style=\"color: rgb(38,34,98);\">INTRODUCTION</span></a></p>\n<h1><span style=\"color: rgb(128,130,133);\">Your Task</span></h1>\n<p><span style=\"color: rgb(35,31,32);\">You have been asked by League Director, Tom Denton, to add the following major capability to&nbsp;the mobile web app: a user can post messages visible to other users of the web app.</span><br />\n<span style=\"color: rgb(35,31,32);\">This requires adding several&nbsp;new back-end elements to the system:</span></p>\n<ul>\n\t<li><span style=\"color: rgb(35,31,32);\">User accounts</span></li>\n\t<li><span style=\"color: rgb(35,31,32);\">A database of sample messages</span></li>\n\t<li><span style=\"color: rgb(35,31,32);\">Dynamically constructed HTML pages</span></li>\n\t<li><span style=\"color: rgb(35,31,32);\">JSON data objects</span></li>\n</ul>\n\n\n<p><span style=\"color: rgb(35,31,32);\">The steps below are one way to update the web app. The ordering is to make it easier to test as you go along.</span><br />\n<span style=\"color: rgb(35,31,32);\">Here are the high-level steps to follow. Continue through the Plan of Attack for more detailed guidance.</span></p>\n<ol>\n\t<li><span style=\"color: rgb(35,31,32);\">Get an example app running and see how to use:</span>\n\t<ul>\n\t\t<li><span style=\"color: rgb(35,31,32);\">HTML/JavaScript to add&nbsp;user signup and login</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\">HTML/JavaScript to add a form to post messages</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\">HTML templates for getting and displaying&nbsp;messages</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\">JavaScript for displaying messages retrieved from&nbsp;Firebase</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\">JavaScript for posting a new message</span></li>\n\t</ul>\n\t</li>\n\t<li><span style=\"color: rgb(35,31,32);\">Modify the CSS/HTML/JavaScript to create&nbsp;the&nbsp;UI flow for the new functionality per&nbsp;your design.</span></li>\n\t<li><span style=\"color: rgb(35,31,32);\">Modify the JavaScript for your specific app data (to get the game data and display it).</span></li>\n\t<li><span style=\"color: rgb(35,31,32);\">Use&nbsp;JavaScript to give the app the client requested UI features.&nbsp;</span></li>\n</ol>\n\n\n<p><span style=\"color: rgb(35,31,32);\"><strong>As part of this task, you will submit the following for review:&nbsp;</strong></span></p>\n<ul>\n\t<li><span style=\"color: rgb(35,31,32);\">For Mentor Review:</span>\n\t<ul>\n\t\t<li><span style=\"color: rgb(35,31,32);\">Screen mockup and UI flow diagram for the new functionality</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\">JavaScript and relevant fragments of HTML and HTML templates for getting and displaying&nbsp;messages</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\">JavaScript for displaying messages that are retrieved from&nbsp;Firebase</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\">JavaScript for posting a new message</span></li>\n\t</ul>\n\t</li>\n\t<li><span style=\"color: rgb(35,31,32);\">For Client Deliverable: the URL of the updated mobile web app, with notes on: what was built, changes made to other parts of the web app,&nbsp;and any known issues or limitations</span>\n\t<ul>\n\t\t<li><span style=\"color: rgb(35,31,32);\">Your mentor will&nbsp;advise you as to when you are ready to submit this package to the client.</span></li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />\n<span style=\"color: rgb(35,31,32);\">When submitting fragments of your CSS and HTML code for mentor review, be sure to clearly label the source file (i.e. give the filename, including folder) for each&nbsp;fragment.</span>\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" /></p>\n<h2><span style=\"color: rgb(128,130,133);\"><strong>Get&nbsp;example code working in your&nbsp;app (learn how it works)</strong></span></h2>\n<ol>\n\t<li><a href=\"https://github.com/firebase/quickstart-js/tree/master/database\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">This quickstart guide</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;contains code that&nbsp;allows users to sign in and post messages. &nbsp;We will get the&nbsp;example&nbsp;app working and then modify it for our specific use case. &nbsp;<strong>Copy and paste</strong>&nbsp;</span><a href=\"https://github.com/firebase/quickstart-js/blob/master/database/index.html\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">from the example code</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;into your app.</span></li>\n\t<li><span style=\"color: rgb(35,31,32);\">*Add&nbsp;main.js file:*</span>\n\t<ol>\n\t\t<li><span style=\"color: rgb(35,31,32);\">Create a&nbsp;folder called 'js' within your app folder. &nbsp;Add the&nbsp;</span><a href=\"https://github.com/firebase/quickstart-js/blob/master/database/scripts/main.js\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">main.js file from&nbsp;the quickstart example</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;to the 'js' folder you just created.&nbsp;(This file will be called in your index.html to communicate with firebase.)</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Open your index.html file and check the console to see if main.js is loading correctly.</span></li>\n\t</ol>\n\t</li>\n\t<li><span style=\"color: rgb(35,31,32);\"><strong>Enable</strong>&nbsp;<strong>authentication</strong></span>\n\t<ol>\n\t\t<li><span style=\"color: rgb(35,31,32);\">Go to firebase dashboard for your app</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\">Click 'Auth' on the left, then go to the 'Sign In Method' tab. &nbsp;Select 'Google', 'enable', and 'save'.</span></li>\n\t</ol>\n\t</li>\n\t<li><span style=\"color: rgb(35,31,32);\"><strong>Add security/validation rules</strong></span>\n\t<ul>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Background</strong>: By default, anyone who knows the URL of your Firebase app can change any data any way they want, either intentionally or by accident. &nbsp;To prevent this, you need to add security and validation rules. Here is a simple set of rules that will make sure someone has to be logged in to post, and has to submit minimally valid data.&nbsp;</span>  <span style=\"color: rgb(35,31,32);\">These rules say</span>\n\t\t<ul>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">The&nbsp;<strong>&quot;.read&quot;: true</strong>&nbsp;at the root says that anyone can read anything. They don't even have to log in.</span></li>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">The&nbsp;<strong>&quot;.write&quot;</strong>&nbsp;rule under&nbsp;<strong>$noteid</strong>&nbsp;says that a note object is allowed only if the user is logged in and the user ID they are logged in under matches the one in the note object.</span></li>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">The&nbsp;<strong>&quot;.validate&quot;</strong>&nbsp;rule under&nbsp;<strong>$noteid</strong>&nbsp;says that a note object is valid only if it contains non-empty author and text values.</span></li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n\t<li>{</li>\n\t<li>&quot;.read&quot;: true,</li>\n\t<li>&quot;notes&quot;: {</li>\n\t<li>&quot;$noteid&quot;: {</li>\n\t<li>&quot;.write&quot;: &quot;auth.uid == newData.child('uid').val()&quot;,</li>\n\t<li>&quot;.validate&quot;: &quot;newData.hasChildren(['author', 'text'])</li>\n\t<li>&amp;&amp; newData.child('author').val().length &gt; 0</li>\n\t<li>&amp;&amp; newData.child('text').val().length &gt; 0&quot;</li>\n\t<li>}</li>\n\t<li>}</li>\n\t<li>}</li>\n\t<li><br class=\"atl-forced-newline\" />\n\t<ol>\n\t\t<li><span style=\"color: rgb(35,31,32);\">&nbsp;To install these rules:</span>\n\t\t<ul>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">Go to your app dashboard at Firebase.</span></li>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">Click on&nbsp;<strong>Database</strong>&nbsp;and select the<strong>&nbsp;Rules</strong>&nbsp;tab.</span></li>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">Replace the entire set of rules at Firebase with the rules above.</span></li>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">Click&nbsp;<strong>Publish</strong>. Firebase will tell you if the rules are accepted.</span></li>\n\t\t</ul>\n\t\t</li>\n\t</ol>\n\t</li>\n</ol>\n\n\n<p><span style=\"color: rgb(35,31,32);\">It's best to test that these rules work. Firebase provides a&nbsp;<strong>simulator</strong>&nbsp;web page to test which read and write operations are allowed with different authentications. The interface is simple but tedious to use. At the very least, it helps to make a table of test cases that you can copy and paste into the simulator.</span></p>\n<ol>\n\t<li><span style=\"color: rgb(35,31,32);\"><strong>Deploy and Test</strong></span>\n\t<ol>\n\t\t<li><span style=\"color: rgb(35,31,32);\">use&nbsp;<strong>firebase</strong>&nbsp;<strong>deploy</strong>&nbsp;command in app folder from terminal</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Got to firebase app URL and try your new 'Team Notes' section:</span>\n\t\t<ol>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">Sign up a user</span></li>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">Post a note for the new user</span></li>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">Check that user appears in the 'Auth' section of your firebase app dashboard</span></li>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">Check that new note data appears in 'data' section of your firebase app dashboard</span></li>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">If not, debug.</span></li>\n\t\t</ol>\n\t\t</li>\n\t</ol>\n\t</li>\n\t<li><span style=\"color: rgb(35,31,32);\"><strong>Update code</strong>&nbsp;by removing unnecessary code from index.html and main.js. &nbsp;</span>\n\t<ol>\n\t\t<li><span style=\"color: rgb(35,31,32);\">Remove code that doesn't apply to your app. &nbsp;Deploy and Test.</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\">Use&nbsp;</span><a href=\"https://github.com/firebase/quickstart-js/blob/master/auth/email.html\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">another quickstart example</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;as a guide. &nbsp;Write code to set up email/password auth.</span></li>\n\t\t<li><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span></li>\n\t</ol>\n\t</li>\n</ol>\n\n\n<p><span style=\"color: rgb(35,31,32);\">Remember to enable email/password as a sign in method from the Firebase console.</span></p>\n<ol>\n\t<li><span style=\"color: rgb(35,31,32);\"><strong>Deploy and Test</strong>.</span></li>\n</ol>\n\n\n<p><br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<span style=\"color: rgb(35,31,32);\">In this step you will create the messages display screen design and HTML/JS/CSS code fragments (with placeholders for future game information). &nbsp;At this point, all messages in the database will be listed(per the example) and no dynamic game information will be included. &nbsp;In a later step, we will pass the game information to the database and filter the messages based on which game detail page is clicked.</span></p>\n<ol>\n\t<li><span style=\"color: rgb(35,31,32);\"><strong>Add a message display screen, with a button to it from the game detail screen.</strong>&nbsp;&nbsp;Using your layout sketch, design the CSS and HTML for displaying the list of messages.</span>\n\t<ol>\n\t\t<li><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span></li>\n\t</ol>\n\t</li>\n</ol>\n\n\n<p><span style=\"color: rgb(35,31,32);\">Submit your UI mockup and flow diagram to your mentor for review.</span></p>\n<ol>\n\t<li><span style=\"color: rgb(35,31,32);\">In your web app HTML:</span>\n\t<ol>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Add any additional HTML needed</strong>&nbsp;for your design.</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Add to your stylesheet the CSS needed</strong>&nbsp;for your design.</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Add CSS to make the list of messages 'page' hidden by default.</strong>&nbsp;&nbsp;Refer to the book for how to do this. &nbsp;(As you did previously when you converted your app from multi-page to single-page)</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Add JavaScript for the page transition.</strong>&nbsp;&nbsp;Refer to the book. &nbsp;(Again, as you did before.)</span>\n\t\t<ol>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">Work on one layout at a time, i.e., portrait then landscape, or vice cersa. (In landscape, for example, you may want to take advantage of the additional room to show both some game detail data&nbsp;<em>and</em>&nbsp;the messages list.)</span></li>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Check how your local pages are looking frequently.</span></li>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Test!&nbsp;</strong>When one orientation seems correct, deploy it to Firebase and check.</span></li>\n\t\t</ol>\n\t\t</li>\n\t\t<li><span style=\"color: rgb(35,31,32);\">On the game details screen,&nbsp;<strong>add a button to show game messages</strong>.</span>\n\t\t<ol>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">Add JavaScript so that when the button is tapped, the message display screen is shown.</span>\n\t\t\t<ol>\n\t\t\t\t<li><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span></li>\n\t\t\t</ol>\n\t\t\t</li>\n\t\t</ol>\n\t\t</li>\n\t</ol>\n\t</li>\n</ol>\n\n\n<p><span style=\"color: rgb(35,31,32);\">A&nbsp;couple options are: 1. This button/link could go to a popup, or 2. The link/button could&nbsp;open the form/messages in the Game Details portion of the page.</span></p>\n<ol>\n\t<li>\n\t<ol>\n\t\t<li>\n\t\t<ol>\n\t\t\t<li>\n\t\t\t<ol>\n\t\t\t\t<li><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span></li>\n\t\t\t</ol>\n\t\t\t</li>\n\t\t</ol>\n\t\t</li>\n\t</ol>\n\t</li>\n</ol>\n\n\n<p><span style=\"color: rgb(35,31,32);\">Refer to the book and your previous work- this is similar to what you did to click on a game from a list and pull up its detail 'page' (actually a DIV)</span></p>\n<ol>\n\t<li>\n\t<ol>\n\t\t<li>\n\t\t<ol>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Make sure the messages appear the way you want on your local page.</span></li>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Deploy to Firebase and make sure everything still works.</span></li>\n\t\t\t<li><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span></li>\n\t\t</ol>\n\t\t</li>\n\t</ol>\n\t</li>\n</ol>\n\n\n<p><span style=\"color: rgb(35,31,32);\">Submit for mentor review the HTML, CSS and JavaScript code you added to display a list of messages.</span><br />\n<span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />\nWhen submitting fragments of your CSS and HTML code for mentor review, be sure to clearly label the source file (i.e. give the filename, including folder) for each fragment.\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" /></p>\n<ol>\n\t<li><span style=\"color: rgb(35,31,32);\"><strong>Write Javascript&nbsp;to get and pass game information to database&nbsp;</strong>when form submitted.</span>\n\t<ol>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Plan</strong>. Decide what game information will be passed to the database. &nbsp;What will it be called? &nbsp;What kind of input will it be? (i.e. gameId, gameName, gameTime, gameInfo?)</span>\n\t\t<ol>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">When that form is submitted, JavaScript should save a Firebase&nbsp;message object with the time, user, game and message.</span></li>\n\t\t</ol>\n\t\t</li>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Add input field(s)&nbsp;</strong>for game information&nbsp;in HTML form.&nbsp;</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Capture specific game information&nbsp;</strong>(from HTML&nbsp;of game detail page) and&nbsp;<strong>pass it to the new form input&nbsp;</strong>with JavaScript.&nbsp;</span>\n\t\t<ol>\n\t\t\t<li><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span></li>\n\t\t</ol>\n\t\t</li>\n\t</ol>\n\t</li>\n</ol>\n\n\n<p><span style=\"color: rgb(35,31,32);\">See&nbsp;</span><a href=\"http://stackoverflow.com/questions/7764154/pass-a-javascript-variable-value-into-input-type-hidden-value\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">example</span></span></a><span style=\"color: rgb(35,31,32);\">. &nbsp;You can add JavaScript code that stores the game in question (in a variable) when a user pushes the &quot;Messages&quot; button from a game's detail screen.</span></p>\n<ol>\n\t<li>\n\t<ol>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Update the main.js methods</strong>&nbsp;so that&nbsp;game information inputs will be sent and saved to firebase database. &nbsp;</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Update HTML&nbsp;to show all game&nbsp;</strong>data with Mustache.js similar to:</span></li>\n\t</ol>\n\t</li>\n</ol>\n\n\n<p><span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">li</span><span style=\"color: rgb(153,153,153);\">&gt;</span>(<code>gameId</code>) <code>author</code> said: <code>text</code> <span style=\"color: rgb(153,153,153);\">&lt;/</span><span style=\"color: rgb(153,0,85);\">li</span><span style=\"color: rgb(153,153,153);\">&gt;</span></p>\n<ul>\n\t<li>\n\t<ul>\n\t\t<li>\n\t\t<ul>\n\t\t\t<li><span style=\"color: rgb(35,31,32);\">Review simple&nbsp;</span><a href=\"http://www.lynda.com/articles/introduction-to-javascript-templating-using-mustache-js\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Javascript templating tutorial</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;with Mustache.js</span>\n\t\t\t<ul>\n\t\t\t\t<li><span style=\"color: rgb(35,31,32);\">Look for how they load the needed libraries from online sources, create dynamic HTML using the templating engine Mustache, and then fill the dynamic HTML with JSON data from a separate file. We will be doing the same below.</span></li>\n\t\t\t</ul>\n\t\t\t</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t<ol>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Deploy and Test!</strong>&nbsp;Remove&nbsp;the old notes generated in previous tests from the 'data' section of firebase app dashboard. Create new notes from your firebase app and check 'data' that they have the correct game information.</span></li>\n\t</ol>\n\t</li>\n</ul>\n<ol>\n\t<li><span style=\"color: rgb(35,31,32);\"><strong>Show only the messages for the specific game clicked. &nbsp;</strong></span>\n\t<ol>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Update the code in main.js&nbsp;</strong>to&nbsp;use the game information variable created when a user pushes the &quot;Messages&quot; button&nbsp;(i.e. gameId) to show only the messages for that game. &nbsp;See&nbsp;</span><a href=\"https://firebase.google.com/docs/database/web/retrieve-data#next_steps\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">examples,</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;specifically filtering data&nbsp;to&nbsp;retrieve data from Firebase.&nbsp;<strong>&nbsp;</strong></span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Set up two test accounts per client email:&nbsp;</strong>denton@example.com with password nysl123, and&nbsp;parent@example.com with password soccer89, and put in a couple of posts from each for the first game on the schedule.</span></li>\n\t</ol>\n\t</li>\n\t<li><span style=\"color: rgb(35,31,32);\">Update HTML game information placeholders so specific game information&nbsp;appears dynamically (see&nbsp;</span><a href=\"http://www.w3schools.com/js/js_htmldom_html.asp\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">example</span></span></a><span style=\"color: rgb(35,31,32);\">).</span>\n\t<ol>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Make sure your page is showing the messages from Firebase&nbsp;and that they are displaying correctly.</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\"><strong>Test!&nbsp;</strong>Deploy to Firebase&nbsp;and verify the web app still works.</span></li>\n\t</ol>\n\t<ul>\n\t\t<li><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span></li>\n\t</ul>\n\t</li>\n</ol>\n\n\n<p><span style=\"color: rgb(35,31,32);\">Submit&nbsp;for mentor review the HTML and JavaScript code you&nbsp;added to display a list of messages retrieved from Firebase.</span>\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" />\n<br class=\"atl-forced-newline\" /></p>\n<ol>\n\t<li><span style=\"color: rgb(35,31,32);\">Use JavaScript to update the UI so that...</span>\n\t<ol>\n\t\t<li><span style=\"color: rgb(35,31,32);\">The post message button&nbsp;only appears on the game messages page if the user has logged in.</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\">When the post message button is tapped, the HTML form opens that lets the user enter a message.</span></li>\n\t\t<li><span style=\"color: rgb(35,31,32);\">When the form is submitted, a message object is still saved to Firebase&nbsp;and the message appears in the correct game detail page.</span></li>\n\t</ol>\n\t</li>\n\t<li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Verify that you can only post if you are logged in and that posted messages appear on the appropriate game messages screen.</span></li>\n\t<li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Deploy to Firebase&nbsp;and verify everything still works.</span></li>\n\t<li><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span></li>\n</ol>\n\n\n<p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />\n<span style=\"color: rgb(35,31,32);\"><strong>Submit your changed HTML, CSS, and JavaScript</strong>&nbsp;for&nbsp;mentor review.</span>  <span style=\"color: rgb(35,31,32);\">When submitting fragments of your CSS and HTML code for mentor review, be sure to clearly label the source file (i.e. give the filename, including folder) for each&nbsp;fragment.</span><br />\n<ac:structured-macro ac:name=\"anchor\" ac:schema-version=\"1\" ac:macro-id=\"e8c5bdf5-9628-4cf4-9f31-f3892e36a4e3\"><ac:parameter ac:name=\"\">_GoBack</ac:parameter></ac:structured-macro></p>",
    "conflPageId": "260833290",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Task 4 - Resources",
    "content": "<h1><span style=\"color: rgb(128,130,133);\">Background</span></h1><h2><span style=\"color: rgb(128,130,133);\">Persist data with Firebase</span></h2><p><span style=\"color: rgb(35,31,32);\">To implement posting game messages, you need a form where a user can type a message, and a place to store those messages. The first part can be done with a simple HTML form. The second part used to require building&nbsp;a web server program, written in Java, PHP, Python, C#, Ruby on Rails, or some other language, and a database server.</span></p><p><br /><span style=\"color: rgb(35,31,32);\">However, recently, some companies have begun offering an alternative that's especially attractive for mobile apps. &nbsp;They provide a database service that's accessible over the web. They take care of running the server, managing backups,&nbsp;and other administrative work. You just&nbsp;write code for the mobile device to store and retrieve data from the data service. Your code can be native code for the mobile device or JavaScript in a web page.</span><br /><span style=\"color: rgb(35,31,32);\">These companies also sometimes provide hosting for the web pages, and a command line tool to transfer web site assets, i.e., HTML, CSS, JavaScript, and image files, from your local machine to their site. This is an independent service, but convenient,&nbsp;because then you only need one web service account.</span></p><p><br /><span style=\"color: rgb(35,31,32);\">One of those services&nbsp;is&nbsp;<strong>Firebase,</strong>&nbsp;run by Google. Another service,&nbsp;<strong>Parse</strong>, run by Facebook, was very popular but is being shut down. There are several others, but&nbsp;<strong>Firebase</strong>&nbsp;is free and fairly simple to understand, so it's the obvious choice to use here.</span></p><p><br /><span style=\"color: rgb(35,31,32);\"><strong>Firebase</strong>, unlike some of these services, does not store data in tables. Instead, you create one big&nbsp;<strong>JSON</strong>&nbsp;object to hold all your application data.&nbsp;<strong>JSON</strong>&nbsp;stand for&nbsp;<strong>JavaScript Object Notation</strong>.&nbsp;This is a syntax for representing complex data, e.g., a user with a name, a list of email addresses, and a mailing&nbsp;address, which is itself an object with parts like street address, city, state and country. For example, here's one possible way to represent a user in JSON:</span></p><p style=\"margin-left: 60.0px;\"><br /><span style=\"color: rgb(153,153,153);\">{</span></p><p style=\"margin-left: 120.0px;\"><br /><span style=\"color: rgb(102,153,0);\">&quot;name&quot;</span><span style=\"color: rgb(153,153,153);\">:</span><span>&nbsp;</span><span style=\"color: rgb(102,153,0);\">&quot;Herman Munster&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;emails&quot;</span><span style=\"color: rgb(153,153,153);\">:</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">[</span><br /><span style=\"color: rgb(102,153,0);\">&quot;hmunster@<a href=\"http://aowl.com\">aowl.com</a>&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;hermanm@<a href=\"http://wahoo.com\">wahoo.com</a>&quot;</span><br /><span style=\"color: rgb(153,153,153);\">],</span><br /><span style=\"color: rgb(102,153,0);\">&quot;address&quot;</span><span style=\"color: rgb(153,153,153);\">:</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">{</span></p><p style=\"margin-left: 120.0px;\"><span style=\"color: rgb(102,153,0);\">&quot;street&quot;</span><span style=\"color: rgb(153,153,153);\">:</span><span>&nbsp;</span><span style=\"color: rgb(102,153,0);\">&quot;1313 Mockingbird Lane&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;city&quot;</span><span style=\"color: rgb(153,153,153);\">:</span><span>&nbsp;</span><span style=\"color: rgb(102,153,0);\">&quot;Mockingbird Heights&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;state&quot;</span><span style=\"color: rgb(153,153,153);\">:</span><span>&nbsp;</span><span style=\"color: rgb(102,153,0);\">&quot;California&quot;</span></p><p style=\"margin-left: 90.0px;\"><span style=\"color: rgb(153,153,153);\">}</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(153,153,153);\">}</span></p><p><br /><span style=\"color: rgb(35,31,32);\">If the above object is in a variable&nbsp;<strong>user</strong>, then it's easy to get the various pieces of data, using JavaScript's&nbsp;<strong>dot operator</strong>:</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong><a href=\"http://user.name\">user.name</a></strong>&nbsp;returns &quot;Herman Munster&quot;</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>user.address</strong>&nbsp;returns the object&nbsp;{ &quot;street&quot;: &quot;1313 Mockingbird Lane&quot;,&nbsp;&quot;city&quot;: &quot;Mockingbird Heights&quot;,&nbsp;&quot;state&quot;: &quot;California&quot;&nbsp;}</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>user.address.city</strong>&nbsp;returns&nbsp;&quot;Mockingbird Heights&quot;</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>user.emails</strong>&nbsp;returns the array&nbsp;[&nbsp;&quot;hmunster@<a href=\"http://aowl.com\">aowl.com</a>&quot;,&nbsp;&quot;hermanm@<a href=\"http://wahoo.com\">wahoo.com</a>&quot;&nbsp;]</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>user.emails[0]</strong>&nbsp;returns&nbsp;&quot;hmunster@<a href=\"http://aowl.com\">aowl.com</a>&quot;</span></li></ul><p><span style=\"color: rgb(35,31,32);\">JSON&nbsp;objects are a core part of&nbsp;JavaScript objects but the notation is&nbsp;now used as a way to put arbitrary objects into strings for sending over the Internet for all modern programming platforms.</span><br /><span style=\"color: rgb(35,31,32);\">To transfer data back and forth with Firebase, you use&nbsp;<strong>AJAX</strong>.&nbsp;<strong>AJAX&nbsp;</strong>stands for<strong>&nbsp;Asynchronous JavaScript and XML</strong>. Originally data was transferred in a data format called XML, but these days JSON is used instead.&nbsp;Modern browsers have added an object called&nbsp;<strong>XMLHttpRequest</strong>&nbsp;to JavaScript that lets JavaScript code get data from a server without reloading the current page, or causing the page to freeze up while waiting for the data to be returned. Various libraries, including jQuery, provide functions that&nbsp;are simpler to use than XMLHttpRequest.</span></p><h2><span style=\"color: rgb(128,130,133);\">User authentication with Firebase</span></h2><p><span style=\"color: rgb(35,31,32);\">User authentication, i.e., allowing users to sign up to get access to your web app, and then log in to access certain features, is both a common feature of most web apps and a common headache. This is not something you want to get wrong. Hackers constantly&nbsp;run tools to scan new websites for security holes.</span><br /><span style=\"color: rgb(35,31,32);\">Fortunately, Firebase&nbsp;provides functions in JavaScript that can be used to sign up and log in users, using an email address and some password. Firebase manages the database of users for you. You don't need to keep it in your JSON data.</span></p><h2><span style=\"color: rgb(128,130,133);\">HTML templating</span></h2><p><span style=\"color: rgb(35,31,32);\">Once you have data in a JSON object,&nbsp;it's not hard to write JavaScript to create the HTML to display the data. For example, given a variable&nbsp;<strong>user</strong>&nbsp;with the example JSON above,&nbsp;the following JavaScript would put into a web page&nbsp;the HTML to&nbsp;display the user's emails&nbsp;as an unordered list:</span><br />document<span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(221,74,104);\">write</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(102,153,0);\">&quot;&lt;ul&gt;&quot;</span><span style=\"color: rgb(153,153,153);\">);</span><br /><span style=\"color: rgb(0,119,170);\">for</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(0,119,170);\">var</span><span>&nbsp;</span>i<span>&nbsp;</span><span style=\"color: rgb(166,127,89);\">=</span><span>&nbsp;</span><span style=\"color: rgb(153,0,85);\">0</span><span style=\"color: rgb(153,153,153);\">;</span><span>&nbsp;</span>i<span>&nbsp;</span><span style=\"color: rgb(166,127,89);\">&lt;</span><span>&nbsp;</span>user<span style=\"color: rgb(153,153,153);\">.</span>emails<span style=\"color: rgb(153,153,153);\">.</span>length<span style=\"color: rgb(153,153,153);\">;</span><span>&nbsp;</span><span style=\"color: rgb(166,127,89);\">++</span>i<span style=\"color: rgb(153,153,153);\">)</span><span>&nbsp;</span>{color:#999999}{<br />document.<span style=\"color: rgb(221,74,104);\">write</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(102,153,0);\">&quot;&lt;li&gt;&quot;</span><span>&nbsp;</span><span style=\"color: rgb(166,127,89);\">+</span><span>&nbsp;</span>user<span style=\"color: rgb(153,153,153);\">.</span>emails<span style=\"color: rgb(153,153,153);\">[</span>i<span style=\"color: rgb(153,153,153);\">]</span><span>&nbsp;</span><span style=\"color: rgb(166,127,89);\">+</span><span>&nbsp;</span><span style=\"color: rgb(102,153,0);\">&quot;&lt;/li&gt;&quot;</span><span style=\"color: rgb(153,153,153);\">);</span><br /><span style=\"color: rgb(153,153,153);\">}</span><br />document<span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(221,74,104);\">write</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(102,153,0);\">&quot;&lt;/ul&gt;&quot;</span><span style=\"color: rgb(153,153,153);\">);</span><br /><span style=\"color: rgb(35,31,32);\">But this quickly becomes hard to maintain for large amounts of HTML. It is also not very readable to web designers who know HTML but not JavaScript.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">For this reason, a large number of HTML&nbsp;<strong>templating</strong>&nbsp;libraries have been developed. They let you write HTML, either in a hidden DIV or inside a SCRIPT element. Certain parts of the HTML are marked with labels to indicate where data should go. Then, you call a library function that takes a template, a data object, and a location in the current document. The function combines the template and data to generate the actual HTML to insert into the document at the location indicated. One popular and simple to use templating library is called Mustache. See&nbsp;<em>Resources</em>&nbsp;for information on Mustache.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span></p><h1><span style=\"color: rgb(128,130,133);\">Required Resources</span></h1><h2><span style=\"color: rgb(128,130,133);\">Mobile Web Programming Concepts</span></h2><ul><li><span style=\"color: rgb(35,31,32);\">Chapter 4 of&nbsp;<em>Build Mobile Websites and Apps for Smart Devices</em>&nbsp;by Earle Castledine, Myles Eftos, Max Wheeler --&nbsp;The last half of this chapter discusses getting JSON data with AJAX and feeding it into a template.</span></li><li><span style=\"color: rgb(35,31,32);\">jQuery-Mustache &ndash; We will use the Mustache template&nbsp;framework because it is more popular than the&nbsp;framework described in the book.</span><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.lynda.com/articles/introduction-to-javascript-templating-using-mustache-js\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Templating with Mustache</span></span></a><span style=\"color: rgb(35,31,32);\">- simple, clear example to study before you try this.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://plugins.jquery.com/mustache/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">jquery-Mustache download page</span></span></a></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://github.com/jonnyreeves/jquery-Mustache\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">github&nbsp;documentation page</span></span></a></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://mustache.github.io/mustache.5.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Mustache examples and syntax</span></span></a><span style=\"color: rgb(35,31,32);\">- to help you write HTML templates with Mustache syntax</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">Modern browsers have a developer console where error messages can be seen and JavaScript code can be tried out.</span><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://webmasters.stackexchange.com/questions/8525/how-to-open-the-javascript-console-in-different-browsers\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to Open the JavaScript Console</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- A cheat sheet for many different browsers.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://javascript.info/tutorial/development\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Browser Developer's Tools</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Although all the developer consoles do basically the same thing, the interfaces vary slightly; this link is a good starting point to find the instructions for the browser you use.</span></li></ul></li></ul><h2><span style=\"color: rgb(128,130,133);\">JSON</span></h2><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://scotch.io/tutorials/how-to-use-the-javascript-fetch-api-to-get-data\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to use JavaScript Fetch to get Data</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- also shows how to send data with POST</span></li></ul><h2><span style=\"color: rgb(128,130,133);\">Using Firebase&nbsp;with JavaScript</span></h2><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://gbstool.learningbydoingtools.com/ebooks/item?ebookID=12\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Introduction to Firebase</span></span></a></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://github.com/firebase/quickstart-js/blob/master/database/index.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">QuickStart Example App</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp; &ndash; &nbsp;This is a minimal note-posting web app in HTML/CSS/JavaScript using the new Firebase interface.</span></li><li>[<span>&nbsp;</span><span class=\"confluence-embedded-file-wrapper confluence-embedded-manual-size\"><ac:image ac:height=\"16\" ac:width=\"16\"><ri:attachment ri:filename=\"worddave05abcfe3cc312c4edfb96e3e31e5821.png\" ri:version-at-save=\"1\" /></ac:image></span><span>&nbsp;</span><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">&nbsp;TeamNotes Example App</span></span>|<a href=\"https://s3.amazonaws.com/gbstool/courses/481/docs/teamnotes.zip?AWSAccessKeyId=AKIAJBIZLMJQ2O6DKIAA&amp;Expires=1560416400&amp;Signature=e%2B%2Bn%2BEKLCTw9FarglvyC9%2FRKZRo%3D\">https://s3.amazonaws.com/gbstool/courses/481/docs/teamnotes.zip?AWSAccessKeyId=AKIAJBIZLMJQ2O6DKIAA&amp;Expires=1560416400&amp;Signature=e%2B%2Bn%2BEKLCTw9FarglvyC9%2FRKZRo%3D</a>]<span style=\"color: rgb(35,31,32);\">&nbsp; &ndash; This is a minimal note-posting web app in HTML/CSS/JavaScript using the Legacy Fireabase, heavily commented for pedagogical purposes. &nbsp;Although this example WILL NOT WORK with the new Firebase, there is a lot of information that can be learned by reading through its files.</span><ul><li><span style=\"color: rgb(35,31,32);\">After downloading and extracting the files, open the file&nbsp;<strong>TeamNotes/public/docs/index.html</strong>&nbsp;in a browser for an overview.</span></li><li><span style=\"color: rgb(35,31,32);\">Included in the&nbsp;<strong>docs</strong>&nbsp;directory is&nbsp;<strong>glossary.html</strong>&nbsp;with definitions of many programming terms in JavaScript and Firebase.</span></li></ul></li></ul><h1><span style=\"color: rgb(128,130,133);\">Additional Resources</span></h1><h2><span style=\"color: rgb(128,130,133);\">JSON</span></h2><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.json.org/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">JSON&nbsp;Syntax</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Provides a list of syntax code for JSON.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.copterlabs.com/blog/json-what-it-is-how-it-works-how-to-use-it/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">JSON: What It Is, How It Works, and How to Use It</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Describes how to use JSON.</span></li></ul><h2><span style=\"color: rgb(128,130,133);\">HTML Templating&nbsp;Frameworks</span></h2><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://engineering.linkedin.com/frontend/client-side-templating-throwdown-mustache-handlebars-dustjs-and-more\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Client-side Templating&nbsp;Throwdown</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- An overview of the many different JavaScript libraries for HTML templates.</span></li></ul>",
    "conflPageId": "260833348",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java - Task 1",
    "content": "<h2><span style=\"color: rgb(153,153,153);\">Introduction</span></h2><p><span style=\"color: rgb(35,31,32);\">You've been asked to build a web-based multi-player game application. Your first task is to implement and display a database of players. The structure of the web application is more than just HTML pages. There needs to be</span></p><ul><li><span style=\"color: rgb(35,31,32);\">a database table with player data</span></li><li><span style=\"color: rgb(35,31,32);\">a web service that can send a list of those players, in JSON form, in response to the URL&nbsp;<strong>/players</strong></span></li><li><span style=\"color: rgb(35,31,32);\">a web page that can display&nbsp;the desired list in a readable way, using JavaScript to get the data and construct the HTML</span></li></ul><p><span style=\"color: rgb(35,31,32);\"><strong>DON'T PANIC!</strong>&nbsp;There's are many things mentioned in the email that are probably completely mysterious to you. That's normal, especially at the start of a new project. It's not expected you know or understand all these terms and concepts. This is where you get to learn them.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Java</span></h2><p><span style=\"color: rgb(35,31,32);\">Java is an object-oriented programming language used for many purposes, but especially useful for creating the back end for web applications. The email refers to a number of Java concepts.&nbsp;<strong>Classes</strong>&nbsp;are a way to&nbsp;organize Java code. Classes specify how and where data should be stored. Classes also define&nbsp;<strong>methods</strong>&nbsp;for manipulating that data. When a Java program runs, it creates&nbsp;<strong>instances</strong>&nbsp;of those classes to hold particular data values. You'll be learning a lot about Java in each task. The&nbsp;<strong>Resources</strong>&nbsp;tab above has links to get you started.</span></p><h2><span style=\"color: rgb(153,153,153);\">Java Development Kit (JDK)</span></h2><p><span style=\"color: rgb(35,31,32);\">The Java Development Kit, also sometimes called the Java System Development Kit (SDK), refers to a set of programs that&nbsp;compile and run Java code. There are quite a few programs but here are the most important:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">The Java Runtime Engine (JRE) &ndash; this is the program that executes compiled Java programs.</span><ul><li><span style=\"color: rgb(35,31,32);\">The JRE&nbsp;must be installed to run Java.</span></li><li><span style=\"color: rgb(35,31,32);\">Most systems used to install the JRE by default, because web browsers used it. Because of security issues, this is no longer true.</span></li><li><span style=\"color: rgb(35,31,32);\">If you install the JDK, you may end up&nbsp;with&nbsp;two copies of the JRE, one installed on its own for browsers, and one installed by the JDK. This is not a problem.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">The Java Compiler &ndash; this is a program that compiles Java source code into compiled&nbsp;Java.</span><ul><li><span style=\"color: rgb(35,31,32);\">This is only installed if you have the JDK.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">The Java Archive tool &ndash; this is a program that assembles compiled Java files into a runnable program, called a JAR file.</span></li></ul><h2><span style=\"color: rgb(153,153,153);\">Integrated Development Environment (IDE)</span></h2><p><span style=\"color: rgb(35,31,32);\">The JDK does not include an editor. You can edit Java source code with any plain text editor, even&nbsp;<strong>Notepad</strong>, though this is not recommended. At the very least you want a programmer editor. There are many lists of such editors, e.g.,&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://www.elegantthemes.com/blog/resources/the-11-best-code-editors-available-in-2015\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">this one</span></a><span style=\"color: rgb(35,31,32);\">.</span><br /><span style=\"color: rgb(35,31,32);\">For Java, it's more common to install an integrated development environment (IDE) that includes</span></p><ul><li><span style=\"color: rgb(35,31,32);\">a text editor, with syntax coloring and indentation customized for Java code</span></li><li><span style=\"color: rgb(35,31,32);\">a file management system, so you can open and edit many files in a project at once</span></li><li><span style=\"color: rgb(35,31,32);\">compile and run tools, so it takes just one button click to save files, run the compiler, run the JAR tool, then run the final program</span></li><li><span style=\"color: rgb(35,31,32);\">debugging tools so that you can tell Java to pause execution at certain points in the code so that you can inspect the values of variables</span></li></ul><p><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/keplersr1\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Eclipse</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;and&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://netbeans.org/features/java/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Netbeans</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;are two popular, mature, free Java IDEs. Increasingly popular and very similar to Eclipse and Netbeans is&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://www.jetbrains.com/idea/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Intellij IDEA</span></a><span style=\"color: rgb(35,31,32);\">. Google selected Intellij IDEA to be the basis of&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://developer.android.com/tools/studio/index.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Android Studio</span></a><span style=\"color: rgb(35,31,32);\">,&nbsp;their IDE for&nbsp;Android Java development.</span><br /><span style=\"color: rgb(35,31,32);\">You wil be using the&nbsp;<strong>Community</strong>&nbsp;editon of Intellij IDEA. The Community edition is free, but&nbsp;lacks some of the advanced features of the commercial version.</span></p><h2><span style=\"color: rgb(153,153,153);\">Gradle</span></h2><p><span style=\"color: rgb(35,31,32);\">Most modern&nbsp;programs, in any language, are a combination of many source code files plus libraries of pre-written code from other sources. Building such&nbsp;programs involves a number of steps, such as</span></p><ul><li><span style=\"color: rgb(35,31,32);\">setting various options needed for properly compiling files, including specifying which directories have the project code</span></li><li><span style=\"color: rgb(35,31,32);\">downloading any library files needed that are not currently present</span></li><li><span style=\"color: rgb(35,31,32);\">detecting which files have changed and re-compiling them</span></li><li><span style=\"color: rgb(35,31,32);\">moving compiled files and other resources to special directories, e.g., a web server's application area</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The steps needed to build an application are&nbsp;kept in&nbsp;a&nbsp;project build file. &nbsp;Most IDEs have their own internal format, but there are also&nbsp;standard systems for managing Java projects that are independent of specific IDEs. Two popular ones are&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://maven.apache.org/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Maven</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;and&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://gradle.org/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Gradle</span></a><span style=\"color: rgb(35,31,32);\">. One of the nice features of these systems is that you can re-build someone else's Java project by just downloading the code directory, which includes a Maven (or Gradle) file. Simply running Maven (or Gradle) will then download all the other files you need, compile the source code, and build the program.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Most Java IDEs let you import and use a Maven or Gradle file, making it easy to edit and run the project. Intellij IDEA can import either.</span></p><h2><span style=\"color: rgb(153,153,153);\">JavaScript</span></h2><p><span style=\"color: rgb(35,31,32);\">JavaScript &ndash; no relation at all to Java &ndash; is a scripting language, available for use on web pages in&nbsp;all modern&nbsp;browsers. A very common use of JavaScript on web pages these days is to respond to user interactions with a web page, fetch data from a back-end web service, and construct HTML to display that data to the user.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">JavaScript Object Notation (JSON)</span></h2><p><span style=\"color: rgb(35,31,32);\">When computers need to pass data to each other, it helps to have a standard format for representing that data. Programs may have very complicated data, e.g., a scoreboard with a list of players and how many games they've won, lost, or drawn. Therefore it helps to have a data format that is simple, clear, and general enough to hold any structured information.&nbsp;<strong>JSON</strong>&nbsp;is one such notation that has become very popular. It is based on a data format that was developed for JavaScript. There are libraries for creating and using&nbsp;JSON for all modern programming languages. &nbsp;JSON is a modern alternative to the&nbsp;<strong>eXtensible Markup Language (XML)</strong>, an HTML-like format that was very general, but suffered from being more complicated.</span></p><h2><span style=\"color: rgb(153,153,153);\">REST and RESTful Web Services</span></h2><p><span style=\"color: rgb(35,31,32);\">REST is not a programming language or library, though there are many libraries to help do REST. REST is an approach to designing web application interfaces. The key idea is to think of a web application as a collection of documents, i.e., resources. This seems obvious when talking about HTML files, images, sound files, and so on. It becomes less obvious when thinking about a shopping site or a game.</span><br /><span style=\"color: rgb(35,31,32);\">Many people approached such dynamic applications as &quot;remote procedure calls,&quot; i.e., a client program would send a command, in URL form, to a server, and wait for a response. Roy Fielding, in his doctoral dissertation, pointed out that this was not a scalable way to build services. It also led to unbookmarkable web sites with no &quot;back&quot; button support and many other user-unfriendly features.</span><br /><span style=\"color: rgb(35,31,32);\">Fielding proposed making resources the central concept in any web service, no matter how dynamic.&nbsp;A shopping site has a shopping cart resource. A game has a game view. All resources can be gotten with&nbsp;unique unchanging URLs. Some URLs can be used to send&nbsp;requests to modify a&nbsp;resource.</span></p><h2><span style=\"color: rgb(153,153,153);\">Spring and Spring Boot</span></h2><p><span style=\"color: rgb(35,31,32);\"><strong>Spring</strong>&nbsp;is a large set of libraries for Java to make it easier to build modern Java web applications and RESTful web services.&nbsp;<strong>Spring Boot</strong>&nbsp;is a set of tools to make it easier to use&nbsp;<strong>Spring</strong>.</span></p><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"956fc2a4-f1d6-4d4c-b7a5-9f7a0fe4fe83\"><ac:parameter ac:name=\"title\">Step 1 - Install the JDK</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(153,153,153);\">Download the JDK</span></h2><p><span style=\"color: rgb(35,31,32);\">Go to&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">the Oracle site</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;to get the current version of Java.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">You want the latest version of Java 8 (Not Java 9!).</span></li><li><span style=\"color: rgb(35,31,32);\">You want the Java JDK (Java Development Kit), not Netbeans.</span></li><li><span style=\"color: rgb(35,31,32);\">You want Java SE (Standard Edition) not Java EE (Enterprise Edition)</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Select the version of Java appropriate for your machine and operating system:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">For Linux and Windows, choose the&nbsp;<strong>x86</strong>&nbsp;version for older 32bit operating systems, and&nbsp;<strong>x64</strong>&nbsp;for newer 64bit&nbsp;operating systems.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">There may be several versions of the JDK available.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">At the time of this writing, you could select version&nbsp;<strong>8u101</strong>&nbsp;or&nbsp;<strong>8u102</strong>.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Select the&nbsp;larger numbered, more recent one.</span><br /><span style=\"color: rgb(35,31,32);\">You must accept the License Agreement before you can download the JDK&nbsp;for your machine.</span></p><h2><span style=\"color: rgb(153,153,153);\">Install the JDK</span></h2><p><span style=\"color: rgb(35,31,32);\">Double-click the file that you downloaded to run the installer.</span><br /><span style=\"color: rgb(35,31,32);\">This will install a number of Java tools, the most important of which are</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong>java</strong>&nbsp;-- this is the program that runs compiled Java programs.&nbsp;</span><ul><li><span style=\"color: rgb(35,31,32);\">This is the only tool provided by the Java Runtime Engine (JRE) package.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\"><strong>javac</strong>&nbsp;-- this is the Java compiler, that turns Java source code into runnable code.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>jar</strong>&nbsp;-- this is the program that combines compiled Java code into one application</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Although installed on your computer now, some&nbsp;operating systems require a&nbsp;few extra steps to make these tools available to&nbsp;you, your development environment, and your web server. These steps are documented at&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/install/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">the Oracle installation guide</span></span></a><span style=\"color: rgb(35,31,32);\">.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">We recommend that you set the environment variable&nbsp;<strong>JAVA_HOME</strong>&nbsp;(upper case and underbar) to the location of your installed Java.&nbsp;This used to be required by many Java tools. It's also a good way for you to learn where your Java compiler is.</span></p><ol><li><span style=\"color: rgb(35,31,32);\">For Windows:</span><ol><li><span style=\"color: rgb(35,31,32);\">Right click My Computer and select Properties.</span></li><li><span style=\"color: rgb(35,31,32);\">On the Advanced tab, select Environment Variables, and then edit JAVA_HOME to point to where the JDK software is located, for example, C:\\Program Files\\Java\\jdk1.8.0_02.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\">For Mac:</span><ol><li><span style=\"color: rgb(35,31,32);\">Add the following line to the start of&nbsp;the file&nbsp;<strong>~/.bashrc</strong>&nbsp;using a text editor, e.g., the built-in TextEdit. Put this:&nbsp;</span><ol><li><strong><span style=\"color: rgb(35,31,32);\">export JAVA_HOME=&quot;$(/usr/libexec/java_home)&quot;</span></strong></li></ol></li></ol></li></ol><p><span style=\"color: rgb(35,31,32);\">&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Test your JDK</span></h2><p><span style=\"color: rgb(35,31,32);\">Open new Terminal.</span></p><ol><li><span style=\"color: rgb(35,31,32);\">Windows: Win+Shift+R, then type 'cmd', then hit Enter</span></li><li><span style=\"color: rgb(35,31,32);\">Mac: Command+Shift+U, then double-click the Terminal icon&nbsp;</span></li></ol><p><span style=\"color: rgb(35,31,32);\">Execute the command&nbsp;<strong>java -version</strong>. (Note the space and single hyphen.)</span><br /><span style=\"color: rgb(35,31,32);\">You should see something identifying Java 1.8 as the version selected.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Execute the command&nbsp;<strong>javac -version</strong>.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Again you should see something identifying Java 1.8 as the version selected.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"c9b3bb25-d724-4a8e-9647-b7d7263e1c07\"><ac:parameter ac:name=\"title\">Step 2 - Install Gradle</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(153,153,153);\">For&nbsp;Mac Users:</span></h2><p><span style=\"color: rgb(35,31,32);\">If you have previously installed&nbsp;</span><a class=\"external-link\" href=\"http://brew.sh/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span>Homebrew</span></span></a><span style=\"color: rgb(35,31,32);\">, you can use that&nbsp;to install the latest Gradle package.</span></p><p style=\"margin-left: 30.0px;\"><strong><span style=\"color: rgb(35,31,32);\">brew install gradle</span></strong></p><ul><li><span style=\"color: rgb(35,31,32);\">Verify that the installation works by calling Gradle from your command line:</span></li></ul><p style=\"margin-left: 30.0px;\"><strong><span style=\"color: rgb(35,31,32);\">gradle &ndash;version</span></strong></p><ul><li><span style=\"color: rgb(35,31,32);\">&nbsp;If everything is ok, you will see information about the Gradle version, your JVM, OS and so on. Please consult the&nbsp;</span><a class=\"external-link\" href=\"http://www.gradle.org/docs/1.6/userguide/installation.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span>installation guide</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;if you have any problem.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">If you have not&nbsp;installed&nbsp;<strong>Homebrew</strong>, then follow the advice at&nbsp;</span><a class=\"external-link\" href=\"https://gradle.org/gradle-download/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span>the Gradle site</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;and use&nbsp;<strong>sdkman</strong>. &nbsp;<strong>sdkman</strong>&nbsp;is like&nbsp;<strong>Homebrew</strong>, but implemented in and for Java programs.</span></p><p><span style=\"color: rgb(35,31,32);\">Get&nbsp;<strong>sdkman</strong>&nbsp;with</span></p><p style=\"margin-left: 30.0px;\"><strong><span style=\"color: rgb(35,31,32);\">curl -s&nbsp;<span class=\"nolink\">https://get.sdkman.io</span>&nbsp;| bash</span></strong></p><p><span style=\"color: rgb(35,31,32);\">Then open a new Terminal window --&nbsp;the simplest way to make sure&nbsp;<strong>sdk</strong>&nbsp;is now available &ndash; and execute</span></p><p style=\"margin-left: 30.0px;\"><strong><span style=\"color: rgb(35,31,32);\">sdk install gradle 2.14.1</span></strong></p><h2><span style=\"color: rgb(153,153,153);\">For Windows/Linux:</span></h2><ul><li><span style=\"color: rgb(35,31,32);\">Download the latest binaries from Gradle's&nbsp;</span><a class=\"external-link\" href=\"http://www.gradle.org/downloads\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span>download page</span></span></a></li><li><span style=\"color: rgb(35,31,32);\">Unpack the zip to folder (e.g. &quot;C:/Program Files&quot;). &nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">Add the GRADLE_HOME/bin folder to your PATH environment variable.</span><ul><li><span style=\"color: rgb(35,31,32);\">Open the system properties (WinKey + Pause), select the &quot;Advanced&quot; tab, and the &quot;Environment Variables&quot; button</span></li><li><span style=\"color: rgb(35,31,32);\">Then add &quot;C:\\Program Files\\gradle-x.x\\bin&quot;, or wherever you unzipped Gradle to, to the end of your &quot;Path&quot; variable under System Properties &nbsp;</span></li></ul></li></ul><p><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />Remember to replace the x.x in the example with the gradle version number you downloaded. &nbsp;Be sure to omit any quotation marks around the path even if it contains spaces. Also make sure you separated from previous PATH entries with a semicolon &quot;;&quot;.</p><ul><li><span style=\"color: rgb(35,31,32);\">Verify that the installation works by calling Gradle from your command line:</span></li></ul><p style=\"margin-left: 60.0px;\"><strong><span style=\"color: rgb(35,31,32);\">gradle &ndash;version</span></strong></p><ul><li><span style=\"color: rgb(35,31,32);\">&nbsp;If everything is ok, you will see information about the Gradle version, your JVM, OS and so on. Please consult the&nbsp;</span><a class=\"external-link\" href=\"http://www.gradle.org/docs/1.6/userguide/installation.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span>installation guide</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;if you have any problem.</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"aed659c3-36d0-4595-b6a3-db57c875b45d\"><ac:parameter ac:name=\"title\">Step 3 - Create and run a Gradle Spring project</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">You can use any of several systems when building apps with Spring, but we will be using&nbsp;Gradle because it's so simple.</span></p><h2><span style=\"color: rgb(153,153,153);\">Create a Gradle Spring Project</span></h2><p><span style=\"color: rgb(35,31,32);\">Follow&nbsp;</span><a class=\"external-link\" href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1457\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">the instructions on how to create a Gradle Spring Project using the Spring Initializr</span></a><span style=\"color: rgb(35,31,32);\">. This simple web tool creates all the folders and files you need to get started.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Choose&nbsp;the following options at the Spring Initializr site:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Project:&nbsp;<strong>Gradle</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Group:<strong>&nbsp;com.codeoftheweb</strong>&nbsp;(unless you've been told to use another package)</span></li><li><span style=\"color: rgb(35,31,32);\">Artifact:&nbsp;<strong>salvo</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Dependencies:</span><ul><li><span style=\"color: rgb(35,31,32);\"><strong>web</strong></span></li><li><span style=\"color: rgb(35,31,32);\"><strong>JPA</strong></span></li><li><span style=\"color: rgb(35,31,32);\"><strong>H2</strong></span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Rest Repositories</strong></span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">Click&nbsp;<strong>Generate Project</strong>&nbsp;to download a Zip archive with your project.&nbsp;</span></p><h3><span style=\"color: rgb(153,153,153);\"><strong>Create the local directory</strong></span></h3><p><span style=\"color: rgb(35,31,32);\">Extract the Zip archive files in a Java project&nbsp;directory of your choosing. For example, if you use&nbsp;<strong><sub>/workspace/java/</sub></strong><sub>&nbsp;for your Java projects, then you should have&nbsp;</sub><strong>/workspace/java/salvo/</strong>&nbsp;as a new directory.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">One of the files in the top-level of that directory should be&nbsp;<strong>build.gradle</strong>.</span></p><h3><span style=\"color: rgb(153,153,153);\"><strong>Initialize the&nbsp;Gradle&nbsp;wrapper</strong></span></h3><p><span style=\"color: rgb(35,31,32);\">In your terminal console window, navigate to the top of the project directory, i.e., the directory with&nbsp;<strong>build.gradle</strong>.</span><br /><span style=\"color: rgb(35,31,32);\">Execute this command:</span></p><p><span style=\"color: rgb(35,31,32);\"><strong>gradle wrapper</strong></span></p><p><span style=\"color: rgb(35,31,32);\">This will download a number of files and create a runnable file called&nbsp;<strong>gradlew</strong>. &nbsp;From this point on, you will&nbsp;use that file to run Gradle commands, e.g.,&nbsp;</span></p><p><span style=\"color: rgb(35,31,32);\"><strong>./gradlew bootRun</strong></span></p><p><span style=\"color: rgb(35,31,32);\">to run your web application.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Learn more about gradle wrapper&nbsp;</span><a class=\"external-link\" href=\"https://docs.gradle.org/current/userguide/gradle_wrapper.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">here</span></a><span style=\"color: rgb(35,31,32);\">.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;&nbsp;</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br /><span style=\"color: rgb(35,31,32);\">Be sure you understand what 'root directory' is being referred to, as informal usage is ambiguous. &nbsp;There's the root for your project when building it, then there's the root for the web app you build, and within that there's a root for the Java classes.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test!</span></h2><p><span style=\"color: rgb(35,31,32);\">Try running the&nbsp;<strong>bootRun&nbsp;</strong>task. Even though you've not written any code, Spring has created the&nbsp;shell for one. If you named&nbsp;your artifact&nbsp;<strong>salvo</strong>, then you'll see&nbsp;<strong>Spring Initalizr</strong>&nbsp;has created a&nbsp;<strong>SalvoApplication&nbsp;</strong>class. It looks like this:</span></p><p><br />package com.codeoftheweb.salvo;&nbsp;<br class=\"atl-forced-newline\" />import org.springframework.boot.CommandLineRunner;<br />import org.springframework.boot.SpringApplication;<br />import org.springframework.boot.autoconfigure.SpringBootApplication;<br />import org.springframework.context.annotation.Bean;</p><p>&nbsp;<br class=\"atl-forced-newline\" />@SpringBootApplication<br />public class SalvoApplication {&nbsp;</p><p>&nbsp; &nbsp; public static void main(String[] args) {<br />&nbsp; &nbsp; &nbsp; &nbsp; SpringApplication.run(SalvoApplication.class, args);<br />&nbsp; &nbsp; }<br />}<br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Normally, to run a web application, you have to install&nbsp;the code into a web server, such as Tomcat, JBoss, Jetty, or GlassFish. With&nbsp;Spring, you can run&nbsp;a&nbsp;web application directly, thanks to Spring and the code above :&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong>@SpringBootApplication</strong>&nbsp;is an annotation that tells Spring this should be a &quot;bootable&quot; web app.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>main()</strong>&nbsp;is how you tell Java what code to run first when you run a Java program.</span><ul><li><span style=\"color: rgb(35,31,32);\">A Java program is defined as a set of Java classes with exactly one class defining a&nbsp;<strong>main()</strong>&nbsp;method.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">This particular&nbsp;<strong>main()</strong>&nbsp;method calls the&nbsp;<strong>run()</strong>&nbsp;method in the&nbsp;<strong>SpringApplication</strong>&nbsp;class.</span></li><li><span style=\"color: rgb(35,31,32);\">The&nbsp;<strong>run()</strong>&nbsp;method in&nbsp;<strong>SpringApplication</strong>&nbsp;starts an embedded Tomcat web server.</span></li><li><span style=\"color: rgb(35,31,32);\">The first argument to&nbsp;<strong>run()</strong>, i.e.,&nbsp;<strong>SalvoApplication.class&nbsp;</strong>in this case, specifies the web application to run in the web server.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">To run this program, open a terminal window and execute the comman</span></p><p style=\"margin-left: 30.0px;\"><strong><span style=\"color: rgb(35,31,32);\">./gradlew bootRun</span></strong></p><p><span style=\"color: rgb(35,31,32);\">You should see many lines of output, ending with&nbsp;</span></p><p style=\"margin-left: 30.0px;\"><strong><span style=\"color: rgb(35,31,32);\">Started Application in ... seconds ...</span></strong></p><p><span style=\"color: rgb(35,31,32);\">If that's the case, try the URL&nbsp;</span><a class=\"external-link\" href=\"http://localhost:8080/\" rel=\"nofollow\">http://localhost:8080</a><span style=\"color: rgb(35,31,32);\">&nbsp;in your browser. You should see JSON in the browser window. Not very useful JSON, but not bad for so little effort.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br /><span style=\"color: rgb(35,31,32);\">Tip: Chrome can display JSON directly and is our recommended browser for that reason.</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br /><span style=\"color: rgb(35,31,32);\">Firefox: Get&nbsp;</span><a class=\"external-link\" href=\"https://addons.mozilla.org/en-us/firefox/addon/jsonview/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">the JSONView plugin</span></a><span style=\"color: rgb(35,31,32);\">. Or download the file and view in a text editor.</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br /><span style=\"color: rgb(35,31,32);\">Internet Explorer 10: Download the file and view in a text editor.</span></p><h2><span style=\"color: rgb(153,153,153);\">Stop the Server</span></h2><p><span style=\"color: rgb(35,31,32);\">When you're done testing, stop the server in the console by type control-C, i.e., hold down the control key and the C key at the same time. On MacOS, command-period also works.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"0c25bd30-050b-4fae-a26c-69e1a713a25e\"><ac:parameter ac:name=\"title\">Step 4 - Set up a project in Intellij IDEA</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(153,153,153);\"><strong>Install IDEA</strong></span></h2><p><a class=\"external-link\" href=\"https://www.jetbrains.com/idea/download/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span>Download</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;and run the Intellij IDEA installer.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Start IDEA</span></h2><p><span style=\"color: rgb(35,31,32);\">Start IDEA and follow&nbsp;</span><a class=\"external-link\" href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1456\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span>these instructions</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;for setting up IDEA to edit and run the Salvo&nbsp;project you've just started. This will give you a very nice editor and compiler toolkit, with easy access to the Gradle commands for building and running your project.</span></p><h2><span style=\"color: rgb(153,153,153);\">Familiarize editing&nbsp;with IDEA</span></h2><p><span style=\"color: rgb(35,31,32);\">Click around in the IDEA interface to see the various menus and tool windows available. Many will be mysterious, and many you won't need, but it's good to get a feeling for what's there.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Read&nbsp;</span><a class=\"external-link\" href=\"https://codeacademy.ubiqum.com/ebooks/item?id=25\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span>how to edit in Intellij IDEA</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;for more information.</span></p><h2><span style=\"color: rgb(153,153,153);\">Import your project into IDEA</span></h2><p><span style=\"color: rgb(35,31,32);\">Import your project, per the&nbsp;</span><a class=\"external-link\" href=\"https://codeacademy.ubiqum.com/ebooks/item?id=23\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span>Gradle import project instructions</span></span></a><span style=\"color: rgb(35,31,32);\">.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Test!</span></h2><p><span style=\"color: rgb(35,31,32);\">Following&nbsp;</span><a class=\"external-link\" href=\"https://codeacademy.ubiqum.com/mc/ebook?id=24\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span>the instructions on how to run Gradle projects</span></span></a><span style=\"color: rgb(35,31,32);\">,</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Open the Gradle tool window</span></li><li><span style=\"color: rgb(35,31,32);\">Select the Gradle&nbsp;task&nbsp;<strong>application | bootRun</strong></span></li></ul><p><span style=\"color: rgb(35,31,32);\">This should do exactly the same thing as executing&nbsp;<strong>gradle</strong></span>&nbsp;<span style=\"color: rgb(35,31,32);\"><strong>bootRun&nbsp;</strong>in a terminal window, except that the output will appear in a window at the bottom.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"1bf72f66-42de-4171-9910-66735bf7ccd7\"><ac:parameter ac:name=\"title\">Step 5 - Create Player and PlayerRestRepository</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Now that you've set up the project in your IDE, you can start creating your web service.</span><br /><span style=\"color: rgb(35,31,32);\">The service you will create will handle requests to manage a database of players for the Salvo application.</span></p><h2><span style=\"color: rgb(153,153,153);\">Create a Player entity</span></h2><p><span style=\"color: rgb(35,31,32);\">Define the class for&nbsp;<strong>Player</strong>.&nbsp;Follow&nbsp;the example for&nbsp;<strong>Person</strong>&nbsp;in&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://codeacademy.ubiqum.com/mc/ebook?id=33&amp;anchor=entity\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">the eBook on Spring databases and JPA</span></span></a><span style=\"color: rgb(35,31,32);\">.&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">In Intellij IDEA, right-click on the package you created for your code, e.g.,&nbsp;<strong>salvo</strong>, and select<strong>&nbsp; New ... | Java Class</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Name the class&nbsp;<strong>Player</strong></span></li><li><span style=\"color: rgb(35,31,32);\">With the editor, add code for&nbsp;<strong>Player</strong>&nbsp;similar to the&nbsp;<strong>Person</strong>&nbsp;example.</span><ul><li><span style=\"color: rgb(35,31,32);\">Because this is to be stored in a database, it needs an&nbsp;<strong>id</strong>&nbsp;field and needs to be annotated as an&nbsp;<strong>@Entity</strong>.</span></li><li><span style=\"color: rgb(35,31,32);\">The&nbsp;<strong>Person</strong>&nbsp;example has&nbsp;<strong>firstName</strong>&nbsp;and&nbsp;<strong>lastName</strong>&nbsp;fields.&nbsp; We want a&nbsp;<strong>Player</strong>&nbsp;to have a&nbsp;<strong>userName</strong>&nbsp;field.&nbsp; It will be filled in with an email address.</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">The file for this class is&nbsp;<strong>Player.java</strong>&nbsp;file. IDEA should have correctly&nbsp;placed the file in&nbsp;<strong>src/main/java/com.codeoftheweb.salvo/Player.java</strong>&nbsp;but it's worth verifying that that's true.</span></p><h2><span style=\"color: rgb(153,153,153);\">Create a Player repository</span></h2><p><span style=\"color: rgb(35,31,32);\">Next you need to create a repository for players. A repository in Java's Persistence API (JPA) is a class that manages storing and retrieving instances of classes in&nbsp;a database.</span><br /><span style=\"color: rgb(35,31,32);\">Spring does almost all the work of defining this class for you. You just have to specify&nbsp;the name of the repository class and the name of the managed&nbsp;class.</span><br /><span style=\"color: rgb(35,31,32);\">Define&nbsp;the class&nbsp;<strong>PlayerRepository</strong>&nbsp;following the example&nbsp;<strong>PersonRepository</strong>&nbsp;in&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://codeacademy.ubiqum.com/mc/ebook?id=33\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">the eBook on Spring databases and JPA</span></span></a><span style=\"color: rgb(35,31,32);\">.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">In Intellij IDEA, right-click on the appropriate package and select<strong>&nbsp; New ... | Java Class</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Name the class&nbsp;<strong>PlayerRepository</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Edit the generated Java code as necessary&nbsp;to have&nbsp;<strong>PlayerRepository</strong>&nbsp;manage instances of&nbsp;<strong>Player</strong>&nbsp;rather than&nbsp;<strong>Person</strong>.&nbsp;</span></li></ul><p><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1166\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Make the repository a&nbsp;</span><strong>RestRepository</strong></span></a><span style=\"color: rgb(35,31,32);\">. By using this type of repository, Spring will automatically add code to let you manage&nbsp;your&nbsp;data in&nbsp;your browser, using JSON!</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br /><span style=\"color: rgb(35,31,32);\">When you add code referring to Spring classes, such as&nbsp;<strong>RestRepository</strong>, IDEA should prompt you to&nbsp;<strong>import</strong>&nbsp;that class into your code. You must do that for your code to compile. If you forget, you can click on that name and tell IDEA to import it later. See&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1433\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">importing classes in IDEA</span></span></a><span style=\"color: rgb(35,31,32);\">.</span><br /><span style=\"color: rgb(35,31,32);\">IDEA should put this&nbsp;code in the file&nbsp;<strong>src/main/java/com.codeoftheweb.salvo/PlayerRepository.java</strong>. Verify that's true.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"45dbd892-1aa7-465e-8ef9-863c33e71909\"><ac:parameter ac:name=\"title\">Step 6 - Test the REST web service</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(153,153,153);\"><strong>Run your application</strong></span></h2><p><span style=\"color: rgb(35,31,32);\">Run the&nbsp;<strong>Gradle bootRun&nbsp;</strong>command. It's easiest to do this in IDEA but you can do it on the command line if you wish.</span><br /><span style=\"color: rgb(35,31,32);\">This will start up a web server and load your current application into it. If nothing goes wrong, you will a message something like this:</span><span style=\"color: rgb(35,31,32);\">&nbsp;</span></p><p style=\"margin-left: 30.0px;\"><span style=\"color: rgb(35,31,32);\"><strong>Started Application in ...&nbsp;seconds (JVM running for ...)</strong></span></p><p><span style=\"color: rgb(35,31,32);\">If instead you see</span><span style=\"color: rgb(35,31,32);\">&nbsp;</span></p><p style=\"margin-left: 30.0px;\"><strong><span style=\"color: rgb(35,31,32);\">Compilation failed; see the compiler error output for details.</span></strong></p><p><span style=\"color: rgb(35,31,32);\">You typed something wrong. Look at the error messages and see what the mistake might be. Fix in the editor and try again.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test the REST repository</span></h2><p><span style=\"color: rgb(35,31,32);\">Point your web browser to the URL&nbsp;<strong><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://localhost:8080/players\" rel=\"nofollow\">http://localhost:8080/players</a></strong>.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">You should see JSON for an empty list of players.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"a866d3b0-bcb8-4646-b208-d023b82b32be\"><ac:parameter ac:name=\"title\">Step 7 - Add sample data</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(153,153,153);\">Create the Sample Data</span></h2><p><span style=\"color: rgb(35,31,32);\">If your code is correct, it has created data tables for your Java classes, but those tables are empty. To test that the code actually works, you want to add some code to your application class that will add, create, and save some sample players to the database.</span><br /><span style=\"color: rgb(35,31,32);\">Follow&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://codeacademy.ubiqum.com/mc/ebook?id=44\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">the example of adding&nbsp;a&nbsp;</span><strong>CommandLineRunner</strong></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;to your application class. In that&nbsp;<strong>CommandLineRunner</strong>, add code to create several of the example players specified in the testbed database attached to the email.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test</span></h2><p><span style=\"color: rgb(35,31,32);\">Run the&nbsp;<strong>bootRun</strong>&nbsp;task.</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />Be sure to stop the previous run, if it's still active.<br /><span style=\"color: rgb(35,31,32);\">Don't be surprised if there's a build failure. Two things can go wrong here:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">The compiler found some mistakes in Java.</span><ul><li><span style=\"color: rgb(35,31,32);\">With compiler errors, look at the first few error messages. They should tell you what line of code is broken.</span></li><li><span style=\"color: rgb(35,31,32);\">Fix just the first mistake or two and try again.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">The compiler was happy, but Spring had a problem initializing the database.</span><ul><li><span style=\"color: rgb(35,31,32);\">With initialization errors, look at the last few error messages. They should tell you the root cause that broke everything else.</span></li><li><span style=\"color: rgb(35,31,32);\">It will probably be a missing, misspelled, or misspecified JPA annotation.</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">If it starts without error, open a browser and enter the URL&nbsp;{*}<a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://localhost:8080/players*\" rel=\"nofollow\">http://localhost:8080/players*</a></span><br /><span style=\"color: rgb(35,31,32);\">You should see a list of players, one for each player you added. To see the data for any specific player, add the player's ID number to the URL, e.g.,&nbsp;{*}<a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://localhost:8080/players/1*\" rel=\"nofollow\">http://localhost:8080/players/1*</a></span><br /><span style=\"color: rgb(35,31,32);\">If this worked, congratulations! You have added sample data to the database that you set up!</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"eac9aae9-d606-4da0-8e95-c4811fbc5d39\"><ac:parameter ac:name=\"title\">Step 8 - Create a test front end</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">You have a web server returning JSON. Time to see if you can write an HTML/JavaScript front-end that can interact with such a server.</span><br /><span style=\"color: rgb(35,31,32);\">This is just a&nbsp;<strong>technical spike</strong>&nbsp;to make sure you can connect a front-end to the back-end. You won't use this front-end to actually manage players, but you will have confirmed you have all the pieces working that would make that possible.</span></p><h2><span style=\"color: rgb(153,153,153);\">Include Static Resources to your Build</span></h2><p><span style=\"color: rgb(35,31,32);\">In Spring, files such as HTML, CSS, JavaScript, and images, are called&nbsp;<strong>resources</strong>. Because they are not dynamically created by Java code, they are known as&nbsp;<strong>static resources</strong>.</span><br /><span style=\"color: rgb(35,31,32);\">By default, Spring does not copy static resources into the temporary web server that&nbsp;<strong>bootRun&nbsp;</strong>starts. This is easy to fix.</span><br /><span style=\"color: rgb(35,31,32);\">Add this code to your&nbsp;<strong>build.gradle</strong>&nbsp;file, right after the&nbsp;repositories { ... }&nbsp;code.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><strong>bootRun {</strong></p><p style=\"margin-left: 30.0px;\"><strong>addResources = true</strong></p><p><strong>}</strong></p><p><strong><span style=\"color: rgb(255,0,0);\">N.B: If you are using Gradle version 5, use this code instead</span></strong></p><p><strong><span style=\"color: rgb(255,0,0);\">bootRun {</span></strong><br style=\"text-align: left;\" /><strong><span style=\"color: rgb(255,0,0);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sourceResources sourceSets.main</span></strong><br style=\"text-align: left;\" /><strong><span style=\"color: rgb(255,0,0);\">}</span></strong><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br /><span style=\"color: rgb(35,31,32);\">You do not need to stop and restart the web server when you change or add static resources. Just reload the web page. However, if you rename or delete a resource, the old resource will remain until you restart.</span></p><h2><span style=\"color: rgb(153,153,153);\">Create an HTML Form to Manage Players</span></h2><p><span style=\"color: rgb(35,31,32);\">Now you can test your ability to build a front-end web page to get, display and update JSON data.</span><br /><span style=\"color: rgb(35,31,32);\">Here's the form you're shooting for.</span><br /><span class=\"confluence-embedded-file-wrapper confluence-embedded-manual-size\"><ac:image ac:height=\"333\" ac:width=\"512\"><ri:attachment ri:filename=\"worddave8276d078dc47f03547c30ccc1ee0256.png\" ri:version-at-save=\"1\" /></ac:image></span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">At the top, there's a field where you can add a player.&nbsp; Below that is the JSON returned by&nbsp;<strong><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://localhost:8080/players\" rel=\"nofollow\">http://localhost:8080/players</a></strong>.</span><br /><span style=\"color: rgb(35,31,32);\">If you enter a new name and click&nbsp;<strong>Add</strong>, that new player should appear at the end of the JSON.</span><br /><span style=\"color: rgb(35,31,32);\">To start, here's the HTML file you need.</span><br /><span style=\"color: rgb(35,31,32);\">File:<strong>&nbsp;src/main/resources/static/manager.html</strong></span></p><p><br /><span style=\"color: rgb(112,128,144);\">&lt;!DOCTYPE HTML&gt;</span><br /><span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">html</span><span style=\"color: rgb(153,153,153);\">&gt;</span><br /><span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">head</span><span style=\"color: rgb(153,153,153);\">&gt;</span>&nbsp;<span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">title</span><span style=\"color: rgb(153,153,153);\">&gt;</span>Player Manager<span style=\"color: rgb(153,153,153);\">&lt;/</span><span style=\"color: rgb(153,0,85);\">title</span><span style=\"color: rgb(153,153,153);\">&gt;</span>&nbsp;<span style=\"color: rgb(153,153,153);\">&lt;/</span><span style=\"color: rgb(153,0,85);\">head</span><span style=\"color: rgb(153,153,153);\">&gt;</span><br /><span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">body</span><span style=\"color: rgb(153,153,153);\">&gt;</span><br /><span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">h1</span><span style=\"color: rgb(153,153,153);\">&gt;</span>Player Manager<span style=\"color: rgb(153,153,153);\">&lt;/</span><span style=\"color: rgb(153,0,85);\">h1</span><span style=\"color: rgb(153,153,153);\">&gt;</span>&nbsp;</p><p><span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">form</span>&nbsp;<span style=\"color: rgb(102,153,0);\">action</span><span style=\"color: rgb(153,153,153);\">=&quot;&quot;</span>&nbsp;<span style=\"color: rgb(102,153,0);\">onsubmit</span><span style=\"color: rgb(153,153,153);\">=&quot;</span><span style=\"color: rgb(0,119,170);\">return false</span><span style=\"color: rgb(153,153,153);\">&quot;&gt;</span></p><p style=\"margin-left: 30.0px;\"><span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">label</span><span style=\"color: rgb(153,153,153);\">&gt;</span>Email User Name [e.g., <a href=\"mailto:alice@aol.com\">alice@aol.com</a>]:&nbsp;<span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">input</span>&nbsp;<span style=\"color: rgb(102,153,0);\">id</span><span style=\"color: rgb(153,153,153);\">=&quot;</span><span style=\"color: rgb(0,119,170);\">email</span><span style=\"color: rgb(153,153,153);\">&quot;</span>&nbsp;<span style=\"color: rgb(102,153,0);\">type</span><span style=\"color: rgb(153,153,153);\">=&quot;</span><span style=\"color: rgb(0,119,170);\">text</span><span style=\"color: rgb(153,153,153);\">&quot;</span>&nbsp;<span style=\"color: rgb(102,153,0);\">size</span><span style=\"color: rgb(153,153,153);\">=&quot;</span><span style=\"color: rgb(0,119,170);\">30</span><span style=\"color: rgb(153,153,153);\">&quot;&gt;&lt;/</span><span style=\"color: rgb(153,0,85);\">label</span><span style=\"color: rgb(153,153,153);\">&gt;</span><br /><span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">button</span>&nbsp;<span style=\"color: rgb(102,153,0);\">id</span><span style=\"color: rgb(153,153,153);\">=&quot;</span><span style=\"color: rgb(0,119,170);\">add_player</span><span style=\"color: rgb(153,153,153);\">&quot;&gt;</span>Add<span style=\"color: rgb(153,153,153);\">&lt;/</span><span style=\"color: rgb(153,0,85);\">button</span><span style=\"color: rgb(153,153,153);\">&gt;</span><br /><span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">br</span><span style=\"color: rgb(153,153,153);\">&gt;</span><br /><span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">pre</span>&nbsp;<span style=\"color: rgb(102,153,0);\">id</span><span style=\"color: rgb(153,153,153);\">=&quot;</span><span style=\"color: rgb(0,119,170);\">output</span><span style=\"color: rgb(153,153,153);\">&quot;&gt;&lt;/</span><span style=\"color: rgb(153,0,85);\">pre</span><span style=\"color: rgb(153,153,153);\">&gt;</span></p><p><span style=\"color: rgb(153,153,153);\">&lt;/</span><span style=\"color: rgb(153,0,85);\">form</span><span style=\"color: rgb(153,153,153);\">&gt;</span>&nbsp;<br class=\"atl-forced-newline\" /><br class=\"atl-forced-newline\" /><span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">script</span>&nbsp;<span style=\"color: rgb(102,153,0);\">src</span><span style=\"color: rgb(153,153,153);\">=&quot;</span><span style=\"color: rgb(0,119,170);\"><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://code.jquery.com/jquery-2.2.0.js\" rel=\"nofollow\">https://code.jquery.com/jquery-2.2.0.js</a></span><span style=\"color: rgb(153,153,153);\">&quot;&gt;&lt;/</span><span style=\"color: rgb(153,0,85);\">script</span><span style=\"color: rgb(153,153,153);\">&gt;</span><br /><span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">script</span>&nbsp;<span style=\"color: rgb(102,153,0);\">src</span><span style=\"color: rgb(153,153,153);\">=&quot;</span><span style=\"color: rgb(0,119,170);\">manager.js</span><span style=\"color: rgb(153,153,153);\">&quot;&gt;&lt;/</span><span style=\"color: rgb(153,0,85);\">script</span><span style=\"color: rgb(153,153,153);\">&gt;</span>&nbsp;</p><p><span style=\"color: rgb(153,153,153);\">&lt;/</span><span style=\"color: rgb(153,0,85);\">body</span><span style=\"color: rgb(153,153,153);\">&gt;</span><br /><span style=\"color: rgb(153,153,153);\">&lt;/</span><span style=\"color: rgb(153,0,85);\">html</span><span style=\"color: rgb(153,153,153);\">&gt;</span></p><h2><span style=\"color: rgb(153,153,153);\">Implement JavaScript to Talk to the Back-End Server</span></h2><p><span style=\"color: rgb(35,31,32);\">The following code will be a mystery to you until you read the notes on&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1171\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">AJAX calls in JavaScript</span></a><span style=\"color: rgb(35,31,32);\">. AJAX is how a web page asks for information from and sends information to a back-end web server. Some explanatory notes are below.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br /><span style=\"color: rgb(35,31,32);\">You should name&nbsp;JavaScript files so that it's clear what code they contain. Avoid generic names like&nbsp;<strong>app.js</strong>, unless it's being generated by some JavaScript module packaging system.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">File:<strong>&nbsp;src/main/resources/static/manager.js</strong></span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(221,74,104);\">$</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(0,119,170);\">function</span><span style=\"color: rgb(153,153,153);\">()</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">{</span></p><p style=\"margin-left: 30.0px;\"><span>&nbsp;</span><span style=\"color: rgb(112,128,144);\">// display text in the output area</span><br /><span style=\"color: rgb(0,119,170);\">function</span><span>&nbsp;</span><span style=\"color: rgb(221,74,104);\">showOutput</span><span style=\"color: rgb(153,153,153);\">(</span>text<span style=\"color: rgb(153,153,153);\">)</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">{</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(221,74,104);\">$</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(102,153,0);\">&quot;#output&quot;</span><span style=\"color: rgb(153,153,153);\">).</span><span style=\"color: rgb(221,74,104);\">text</span><span style=\"color: rgb(153,153,153);\">(</span>text<span style=\"color: rgb(153,153,153);\">);</span></p><p style=\"margin-left: 30.0px;\"><span style=\"color: rgb(153,153,153);\">}</span><span>&nbsp;</span></p><p style=\"margin-left: 30.0px;\"><span style=\"color: rgb(112,128,144);\">// load and display JSON sent by server for /players</span><span>&nbsp;</span><br class=\"atl-forced-newline\" /><span style=\"color: rgb(0,119,170);\">function</span><span>&nbsp;</span><span style=\"color: rgb(221,74,104);\">loadData</span><span style=\"color: rgb(153,153,153);\">()</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">{</span></p><p style=\"margin-left: 60.0px;\">$<span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(0,119,170);\">get</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(102,153,0);\">&quot;/players&quot;</span><span style=\"color: rgb(153,153,153);\">)</span><br /><span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(221,74,104);\">done</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(0,119,170);\">function</span><span style=\"color: rgb(153,153,153);\">(</span>data<span style=\"color: rgb(153,153,153);\">)</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">{</span></p><p style=\"margin-left: 90.0px;\"><span style=\"color: rgb(221,74,104);\">showOutput</span><span style=\"color: rgb(153,153,153);\">(</span>JSON<span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(221,74,104);\">stringify</span><span style=\"color: rgb(153,153,153);\">(</span>data<span style=\"color: rgb(153,153,153);\">,</span><span>&nbsp;</span><span style=\"color: rgb(0,119,170);\">null</span><span style=\"color: rgb(153,153,153);\">,</span><span>&nbsp;</span><span style=\"color: rgb(153,0,85);\">2</span><span style=\"color: rgb(153,153,153);\">));</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(153,153,153);\">})</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(221,74,104);\">fail</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(0,119,170);\">function</span><span style=\"color: rgb(153,153,153);\">(</span><span>&nbsp;</span>jqXHR<span style=\"color: rgb(153,153,153);\">,</span><span>&nbsp;</span>textStatus<span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">)</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(221,74,104);\">showOutput</span><span style=\"color: rgb(153,153,153);\">(</span><span>&nbsp;</span><span style=\"color: rgb(102,153,0);\">&quot;Failed: &quot;</span><span>&nbsp;</span><span style=\"color: rgb(166,127,89);\">+</span><span>&nbsp;</span>textStatus<span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">);</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(153,153,153);\">});</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(153,153,153);\">}</span><span>&nbsp;</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(112,128,144);\">// handler for when user clicks add person</span><span>&nbsp;</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(0,119,170);\">function</span><span>&nbsp;</span><span style=\"color: rgb(221,74,104);\">addPlayer</span><span style=\"color: rgb(153,153,153);\">()</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">{</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(0,119,170);\">var</span><span>&nbsp;</span>name<span>&nbsp;</span><span style=\"color: rgb(166,127,89);\">=</span><span>&nbsp;</span><span style=\"color: rgb(221,74,104);\">$</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(102,153,0);\">&quot;#email&quot;</span><span style=\"color: rgb(153,153,153);\">).</span><span style=\"color: rgb(221,74,104);\">val</span><span style=\"color: rgb(153,153,153);\">();</span><br /><span style=\"color: rgb(0,119,170);\">if</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">(</span>name<span style=\"color: rgb(153,153,153);\">)</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">{</span></p><p style=\"margin-left: 90.0px;\"><span style=\"color: rgb(221,74,104);\">postPlayer</span><span style=\"color: rgb(153,153,153);\">(</span>name<span style=\"color: rgb(153,153,153);\">);</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(153,153,153);\">}</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(153,153,153);\">}</span><span>&nbsp;</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(112,128,144);\">// code to post a new player using AJAX</span><br /><span style=\"color: rgb(112,128,144);\">// on success, reload and display the updated data from the server</span><span>&nbsp;</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(0,119,170);\">function</span><span>&nbsp;</span><span style=\"color: rgb(221,74,104);\">postPlayer</span><span style=\"color: rgb(153,153,153);\">(</span>userName<span style=\"color: rgb(153,153,153);\">)</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">{</span></p><p style=\"margin-left: 60.0px;\">$<span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(221,74,104);\">post</span><span style=\"color: rgb(153,153,153);\">({</span></p><p style=\"margin-left: 90.0px;\">headers<span style=\"color: rgb(153,153,153);\">:</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">{</span></p><p style=\"margin-left: 120.0px;\"><span style=\"color: rgb(102,153,0);\">'Content-Type'</span><span style=\"color: rgb(153,153,153);\">:</span><span>&nbsp;</span><span style=\"color: rgb(102,153,0);\">'application/json'</span></p><p style=\"margin-left: 90.0px;\"><span style=\"color: rgb(153,153,153);\">},</span></p><p style=\"margin-left: 90.0px;\">dataType<span style=\"color: rgb(153,153,153);\">:</span><span>&nbsp;</span><span style=\"color: rgb(102,153,0);\">&quot;text&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><br />url<span style=\"color: rgb(153,153,153);\">:</span><span>&nbsp;</span><span style=\"color: rgb(102,153,0);\">&quot;/players&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><br />data<span style=\"color: rgb(153,153,153);\">:</span><span>&nbsp;</span>JSON<span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(221,74,104);\">stringify</span><span style=\"color: rgb(153,153,153);\">({</span><span>&nbsp;</span><span style=\"color: rgb(102,153,0);\">&quot;userName&quot;</span><span style=\"color: rgb(153,153,153);\">:</span><span>&nbsp;</span>userName<span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">})</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(153,153,153);\">})</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(221,74,104);\">done</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(0,119,170);\">function</span><span style=\"color: rgb(153,153,153);\">(</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">)</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">{</span></p><p style=\"margin-left: 90.0px;\"><span style=\"color: rgb(221,74,104);\">showOutput</span><span style=\"color: rgb(153,153,153);\">(</span><span>&nbsp;</span><span style=\"color: rgb(102,153,0);\">&quot;Saved &ndash; reloading&quot;</span><span style=\"color: rgb(153,153,153);\">);</span><br /><span style=\"color: rgb(221,74,104);\">loadData</span><span style=\"color: rgb(153,153,153);\">();</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(153,153,153);\">})</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(221,74,104);\">fail</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(0,119,170);\">function</span><span style=\"color: rgb(153,153,153);\">(</span><span>&nbsp;</span>jqXHR<span style=\"color: rgb(153,153,153);\">,</span><span>&nbsp;</span>textStatus<span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">)</span><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">{</span></p><p style=\"margin-left: 90.0px;\"><span style=\"color: rgb(221,74,104);\">showOutput</span><span style=\"color: rgb(153,153,153);\">(</span><span>&nbsp;</span><span style=\"color: rgb(102,153,0);\">&quot;Failed: &quot;</span><span>&nbsp;</span><span style=\"color: rgb(166,127,89);\">+</span><span>&nbsp;</span>textStatus<span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">);</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(153,153,153);\">});</span></p><p style=\"margin-left: 30.0px;\"><span style=\"color: rgb(153,153,153);\">}</span><span>&nbsp;</span><br class=\"atl-forced-newline\" /><span style=\"color: rgb(221,74,104);\">$</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(102,153,0);\">&quot;#add_player&quot;</span><span style=\"color: rgb(153,153,153);\">).</span><span style=\"color: rgb(221,74,104);\">on</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(102,153,0);\">&quot;click&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><span>&nbsp;</span>addPlayer<span style=\"color: rgb(153,153,153);\">);</span><span>&nbsp;</span><br class=\"atl-forced-newline\" /><span style=\"color: rgb(221,74,104);\">loadData</span><span style=\"color: rgb(153,153,153);\">();</span></p><p><span style=\"color: rgb(153,153,153);\">});</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Key functions in this code:</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong>loadData()&nbsp;</strong>downloads the current list of players, using AJAX.</span><ul><li><span style=\"color: rgb(35,31,32);\">It does a simple&nbsp;<strong>GET</strong>&nbsp;request to the&nbsp;<strong>players</strong>&nbsp;URL.</span></li><li><span style=\"color: rgb(35,31,32);\">When the request is answered, the code inside&nbsp;<strong>done()</strong>&nbsp;will be executed.</span></li><li><span style=\"color: rgb(35,31,32);\">All this&nbsp;<strong>done()</strong>&nbsp;code does is display exactly the JSON received on the page.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\"><strong>addPlayer()</strong>&nbsp;is called when the&nbsp;<strong>Add</strong>&nbsp;button is clicked on the web page.</span><ul><li><span style=\"color: rgb(35,31,32);\">It gets data from the web form.&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">If there is a name string, it passes it to&nbsp;<strong>postPlayer()</strong></span></li></ul></li><li><span style=\"color: rgb(35,31,32);\"><strong>postPlayer()</strong>&nbsp;sends a JSON object with the user name to the server, using AJAX. Note several non-obvious points:</span><ul><li><span style=\"color: rgb(35,31,32);\">The URL is exactly the same as&nbsp;<strong>loadData()</strong>. The difference in back-end behavior is based on&nbsp;<strong>GET</strong>&nbsp;versus&nbsp;<strong>POST</strong>.</span></li><li><span style=\"color: rgb(35,31,32);\">It adds a&nbsp;<strong>Content-Type</strong>&nbsp;header to the request to tell the back-end JSON is coming.</span></li><li><span style=\"color: rgb(35,31,32);\">It uses&nbsp;<strong>JSON.stringify()</strong>&nbsp;to convert a JavaScript into a valid JSON string.</span></li><li><span style=\"color: rgb(35,31,32);\">It sets the expected return type to&nbsp;<strong>text</strong>. Otherwise, jQuery will get an error trying to parse the empty content returned for the POST as JSON.</span></li><li><span style=\"color: rgb(35,31,32);\">When the request is finished, it calls&nbsp;<strong>loadData()</strong>&nbsp;to get the new JSON.</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">If everything is working correctly, then when you&nbsp;<strong>bootRun&nbsp;</strong>and go to the url&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://localhost:8080/manager.html\" rel=\"nofollow\">http://localhost:8080/manager.html</a><span style=\"color: rgb(35,31,32);\">&nbsp;in your browser,</span></p><ul><li><span style=\"color: rgb(35,31,32);\">You should see a form where you can enter and add a player's name.</span></li><li><span style=\"color: rgb(35,31,32);\">Following the form should be the JSON for the current list of players.</span></li><li><span style=\"color: rgb(35,31,32);\">Entering a name and clicking&nbsp;<strong>Add</strong>&nbsp;should add the player you entered to the JSON displayed.</span></li></ul><h1><span style=\"color: rgb(153,153,153);\"><strong>Summary</strong></span></h1><p><span style=\"color: rgb(35,31,32);\">Congratulations! You've just developed a RESTful web service with Spring.&nbsp; With a web browser, you can retrieve and create data in JSON form.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"0ff6300b-a92b-4983-8f8a-3418d8e57f25\"><ac:parameter ac:name=\"title\">Step 9 - Submit your work</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">The objectives&nbsp;for this task were to:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">use Spring Boot and Java to create a web service</span></li><li><span style=\"color: rgb(35,31,32);\">create a database of players registered with the system</span></li><li><span style=\"color: rgb(35,31,32);\">create a data table for players</span><ul><li><span style=\"color: rgb(35,31,32);\">each player should have an email address, plus a database-generated unique ID number</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">the database should have:</span><ul><li><span style=\"color: rgb(35,31,32);\">at least two players in it</span></li><li><span style=\"color: rgb(35,31,32);\">you should be able&nbsp;to enter the URL&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://localhost:8080/salvo/players\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">{+}</span></a><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://localhost:8080/players+\" rel=\"nofollow\">http://localhost:8080/players+</a><span style=\"color: rgb(35,31,32);\">&nbsp;and see the JSON object listing all players in the database in a browser</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">At this point, all of that should be working. &nbsp;Good job! &nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\">Submit a zipped archive of your project folder, including the source code and build scripts.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Use the &quot;file&quot; format to attach the zip file.</span></li><li><span style=\"color: rgb(35,31,32);\">Run the&nbsp;<strong>clean</strong>&nbsp;task in the&nbsp;<strong>Gradle</strong>&nbsp;tool window first, to get rid of all compiled code.&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">In the comments with the submission, give&nbsp;a short report on your setup (what operating system, what versions of the tools you installed, etc.) and any issues you ran into and how you resolved them.</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "260866073",
    "conflChildrenId": [
      "261390618"
    ]
  },
  {
    "title": "JS Mobile Web App Project",
    "content": "<p><strong>Welcome!</strong><br />In this course, you are an independent developer who wants to design and launch an original mobile web app. In this project, you will not only develop the application, you will also do some initial design based on an analysis of your end users.&nbsp;</p><p>To do this, you'll work through a series of tasks designed by experts in programming and mobile web app development to help you create a robust and useful mobile web application.</p><p><strong>What is Mobile Web Application Development?</strong></p><p>Mobile Web Application Development is the process of creating or updating web-based applications or websites to be optimally viewable and functional within a mobile device's browser. This process includes:</p><ul><li>Using new features in HTML5, CSS3, and JavaScript to make the mobile web app look and feel like a native mobile application.</li><li>Creating a responsive design that works for various screen sizes and rotations.</li><li>Taking advantage of specific capabilities of smartphones such as location-awareness.</li></ul>",
    "conflPageId": "260931585",
    "conflChildrenId": [
      "261128196",
      "260997145",
      "260767861",
      "260931702",
      "260505710",
      "260735073"
    ]
  },
  {
    "title": "Mobile App - Task 4",
    "content": "<p><a class=\"external-link\" style=\"text-decoration: underline;\" href=\"https://gbstool.learningbydoingtools.com/mc/poa?productID=4978&amp;taskID=1737#introduction\" rel=\"nofollow\"><span style=\"color: rgb(38,34,98);\">INTRODUCTION</span></a></p><h1><span style=\"color: rgb(128,130,133);\">Your Task</span></h1><p><span style=\"color: rgb(35,31,32);\">You have been asked by League Director, Tom Denton, to add the following major capability to&nbsp;the mobile web app: a user can post messages visible to other users of the web app.</span><br /><span style=\"color: rgb(35,31,32);\">This requires adding several&nbsp;new back-end elements to the system:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">User accounts</span></li><li><span style=\"color: rgb(35,31,32);\">A database of sample messages</span></li><li><span style=\"color: rgb(35,31,32);\">Dynamically constructed HTML pages</span></li><li><span style=\"color: rgb(35,31,32);\">JSON data objects</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The steps below are one way to update the web app. The ordering is to make it easier to test as you go along.</span><br /><span style=\"color: rgb(35,31,32);\">Here are the high-level steps to follow. Continue through the Plan of Attack for more detailed guidance.</span></p><ol><li><span style=\"color: rgb(35,31,32);\">Get an example app running and see how to use:</span><ul><li><span style=\"color: rgb(35,31,32);\">HTML/JavaScript to add&nbsp;user signup and login</span></li><li><span style=\"color: rgb(35,31,32);\">HTML/JavaScript to add a form to post messages</span></li><li><span style=\"color: rgb(35,31,32);\">HTML templates for getting and displaying&nbsp;messages</span></li><li><span style=\"color: rgb(35,31,32);\">JavaScript for displaying messages retrieved from&nbsp;Firebase</span></li><li><span style=\"color: rgb(35,31,32);\">JavaScript for posting a new message</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">Modify the CSS/HTML/JavaScript to create&nbsp;the&nbsp;UI flow for the new functionality per&nbsp;your design.</span></li><li><span style=\"color: rgb(35,31,32);\">Modify the JavaScript for your specific app data (to get the game data and display it).</span></li><li><span style=\"color: rgb(35,31,32);\">Use&nbsp;JavaScript to give the app the client requested UI features.&nbsp;</span></li></ol><p><span style=\"color: rgb(35,31,32);\"><strong>As part of this task, you will submit the following for review:&nbsp;</strong></span></p><ul><li><span style=\"color: rgb(35,31,32);\">For Mentor Review:</span><ul><li><span style=\"color: rgb(35,31,32);\">Screen mockup and UI flow diagram for the new functionality</span></li><li><span style=\"color: rgb(35,31,32);\">JavaScript and relevant fragments of HTML and HTML templates for getting and displaying&nbsp;messages</span></li><li><span style=\"color: rgb(35,31,32);\">JavaScript for displaying messages that are retrieved from&nbsp;Firebase</span></li><li><span style=\"color: rgb(35,31,32);\">JavaScript for posting a new message</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">For Client Deliverable: the URL of the updated mobile web app, with notes on: what was built, changes made to other parts of the web app,&nbsp;and any known issues or limitations</span><ul><li><span style=\"color: rgb(35,31,32);\">Your mentor will&nbsp;advise you as to when you are ready to submit this package to the client.</span></li></ul></li></ul><p><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br /><span style=\"color: rgb(35,31,32);\">When submitting fragments of your CSS and HTML code for mentor review, be sure to clearly label the source file (i.e. give the filename, including folder) for each&nbsp;fragment.</span><span>&nbsp;</span></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"d8a96ddf-fedd-4fdb-bf7a-3e0c36a6be58\"><ac:parameter ac:name=\"title\">Step 1 - Get example code working</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(128,130,133);\"><strong>Get&nbsp;example code working in your&nbsp;app (learn how it works)</strong></span></h2><p><span style=\"color: rgb(51,122,183);\"><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://github.com/firebase/quickstart-js/tree/master/database\" rel=\"nofollow\"><span style=\"color: rgb(0,0,0);\"><strong>1.</strong></span></a><span style=\"text-decoration: underline;\"><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://github.com/firebase/quickstart-js/tree/master/database\" rel=\"nofollow\">This quickstart guide</a></span></span><span style=\"color: rgb(35,31,32);\">&nbsp;contains code that&nbsp;allows users to sign in and post messages. &nbsp;We will get the&nbsp;example&nbsp;app working and then modify it for our specific use case. &nbsp;<strong>Copy and paste</strong>&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://github.com/firebase/quickstart-js/blob/master/database/index.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">from the example code</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;into your app.</span></p><p><span style=\"color: rgb(35,31,32);\"><strong>2.&nbsp;</strong>*Add&nbsp;main.js file:*</span></p><ol><li><span style=\"color: rgb(35,31,32);\">Create a&nbsp;folder called 'js' within your app folder. &nbsp;Add the&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://github.com/firebase/quickstart-js/blob/master/database/scripts/main.js\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">main.js file from&nbsp;the quickstart example</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;to the 'js' folder you just created.&nbsp;(This file will be called in your index.html to communicate with firebase.)</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Open your index.html file and check the console to see if main.js is loading correctly.</span></li></ol><p><span style=\"color: rgb(35,31,32);\"><strong>3. Enable</strong>&nbsp;<strong>authentication</strong></span></p><ol><li><span style=\"color: rgb(35,31,32);\">Go to firebase dashboard for your app</span></li><li><span style=\"color: rgb(35,31,32);\">Click 'Auth' on the left, then go to the 'Sign In Method' tab. &nbsp;Select 'Google', 'enable', and 'save'.</span></li></ol><p><span style=\"color: rgb(35,31,32);\"><strong>4. Add security/validation rules</strong></span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong>Background</strong>: By default, anyone who knows the URL of your Firebase app can change any data any way they want, either intentionally or by accident. &nbsp;To prevent this, you need to add security and validation rules. Here is a simple set of rules that will make sure someone has to be logged in to post, and has to submit minimally valid data.&nbsp;</span><span>&nbsp;</span><span style=\"color: rgb(35,31,32);\">These rules say</span><ul><li><span style=\"color: rgb(35,31,32);\">The&nbsp;<strong>&quot;.read&quot;: true</strong>&nbsp;at the root says that anyone can read anything. They don't even have to log in.</span></li><li><span style=\"color: rgb(35,31,32);\">The&nbsp;<strong>&quot;.write&quot;</strong>&nbsp;rule under&nbsp;<strong>$noteid</strong>&nbsp;says that a note object is allowed only if the user is logged in and the user ID they are logged in under matches the one in the note object.</span></li><li><span style=\"color: rgb(35,31,32);\">The&nbsp;<strong>&quot;.validate&quot;</strong>&nbsp;rule under&nbsp;<strong>$noteid</strong>&nbsp;says that a note object is valid only if it contains non-empty author and text values.</span></li></ul></li></ul><p><strong>5.</strong></p><p style=\"margin-left: 180.0px;\"><br /></p><p style=\"margin-left: 180.0px;\">{</p><p style=\"margin-left: 210.0px;\">&quot;.read&quot;: true,</p><p style=\"margin-left: 210.0px;\">&quot;notes&quot;: {</p><p style=\"margin-left: 240.0px;\">&quot;$noteid&quot;: {</p><p style=\"margin-left: 270.0px;\">&quot;.write&quot;: &quot;auth.uid == newData.child('uid').val()&quot;,</p><p style=\"margin-left: 270.0px;\">&quot;.validate&quot;: &quot;newData.hasChildren(['author', 'text'])</p><p style=\"margin-left: 270.0px;\">&amp;&amp; newData.child('author').val().length &gt; 0</p><p style=\"margin-left: 270.0px;\">&amp;&amp; newData.child('text').val().length &gt; 0&quot;</p><p style=\"margin-left: 240.0px;\">}</p><p style=\"margin-left: 210.0px;\">}</p><p style=\"margin-left: 180.0px;\">}</p><p><br /></p><ol><li><span style=\"color: rgb(35,31,32);\">&nbsp;To install these rules:</span><ul><li><span style=\"color: rgb(35,31,32);\">Go to your app dashboard at Firebase.</span></li><li><span style=\"color: rgb(35,31,32);\">Click on&nbsp;<strong>Database</strong>&nbsp;and select the<strong>&nbsp;Rules</strong>&nbsp;tab.</span></li><li><span style=\"color: rgb(35,31,32);\">Replace the entire set of rules at Firebase with the rules above.</span></li><li><span style=\"color: rgb(35,31,32);\">Click&nbsp;<strong>Publish</strong>. Firebase will tell you if the rules are accepted.</span></li></ul></li></ol><p><span style=\"color: rgb(35,31,32);\">It's best to test that these rules work. Firebase provides a&nbsp;<strong>simulator</strong>&nbsp;web page to test which read and write operations are allowed with different authentications. The interface is simple but tedious to use. At the very least, it helps to make a table of test cases that you can copy and paste into the simulator.</span></p><p><span style=\"color: rgb(35,31,32);\"><strong>6. Deploy and Test</strong></span></p><ol><li><span style=\"color: rgb(35,31,32);\">use&nbsp;<strong>firebase</strong>&nbsp;<strong>deploy</strong>&nbsp;command in app folder from terminal</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Got to firebase app URL and try your new 'Team Notes' section:</span><ol><li><span style=\"color: rgb(35,31,32);\">Sign up a user</span></li><li><span style=\"color: rgb(35,31,32);\">Post a note for the new user</span></li><li><span style=\"color: rgb(35,31,32);\">Check that user appears in the 'Auth' section of your firebase app dashboard</span></li><li><span style=\"color: rgb(35,31,32);\">Check that new note data appears in 'data' section of your firebase app dashboard</span></li><li><span style=\"color: rgb(35,31,32);\">If not, debug.</span></li></ol></li></ol><p><span style=\"color: rgb(35,31,32);\"><strong>7. Update code</strong>&nbsp;by removing unnecessary code from index.html and main.js. &nbsp;</span></p><ol><li><span style=\"color: rgb(35,31,32);\">Remove code that doesn't apply to your app. &nbsp;Deploy and Test.</span></li><li><span style=\"color: rgb(35,31,32);\">Use&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://github.com/firebase/quickstart-js/blob/master/auth/email.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">another quickstart example</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;as a guide. &nbsp;Write code to set up email/password auth.&nbsp;</span><span><span style=\"color: rgb(35,31,32);\"><strong><span style=\"color: rgb(255,0,0);\">The linked </span></strong></span><span style=\"color: rgb(255,0,0);\"><span style=\"color: rgb(255,0,0);\"><strong>web page</strong></span><span style=\"color: rgb(255,0,0);\"><strong>&nbsp;does not exist</strong></span></span></span></li><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:&nbsp;</strong></span>Remember to enable email/password as a sign in method from the Firebase console.</li></ol><p><span style=\"color: rgb(35,31,32);\"><strong>8. Deploy and Test</strong>.</span></p><p class=\"auto-cursor-target\"><br /></p><p class=\"auto-cursor-target\"><br /></p><p class=\"auto-cursor-target\"><br /></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"2c9901d6-000f-414d-9826-04eecd33860c\"><ac:parameter ac:name=\"title\">Step 2 - Design UI for message display screen</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">In this step you will create the messages display screen design and HTML/JS/CSS code fragments (with placeholders for future game information). &nbsp;At this point, all messages in the database will be listed(per the example) and no dynamic game information will be included. &nbsp;In a later step, we will pass the game information to the database and filter the messages based on which game detail page is clicked.</span></p><p><span style=\"color: rgb(35,31,32);\"><strong>1.Add a message display screen, with a button to it from the game detail screen.</strong>&nbsp;&nbsp;Using your layout sketch, design the CSS and HTML for displaying the list of messages.</span></p><ol><li><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:&nbsp;</strong></span>Submit your UI mockup and flow diagram to your mentor for review.</li></ol><p><span style=\"color: rgb(35,31,32);\">2. In your web app HTML:</span></p><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Add any additional HTML needed</strong>&nbsp;for your design.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Add to your stylesheet the CSS needed</strong>&nbsp;for your design.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Add CSS to make the list of messages 'page' hidden by default.</strong>&nbsp;&nbsp;Refer to the book for how to do this. &nbsp;(As you did previously when you converted your app from multi-page to single-page)</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Add JavaScript for the page transition.</strong>&nbsp;&nbsp;Refer to the book. &nbsp;(Again, as you did before.)</span><ol><li><span style=\"color: rgb(35,31,32);\">Work on one layout at a time, i.e., portrait then landscape, or vice cersa. (In landscape, for example, you may want to take advantage of the additional room to show both some game detail data&nbsp;<em>and</em>&nbsp;the messages list.)</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Check how your local pages are looking frequently.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!&nbsp;</strong>When one orientation seems correct, deploy it to Firebase and check.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\">On the game details screen,&nbsp;<strong>add a button to show game messages</strong>.</span><ol><li><span style=\"color: rgb(35,31,32);\">Add JavaScript so that when the button is tapped, the message display screen is shown.</span><ol><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:&nbsp;</strong></span>A&nbsp;couple options are: 1. This button/link could go to a popup, or 2. The link/button could&nbsp;open the form/messages in the Game Details portion of the page.</li><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:&nbsp;</strong></span>Refer to the book and your previous work- this is similar to what you did to click on a game from a list and pull up its detail 'page' (actually a DIV)</li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Make sure the messages appear the way you want on your local page.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Deploy to Firebase and make sure everything still works.</span></li><li><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:&nbsp;<span style=\"color: rgb(35,31,32);\">Submit for mentor review the HTML, CSS and JavaScript code you added to display a list of messages.</span></strong></span></li></ol></li></ol><p><span style=\"color: rgb(23,155,201);\"><strong>TIP:&nbsp;</strong></span>When submitting fragments of your CSS and HTML code for mentor review, be sure to clearly label the source file (i.e. give the filename, including folder) for each fragment.<span>&nbsp;</span></p><p class=\"auto-cursor-target\"><br /></p></ac:rich-text-body></ac:structured-macro><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"d72d5538-bc13-431d-b6a0-7c9d9fc1586c\"><ac:parameter ac:name=\"title\">Step 3 - Create new data and filter messages</ac:parameter><ac:rich-text-body><p class=\"auto-cursor-target\"><br /></p><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Write Javascript&nbsp;to get and pass game information to database&nbsp;</strong>when form submitted.</span><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Plan</strong>. Decide what game information will be passed to the database. &nbsp;What will it be called? &nbsp;What kind of input will it be? (i.e. gameId, gameName, gameTime, gameInfo?)</span><ol><li><span style=\"color: rgb(35,31,32);\">When that form is submitted, JavaScript should save a Firebase&nbsp;message object with the time, user, game and message.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Add input field(s)&nbsp;</strong>for game information&nbsp;in HTML form.&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Capture specific game information&nbsp;</strong>(from HTML&nbsp;of game detail page) and&nbsp;<strong>pass it to the new form input&nbsp;</strong>with JavaScript.&nbsp;</span><ol><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:&nbsp;</strong></span>See&nbsp;<a class=\"external-link\" href=\"http://stackoverflow.com/questions/7764154/pass-a-javascript-variable-value-into-input-type-hidden-value\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">example</span></span></a><span style=\"color: rgb(35,31,32);\">. &nbsp;You can add JavaScript code that stores the game in question (in a variable) when a user pushes the &quot;Messages&quot; button from a game's detail screen</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Update the main.js methods</strong>&nbsp;so that&nbsp;game information inputs will be sent and saved to firebase database. &nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Update HTML&nbsp;to show all game&nbsp;</strong>data with Mustache.js similar to:</span></li></ol></li></ol><p><br /></p><p style=\"margin-left: 150.0px;\"><span style=\"color: rgb(153,153,153);\">&lt;</span><span style=\"color: rgb(153,0,85);\">li</span><span style=\"color: rgb(153,153,153);\">&gt;</span>(<code>gameId</code>)<span>&nbsp;</span><code>author</code><span>&nbsp;</span>said:<span>&nbsp;</span><code>text</code><span>&nbsp;</span><span style=\"color: rgb(153,153,153);\">&lt;/</span><span style=\"color: rgb(153,0,85);\">li</span><span style=\"color: rgb(153,153,153);\">&gt;</span></p><p style=\"margin-left: 240.0px;\"><span style=\"color: rgb(35,31,32);\">Review simple&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.lynda.com/articles/introduction-to-javascript-templating-using-mustache-js\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Javascript templating tutorial</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;with Mustache.js</span></p><p style=\"margin-left: 240.0px;\"><span style=\"color: rgb(35,31,32);\">Look for how they load the needed libraries from online sources, create dynamic HTML using the templating engine Mustache, and then fill the dynamic HTML with JSON data from a separate file. We will be doing the same below.</span></p><p style=\"margin-left: 60.0px;\"><span style=\"color: rgb(35,31,32);\">f. <strong>Deploy and Test!</strong>&nbsp;Remove&nbsp;the old notes generated in previous tests from the 'data' section of firebase app dashboard. Create new notes from your firebase app and check 'data' that they have the correct game information.</span></p><p style=\"margin-left: 30.0px;\"><span style=\"color: rgb(35,31,32);\"><strong>2. Show only the messages for the specific game clicked. &nbsp;</strong></span></p><p style=\"margin-left: 90.0px;\"><span style=\"color: rgb(35,31,32);\"><strong>1.&nbsp;Update the code in main.js&nbsp;</strong>to&nbsp;use the game information variable created when a user pushes the &quot;Messages&quot; button&nbsp;(i.e. gameId) to show only the messages for that game. &nbsp;See&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://firebase.google.com/docs/database/web/retrieve-data#next_steps\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">examples,</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;specifically filtering data&nbsp;to&nbsp;retrieve data from Firebase.&nbsp;<strong>&nbsp;</strong></span></p><p style=\"margin-left: 90.0px;\"><strong style=\"color: rgb(35,31,32);\">2. Set up two test accounts per client email:&nbsp;</strong><a href=\"mailto:denton@example.com\">denton@example.com</a><span style=\"color: rgb(35,31,32);\"> with password nysl123, and&nbsp;</span><a href=\"mailto:parent@example.com\">parent@example.com</a><span style=\"color: rgb(35,31,32);\"> with password soccer89, and put in a couple of posts from each for the first game on the schedule.</span></p><p style=\"margin-left: 30.0px;\"><strong><span style=\"color: rgb(35,31,32);\">3. Update HTML game information placeholders so specific game information&nbsp;appears dynamically (see&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.w3schools.com/js/js_htmldom_html.asp\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">example</span></span></a><span style=\"color: rgb(35,31,32);\">).</span></strong></p><p style=\"margin-left: 90.0px;\"><span style=\"color: rgb(35,31,32);\"><strong>1.&nbsp;Test!</strong>&nbsp;Make sure your page is showing the messages from Firebase&nbsp;and that they are displaying correctly.</span></p><p style=\"margin-left: 90.0px;\"><span style=\"color: rgb(35,31,32);\"><strong>2. Test!&nbsp;</strong>Deploy to Firebase&nbsp;and verify the web app still works.</span></p><p style=\"margin-left: 90.0px;\"><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:&nbsp;</strong></span>Submit&nbsp;for mentor review the HTML and JavaScript code you&nbsp;added to display a list of messages retrieved from Firebase.&nbsp;</p><p><br class=\"atl-forced-newline\" /><br class=\"atl-forced-newline\" /><br class=\"atl-forced-newline\" /><br class=\"atl-forced-newline\" /><br class=\"atl-forced-newline\" /><br class=\"atl-forced-newline\" /></p></ac:rich-text-body></ac:structured-macro><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"a11d59f8-126a-490a-b7dd-6f09c8d0b3d5\"><ac:parameter ac:name=\"title\">Step 4 - Update UI</ac:parameter><ac:rich-text-body><ol><li><span style=\"color: rgb(35,31,32);\">Use JavaScript to update the UI so that...</span><ol><li><span style=\"color: rgb(35,31,32);\">The post message button&nbsp;only appears on the game messages page if the user has logged in.</span></li><li><span style=\"color: rgb(35,31,32);\">When the post message button is tapped, the HTML form opens that lets the user enter a message.</span></li><li><span style=\"color: rgb(35,31,32);\">When the form is submitted, a message object is still saved to Firebase&nbsp;and the message appears in the correct game detail page.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Verify that you can only post if you are logged in and that posted messages appear on the appropriate game messages screen.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Deploy to Firebase&nbsp;and verify everything still works.</span></li><li><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span></li></ol><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\"><strong>Submit your changed HTML, CSS, and JavaScript</strong>&nbsp;for&nbsp;mentor review.</span><span>&nbsp;</span><span style=\"color: rgb(35,31,32);\">When submitting fragments of your CSS and HTML code for mentor review, be sure to clearly label the source file (i.e. give the filename, including folder) for each&nbsp;fragment.</span></p><p class=\"auto-cursor-target\"><br /></p></ac:rich-text-body></ac:structured-macro><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"dedfd82c-45a3-4ee7-ad9e-d60b8af7ad0f\"><ac:parameter ac:name=\"title\">Step 5 - Submit your client deliverable</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\"><strong>Submit your client deliverable.</strong></span><span style=\"color: rgb(9,30,66);\"><span>&nbsp;</span></span><span style=\"color: rgb(35,31,32);\">In plain text, send the URL of the web app, plus a brief&nbsp;write-up&nbsp;of what you did.</span><span style=\"color: rgb(9,30,66);\"><span>&nbsp;</span></span><span style=\"color: rgb(35,31,32);\">The mentor will tell you when you are ready to do this.</span></p></ac:rich-text-body></ac:structured-macro><p><br /></p><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "260931702",
    "conflChildrenId": [
      "260833348"
    ]
  },
  {
    "title": "Java 1 - Welcome",
    "content": "<h1><span style=\"color: rgb(86,86,86);\">Welcome!</span></h1><p><span style=\"color: rgb(51,51,51);\">In this course, your team of developers has been contacted by a board game company looking to use their brand recognition to market online games with a retro touch. In particular, they want your team to create a multi-player online version of a&nbsp;<strong>Salvo</strong>-like game engine.&nbsp;<strong>Salvo</strong>&nbsp;was a pencil and paper game that was the basis for the popular&nbsp;<strong>Battleship</strong>&nbsp;game. The basic idea involves&nbsp;guessing where other players have hidden objects. This can be varied to create many different kinds of games with different user interfaces.</span><br /><ac:image ac:height=\"256\" ac:width=\"512\"><ri:attachment ri:filename=\"worddav5204fb99371898c45f48d5ebfe6ecf46.png\" ri:version-at-save=\"1\" /></ac:image><br /><span style=\"color: rgb(51,51,51);\">Your job will be&nbsp;to&nbsp;create a front-end web application that game players interact with, and a back-end game server to manage the games, scoring, and player profiles. You will use the jQuery&nbsp;JavaScript library for the front-end client, and the Spring Boot framework for the Java-based RESTful web server.</span><br /><span style=\"color: rgb(51,51,51);\">In&nbsp;<strong>Part One&nbsp;</strong>of the course, you will implement the core architecture:</span></p><ul><li><span style=\"color: rgb(51,51,51);\">A small Java back-end server to store Salvo game data, and send that data to client apps via a RESTful API.</span></li><li><span style=\"color: rgb(51,51,51);\">A front-end browser-based game interface that graphically shows players the state of the game, including ships they've placed, damage sustained, and scores.</span></li></ul><p><span style=\"color: rgb(51,51,51);\">In&nbsp;<strong>Part Two</strong>&nbsp;of the course, you will implement game play:</span></p><ul><li><span style=\"color: rgb(51,51,51);\">Players can create new games and join games that others have created.</span></li><li><span style=\"color: rgb(51,51,51);\">When a game has both players, players can place their ships on their grids.</span></li><li><span style=\"color: rgb(51,51,51);\">When ships have been placed, players can begin trading salvos (shots) and seeing the results (hits, sinks, and misses).</span></li><li><span style=\"color: rgb(51,51,51);\">When all of a player's ships have been sunk, the game ends and the winner is added to the leaderboard.</span></li></ul><h1><span style=\"color: rgb(86,86,86);\">What is Web Server Development?</span></h1><p><span style=\"color: rgb(51,51,51);\">Web servers are the backbone of the Internet. When you use web apps or many mobile apps, they use web servers so that you can save data, communicate with other users, retrieve information, and perform many more activities that need computational power, persistent data storage, and network bandwidth.</span><br /><span style=\"color: rgb(51,51,51);\">Web servers can be implemented in many languages, including Python, PHP, Ruby on Rails, and Java. Java is particularly common for large web sites. In recent years, with the arrival of Java 8, there has been an explosion of tools for Java web services. A side-benefit of learning&nbsp;Java&nbsp;is that it&nbsp;is the primary language used to develop&nbsp;native Android apps.</span><br /><span style=\"color: rgb(51,51,51);\">Web server development typically involves writing front-end code that runs on mobile apps and web pages, and back-end code that runs on the web server.</span><br /><span style=\"color: rgb(51,51,51);\">In this course, you'll learn how to develop a modern web application using HTML, CSS, and JavaScript to handle all the user interface presentation aspects, and a Java RESTful web service to handle multi-user access and communication, store persistent data and implement complex business logic. More specifically, you'll learn how to:</span></p><ul><li><span style=\"color: rgb(51,51,51);\">Use JavaScript and the jQuery library to</span><ul><li><span style=\"color: rgb(51,51,51);\">send&nbsp;and retrieve&nbsp;data from a web service&nbsp;using AJAX&nbsp;</span></li><li><span style=\"color: rgb(51,51,51);\">construct HTML displays using templates</span></li></ul></li><li><span style=\"color: rgb(51,51,51);\">Use Java and the Spring Boot suite of tools to</span><ul><li><span style=\"color: rgb(51,51,51);\">implement a RESTful API to both the database and application&nbsp;services</span></li><li><span style=\"color: rgb(51,51,51);\">apply modern-day Java programming concepts, such as lambdas, streams, and dependency injection</span></li></ul></li><li><span style=\"color: rgb(51,51,51);\">Use JavaScript Object Notation (JSON) data structures to</span><ul><li><span style=\"color: rgb(51,51,51);\">communicate between your application's&nbsp;JavaScript front-end and Java&nbsp;back-end</span></li><li><span style=\"color: rgb(51,51,51);\">implement the &quot;model&quot; in a model-view-controller&nbsp;</span></li></ul></li></ul><h1><span style=\"color: rgb(86,86,86);\">What reference materials will I need?</span></h1><p><span style=\"color: rgb(51,51,51);\">The primary resources for this course are available online. We have written many of them, and carefully reviewed those we link to. There is a wealth of material online, but some of it is outdated, and much of it is written for experienced programmers.&nbsp;</span><br /><span style=\"color: rgb(51,51,51);\">We will provide links to the most appropriate resources in each task. They have been selected based on&nbsp;their relevance to your task,&nbsp;the amount of prior experience they assume, and their focus &nbsp;on just what you need to know.&nbsp;</span><br /><span style=\"color: rgb(51,51,51);\">Online resources are your best option for learning how to build web applications in Java and how to use the Spring Boot framework. Most introductory&nbsp;books on Java web applications describe other approaches that Spring has replaced. Most books on&nbsp;Spring are written for experienced developers,&nbsp;using&nbsp;versions of Spring that are several years old. Many tasks&nbsp;that were complicated two years ago in Spring have become trivial in the most current versions. Online resources are best here.</span><br /><span style=\"color: rgb(51,51,51);\">When it comes to learning the Java language itself, especially the most basic aspects of Java, such as&nbsp;punctuation, naming rules, arithmetic operations, and such, we think a&nbsp;physical reference can be very helpful, sitting open and ready next&nbsp;to your computer, while you work.&nbsp;We therefore recommend the following book as an optional resource that&nbsp;may be particularly helpful for very new developers, who are often tripped up by tiny details that online articles by developers&nbsp;never think to mention:</span></p><ul><li><span style=\"color: rgb(51,51,51);\">Burd, Barry.&nbsp;<em>Beginning Programming with Java For Dummies</em>&nbsp;4th edition. (ISBN-10: 1118407814)</span></li></ul><p><ac:structured-macro ac:name=\"anchor\" ac:schema-version=\"1\" ac:macro-id=\"b7d4be46-6bed-4986-a23b-167fc080a81c\"><ac:parameter ac:name=\"\">_GoBack</ac:parameter></ac:structured-macro></p>",
    "conflPageId": "260997121",
    "conflChildrenId": [
      "260866073",
      "261095534",
      "261423414",
      "263913528",
      "263913556"
    ]
  },
  {
    "title": "Mobile App - Task 2",
    "content": "<p><a class=\"external-link\" style=\"text-decoration: underline;\" href=\"https://gbstool.learningbydoingtools.com/mc/poa?productID=4978&amp;taskID=1735#introduction\" rel=\"nofollow\"><span style=\"color: rgb(38,34,98);\">INTRODUCTION</span></a></p><h1><span style=\"color: rgb(128,130,133);\">Your Task</span></h1><p><span style=\"color: rgb(35,31,32);\">You have been asked by League Director, Tom Denton, to move forward with developing the mobile web app, which should behave like a native mobile app.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">The steps outlined in this Plan of Attack are one way to accomplish your client's requirements.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">To make your mobile web app behave more like a typical native mobile app, focus on commonly supported HTML5 features for making websites more native-like. Things that work on iPhone, Android, and maybe Windows Phone or Blackberry, and more than one mobile browser, are much better than things that only work on one device and/or one browser.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\"><strong>As part of this task, you will submit the following for review:&nbsp;</strong></span></p><ul><li><span style=\"color: rgb(35,31,32);\">For Mentor Review:</span><ul><li><span style=\"color: rgb(35,31,32);\">HTML for the list of games screen</span></li><li><span style=\"color: rgb(35,31,32);\">HTML for the game detail screen</span></li><li><span style=\"color: rgb(35,31,32);\">CSS&nbsp;for the&nbsp;web app</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">For Client Deliverable: the URL&nbsp;of your mobile website</span><ul><li><span style=\"color: rgb(35,31,32);\">When submitting, document any major changes from the design the client approved.</span></li><li><span style=\"color: rgb(35,31,32);\">Your mentor will&nbsp;advise you as to when you are ready to submit this deliverable to the client.</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">To deliver a URL the client can access, you will need to have your web site running on a web server. There are many ways to host a web site, but in a later task you will need to add a database to your web app. Therefore, we recommend you host your web site at&nbsp;<strong>Firebase</strong>, because&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">It is free for small projects.</span></li><li><span style=\"color: rgb(35,31,32);\">It provides&nbsp;a way to store and retreive data using&nbsp;JavaScript in your web pages.</span></li></ul><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"69354911-e659-45cd-9bfa-d37ca6455ec9\"><ac:parameter ac:name=\"title\">Step 1 - Create your Mobile App</ac:parameter><ac:rich-text-body><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Create the HTML and CSS files</strong>&nbsp;to implement your design in the main&nbsp;NYSL&nbsp;directory.</span><ol><li><span style=\"color: rgb(35,31,32);\">Build these files in small steps.&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">First create the HTML with the content you need to show.</span></li><li><span style=\"color: rgb(35,31,32);\">Then, add CSS until it looks the way you want.</span></li><li><span style=\"color: rgb(35,31,32);\">Keep the HTML pure and simple. Avoid putting styling and presentation code in the HTML.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test frequently</strong>&nbsp;by saving and viewing the files locally.</span><ol><li><span style=\"color: rgb(35,31,32);\">First test in a desktop browser.</span></li><li><span style=\"color: rgb(35,31,32);\">Then, test using something that imitates a smartphone view.&nbsp;See&nbsp;<em>Resources</em>&nbsp;for mobile testing tools.</span></li></ol></li></ol><p><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br /><strong>Submit</strong>&nbsp;the HTML and CSS components as specified under&nbsp;<em>Submit Your Work</em>.</p></ac:rich-text-body></ac:structured-macro><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"2178e952-53cb-4a5c-bbeb-24d9b8b974ec\"><ac:parameter ac:name=\"title\">Step 2 - Deploy your web app</ac:parameter><ac:rich-text-body><div><div class=\"sc-TOsTZ hghlyc\"><div><div class=\"page view\"><div class=\"wiki-content\"><p><span style=\"color: rgb(35,31,32);\">Now that you have some web pages, it's time to deploy them to Firebase, so that you will have a public URL, and a place to store data in a later task. Deployment is done using the Firebase command line (CLI) tool in a command shell.</span><br /><span style=\"color: rgb(35,31,32);\">Note: You will need to run the&nbsp;<strong>firebase deploy</strong>&nbsp;command described below to move your files to the Firebase server, whenever you want to release a new version.&nbsp;</span></p><h2><span style=\"color: rgb(128,130,133);\">Install Node</span></h2><p><span style=\"color: rgb(35,31,32);\">The Firebase CLI is built using the&nbsp;<strong>node</strong>&nbsp;scripting system, so you need to install that first.</span></p><ol><li><span style=\"color: rgb(35,31,32);\">Go to&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://nodejs.org/en/download/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">nodejs.org/en/download/</span></span></a><span style=\"color: rgb(35,31,32);\">.</span><ol><li><span style=\"color: rgb(35,31,32);\">Select and download the right version for your operating system. &nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">Open the download pkg and follow the instructions to install.&nbsp;</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Test!&nbsp;</strong>Verify that both&nbsp;<strong>node</strong>&nbsp;and&nbsp;<strong>npm</strong>&nbsp;are installed and working.</span><ol><li><span style=\"color: rgb(35,31,32);\">In a command shell, execute&nbsp;<strong>node --version</strong></span></li><li><span style=\"color: rgb(35,31,32);\">In a command shell, execute&nbsp;<strong>npm --version</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Both should run without error and print some version information.</span></li></ol></li></ol><h2><span style=\"color: rgb(128,130,133);\">Set Up Firebase</span></h2><p><span style=\"color: rgb(35,31,32);\">To use Firebase, you need to</span></p><ul><li><span style=\"color: rgb(35,31,32);\">create a free account at Firebase</span></li><li><span style=\"color: rgb(35,31,32);\">install&nbsp;Firebase command line (CLI) tool</span></li></ul><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Follow the&nbsp;instructions at&nbsp;</strong></span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://www.firebase.com/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><strong><span style=\"text-decoration: underline;\">Firebase</span></strong></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;for signing up.</span><ol><li><span style=\"color: rgb(35,31,32);\">This is quite easy to do. If you have a Google account, it is&nbsp;almost trivial. &nbsp;Click 'Login to Legacy Console'.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Install the Firebase CLI.</strong></span><ol><li><span style=\"color: rgb(35,31,32);\">Once you have Node.js and npm installed, you can install the Firebase command line tools with npm. &nbsp;In the command shell, execute&nbsp;<strong>npm install -g firebase-tools</strong></span><ul><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span></li></ul></li></ol></li></ol><p><span style=\"color: rgb(35,31,32);\">You may receive an&nbsp;error that&nbsp;indicates that you do not have permission to write to the directories that npm uses. While you can use sudo, it is cleaner not to use&nbsp;sudo&nbsp;when installing with npm&nbsp;packages. Change the owner of npm's directories to the name of the current user with the following command and then try the install again:&nbsp;</span><br />sudo chown -R $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share}</p><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Test!&nbsp;</strong>Execute&nbsp;<strong>firebase --version&nbsp;</strong>in a command shell.</span><ul><li style=\"list-style-type: none;\"><ul><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span></li></ul></li></ul></li></ol><p><span style=\"color: rgb(35,31,32);\">If you get the error 'firebase command not found' you may need to check that the npm PATH is set correctly.&nbsp;1.Follow the instructions below to set the path for your specific type of machine&nbsp;2.Execute&nbsp;<strong>npm install -g firebase-tools</strong>&nbsp;3.Test with&nbsp;<strong>firebase --version</strong>&nbsp;in the command shell. &nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong>Set the PATH for&nbsp;Mac:&nbsp;</strong></span><ul><li><span style=\"color: rgb(35,31,32);\">In the&nbsp;command shell, execute&nbsp;<strong>npm get prefix&nbsp;</strong>to get your&nbsp;npm path. (i.e.&nbsp;/Users/name/.node_modules/)&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">&nbsp;To open your .bashrc file execute the following in the command shell:</span></li><li>touch .bashrc</li></ul></li></ul><p>open -a TextEdit.app .bashrc<br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span></p><ul><li style=\"list-style-type: none;\"><ul><li style=\"list-style-type: none;\"><ul><li style=\"list-style-type: none;\"><ul><li style=\"list-style-type: none;\"><ul><li><span style=\"color: rgb(35,31,32);\">Add&nbsp;<strong>export&nbsp;PATH = &quot;<em>your-npm-path</em>/bin:$PATH&quot;</strong>&nbsp;to your .bashrc file and Save. Enter<em>&nbsp;</em>the path you got when you did&nbsp;<strong>npm get prefix</strong>&nbsp;instead of&nbsp;<em>your-npm-path</em>&nbsp;in the above.</span></li><li><span style=\"color: rgb(35,31,32);\">Open a new terminal window and execute&nbsp;<strong>echo $PATH&nbsp;</strong>to see if the&nbsp;directory is now in the PATH.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\"><strong>Set the PATH for Windows:</strong></span><ul><li><span style=\"color: rgb(35,31,32);\">You need to add&nbsp;<strong><em>your-npm-path</em>\\bin</strong>&nbsp;to your PATH environment variable.</span><ol><li><span style=\"color: rgb(35,31,32);\">Execute&nbsp;<strong>npm get prefix</strong>&nbsp;in the command shell to get&nbsp;<em>your-npm-path</em>. (i.e. C:\\Users\\\\{yourName}\\AppData\\npm)</span></li><li><span style=\"color: rgb(35,31,32);\">Add&nbsp;<strong><em>your-npm-path</em>\\bin</strong>&nbsp;to your PATH environment variable per instruction&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.computerhope.com/issues/ch000549.htm\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">here</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;for your specific Windows machine.&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">Close all remaining windows by clicking&nbsp;OK.</span></li><li><span style=\"color: rgb(35,31,32);\">Reopen Command prompt window, and run your code.</span></li></ol></li></ul></li></ul></li></ul></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">&nbsp;</span></p><h2><span style=\"color: rgb(128,130,133);\">Initialize and Deploy Your Web App</span></h2><p><span style=\"color: rgb(35,31,32);\">Now it's time to turn your web site into a Firebase web app. That involves two parts:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Create an app in your Firebase account and use the&nbsp;Firebase CLI to initialize the web site. That means creating some files in the web site with information that Firebase needs.</span></li><li><span style=\"color: rgb(35,31,32);\">Use the Firebase CLI to copy your web site to the Firebase server. This is called&nbsp;<strong>deploying</strong>.</span></li></ul><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Create an app at Firebase.</strong></span><ol><li><span style=\"color: rgb(35,31,32);\">Go to&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://www.firebase.com/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Firebase</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;and click 'See our new website'. &nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">Click 'Get Started For Free' to login using a google account.</span></li><li><span style=\"color: rgb(35,31,32);\">Click 'create new project'.</span></li><li><span style=\"color: rgb(35,31,32);\">Input a name and click 'Create Project'</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Create matching directory</strong>&nbsp;on your&nbsp;computer</span><ol><li><span style=\"color: rgb(35,31,32);\">Create a new folder on your computer with the same name as the web app just created on Firebase.&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">Put your web app files (created in Task 1) in your new directory.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Initialize the web site</strong></span><ol><li><span style=\"color: rgb(35,31,32);\">In the command shell, cd into the new&nbsp;web app directory (i.e. my-new-app-name) and no deeper. You need to be inside the directory that contains the top level HTML files.</span></li><li><span style=\"color: rgb(35,31,32);\">Execute&nbsp;<strong>firebase login</strong>&nbsp;to log into the Firebase site.</span></li><li><span style=\"color: rgb(35,31,32);\">Execute&nbsp;<strong>firebase init</strong></span><ol><li><span style=\"color: rgb(35,31,32);\">Use the 'Space Bar' to select hosting and database services (arrows to move up and down). Then use 'Enter' to confirm selection.</span><span>&nbsp;</span><span class=\"confluence-embedded-file-wrapper confluence-embedded-manual-size\"><ac:image ac:height=\"342\" ac:width=\"624\"><ri:attachment ri:filename=\"worddava529631bd9d0700d0d163f188f34dd4f.png\" ri:version-at-save=\"1\" /></ac:image></span></li><li><span style=\"color: rgb(35,31,32);\">Select the firebase app that you created previously from the firebase console.</span><span>&nbsp;</span><span class=\"confluence-embedded-file-wrapper confluence-embedded-manual-size\"><ac:image ac:height=\"342\" ac:width=\"624\"><ri:attachment ri:filename=\"worddavc44a0757ac32f6618080ac48d21e16d6.png\" ri:version-at-save=\"1\" /></ac:image></span></li><li><span style=\"color: rgb(35,31,32);\">When prompted to select the database rules, leave the field empty and press 'Enter' to create the Database rules file.</span><span>&nbsp;</span><span class=\"confluence-embedded-file-wrapper confluence-embedded-manual-size\"><ac:image ac:height=\"342\" ac:width=\"624\"><ri:attachment ri:filename=\"worddavaee1b41eb463521d4917bbc8260e673a.png\" ri:version-at-save=\"1\" /></ac:image></span></li><li><span style=\"color: rgb(35,31,32);\">Input the name of your public folder (will be folder that contains index.html) and hit 'Enter'. The default name is 'public' and it is recommended to leave it as such.</span><span>&nbsp;</span><span class=\"confluence-embedded-file-wrapper confluence-embedded-manual-size\"><ac:image ac:height=\"342\" ac:width=\"624\"><ri:attachment ri:filename=\"worddav8c1d7419049e65a97a440847285e6f61.png\" ri:version-at-save=\"1\" /></ac:image></span></li><li><span style=\"color: rgb(35,31,32);\">Type&nbsp;'y' and press 'Enter' to configure for single-page-app.</span><span>&nbsp;</span><span class=\"confluence-embedded-file-wrapper confluence-embedded-manual-size\"><ac:image ac:height=\"342\" ac:width=\"624\"><ri:attachment ri:filename=\"worddav7e21b64d455f7b1e5206ffbf0fc6385a.png\" ri:version-at-save=\"1\" /></ac:image></span></li><li><span style=\"color: rgb(35,31,32);\">If prompted to overwrite the index.html,&nbsp;type&nbsp;'N' and press 'Enter'.</span></li></ol></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Rearrange your web app file structure.</strong>&nbsp;When it initializes, Firebase will create some additional files in your directory with information that the Firebase CLI needs to communicate with the Firebase site. &nbsp;One of these is a 'public' directory.&nbsp;</span><span>&nbsp;</span><span class=\"confluence-embedded-file-wrapper confluence-embedded-manual-size\"><ac:image ac:height=\"388\" ac:width=\"624\"><ri:attachment ri:filename=\"worddav4efbe7026560323672a2d15d08453095.png\" ri:version-at-save=\"1\" /></ac:image></span><span style=\"color: rgb(35,31,32);\">As needed, rearrange your web app file structure into a structure similar to&nbsp;the following:</span><ul><li><span style=\"color: rgb(35,31,32);\">your-app-name/&nbsp; &nbsp;public/&nbsp; &nbsp; &nbsp; index.html&nbsp; &nbsp; &nbsp; other.html&nbsp; &nbsp; &nbsp; styles/&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;style.css&nbsp; &nbsp; &nbsp; scripts/&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;code.js</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">Add firebase to your new webapp project from the firebase console.</span><ol><li><span style=\"color: rgb(35,31,32);\">Copy and paste the code snippet at the bottom of your HTML or before other&nbsp;</span><span style=\"color: rgb(199,37,78);\">script</span><span style=\"color: rgb(35,31,32);\">&nbsp;tags.</span></li><li><span style=\"color: rgb(35,31,32);\">Save index.html with new firebase code.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\">Execute&nbsp;<strong>firebase deploy</strong>.</span><ol><li><span style=\"color: rgb(35,31,32);\">This will send all the files in your HTML directory to Firebase.</span></li><li><span style=\"color: rgb(35,31,32);\">Get your web app URL</span></li></ol></li></ol><h2><span style=\"color: rgb(128,130,133);\">Test Your Firebase Web App</span></h2><p><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Enter the Firebase URL for your app&nbsp;into a web browser address field. Verify that all the pages appear, with images, and working links.</span><br /><span style=\"color: rgb(35,31,32);\">If you get a&nbsp;<strong>not found</strong>&nbsp;error,&nbsp;check for a&nbsp;typing error in the URL. Look for&nbsp;any error messages in the command shell when you deployed.</span><br /><span style=\"color: rgb(35,31,32);\">Now test your app on mobile devices.&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Open the page in your device browser.</span></li><li><span style=\"color: rgb(35,31,32);\">Verify that the pages lay out properly.</span></li></ul><p><br /></p></div></div></div></div></div></ac:rich-text-body></ac:structured-macro><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"c8de563c-178d-4861-a862-8d064704341e\"><ac:parameter ac:name=\"title\">Step 3 - Make the web app look native</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Making a web app behave like a native app just involves adding a special tag to the HTML files and putting a bookmark to your web app on the home screen of your mobile device. You will also need to find or create an icon to display on the homescreen. The references in&nbsp;<em>Resources</em>&nbsp;give the details.</span></p><ol><li><span style=\"color: rgb(35,31,32);\"><strong>Add the appropriate META tags</strong>&nbsp;to make the web app standalone on iOS and Android. &nbsp;See&nbsp;<em>Resources</em>&nbsp;for examples.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Add the web app to your home screen</strong>.</span><ol><li><span style=\"color: rgb(35,31,32);\">Use the browser option on your device to save the page to your homescreen.</span></li><li><span style=\"color: rgb(35,31,32);\">Verify that the correct icon for your page appears on your device homescreen.</span></li><li><span style=\"color: rgb(35,31,32);\">Verify that tapping the icon opens your page.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\"><strong>Find or create&nbsp;a home screen icon for your web app&nbsp;</strong>and update your HTML to use it.</span></li></ol><p><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />Remember to run 'firebase deploy' from your app folder in the command shell after you update your HTML to see your changes online.<br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />If you used CDN versions of JS/CSS and your app is not displaying correctly, it's most likely because CDN versions of JS break when deployed to apps. One fix is to download the JS/CSS files and change your SCRIPT SRC to local links per&nbsp;<a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://forum.appgyver.com/t/jquery-in-module/1850/7\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">this example</span></span></a>.&nbsp;&nbsp;<span style=\"color: rgb(255,0,0);\"><strong>This link doesn't work</strong></span></p><p><br /></p><p class=\"auto-cursor-target\"><br /></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"5c659be1-7fb2-4276-bc61-b20f53a5b3ab\"><ac:parameter ac:name=\"title\">Step 4 - Submit your client deliverable</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br /><span style=\"color: rgb(35,31,32);\"><strong>Submit your client deliverable.</strong></span><span style=\"color: rgb(9,30,66);\"><span>&nbsp;</span></span><span style=\"color: rgb(35,31,32);\">In plain text, send the URL of the web app, plus a brief&nbsp;write-up&nbsp;of what you did.</span><span style=\"color: rgb(9,30,66);\"><span>&nbsp;</span></span><span style=\"color: rgb(35,31,32);\">Your mentor will tell you when you are ready to do this.</span></p></ac:rich-text-body></ac:structured-macro><p><br /></p><p class=\"auto-cursor-target\"><br /></p><p class=\"auto-cursor-target\"><br /></p><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "260997145",
    "conflChildrenId": [
      "260997149"
    ]
  },
  {
    "title": "Task 2 Resources",
    "content": "<h1 style=\"\"><span style=\"color: rgb(128,130,133);\">Background</span></h1><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Web site hosting with&nbsp;Firebase</span></h2><p style=\"\"><span style=\"color: rgb(35,31,32);\">You can create and test HTML pages on your local machine by simply opening them&nbsp;in a browser, but&nbsp;in order for your client and users to see your site, you have to&nbsp;<strong>deploy</strong>&nbsp;it to a&nbsp;<strong>web host</strong>. A site on a web host will have a public URL that you can send to your client for testing.</span><br /><span style=\"color: rgb(35,31,32);\">For this course, you are going to deploy your web app to&nbsp;<strong><a href=\"http://firebase.com\">firebase.com</a></strong>, which we'll usually refer to as&nbsp;<strong>Firebase</strong>. Firebase&nbsp;is one of the most popular of the new&nbsp;<strong>platform as a service</strong>&nbsp;(PaaS) companies. With Firebase, you get:</span></p><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\">Free hosting for web pages for modest amounts of traffic</span></li><li><span style=\"color: rgb(35,31,32);\">A&nbsp;<strong>command-line tool</strong>&nbsp;for uploading pages from your machine to Firebase</span></li><li><span style=\"color: rgb(35,31,32);\">The ability to store and access data for your web app at Firebase, using JavaScript in your web page</span></li></ul><p style=\"\"><span style=\"color: rgb(35,31,32);\">The last feature will become important later in the course. It's what will turn your website into a real interactive&nbsp;<strong>web app</strong>.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">To use Firebase, you set up a free account, download the Firebase Command Line Interface tool (CLI), and then create one or more<strong>&nbsp;applications</strong>&nbsp;on Firebase.</span></p><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Command Line Interfaces</span></h2><p style=\"\"><span style=\"color: rgb(35,31,32);\">Before the Macintosh, most users interacted with their computer using a&nbsp;<strong>command line interface</strong>&nbsp;(CLI). A CLI is&nbsp;a window within which you type commands to make the computer do things, such as create, move, and print files, and run programs. After the Macintosh,&nbsp;the point-and-click WYSIWYG (what you see is what you get) graphical user interface (GUI) became the most common way to do these activities.</span><br /><span style=\"color: rgb(35,31,32);\">However, software developers still often use the command shell. This is partly because you can do more in a command shell, and partly because the open source community does&nbsp;not have the resources to build and maintain multiple graphical user interfaces. All operating systems still include a command line interface.</span></p><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\">In Unix / Linux, it may be called the console.</span></li><li><span style=\"color: rgb(35,31,32);\">In MacOS, you run the&nbsp;<strong>terminal</strong>&nbsp;program.</span></li><li><span style=\"color: rgb(35,31,32);\">In Windows, you run the&nbsp;<strong>cmd</strong>&nbsp;program.</span><ul><li><span style=\"color: rgb(35,31,32);\">Windows 7 and later also have&nbsp;<strong>PowerShell</strong>, which has many more features.</span></li></ul></li></ul><p style=\"\"><span style=\"color: rgb(35,31,32);\">The Firebase CLI&nbsp;is a command line tool. To use this tool, you need to know how to do a few basic things, such as:</span></p><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\">Open a command line interface on your machine.</span></li><li><span style=\"color: rgb(35,31,32);\">Navigate inside the CLI to different directories.</span></li><li><span style=\"color: rgb(35,31,32);\">Enter and run commands.</span></li></ul><h1 style=\"\"><span style=\"color: rgb(128,130,133);\">Required Resources</span></h1><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Mobile Web Programming Concepts</span></h2><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\">Chapter 3 of&nbsp;<em>Build Mobile Websites and Apps for Smart Devices</em>&nbsp;by Earle Castledine, Myles Eftos, Max Wheeler &ndash; Covers how to build and style mobile web apps using CSS and HTML.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://blog.teamtreehouse.com/optimizing-mobile-web-apps-ios\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Optimizing Mobile Web Apps for iOS</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Making web apps look native on iOS, updated for iOS7.&nbsp;&nbsp;</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://blog.woorank.com/2014/06/adding-an-iphoneipad-icon-for-your-website/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Add a Shortcut to Your (iOS) Home Screen&nbsp;</span></a><span style=\"color: rgb(35,31,32);\">&ndash; Provides instructions on how to add a short cut to your home screen on an iOS device (e.g., iPhone, iPad).</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.mobilexweb.com/blog/home-screen-web-apps-android-chrome-31\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Home screen web apps for Android</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;--&nbsp;Shows how to set up your web app so that a user can add it to his/her home screen on an Android device.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.creativepulse.gr/en/blog/2014/hello-world-web-app-for-android-and-ios\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Hello World Web App for Android and iOS</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- A very simple, recent, annotated example of the HTML and icons you need to create a web app that can be put on the home screen in either Android or iOS.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://www.iconfinder.com/free_icons\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">IconFinder&nbsp;Free Icon Site</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- If you need a distinctive icon for your app, this is one of many sites offering free ones</span><ul><li><span style=\"color: rgb(35,31,32);\">Be careful! Many such sites in the past have contained malware.</span></li></ul></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.gieson.com/Library/projects/utilities/icon_slayer/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Icon Slayer Icon Generator</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- An online tool that takes an icon image and outputs it in the many sizes desired by Android and iOS, along with some nice customization options</span></li></ul><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">HTML and CSS Review</span></h2><ul style=\"\"><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://html5doctor.com/element-index/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">HTML Element Index</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;at HTML5 Doctor &ndash; A current and complete listing of what's in HTML5.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://htmlreference.io/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">HTML Reference</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- alphabetic reference, with links to the handy &quot;Can I Use&quot; site and the Mozilla Developer Network.</span></li></ul><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Node</span></h2><p style=\"\"><span style=\"color: rgb(35,31,32);\">The Firebase&nbsp;command line (CLI) tool uses&nbsp;<strong>node</strong>. Node (also called nodeJS)&nbsp;is a&nbsp;<strong>scripting system</strong>. Scripting systems help developers automate command shell tasks by writing programs to do common tasks, such as copy files, run compilers, and so on. These programs are called&nbsp;<strong>scripts</strong>.</span><br /><span style=\"color: rgb(35,31,32);\">Some scripting systems are specific to particular operating systems, e.g.,&nbsp;<strong>bash</strong>&nbsp;for&nbsp;Unix command shells, and&nbsp;<strong>bat</strong>&nbsp;files for Windows&nbsp;<strong>cmd</strong>&nbsp;shells. Other scripting systems are more general and run on many operating systems, e.g.,&nbsp;<strong>Perl</strong>,&nbsp;<strong>Python</strong>, and&nbsp;<strong>Ruby</strong>.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>node</strong>&nbsp;lets you write and run command shell scripts in&nbsp;JavaScript. It was originally designed to create web servers&nbsp;in JavaScript. As more and more libraries in JavaScript were written for&nbsp;<strong>node</strong>, it became important to simplify finding, downloading, and installing the libraries, so a tool called&nbsp;<strong>npm</strong>&nbsp;(node package manager) was created.&nbsp;These days,&nbsp;<strong>npm&nbsp;</strong>is installed with&nbsp;<strong>node</strong>&nbsp;automatically.&nbsp;<strong>node</strong>&nbsp;is available for Unix, Windows, and MacOS.</span><br /><span style=\"color: rgb(35,31,32);\">The Firebase CLI is built with&nbsp;<strong>node</strong>&nbsp;and you install it with&nbsp;<strong>npm</strong>. You don't need to do any&nbsp;<strong>node</strong>&nbsp;programming yourself.</span></p><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Firebase&nbsp;Web Hosting</span></h2><p style=\"\"><span style=\"color: rgb(35,31,32);\">There are many companies that provide web site hosting. These are&nbsp;primarily designed as places to store your HTML, CSS, and other web site assets. Many, though not all, also allow you to run one or more web application systems, such as&nbsp;<strong>PHP</strong>,&nbsp;<strong>Java</strong>,&nbsp;<strong>Python</strong>, or&nbsp;<strong>Ruby on Rails</strong>.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Firebase&nbsp;</strong>is different. It's primarily a place to host data for web and mobile applications. However, it also happens to support hosting static web pages. Firebase would not be your best choice if you just wanted to host a normal static web site. But since you will need&nbsp;to store and retrieve live data later in the project, it makes sense to put your website on Firebase&nbsp;from the start.&nbsp;</span></p><ul style=\"\"><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://www.firebase.com/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Firebase&nbsp;home page</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- go there&nbsp;to get a free account. If you have a Google account, you're almost done.&nbsp;</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://www.firebase.com/docs/hosting/quickstart.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Hosting&nbsp;Setup</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- How to set up&nbsp;your machine so that you can deploy your HTML pages to&nbsp;Firebase.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.developereconomics.com/finding-right-baas/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Finding the right BaaS</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- An overview with links to&nbsp;companies like Firebase&nbsp;that provide&nbsp;backend services for mobile apps.</span><ul><li><span style=\"color: rgb(35,31,32);\">Note: <a href=\"http://Parse.com\">Parse.com</a> is being turned off by Facebook. No new accounts can be created.</span></li></ul></li></ul><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Text Editor</span></h2><p style=\"\"><span style=\"color: rgb(35,31,32);\">HTML, CSS and JavaScript are all stored plain text files. Many&nbsp;text editors will work. Here are some free ones that we recommend.</span><br /><span style=\"color: rgb(35,31,32);\">Whichever you choose, the first thing you need to do is make sure that hitting the Tab key inserts 2 spaces, rather than a tab character or 4 or 8 spaces.</span></p><h3 style=\"\"><span style=\"color: rgb(128,130,133);\"><strong>Linux</strong></span></h3><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\"><strong>Emacs</strong>&nbsp;- Included or available with most Unix systems, somewhat complex to learn though.</span><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://ergoemacs.org/emacs/emacs_tabs_space_indentation_setup.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">How to make tab insert spaces in&nbsp;Emacs</span></a></li></ul></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://vim.sourceforge.net/download.php\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><strong>Vim</strong></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;- The other popular Unix editor.</span><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://vim.wikia.com/wiki/Converting_tabs_to_spaces\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">How to make tab insert spaces in vim</span></a></li></ul></li></ul><h3 style=\"\"><span style=\"color: rgb(128,130,133);\"><strong>MacOS</strong></span></h3><ul style=\"\"><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.barebones.com/products/textwrangler/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><strong>TextWrangler</strong></span></a><span style=\"color: rgb(35,31,32);\"><strong>&nbsp;-&nbsp;Free download, many more features than&nbsp;TextEdit.</strong></span><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://blog.ryanrampersad.com/2011/09/tabs-to-spaces-in-textwrangler/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">How to make tab insert spaces in&nbsp;TextWrangler</span></a></li></ul></li></ul><h3 style=\"\"><span style=\"color: rgb(128,130,133);\"><strong>Windows</strong></span></h3><ul style=\"\"><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://notepad-plus-plus.org/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><strong>Notepad++</strong></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;- A popular replacement for Notepad with many features. (Note: Do not use Notepad.)</span><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://stackoverflow.com/questions/6728313/notepad-tab-settings\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">How to make tab insert spaces in Notepad++</span></a></li></ul></li></ul><p style=\"\"><span style=\"color: rgb(35,31,32);\">Do&nbsp;<strong>not</strong>&nbsp;use any of the following:</span></p><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\">Word processors, like Microsoft Word or&nbsp;WordPad, or&nbsp;OpenOffice:&nbsp;In some cases these generate files that simply don't work with a web browser. In other cases, like Word, they generate very verbose non-standard HTML.</span></li><li><span style=\"color: rgb(35,31,32);\">WYSIWYG (what you see is what you get) HTML editors like Adobe Dreamweaver or Microsoft Expression: These hide what's happening underneath and have their own learning curve.</span></li><li><span style=\"color: rgb(35,31,32);\">Super-basic text editors like Notepad: These give you too little editing control over things like tab characters, and no support for writing syntactically valid HTML and CSS.</span></li></ul><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Command Line Interfaces</span></h2><h3 style=\"\"><span style=\"color: rgb(128,130,133);\"><strong>Unix, Linux, MacOS X</strong></span></h3><p style=\"\"><span style=\"color: rgb(35,31,32);\">The Macintosh has Unix underneath. The same basic commands are used in all of these systems. The only thing that varies is how you open the command shell.</span></p><ul style=\"\"><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://linuxcommand.org/lc3_learning_the_shell.php\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Learning the Shell</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- How you open a Linux shell depends on what Linux or Unix you have, but it's highly unlikely that you are a Linux user and don't already know about command shells.&nbsp;</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://blog.teamtreehouse.com/introduction-to-the-mac-os-x-command-line\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Introduction&nbsp;to the Macintosh command line</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Shows you how to use Terminal in the MacOS system.</span></li></ul><h3 style=\"\"><span style=\"color: rgb(128,130,133);\"><strong>Windows</strong></span></h3><p style=\"\"><span style=\"color: rgb(35,31,32);\">Windows uses a different command line language. It has two shell programs: the older, simpler&nbsp;<strong>cmd</strong>, available in basically every version of Windows you'll run into on the desktop, and the more powerful but more complicated&nbsp;<strong>PowerShell</strong>&nbsp;in&nbsp;Windows 7 and later.</span></p><ul style=\"\"><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.7tutorials.com/command-prompt-how-use-basic-commands\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Command Prompt &ndash; How to use basic commands</span></a></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://technet.microsoft.com/en-us/library/cc947813(v=ws.10).aspx\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">How to open the Windows command prompt with administrator access</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Do this only if some command fails because Windows says you don't have the necessary privileges. You must&nbsp;know the password for administrator access on your machine.</span></li></ul><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Testing Tools</span></h2><p style=\"\"><span style=\"color: rgb(35,31,32);\">While smartphone web browsers can view most websites as is, many sites do not work well on tiny screens. Testing for this problem is challenging because there are many different screen sizes, especially if you include 7 and 10-inch tablets. Therefore, it's very useful to have one or more tools that let you quickly see your mobile site in a different small phone-sized window.</span></p><ul style=\"\"><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://quirktools.com/screenfly/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Quirktools&nbsp;Screenfly</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Enter a URL and select a device to see how the site looks on that device.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://developers.google.com/web/tools/chrome-devtools/iterate/device-mode/?hl=en\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Google Chrome Emulator for Mobile Devices</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Allows you to emulate a mobile device to see how your web app would look on the device.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://sixrevisions.com/tools/10-excellent-tools-for-testing-your-site-on-mobile-devices/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">10 Excellent Tools for Testing Your Site on Mobile Devices</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- A variety of tools, including simulators and&nbsp;validators.</span></li></ul><h1 style=\"\"><span style=\"color: rgb(128,130,133);\">Additional Resources</span></h1><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Mobile Web Programming Concepts</span></h2><ul style=\"\"><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://37signals.com/svn/posts/3439-design-decisions-projects-on-basecamp-for-iphone\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Design Decisions: Projects on Basecamp for iPhone</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- A case study of what's involved in going from desktop Basecamp to iPhone.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.html5rocks.com/en/mobile/mobifying/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">Mobifying HTML5rocks</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- A case study of what was involved in making the HTML5rocks website mobile friendly.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://blog.forecast.io/its-not-a-web-app-its-an-app-you-install-from-the-web/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">It's not a web app. It's an app you install from the web.</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Provides lessons learned on making a mobile web app more like a native mobile app.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://mobiforge.com/news-comment/what-you-can-learn-ft-web-app-interview-with-steve-pinches\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\">What You Can Learn from the FT Web App: Interview with Steve Pinches</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Describes what you can learn from the Financial Times web app; an interview with the Financial Times of London about why in 2011 they&nbsp;dropped their native mobile app in favor of an HTML5 web app.</span></li></ul>",
    "conflPageId": "260997149",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Task 3 - Resources",
    "content": "<h1 style=\"\"><span style=\"color: rgb(128,130,133);\">Background</span></h1><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Responsive web design</span></h2><p style=\"\"><span style=\"color: rgb(35,31,32);\">Responsive web design refers to a web page design adapting appropriately to different delivery platforms, focusing primarily on size variations. Adapting means more than simply filling the width of the screen. It means adjusting what is visible, e.g., not showing some elements if the screen is too small, or laying elements out differently, as the ratio of height to width changes.</span><br /><span style=\"color: rgb(35,31,32);\">There are two key elements in responsive web design:</span></p><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\"><strong>CSS media queries&nbsp;</strong>let you write CSS code that uses a set of CSS rules only if certain conditions are true, such as the page is being printed, or displayed on a screen, or has at least a certain width.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Flexible grid layouts</strong>&nbsp;are predefined CSS classes representing variously-sized&nbsp;columns, e.g., 2 columns across, 3 across, and so on,&nbsp;specified in percentage widths. You use media queries to select which columns to put items in for different screen sizes. This leads to layouts that are neatly aligned, adjust smoothly over&nbsp;modest changes, and&nbsp;switch cleanly when the size changes past a certain point.&nbsp;</span></li></ul><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Twitter Bootstrap</span></h2><p style=\"\"><span style=\"color: rgb(35,31,32);\">Quite a few libraries of CSS and JavaScript have been developed to support responsive design. Of these, the most popular right now is Bootstrap from Twitter. The advantages of using Twitter Bootstrap are:</span></p><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\">Someone else has put a lot of thought into the design.</span></li><li><span style=\"color: rgb(35,31,32);\">The code has been tested and used by&nbsp;thousands&nbsp;of developers.</span></li><li><span style=\"color: rgb(35,31,32);\">If you get stuck, there are a lot of users online to ask for help.</span></li></ul><p style=\"\"><span style=\"color: rgb(35,31,32);\">Another popular competitor to Bootstrap is Foundation. See&nbsp;<em>Resources</em>&nbsp;for links to both, but use Bootstrap here.</span></p><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Single-page web apps</span></h2><p style=\"\"><span style=\"color: rgb(35,31,32);\">The most common way to make a mobile web app respond quickly and robustly, even in the face of poor network access, is to make it a single page web app. That means, instead of having each screen be one web page, as is normal on a desktop website, you have just one page with all the content. Once it is downloaded, no further network access is needed. You use CSS and JavaScript to hide and show just one part of the page at a time. This is both quick and allows you to add fancy transitions between &quot;pages.&quot;</span><br /><span style=\"color: rgb(35,31,32);\">This technique is useful in desktop websites as well. For example, there are very nice libraries for doing presentations&nbsp;in HTML, such as&nbsp;<strong>reveal.js</strong>, that put all slides in one page and use JavaScript and CSS to manage transitions between slides.</span></p><h1 style=\"\"><span style=\"color: rgb(128,130,133);\">Required Resources</span></h1><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Mobile Web Programming Concepts</span></h2><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\">Chapter 4 of&nbsp;<em>Build Mobile Websites and Apps for Smart Devices</em>&nbsp;by Earle Castledine, Myles Eftos, Max Wheeler &ndash; Discusses how to do animated transitions.</span><ul><li><span style=\"color: rgb(35,31,32);\">Stop when you get to the section on AJAX.</span></li></ul></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://coding.smashingmagazine.com/2011/01/12/guidelines-for-responsive-web-design/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Guidelines for Responsive Web Design</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- A nice overview of the various techniques involved.</span></li><li><span style=\"color: rgb(35,31,32);\">Twitter Bootstrap:</span><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.bootstrapcdn.com/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Bootstrap CDN link</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- This site gives the HTML link to use to load Bootstrap from a remote server.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://www.codeproject.com/Articles/1113048/Creating-Responsive-Website-using-Bootstrap\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Creating a Responsive Website with Bootstrap</span></span></a></li></ul></li></ul><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">CSS Animations</span></h2><ul style=\"\"><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://caniuse.com/css-animation\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Can I Use...? table&nbsp;</span></span></a><span style=\"color: rgb(35,31,32);\">of browser support for various CSS3 animations &ndash; Before adding a new animation, or code, to work around a limitation, use this or similar sites to see what's supported.</span></li></ul><h1 style=\"\"><span style=\"color: rgb(128,130,133);\">Additional Resources</span></h1><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Responsive Web Design</span></h2><ul style=\"\"><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://caniuse.com/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Compatibility Tables for Support of HTML5, CSS3, SVG and More in Desktop and Mobile Browsers</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- A comprehensive, readable summary of what features are supported by what browsers on what mobile devices.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.quirksmode.org/m/css.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">CSS Contents and Browser Compatibility - Mobile</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Another excellent resource for what works where.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://www.sitepoint.com/most-popular-frontend-frameworks-compared/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">5 Most Popular&nbsp;FrontEnd&nbsp;Frameworks Compared</span></span></a></li></ul><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">jQuery</span></h2><ul style=\"\"><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://net.tutsplus.com/tutorials/javascript-ajax/14-helpful-jquery-tricks-notes-and-best-practices/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">14 Helpful jQuery Tricks, Notes, and Best Practices</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;- Article with helpful tips for writing jQuery code.</span></li></ul><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">jQuery Mobile</span></h2><p style=\"\"><span style=\"color: rgb(35,31,32);\">Most mobile web interfaces rely heavily on JavaScript, and most use a JavaScript library to take care of the many common tasks, such as animation and pitfalls (e.g., browser differences). Because it is so widely used and documented, the book recommends using the jQuery JavaScript library. jQuery, developed for desktop web applications, can be used for mobile web apps, but even more appropriate is jQuery Mobile.</span><br /><span style=\"color: rgb(35,31,32);\">Here are some good tutorials on using jQuery Mobile. In addition, it's always a good idea to look for more offerings. Try searching for jQuery mobile tutorials that have appeared in the last year or so.</span></p><ul style=\"\"><li><span style=\"color: rgb(35,31,32);\"><em>Head First Mobile Web</em>&nbsp;by&nbsp;Lyza Danger Gardner and Jason Grigsby</span></li><li><span style=\"color: rgb(35,31,32);\"><em>jQuery Mobile: Up and Running</em>&nbsp;by Maximiliano Firtman</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.codeforest.net/jquery-mobile-tutorial-basics\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">jQuery Mobile Tutorial: Basics</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;at CodeForest</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.noupe.com/tutorial/jquery-mobile-tutorial-creating-a-restaurant-picker-web-app.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">jQuery Mobile Tutorial: Creating a Restaurant Picker Web App</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;by Stephanie Walter</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://jquerymobile.com/resources/#Articles\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">A list of jQuery Mobile articles and tutorials</span></span></a></li></ul><h2 style=\"\"><span style=\"color: rgb(128,130,133);\">Mobile Web Programming Concepts</span></h2><ul style=\"\"><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://37signals.com/svn/posts/3439-design-decisions-projects-on-basecamp-for-iphone\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Design Decisions: Projects on Basecamp for iPhone</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;- A case study of what's involved in going from desktop Basecamp to iPhone.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.html5rocks.com/en/mobile/mobifying/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Mobifying HTML5rocks</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;- A case study of what was involved in making the HTML5rocks website mobile friendly.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://blog.forecast.io/its-not-a-web-app-its-an-app-you-install-from-the-web/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">It's not a web app. It's an app you install from the web.</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;- Provides lessons learned on making a mobile web app more like a native mobile app.</span></li></ul>",
    "conflPageId": "260997172",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java - Task 2",
    "content": "<h2><span style=\"color: rgb(153,153,153);\">Introduction</span></h2><p><span style=\"color: rgb(35,31,32);\">You've been asked to build an initial web application that can create and show a list of games and who is&nbsp;playing them.&nbsp;This will require writing both front-end and back-end code, including</span></p><ul><li><span style=\"color: rgb(35,31,32);\">JPA code and database tables for games and players</span></li><li><span style=\"color: rgb(35,31,32);\">Java methods&nbsp;for getting the players of a game and&nbsp;the games someone is playing</span></li><li><span style=\"color: rgb(35,31,32);\">application controller code&nbsp;to return JSON with a list of the current games and who is playing them</span></li><li><span style=\"color: rgb(35,31,32);\">web page HTML, CSS, and JavaScript&nbsp;to display that JSON data in a readable list</span></li></ul><p><span style=\"color: rgb(35,31,32);\"><strong>DON'T PANIC!</strong>&nbsp;There's a ton of things mentioned in that email that are probably completely mysterious to you. That's normal, especially at the start of a new project. You are&nbsp;not expected to&nbsp;know or understand all these terms and concepts. This is where you get to learn them.</span></p><h2><span style=\"color: rgb(153,153,153);\">Agile Development</span></h2><p><span style=\"color: rgb(35,31,32);\">Agile is the name for a modern approach to doing software development. It emphasizes building useful pieces of programs in small steps with testable useful results. The email mentions several key concepts: end-to-end slices, user stories, acceptance tests. Information about what these mean&nbsp;can be found in the&nbsp;<strong>Resources</strong>.</span></p><h2><span style=\"color: rgb(153,153,153);\">Databases</span></h2><p><span style=\"color: rgb(35,31,32);\">Most applications, especially web applications, need databases to store&nbsp;information in a permanent place. A database for an application is a set of tables. Each table is simple &ndash; basically like a spreadsheet &ndash; but a complete set of databases may have complicated relationships.&nbsp;To access data you would write Structured Query Language (SQL) commands. This is a programming language for storing and fetching data from a relational database. SQL is not at all like Java or JavaScript. It doesn't have loops and classes with methods&nbsp;in the way those languages do. SQL has&nbsp;a powerful&nbsp;<strong>SELECT</strong>&nbsp;command&nbsp;for&nbsp;fetching rows of data from a database, and&nbsp;<strong>INSERT, UPDATE</strong>, and&nbsp;<strong>DELETE</strong>&nbsp;commands for&nbsp;modifying data. The basic operations with data are often given the acronym&nbsp;CRUD for create, retrieve, update, and delete.</span><br /><span style=\"color: rgb(35,31,32);\">The email mentions several key database concepts: tables, database-generated IDs, one-to-many relationships, and CRUD. Information about basic database concepts can be found in the&nbsp;<strong>Resources</strong>.</span></p><h2><span style=\"color: rgb(153,153,153);\">Many-to-Many Relationships</span></h2><p><span style=\"color: rgb(35,31,32);\">When dealing with collections of different&nbsp;kinds of data, both in Java classes and in databases, what code you write will depend on what the&nbsp;<em>cardinality</em>&nbsp;of the inter-relationship of data is. There are three basic cardinalities:</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong>One-to-one:&nbsp;</strong>Example:&nbsp;A player will have exactly one unique ID number that no one else has.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>One-to-many:&nbsp;</strong>Example:&nbsp;A player might have multiple email addresses, but every email belongs to just one player.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Many-to-many:&nbsp;</strong>Example:&nbsp;A player can play many games, and games have more than one player.&nbsp;</span></li></ul><p><span style=\"color: rgb(35,31,32);\">For this task, you need to implement the third kind of relationship.</span></p><h2><span style=\"color: rgb(153,153,153);\">JPA, Hibernate, ORM</span></h2><p><span style=\"color: rgb(35,31,32);\">The email refers to JPA (the Java Persistence API). This is a modern Java library&nbsp;that makes it possible&nbsp;to connect Java code to databases without having to write database code directly (i.e., without using SQL).&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">With&nbsp;JPA,&nbsp;you</span></p><ul><li><span style=\"color: rgb(35,31,32);\">use Java annotations to connect one class, e.g.,&nbsp;<strong>User</strong>, to the database tables and columns where user information would be stored, and</span></li><li><span style=\"color: rgb(35,31,32);\">define a&nbsp;<strong>Repository</strong>&nbsp;class with methods for storing and retrieving instances of just that class, e.g., a&nbsp;<strong>UserRepository</strong>&nbsp;class with methods for</span><ul><li><span style=\"color: rgb(35,31,32);\">saving an instance of a User in the appropriate database tables (create)</span></li><li><span style=\"color: rgb(35,31,32);\">getting lists of instances of Users with various properties, e.g., all users with the last name Smith (retrieve)</span></li><li><span style=\"color: rgb(35,31,32);\">saving a modified User instance in the database (update)</span></li><li><span style=\"color: rgb(35,31,32);\">deleting a User from the database (delete)</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">The A in JPA is API (application program interface). That means JPA is a specification of a standard set of methods for connecting&nbsp;Java classes to&nbsp;databases. JPA is not however a body of code to do that. Spring uses a library called&nbsp;<strong>Hibernate</strong>&nbsp;which implements the JPA specification.</span><br /><span style=\"color: rgb(35,31,32);\">Hibernate is an example of a&nbsp;<strong>Object-Relational Mapper</strong>&nbsp;(<strong>ORM</strong>). An ORM is any tool that does the task of saving objects, such as Java instances, to a database, and retrieving objects from a database.</span><br /><span style=\"color: rgb(35,31,32);\">See&nbsp;the&nbsp;<strong>Resources</strong>&nbsp;for links to more information about JPA.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Spring Boot</span></h2><p><span style=\"color: rgb(35,31,32);\">Building a web application requires tens of thousands of lines of code.&nbsp;It would take many months or more if you had to write this code over and over for every web application you needed to develop. Fortunately,large libraries of pre-written code have been created for every modern programming language to do the commonly needed tasks, such as creating and using a database, and sending&nbsp;data to&nbsp;a web browser.</span><br /><span style=\"color: rgb(35,31,32);\">Spring is a collection of a large number of libraries, including JPA. Spring has a reputation for being powerful but very complicated to use. Spring Boot is a set of tools, i.e., programs, designed to hide the complexity of Spring. Spring Boot lets you build a running web application in a few minutes. There is a caution though. Because Spring Boot has&nbsp;so many parts, if you do something wrong, it can be very challenging to find the cause. If the application doesn't run, you'll probably need help from your peers and mentor to find the appropriate error messages and figure out what they mean. The&nbsp;<strong>Resources</strong>&nbsp;has links to some tutorial material on Spring Boot.</span></p><h2><span style=\"color: rgb(153,153,153);\">REST</span></h2><p><span style=\"color: rgb(35,31,32);\">REST is not a programming language or library, though there are many libraries to help do REST. REST is a way of organizing how you develop the URLs to access your web application.</span><br /><span style=\"color: rgb(35,31,32);\">There are many subtleties in designing RESTful interfaces. The Spring Boot libraries will automatically create URLs for you, following commonly used patterns. The&nbsp;<strong>Resources</strong>&nbsp;have links&nbsp;to background material on what REST means and why it's used.</span><br /><span style=\"color: rgb(35,31,32);\">You'll sometimes see the acronym<strong>&nbsp;HATEOAS</strong>&nbsp;in connection with discussions about REST. It is an abbreviation for &quot;Hypermedia As The Engine Of Application State&quot;. That mouthful means that you design a REST application so that a web client only needs&nbsp;one URL to get started. That URL is the equivalent of a home page for a web site. If you GET that URL, you get back a resource, e.g., JSON, XML, or HTML, that lists the&nbsp;other URLs that are available. Those URLs in turn lead to data and/or other lists of URLs. All public resources should be available through URLs sent by the server. The client should not be required to construct URLs.</span><br /><span style=\"color: rgb(35,31,32);\">You are not required to follow this principle in the application you are building, but be aware that Spring's&nbsp;<strong>RepositoryRestResource</strong>&nbsp;does. This makes the JSON somewhat verbose. Every JSON object returns fields with the URL for the object itself and the URLs for all the objects that are parts&nbsp;of the object.</span></p><h2><span style=\"color: rgb(153,153,153);\">Controllers</span></h2><p><span style=\"color: rgb(35,31,32);\">By a&nbsp;&quot;controller&quot; here, we don't mean</span><br /><ac:image ac:height=\"185\" ac:width=\"297\"><ri:attachment ri:filename=\"worddavb327e074f11f954bc38d55fbabe8bc6b.png\" ri:version-at-save=\"1\" /></ac:image><br /><span style=\"color: rgb(35,31,32);\">Rather a controller in Spring&nbsp;means a Java class in a web application that takes care of reading URLs sent to the server and picking the right Java code to run to send data back. A web application can have multiple controllers. They are tried in order until one of them says &quot;I know what to do with that URL.&quot; If no controller works, Spring responds with an error message &ndash; one you'll be encountering frequently.</span><br /><span style=\"color: rgb(35,31,32);\">A&nbsp;<strong>RestController</strong>&nbsp;is a subclass of controllers. The methods in a&nbsp;<strong>RestController</strong>&nbsp;return JSON objects rather than web pages.</span><br /><span style=\"color: rgb(35,31,32);\">When you create a REST repository, Spring creates a Rest controller that handles&nbsp;URLs for inspecting and modifying&nbsp;your repository. You&nbsp;could write JavaScript code to use these URLs,&nbsp;but this has several problems:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">The REST repository sends back HATEOAS JSON.</span><ul><li><span style=\"color: rgb(35,31,32);\">When an object contains other objects, e.g., a game contains players, you get JSON with just the URLs for the nested objects.</span></li><li><span style=\"color: rgb(35,31,32);\">This means you have to do multiple requests to get all the data you want.</span></li><li><span style=\"color: rgb(35,31,32);\">This is slow and increases the number of requests the server has to handle.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">The REST repository returns all fields in an object, unless explicitly marked to not send.</span><ul><li><span style=\"color: rgb(35,31,32);\">This can include data that should not be sent, e.g., passwords, or, in a Salvo game, the secret locations of an opponent's ships.</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">Therefore, while the repository JSON is handy for inspecting and debugging the database during development, you will want to define another controller that is used by the web pages that are the&nbsp;game interface. Specifically, you want to define a controller that will make it easy to</span></p><ul><li><span style=\"color: rgb(35,31,32);\">send&nbsp;a list of all games, and the players playing them, with just one call</span></li><li><span style=\"color: rgb(35,31,32);\">send only&nbsp;the information that a player should be allowed to see</span></li><li><span style=\"color: rgb(35,31,32);\">send data in JSON format that are easy to convert into HTML</span></li></ul><p><span style=\"color: rgb(35,31,32);\">By defining a&nbsp;<strong>RestController</strong>&nbsp;in Java in your web app, you can do all this.</span><br /><span style=\"color: rgb(35,31,32);\">A&nbsp;Spring&nbsp;web application uses the following algorithm to&nbsp;decide how to respond to a&nbsp;URL:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">First, it checks the URLs defined by any&nbsp;<strong>RepositoryRestResource</strong>&nbsp;controller classes that have been automatically created.</span></li><li><span style=\"color: rgb(35,31,32);\">Then it checks the URLs specified by any&nbsp;<strong>Controller</strong>&nbsp;classes that you have defined.</span></li><li><span style=\"color: rgb(35,31,32);\">Finally, it checks to see if the URL is the name of a file in the&nbsp;<strong>resources/static</strong>&nbsp;directory.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">URLs&nbsp;are checked in this order. If you have a&nbsp;<strong>Game</strong><strong>RestRepository</strong>, then all URLs starting with&nbsp;<strong>/games</strong>&nbsp;will be handled by that repository's controller. A file like&nbsp;<strong>games.html</strong>&nbsp;in&nbsp;<strong>resources/static</strong>&nbsp;will never be returned because&nbsp;<strong>/games</strong>&nbsp;would be&nbsp;found first.</span><br /><span style=\"color: rgb(35,31,32);\">To avoid accidental name conflicts, you should tell Spring to use different URL &quot;prefixes&quot; for each of the above cases.</span> <br class=\"atl-forced-newline\" /><br class=\"atl-forced-newline\" /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"aa0c7539-0db2-4646-a016-0247ab2cdf9b\"><ac:parameter ac:name=\"title\">Step 1 - Create a Game REST Repository</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(153,153,153);\">Define the Java Classes</span></h2><p><span style=\"color: rgb(35,31,32);\">Repeat the process you did with&nbsp;<strong>Player</strong>&nbsp;to create&nbsp;<strong>Game</strong>&nbsp;and&nbsp;<strong>GameRepository</strong>. &nbsp;Define the classes for&nbsp;<strong>Game</strong>&nbsp;and&nbsp;<strong>GameRepository</strong>&nbsp;following the examples in&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=33\"><span style=\"color: rgb(51,122,183);\">the eBook on Spring databases and JPA</span></a><span style=\"color: rgb(35,31,32);\">.&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">In Intellij IDEA, use&nbsp;<strong>File | New ... | Java Class</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Name the class&nbsp;<strong>Game</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Edit the generated Java code as appropriate to define&nbsp;<strong>Game</strong>&nbsp;along the lines of the&nbsp;<strong>Person</strong>&nbsp;example.</span></li><li><span style=\"color: rgb(35,31,32);\">Repeat by making a new class for&nbsp;<strong>GameRepository</strong></span></li></ul><p><span style=\"color: rgb(35,31,32);\">The only real difference between&nbsp;<strong>Player</strong>&nbsp;and&nbsp;<strong>Game</strong>&nbsp;is that games have no name. They do have a creation date. The creation date should be set automatically to the current date, when the game is created.&nbsp;</span><br /><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1166\"><span style=\"color: rgb(51,122,183);\">Make the repository a&nbsp;<strong>RestRepository</strong></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;so that you can use your browser to view the stored data in the testing below.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Create the Sample Data</span></h2><p><span style=\"color: rgb(35,31,32);\">Change your&nbsp;<strong>CommandLineRunner</strong>&nbsp;in your application class to create three games, using&nbsp;<strong>new Game()</strong>.</span><br /><span style=\"color: rgb(35,31,32);\">After creating the games, but before saving them, set the dates of the second and third games to one hour and two hours later, respectively.&nbsp;See&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1167\"><span style=\"color: rgb(51,122,183);\">the Date section of the Java eBook</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;for how to create dates from other dates.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test by Browsing&nbsp;the JSON</span></h2><p><span style=\"color: rgb(35,31,32);\">Run the project.</span><br /><span style=\"color: rgb(35,31,32);\">If it starts without error, open a browser and enter the URL&nbsp;{*}<a class=\"external-link\" href=\"http://localhost:8080*\" rel=\"nofollow\">http://localhost:8080*</a></span><br /><span style=\"color: rgb(35,31,32);\">You should see JSON, with links (not clickable, alas) for URLs you can enter to see more data. Copy those links and&nbsp;paste them into your browser's address window, e.g.,&nbsp;{*}<a class=\"external-link\" href=\"http://localhost:8080/games*\" rel=\"nofollow\">http://localhost:8080/games*</a></span><br /><span style=\"color: rgb(35,31,32);\">Verify that there are three games with the correct dates.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Note:</strong>&nbsp;In the JSON, the dates will be UTC, i.e., what used to be called Greenwich Mean Time. So unless you're in that time zone, the hours will be different from what you specified in your test data. This will be corrected when you display the times on the web page.</span> <br class=\"atl-forced-newline\" /><span style=\"color: rgb(35,31,32);\">Now you need to add data indicating which players are playing which games. There's a Java aspect to this, and a database aspect.</span><br /><span style=\"color: rgb(35,31,32);\">In Java, if&nbsp;<em>player</em>&nbsp;is an instance of a&nbsp;<strong>Player</strong>, we would like&nbsp;<em>player</em><strong>.getGames()</strong>&nbsp;to return a list of the games a player is playing or has played. If&nbsp;<em>game</em>&nbsp;is an instance of&nbsp;<strong>Game</strong>, we would like&nbsp;<em>game</em><strong>.getPlayers()</strong>&nbsp;to return a list of players playing the game.</span><br /><span style=\"color: rgb(35,31,32);\">On the database side, JPA has created tables for us for game data and player data. Each game has a unique ID in the game table and each player has a unique ID in the player table. Now we want a table that associates specific IDs together.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">While not the only way, the simplest way to do this is to create a Java class&nbsp;<strong>GamePlayer</strong>&nbsp;with an associated table to represent an instance of a specific player playing a specific game.</span><br /><span style=\"color: rgb(35,31,32);\">Any noun could be used for this class that represents &quot;a player in a particular game.&quot; Sometimes simply combining the two table names works, but use a name that is natural, e.g.,&nbsp;<strong>PetOwner</strong>&nbsp;for a class representing a person owning a pet, not&nbsp;<strong>PetPerson</strong>.</span><br /><span style=\"color: rgb(35,31,32);\">The&nbsp;Java&nbsp;class&nbsp;<strong>GamePlayer</strong>&nbsp;has a&nbsp;<strong>Game</strong>&nbsp;field and a&nbsp;<strong>Player</strong>&nbsp;field.&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Each row of the game players data table has a game ID and a player ID.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">In addition, since we have a class and table, we can add two other pieces of useful data:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">An ID, to uniquely represent this GamePlayer in other tables you'll need later.</span></li><li><span style=\"color: rgb(35,31,32);\">A date, to represent when this player joined this game.</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"8e995a96-46a5-4917-a2ad-a9f125c0a591\"><ac:parameter ac:name=\"title\">Step 2 - Create a GamePlayer REST Repository</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(153,153,153);\">Define the Java Classes</span></h2><p><span style=\"color: rgb(35,31,32);\">Define&nbsp;<strong>GamePlayer</strong>&nbsp;and&nbsp;<strong>GamePlayerRepository</strong>. Use the same steps&nbsp;you did with&nbsp;<strong>Player</strong>&nbsp;and&nbsp;<strong>Game</strong>, but now you'll need data fields for</span></p><ul><li><span style=\"color: rgb(35,31,32);\">A database-generated ID, as with&nbsp;<strong>Player</strong>&nbsp;and&nbsp;<strong>Game</strong></span></li><li><span style=\"color: rgb(35,31,32);\">A creation date, as with&nbsp;<strong>Game</strong></span></li><li><span style=\"color: rgb(35,31,32);\">A&nbsp;<strong>Game</strong></span></li><li><span style=\"color: rgb(35,31,32);\">A&nbsp;<strong>Player</strong></span></li></ul><p><span style=\"color: rgb(35,31,32);\">Because game and player are references to objects stored in other data tables, you need to add JPA annotations to tell JPA how to connect the tables together. Follow the example of&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=33&amp;anchor=joined-many-to-many\"><span style=\"color: rgb(51,122,183);\">joined many-to-many relationships in the eBook</span></a><span style=\"color: rgb(35,31,32);\">.</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />Although we could have used any name for this class, the&nbsp;name GamePlayer was chosen for two reasons. First, it's a&nbsp;<strong>singular noun</strong>. Entities should be given singular noun names, as we have done with&nbsp;<strong>Game</strong>&nbsp;and&nbsp;<strong>Player</strong>. Names like&nbsp;<strong>Playing</strong>&nbsp;and&nbsp;<strong>GamePlayers</strong>&nbsp;would not be&nbsp;as good.&nbsp;Second, since this class &quot;joins&quot; two other entities together, we use a normal-sounding name that says that.&nbsp;<strong>PlayerGame</strong>&nbsp;would sound odd.&nbsp;</p><h2><span style=\"color: rgb(153,153,153);\">Create the Sample Data</span></h2><p><span style=\"color: rgb(35,31,32);\">Change your CommandLineRunner to create the sample data for the players in&nbsp;the games, as given in the email.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test by Browsing&nbsp;the JSON</span></h2><p><span style=\"color: rgb(35,31,32);\">Start your web app. If it boots up, look at the links in the JSON shown for <a class=\"external-link\" href=\"http://localhost:8080\" rel=\"nofollow\">http://localhost:8080</a>. One of them should be for&nbsp;<strong>gamePlayers</strong>. Go to that URL and verify that you see the correct list of players for games.</span><br /><span style=\"color: rgb(35,31,32);\">Now take a look at</span></p><ul><li style=\"list-style-type: none;\"><ul><li><span style=\"color: rgb(35,31,32);\"><a class=\"external-link\" href=\"http://localhost:8080/games\" rel=\"nofollow\">http://localhost:8080/games</a>,</span></li><li><span style=\"color: rgb(35,31,32);\"><a class=\"external-link\" href=\"http://localhost:8080/players\" rel=\"nofollow\">http://localhost:8080/players</a></span></li><li><span style=\"color: rgb(35,31,32);\"><a class=\"external-link\" href=\"http://localhost:8080/gamePlayers/1\" rel=\"nofollow\">http://localhost:8080/gamePlayers/1</a></span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">Depending on how ambitious you have been, you might be surprised by the results you see.&nbsp;&nbsp;If you implemented both&nbsp;<em>player</em><strong>.getGames()&nbsp;</strong><em>and&nbsp;game</em><strong>.getPlayers()</strong>, all three of these pages will have recursions which cause the display to get arbitrarily deep, such as</span><br /><span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;_embedded&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;games&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;players&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;userName&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;c.obrian@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;games&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;players&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;userName&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;c.obrian@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;games&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;players&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;userName&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;c.obrian@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(35,31,32);\">The reason for this is that Spring Boot&nbsp;automatically uses any&nbsp;<em>public getter</em>&nbsp;methods you have created when generating its lists.&nbsp; You can tell it not to do this by adding the&nbsp;<strong>@JsonIgnore</strong>&nbsp;annotation to a method.</span><br /><span style=\"color: rgb(35,31,32);\">The circularity happens because you have&nbsp;<em>both&nbsp;</em>methods:&nbsp;<em>player</em><strong>.getGames()&nbsp;</strong>references games, and then&nbsp;<em>game</em><strong>.getPlayers()&nbsp;</strong>references players.&nbsp;&nbsp;You only need to annotate one of the methods to avoid the recursion.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"ebc46ed3-2eae-4b3f-8c3c-60c411a65c6b\"><ac:parameter ac:name=\"title\">Step 3 - Make REST Repository URLs start with /rest</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">To avoid&nbsp;accidental name conflicts between the RestRepository controller&nbsp;and anything else we have,&nbsp;tell Spring to use&nbsp;<strong>/rest</strong>&nbsp;as a prefix for all RestRepository URLs.</span><br /><span style=\"color: rgb(35,31,32);\">You can do this by creatiing an &quot;application properties&quot; file. This optional file can be used to configure&nbsp;</span><a href=\"http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html\"><span style=\"color: rgb(51,122,183);\"><span style=\"\">many useful aspects of your web application</span></span></a><span style=\"color: rgb(35,31,32);\">.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Create&nbsp;an&nbsp;<strong>application.properties</strong>&nbsp;text file in your project, if one doesn't already exist.&nbsp;</span><ul><li><span style=\"color: rgb(35,31,32);\">Put this file is in the&nbsp;<strong>src/main/resources</strong>&nbsp;directory. &nbsp;</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">Add the&nbsp;following two lines to this file. They tell Spring to</span><ul><li><span style=\"color: rgb(35,31,32);\">put&nbsp;<strong>/rest&nbsp;</strong>in front of&nbsp;all&nbsp;<strong>RestRepository</strong>&nbsp;URLs, e.g.,&nbsp;<strong>/rest/games</strong>&nbsp;instead of&nbsp;<strong>/games</strong></span></li><li><span style=\"color: rgb(35,31,32);\">send all JSON, from any source, in a nicely indented form &ndash; computers don't care but you'll like it better</span></li></ul></li></ul><p>spring.data.rest.base-path=/rest<br />spring.jackson.serialization.INDENT_OUTPUT=true<br /><span style=\"color: rgb(35,31,32);\"><strong>TEST!&nbsp;</strong>Try your REST urls now.&nbsp;<strong>/games</strong>&nbsp;and&nbsp;<strong>/players</strong>&nbsp;should no longer work.&nbsp;<strong>/rest/games</strong>&nbsp;and&nbsp;<strong>/rest/players</strong>&nbsp;should now&nbsp;return the appropriate JSON.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"22dc63da-1041-486c-b00b-1be19a30adc3\"><ac:parameter ac:name=\"title\">Step 4 - Create an application RestController</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Create a&nbsp;<strong>RestController</strong>&nbsp;to create and return JSON&nbsp;data containing just the information you want to send players. This is just an initial version to lay the groundwork for a more useful controller in later tasks. In Agile, this is called&nbsp;<strong>a technical spike</strong>.&nbsp;&nbsp;See the&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1168\"><span style=\"color: rgb(51,122,183);\">ebook</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;for information about&nbsp;<strong>RestControllers</strong>&nbsp;and how to map URL's to controller methods with&nbsp;<strong>@RequestMapping</strong>.</span><br /><span style=\"color: rgb(35,31,32);\">For this step, you want to</span></p><ul><li><span style=\"color: rgb(35,31,32);\">create a controller</span></li><li><span style=\"color: rgb(35,31,32);\">create a method in the controller to return a list of game&nbsp;IDs</span></li></ul><p><span style=\"color: rgb(35,31,32);\">For the first slice, just see if you can return the game IDs. Once that works, you can add more information to what's returned, until eventually you are returning a list of game descriptions.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Create a controller</strong></span><br /><span style=\"color: rgb(35,31,32);\">You want a controller to return JSON, not HTML, so you want a&nbsp;<strong>RestController</strong>. You want all calls to this controller to start with&nbsp;<strong>api/</strong>.&nbsp; Your method is returning game information, so you need to give the controller a reference to the game repository.</span><br /><span style=\"color: rgb(35,31,32);\">This can be done with the following coding:</span></p><ol><li><span style=\"color: rgb(35,31,32);\">Add a<strong>&nbsp;SalvoController</strong>&nbsp;class to your project, in the same package as your application class.</span></li><li><span style=\"color: rgb(35,31,32);\">Make it a&nbsp;<strong>RestController</strong>, as shown in the ebook.</span></li><li><span style=\"color: rgb(35,31,32);\">Add&nbsp;a&nbsp;<strong>RequestMapping</strong>&nbsp;to&nbsp;<em>the class</em>&nbsp;to add&nbsp;<strong>/api</strong>&nbsp;to all URLs for this controller.</span></li><li><span style=\"color: rgb(35,31,32);\">Add an&nbsp;<strong>autowired&nbsp;</strong>field, i.e., instance variable, to hold a&nbsp;<strong>GameRepository</strong>.</span></li></ol><p><span style=\"color: rgb(35,31,32);\">Step 3 is important. That makes sure that all the&nbsp;URLs this controller looks for will&nbsp;have to start with&nbsp;<strong>/api</strong>. This will prevent any accidental overlap with the REST repository URLs, because you've made them start with&nbsp;<strong>/rest</strong>.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Be sure to import the new classes and annotations you are using. IDEA should help you do this.</span><br /><span style=\"color: rgb(35,31,32);\">See the&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1168\"><span style=\"color: rgb(51,122,183);\">ebook</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;from&nbsp;<strong>Resources</strong>&nbsp;for information about&nbsp;<strong>RestControllers</strong>,&nbsp;<strong>@RequestMapping</strong>, and&nbsp;<strong>@Autowired</strong>.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Test that your code compiles</strong></span><br /><span style=\"color: rgb(35,31,32);\">Run the Gradle task&nbsp;<strong>classes</strong>. This just compiles code but doesn't try to run it. It's a quick way to catch mistakes IDEA might have missed, or you might not have noticed.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Add a method to get a list of game IDs</strong></span><br /><span style=\"color: rgb(35,31,32);\">You want a method that is called when the URL is&nbsp;<strong>/api/games</strong>. You want it to get all the games and return a list of the ID's. This is a good example of the difference between our application controller and the REST repository controllers.&nbsp;<strong>/rest/games</strong>&nbsp;will return a JSON object containing a list of the games. But you have no control over what that&nbsp;JSON contains. It will show all information about each game that is in the database, along with the URLs necessary to get the JSON for each game on its own. In contrast, you will define exactly what you want&nbsp;<strong>/api/games</strong>&nbsp;to return.</span><br /><span style=\"color: rgb(35,31,32);\">This can be done with the following coding:</span></p><ol><li><span style=\"color: rgb(35,31,32);\">Define a public method that returns a&nbsp;<strong>List&lt;Object&gt;</strong>.</span></li><li><span style=\"color: rgb(35,31,32);\">Add&nbsp;a&nbsp;<strong>@RequestMapping</strong>&nbsp;to this method so that it will be called to handle the URL&nbsp;<strong>/games</strong>.</span><ol><li><span style=\"color: rgb(35,31,32);\">Hence, the full&nbsp;URL for this method will be&nbsp;<strong>/api/games</strong>.</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\">In the method, use the autowired&nbsp;<strong>GameRepository</strong>&nbsp;to get a&nbsp;<strong>Set&nbsp;</strong>of all the games.</span></li><li><span style=\"color: rgb(35,31,32);\">From this set, create a list of game IDs.</span></li><li><span style=\"color: rgb(35,31,32);\">Return this list.</span></li></ol><p><span style=\"color: rgb(35,31,32);\">The controller&nbsp;method should&nbsp;return&nbsp;<strong>List&lt;Object&gt;</strong>. This is very&nbsp;general. We can put whatever we want in the list, as long as the Spring Jackson library is able to convert it to JSON. &nbsp;Eventually,&nbsp;the objects will include all the game and player information you&nbsp;need, but to start, keep it simple and just return a list of&nbsp;game ID numbers.</span><br /><span style=\"color: rgb(35,31,32);\">Use&nbsp;<strong>GameRepository</strong>&nbsp;to&nbsp;get a list of the&nbsp;games in the database created by your&nbsp;<strong>CommandLineRunner</strong>. &nbsp;See the&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1168\"><span style=\"color: rgb(51,122,183);\">ebook</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;from&nbsp;<strong>Resources</strong>&nbsp;for how to get a list of all instances of a class from&nbsp;a&nbsp;<strong>JpaRepository</strong></span><br /><span style=\"color: rgb(35,31,32);\">Given a collection of game objects, it is fairly easy to collect a list of just the game IDs. See the section on&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=47\"><span style=\"color: rgb(51,122,183);\">Java streams</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;from&nbsp;the&nbsp;<strong>Resources</strong>.</span><br /><span style=\"color: rgb(35,31,32);\">Do not return the list of games directly. Since a game references&nbsp;game players, and game players reference&nbsp;the game they play, you will get a circular loop. &nbsp;See the section on&nbsp;<strong>data transfer objects</strong>&nbsp;in&nbsp;the&nbsp;<strong>Resources</strong>&nbsp;for more on this.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test!</span></h2><p><span style=\"color: rgb(35,31,32);\">After defining this method, start your web app.</span><br /><span style=\"color: rgb(35,31,32);\">Assuming it compiles and starts, visit&nbsp;<strong><a class=\"external-link\" href=\"http://localhost:8080/api/games\" rel=\"nofollow\">http://localhost:8080/api/games</a></strong>&nbsp;in your web browser. If you have three games, you should see JSON like this:</span><br /><span style=\"color: rgb(35,31,32);\">[ 1, 2, 3 ]</span><br /><span style=\"color: rgb(35,31,32);\">This may not seem like much, but&nbsp;it actually means that you wired everything together correctly. Now it's just a matter of including more data in what you send back.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"a4bd5625-632e-4dc3-843f-d6edbf09ac81\"><ac:parameter ac:name=\"title\">Step 5 - Create game data objects</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">The next step in developing your controller is to have it return JSON with additional information, like this</span><br /><span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;created&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1456438201629</span><br /><span style=\"color: rgb(153,153,153);\">},</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">2</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;created&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1456438201636</span><br /><span style=\"color: rgb(153,153,153);\">},</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">3</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;created&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1456438201639</span><br /><span style=\"color: rgb(153,153,153);\">}</span> <span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(35,31,32);\">Now you have an array of JSON objects. Each object has&nbsp;a&nbsp;game's ID&nbsp;and creation date in milliseconds.</span><br /><span style=\"color: rgb(35,31,32);\">The easiest way to do this is to change the loop in your controller so that the function that used to return just the ID for a game now returns a&nbsp;<strong>Map&lt;String, Object&gt;</strong>, with an&nbsp;<strong>ID</strong>&nbsp;key and a&nbsp;<strong>created</strong>.</span><br /><span style=\"color: rgb(35,31,32);\">Spring will automatically convert a Java date object into milliseconds, when creating the JSON. Leave it like that. You will write JavaScript to convert that into something user-friendly on the web page in a later step.</span><br /><span style=\"color: rgb(35,31,32);\">See the&nbsp;<strong>Resources</strong>&nbsp;for how to create a&nbsp;<strong>Map&lt;String, Object&gt;</strong>&nbsp;as a data transfer object.</span><br /><span style=\"color: rgb(35,31,32);\">Keep your code clean. Define a private method that takes a game and returns the map object for it. This will keep the loop in your controller method simple and make the next step easier.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test!</span></h2><p><span style=\"color: rgb(35,31,32);\">Restart your web server. Visit&nbsp;<strong><a class=\"external-link\" href=\"http://localhost:8080/api/games\" rel=\"nofollow\">http://localhost:8080/api/games</a></strong>&nbsp;in your web browser. You should see JSON&nbsp;that has a nested structure&nbsp;like the example above.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"8316ad64-6389-4a4a-b79e-15410f3db429\"><ac:parameter ac:name=\"title\">Step 6 - Add player data to the game objects</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">The final step is to include data on what players are in each game. You want to get something that looks like this:</span><br /><span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;created&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1456438201629</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;gamePlayers&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;player&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;email&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;j.bauer@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span> <span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">},</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">2</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;player&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">2</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;email&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;c.obrian@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span> <span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">}</span> <br /><span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(153,153,153);\">},</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">2</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;created&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1456438201636</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;gamePlayers&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">3</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;player&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;email&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;j.bauer@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span> <span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(153,153,153);\">},</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">3</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;created&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1456438201639</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;gamePlayers&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(153,153,153);\">}</span> <br /><span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(35,31,32);\">Note that there are many different&nbsp;<strong>id</strong>s in this JSON:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">There is a&nbsp;<strong>Game</strong>&nbsp;ID&nbsp;for the game.</span></li><li><span style=\"color: rgb(35,31,32);\">There is a&nbsp;<strong>GamePlayer</strong>&nbsp;ID for each GamePlayer in each game.&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">There is a&nbsp;<strong>Player</strong>&nbsp;ID for the player in each GamePlayer.&nbsp;</span></li></ul><p><span style=\"color: rgb(35,31,32);\">These IDs are generated by the database system in which your web application is storing information.</span><br /><span style=\"color: rgb(35,31,32);\">To make the controller include this information about the players, &nbsp;you need to add some nested loops to your games method:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Create a list with a Map for each game.</span></li><li><span style=\"color: rgb(35,31,32);\">In the&nbsp;Map for each game, put keys and values&nbsp;for the game ID, creation date, and gamePlayers.</span></li><li><span style=\"color: rgb(35,31,32);\">For the value for the gamePlayers key, create a&nbsp;<strong>List</strong>&nbsp;with a&nbsp;<strong>Map</strong>&nbsp;for each GamePlayer.</span></li><li><span style=\"color: rgb(35,31,32);\">In the Map for each GamePlayer, put keys and values&nbsp;for the GamePlayer ID and the player.</span></li><li><span style=\"color: rgb(35,31,32);\">For the value of the player, create a Map with keys for the player ID and the player's email.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Work on these loops from the outside inward, in slices, e.g.,</span></p><ul><li><span style=\"color: rgb(35,31,32);\">First,&nbsp;write controller code to make a list of maps with keys for the game IDs and creation dates.</span><ul><li><span style=\"color: rgb(35,31,32);\"><strong>Test</strong>. Run your app, enter the URL for the JSON, and verify you see a JavaScript list with the correct IDs.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">Then, add code to add a key for the game players, with a list of&nbsp;maps with keys for the game player IDs.</span><ul><li><span style=\"color: rgb(35,31,32);\"><strong>Test</strong>. Make sure you see the correct game player IDs.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">Finally, add code to add a key to each game player map to contain a player map, with the keys for the player ID and name.</span><ul><li><span style=\"color: rgb(35,31,32);\"><strong>Test.</strong></span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">The simplest way to create the lists and maps is with streams, just as you did with the list of game maps in the first task.</span><br /><span style=\"color: rgb(35,31,32);\">You do not need to autowire a&nbsp;<strong>PlayerRepository</strong>&nbsp;or&nbsp;<strong>GamePlayer</strong>&nbsp;repository&nbsp;into your controller for this task. When you load a&nbsp;<strong>Game</strong>, Spring code automatically loads whatever a game contains, including its&nbsp;collection of game players.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test!</span></h2><p><span style=\"color: rgb(35,31,32);\">Restart your web server. Visit&nbsp;<strong><a class=\"external-link\" href=\"http://localhost:8080/api/games\" rel=\"nofollow\">http://localhost:8080/api/games</a></strong>&nbsp;in your web browser. You should see JSON&nbsp;that has a nested structure&nbsp;like the example above.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit your application controller code. Use the &quot;code&quot; format.<br /><span style=\"color: rgb(35,31,32);\">Because you've been inspecting the JSON in your browser, you should be reasonably confident that the&nbsp;data has the structure you need.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Now it's time to present this data on a web page that makes sense to&nbsp;players. As given in the email, the format is simple for now: just a list of games, with information about when&nbsp;they were created, and who is currently playing them. That data is in the JSON. It needs to be represented in HTML.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"28f2770d-e9e7-4915-b16e-50e0892aebba\"><ac:parameter ac:name=\"title\">Step 7 - Create a game list web page</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(153,153,153);\">Create an Empty Web Page</span></h2><p><span style=\"color: rgb(35,31,32);\">What you need to do now is create the first of several web pages that will hold the interface for the&nbsp;<strong>Salvo</strong>&nbsp;game.</span><br /><span style=\"color: rgb(35,31,32);\">Again, to avoid accidental name conflict, it will help if the URLs for all web files &ndash; often called&nbsp;<strong>static web assets</strong>&nbsp;-- begin with something that is neither&nbsp;<strong>/rest</strong>&nbsp;nor&nbsp;<strong>/api</strong>. A good choice is&nbsp;<strong>/web</strong>.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">This is easily done. Spring will &quot;serve&quot; all static web assets under the&nbsp;<strong>src/main/resources/static/</strong>&nbsp;directory. So if you put all your web files (HTML, CSS, JavaScript, images) in the directory&nbsp;<strong>src/main/resources/static/web/</strong>, their URL will begin with&nbsp;<strong>/web</strong>. If you like, you can&nbsp;create additional subdirectories, e.g.,&nbsp;<strong>src/main/resources/web/scripts/</strong>&nbsp;for your JavaScript files,&nbsp;<strong>src/main/resources/static/web/styles/</strong>&nbsp;for your CSS files, and so on. We will just use the top-level&nbsp;<strong>web</strong>&nbsp;directory.</span><br /><span style=\"color: rgb(35,31,32);\">In&nbsp;<strong>src/main/resources/static/web/</strong>,&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Create a web page&nbsp;<strong>games.html</strong>, with the usual&nbsp;HEAD and BODY boilerplate.</span></li><li><span style=\"color: rgb(35,31,32);\">Include some title, e.g.,&nbsp;<strong>Salvo!</strong>, so that you will know that the page has loaded.</span></li><li><span style=\"color: rgb(35,31,32);\">On the page, have an&nbsp;<strong>OL</strong>&nbsp;element that will hold the list of games.</span></li><li><span style=\"color: rgb(35,31,32);\">Have&nbsp;<strong>script</strong>&nbsp;tags to load&nbsp;<strong>jQuery</strong>&nbsp;and a local JavaScript file,&nbsp;<strong>games.js</strong></span></li></ul><p><span style=\"color: rgb(35,31,32);\">See the&nbsp;<strong>Resources</strong>&nbsp;for where to put the web page and other static assets in a Spring MVC application.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>TEST!</strong>&nbsp;Start your web app and point your browser at&nbsp;</span><a class=\"external-link\" href=\"http://localhost:8080/web/games.html\" rel=\"nofollow\">http://localhost:8080/web/games.html</a><span style=\"color: rgb(35,31,32);\">. You should see your title information.</span></p><h2><span style=\"color: rgb(153,153,153);\">Create a List with Game Dates</span></h2><p><span style=\"color: rgb(35,31,32);\">In&nbsp;<strong>src/main/resources/static/web/</strong>,&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Create the&nbsp;<strong>games.js</strong>&nbsp;file.</span></li><li><span style=\"color: rgb(35,31,32);\">In&nbsp;<strong>games.js</strong>, write&nbsp;<strong>jQuery</strong>&nbsp;code that, on page load, will</span><ul><li><span style=\"color: rgb(35,31,32);\">send an&nbsp;<strong>AJAX</strong>&nbsp;request to&nbsp;<strong>/api/games</strong></span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">In the&nbsp;<strong>done()</strong>&nbsp;method for that&nbsp;<strong>AJAX</strong>&nbsp;call, pass&nbsp;the JSON data that is returned to a function to&nbsp;create an HTML list.</span></li><li><span style=\"color: rgb(35,31,32);\">That function should create a list of HTML&nbsp;<strong>LI&nbsp;</strong>elements, one for each game object in the JSON.</span></li><li><span style=\"color: rgb(35,31,32);\">When the list is created, the function should store it in the&nbsp;<strong>OL</strong>&nbsp;element you prepared on&nbsp;<strong>games.html</strong>.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">See the&nbsp;<strong>Resources</strong>&nbsp;for how to use JavaScript's&nbsp;<strong>map</strong>&nbsp;to&nbsp;create a list from a list.</span><br /><span style=\"color: rgb(35,31,32);\">Initially, just put&nbsp;the millisecond numbers on the page. When that's working, change your JavaScript code to create readable date strings. See the&nbsp;<strong>Resources</strong>&nbsp;for how to create and format dates.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>TEST!</strong>&nbsp;Make sure you're seeing the correct dates.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Add Player Emails to the Games List</span></h2><p><span style=\"color: rgb(35,31,32);\">Now add code to the function that creates the&nbsp;<strong>LI</strong>&nbsp;elements&nbsp;to include the HTML for a comma-separated list of the player emails. See the&nbsp;<strong>Resources</strong>&nbsp;for how to join an array of strings into a comma-separated list in JavaScript.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test!</span></h2><p><span style=\"color: rgb(35,31,32);\">In your browser, visit the page&nbsp;</span><a class=\"external-link\" href=\"http://localhost:8080/web/games.html\" rel=\"nofollow\">http://localhost:8080/web/games.html</a><span style=\"color: rgb(35,31,32);\">.</span><br /><span style=\"color: rgb(35,31,32);\">Make sure you see the correct player emails with each game, including games with just one player so far. The data should match what's in the sample testbed.</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit your HTML and JavaScript&nbsp;code for review. Use&nbsp;the &quot;code&quot; format. Put the HTML first, then JavaScript, with lines labeling the source file for each part.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"78e66ba9-d6bc-47a1-bd98-5306f886f7ab\"><ac:parameter ac:name=\"title\">Step 8 - Submit your work</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">The objectives&nbsp;for this task were to:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">create&nbsp;data tables for games.</span><ul><li><span style=\"color: rgb(35,31,32);\">For games, we just need when (date and time) the game was created, and a database ID.</span></li><li><span style=\"color: rgb(35,31,32);\">To track which players are playing which games, we'll need&nbsp;a third table linking games to&nbsp;players&nbsp;with&nbsp;the ID of a&nbsp;game, the ID of a&nbsp;player, and when (date and time) the player joined the game.</span></li></ul></li><li><a href=\"http://localhost:8080/rest/games\"><span style=\"color: rgb(51,122,183);\">{+}</span></a><a class=\"external-link\" href=\"http://localhost:8080/rest/games+\" rel=\"nofollow\">http://localhost:8080/rest/games+</a><span style=\"color: rgb(35,31,32);\">&nbsp;will list all the games</span></li><li><a href=\"http://localhost:8080/rest/players\"><span style=\"color: rgb(51,122,183);\">{+}</span></a><a class=\"external-link\" href=\"http://localhost:8080/rest/players+\" rel=\"nofollow\">http://localhost:8080/rest/players+</a><span style=\"color: rgb(35,31,32);\">&nbsp;will list all the players</span></li><li><a href=\"http://localhost:8080/rest/games/1/gamePlayers\"><span style=\"color: rgb(51,122,183);\">{+}</span></a><a class=\"external-link\" href=\"http://localhost:8080/rest/games/1/players+\" rel=\"nofollow\">http://localhost:8080/rest/games/1/players+</a><span style=\"color: rgb(35,31,32);\">&nbsp;will list all the players in game 1</span></li><li><a href=\"http://localhost:8080/api/games\"><span style=\"color: rgb(51,122,183);\">{+}</span></a><a class=\"external-link\" href=\"http://localhost:8080/api/games+\" rel=\"nofollow\">http://localhost:8080/api/games+</a><span style=\"color: rgb(35,31,32);\">&nbsp;will return a customized JSON list of games and players.</span></li><li><a href=\"http://localhost:8080/web/games.html\"><span style=\"color: rgb(51,122,183);\">{+}</span></a><a class=\"external-link\" href=\"http://localhost:8080/web/games.html+\" rel=\"nofollow\">http://localhost:8080/web/games.html+</a><span style=\"color: rgb(35,31,32);\">&nbsp;will&nbsp;display a human-readable list of games and players.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">At this point, all of that should be working. &nbsp;Good job! &nbsp;</span><br /><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\">Submit a zipped archive of your project folder, with all your source code and&nbsp;build scripts. Use the &quot;file&quot; format to attach the archive. &nbsp;Use the Gradle&nbsp;<strong>clean</strong>&nbsp;task to remove&nbsp;compiled files before zipping.</span></p></ac:rich-text-body></ac:structured-macro><p><br /></p><p><br /></p>",
    "conflPageId": "261095534",
    "conflChildrenId": [
      "261423376"
    ]
  },
  {
    "title": "Mobile App- Task 1",
    "content": "<p class=\"auto-cursor-target\"><br /></p><p><strong>INTRODUCTION</strong></p><p><strong>Your Task</strong><br />You have been asked by League Director, Tom Denton, to develop a mobile web app to show game schedules for NYSL. He's sent you a copy of their desktop website to provide background material that you can use when building the app, but they do not want a mobile version of the site or even of the existing web page for the game schedule. They want something that looks and feels like a native mobile app, but doesn't require their users to download and install anything.<br /><br />Fortunately, technologies and libraries have been developed and (mostly) standardized in browsers over the past few years to make this possible with just HTML, CSS, and JavaScript coding.<br /><br />Right now, though, they just want to see the design for what you're going to build, not a working app. The trick is to get the right level of design. If you go overboard designing a super-fancy mockup, the detail overwhelms the client, and you become too invested in the design to accept criticism. If you dash off something vague and incomplete, the client loses faith in your abilities and can't give you any useful feedback. The point of the mockup design is to provide the client with a way to see if the app you are thinking of developing looks like what they want and would be understood by their users. The point of the UI flow sketch is so the client can see if the app will do everything their users need it to do, with no unnecessary or confusing transitions.<br /><br />The steps given in this Plan of Attack present a scenario-based approach to interface design. This approach is a modern best practice.<br /><br /><strong>As part of this task, you will submit the following for review:</strong></p><p>For Mentor Review:</p><ul><li>A write-up of the user personas and scenarios you'll use in your design process</li><li>Your UI flow diagram</li><li>Your screen mockups</li></ul><p>For Client Deliverable: A PDF or Word-compatible UI design document with the mockups, UI flow diagram, and any accompanying documentation</p><ul><li>Do not submit this deliverable to the client until your mentor says you are ready to do so.</li></ul><p><span style=\"color: rgb(255,0,0);\"><strong>TIP:</strong></span> For the Mentor Review deliverables listed above, as you complete a working slice of each deliverable, submit it for the mentor to review. It's better to submit one screen for review, or one part of one screen, if you're uncertain, rather than everything at once. This helps you and the mentor find issues early.</p><p><br /></p><p>You can submit portions and revisions of items for review multiple times via the Mentor Feedback Page. Just always be clear about:</p><ul><li>What's new or changed in each submission</li><li>What, if anything, you have not yet completed for the given item in the submission</li></ul><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"b72a83c9-8df3-44e6-ae0b-fd7eec9d5a44\"><ac:parameter ac:name=\"title\">Step 1- Develop the User Interface Flow</ac:parameter><ac:rich-text-body><ol><li><strong>Determine what the app is for.</strong> Ideally, you should observe and interview the target users. Since you don't have that option, use the website Tom sent to get a feeling for the information a parent or player is looking to find.<ol><li>Download the zip file of code that Tom provided.</li><li>Extract the files to your project directory.</li><li>Double-click the file index.html to see the existing website.</li><li>Navigate to the game schedule page to see the kind of data that's available for each game.</li></ol></li><li><strong>Develop typical user personas and likely scenarios.</strong> Write at least three personas (i.e. well-specified fictional people) and at least three scenarios in which your personas need to use the mobile game schedule app. Consider what kind of problem they are trying to solve. See Resources.<br />Some possible personas/scenarios include:Sally, a working mom who has to balance the weekend schedules of three kids.<br /><ol><li>Bob, a parent volunteer at games.</li><li>Chris, a 13-year-old team member who plays intensely.</li><li>Bob's friend asks if they can meet up Saturday. Bob opens the app to see when the game is happening.</li><li>Sally is about to drive her daughter to a game and needs to know which field to go to.</li><li>Chris wants to know what team they're playing against today.</li></ol></li><li><strong>Draw a user flow diagram.</strong><ol><li>This is best done with pencil and paper, or on a whiteboard. Scan or take a picture of the diagram when you're done.</li><li>Don't worry about details. A column of boxes labeled &quot;game 1,&quot; &quot;game 2,&quot; and so on, may be all you need for the list of games.</li><li>Do worry about what buttons and other options you need.</li><li>For each user action, draw the screen it leads to, if not already in the diagram, and clearly label the arrow.</li><li>Think about the clarity of button labels and so on (e.g., Would &quot;cancel&quot; be confused with &quot;delete&quot;? Is &quot;submit&quot; too vague? Etc.).</li></ol></li></ol><p><strong>SUBMIT:</strong><br /><strong>Submit a write-up of your user personas and scenarios, and your user flow diagram to the mentor for review,</strong> using the Submit Your Work tab.</p><ol><li>If your user flow diagram is one graphic, then a GIF, JPG, or PNG file is fine.</li><li>If you have several drawings, put them in a PDF or Word-compatible file.</li></ol></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"d0df7f22-792a-4f9c-b5a0-6d79c23197ed\"><ac:parameter ac:name=\"title\">Step 2- Design the Screen Mockups</ac:parameter><ac:rich-text-body><ol><li><strong>Draw a&nbsp;mockup for each screen</strong>&nbsp;in your user flow diagram.<ol><li>Focus on layout, sizes, and color scheme; don't worry about fancy graphics and shading, unless you're fluent in graphic design.</li><li>Use whatever drawing tool you prefer.</li><li>Label each mockup screen, and put those labels in your user flow diagram.</li></ol></li><li><strong>Put the user flow diagram and the mockup screens into a PDF or Word-compatible document</strong>.</li></ol><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><strong>Submit the document to the mentor for review&nbsp;</strong>using the&nbsp;<em>Submit Your Work</em>&nbsp;tab.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"70e074aa-c2d5-4a3c-9869-6d2bc7f80b12\"><ac:parameter ac:name=\"title\">Step 3 - Submit your Client Deliverable </ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\"><strong>Submit a PDF or Word document of your UI flow diagram, screen mockups, and any other documentation to&nbsp;the client.</strong></span> <span style=\"color: rgb(35,31,32);\">Your&nbsp;mentor will tell you when you are ready to do this.</span></p></ac:rich-text-body></ac:structured-macro><p><br /></p><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "261128196",
    "conflChildrenId": [
      "260472845"
    ]
  },
  {
    "title": "Task 5 - Resources",
    "content": "<p class=\"auto-cursor-target\">Required Resources</p><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"188a4923-f0a0-4db7-a18c-87fa1b953ea4\"><ac:parameter ac:name=\"title\"> Geolocation Background Info </ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(128,130,133);\">Location Awareness</span></h2><p><span style=\"color: rgb(35,31,32);\">Modern smartphones provide a number of features,&nbsp;such as cameras, accelerometers,&nbsp;geolocation&nbsp;sensors, and integrated contact lists. However, many of these functionalities are not available to web pages.&nbsp;For security reasons, web pages have long been restricted in their access to data on the computer displaying the web page. For example, while a developer can create a form that lets users select and upload a local file, there is no way to write JavaScript in the web page to see which file was selected.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">In response to demand from users and developers for more powerful web apps, the browser organizations and companies, and the web standards committees, are carefully defining extensions to HTML and JavaScript that can support access to mobile device features without unduly compromising user security.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Access to the user's location is one of the features that has been well-standardized at this point.&nbsp;How to get the user's location in JavaScript&nbsp;is described in the references in&nbsp;<em>Resources</em>. There are two things to be aware of.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">First, for privacy reasons, the first time your web app asks for location information, the user will be asked if they want to allow this to happen. They must say yes for location mapping to work. After they say yes the first time, they won't be asked again.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Second, getting the location can take many seconds. You don't want the browser to wait until the data is returned. That would freeze up the web app. For this reason, the JavaScript code looks like this:</span></p><p><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span></p><p style=\"margin-left: 90.0px;\"><br /><span style=\"color: rgb(51,51,51);\">navigator.geolocation.getCurrentPosition(</span><br /><span style=\"color: rgb(51,51,51);\">function (position) {...<em>your code to use when the position is found</em>...},</span><br /><span style=\"color: rgb(51,51,51);\">function () {...<em>your code to use if the position can't be found</em>...}</span><br /><span style=\"color: rgb(51,51,51);\">);</span></p><p><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><span style=\"color: rgb(35,31,32);\">This code&nbsp;returns immediately so that your web app can continue responding to user actions. When the position data is found, the first function is called. If there is some failure, e.g., the user denies permission or too much time passes, the&nbsp;second function will be called.&nbsp;</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"a85bbe18-4c86-4098-9a1c-fada32201c97\"><ac:parameter ac:name=\"title\">Geolocation Examples</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(128,130,133);\">Location Awareness</span></h2><ul><li><span style=\"color: rgb(35,31,32);\"><em>Build Mobile Websites and Apps for Smart Devices</em>&nbsp;by Earle Castledine, Myles Eftos, Max Wheeler</span><ul><li><span style=\"color: rgb(35,31,32);\">Chapter 5 discusses&nbsp;geolocation and the cache manifest</span></li></ul></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://developers.google.com/maps/articles/geolocation\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Geolocation&nbsp;and the Google MAP API</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Describes how to determine a user's location.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://mobiforge.com/design-development/html5-mobile-web-a-guide-geolocation-api\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">A Guide to the Geolocation API</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Describes how geolocation works.</span></li><li><span style=\"color: rgb(35,31,32);\">Exampes of getting directions between two points:</span><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://developers.google.com/maps/documentation/javascript/examples/directions-travel-modes\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Travel Between Two Points Example</span></span></a></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://developers.google.com/maps/documentation/javascript/examples/directions-simple\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Simple Directions Example</span></span></a></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://stackoverflow.com/questions/14586916/google-maps-directions-from-users-geo-location\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Going from user's location to a fixed location</span></span></a></li></ul></li></ul><h2><span style=\"color: rgb(128,130,133);\">Test Locations</span></h2><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.latlong.net/convert-address-to-lat-long.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">LatLong.net</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Use this tool to convert addresses to latitude and longitude coordinates.</span></li></ul></ac:rich-text-body></ac:structured-macro><p><s><br /></s></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"5f510b29-a2bb-4af1-877d-731da370ca60\"><ac:parameter ac:name=\"title\">Local Storage Background</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(128,130,133);\">Offline support</span></h2><p><span style=\"color: rgb(35,31,32);\">A fact of life with mobile devices is that the network connection comes and goes as users move around. For this reason, features have been added in&nbsp;HTML5&nbsp;to support storing more data on the device: the cache manifest and local storage.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Cache manifest</strong></span><br /><span style=\"color: rgb(35,31,32);\">The cache manifest is nothing more than a text file that lists all the resources (or URLs) that your web app needs to function. This includes the HTML, JavaScript, and images. A browser that supports cache manifests will make local copies of the items listed and use them when the network is not available.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Local Storage</strong></span><br /><span style=\"color: rgb(35,31,32);\">Imagine a parent at a game excitedly types a shout-out to her team and presses &quot;Send&quot;, only to receive the message &quot;no network found.&quot; At the very least, she will have to keep trying until the network connection is re-established. At the worst, her message was lost and she has to start all over again.</span><br /><span style=\"color: rgb(35,31,32);\">Fortunately, modern web apps can store data locally. That means, you can write JavaScript code that stores the user's messages locally when posting fails. While there are&nbsp;unposted&nbsp;messages, a timed method can automatically check every minute or so and try to post again. How often this happens, if at all, can be a user preference that is also saved in local storage.</span><br /><span style=\"color: rgb(35,31,32);\">Though it is not universally supported yet, there is a proposed&nbsp;W3C&nbsp;web standard.&nbsp;</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"1c7bb82c-e3b5-44e8-a801-5b9dccfe8142\"><ac:parameter ac:name=\"title\">Local Storage Links/Examples</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(128,130,133);\">Cache Manifest</span></h2><ul><li><span style=\"color: rgb(35,31,32);\"><em>Build Mobile Websites and Apps for Smart Devices</em>&nbsp;by Earle Castledine, Myles Eftos, Max Wheeler</span><ul><li><span style=\"color: rgb(35,31,32);\">Chapter 5 discusses the cache manifest</span></li><li><span style=\"color: rgb(35,31,32);\">Chapter 6 has a section on local storage</span></li></ul></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.html5rocks.com/en/tutorials/appcache/beginner/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">A Beginners's Guide to the Application Cache</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Describes how to use and structure the cache manifest.</span><ul><li><span style=\"color: rgb(35,31,32);\">Pay special attention to the paragraph halfway&nbsp;down. &quot;<strong>You must modify the manifest file itself to inform the browser to refresh cached files</strong>.&quot; Many people put in a comment line in the manifest with a version number that they change whenever they change any file that the manifest caches.</span></li></ul></li></ul><h2><span style=\"color: rgb(128,130,133);\">Local Storage</span></h2><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://coding.smashingmagazine.com/2010/10/11/local-storage-and-how-to-use-it/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Local Storage and How to Use It on Websites</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;by Christian Heilman &ndash; Describes local storages and how to use them.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.ibm.com/developerworks/library/x-html5mobile2/\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Unlock Local Storage for Mobile Web Applications</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- An example of storing messages (from Twitter in this case)&nbsp;in local storage.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://graphicpush.com/using-localstorage-api-as-a-light-database\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Using Local Storage as a Light Database for Form Submissions</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Provides an example of how to use localStorage&nbsp;when submitting forms.</span></li><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://www.html5rocks.com/en/features/storage\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Browser Support for Local Storage</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;(look for &quot;Web Storage - name/value pairs&quot;) &ndash; Gives a quick overview of the browser editions supporting local storage.</span></li></ul><h2><span style=\"color: rgb(128,130,133);\">Timers</span></h2><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"http://javascript.info/tutorial/settimeout-setinterval\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Understanding Timers</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Describes how to use&nbsp;<strong>setTimeout</strong>&nbsp;and&nbsp;<strong>setInterval</strong>&nbsp;in JavaScript.</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><p class=\"auto-cursor-target\">Optional Resources</p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"94de9087-8a9d-4dbb-b519-3d3d67e81cde\"><ac:parameter ac:name=\"title\">Firebase Offline Capabilities</ac:parameter><ac:rich-text-body><div><div class=\"sc-gGBfsJ ftxnCx\"><div><div class=\"page view\"><div class=\"wiki-content\"><ul><li><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://www.firebase.com/docs/android/guide/offline-capabilities.html\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Firebase Offline Capabilities</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Firebase's features for when you restart your app or when you go offline. &nbsp;This&nbsp;</span><a class=\"external-link\" style=\"text-decoration: none;\" href=\"https://www.firebase.com/docs/android/guide/offline-capabilities.html#section-sample\" rel=\"nofollow\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">example</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;at the end shows how it can be used.</span></li></ul><p><br /></p></div></div></div></div></div></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><p class=\"auto-cursor-target\"><br /></p><p class=\"auto-cursor-target\"><br /></p><p class=\"auto-cursor-target\"><br /></p><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "261226631",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java - Task 1 Resources",
    "content": "<p>Here's a quick guide to the Resource subsections and what they cover.<br /><strong>Java</strong>: Right from the start you will need to know a little bit about classes, interfaces, methods, variables, packages, and so on. Don't try to learn everything about at once. Skim to get a feeling for what&nbsp;classes are for and what they look like, what interfaces are for, and so on, but then trying writing some code. When you get stuck, look at the examples and re-read the Java tutorial material. Each time you re-read, you'll understand more, and change your understanding of things you thought you knew.<br /><strong>Gradle</strong>: Gradle is a tool, i.e., program, for building Java programs. The section covers how to install it and create&nbsp;a Gradle script for your web app.<br /><strong>IDEA</strong>: IDEA is an environment for editing and running Java programs. The section covers how to install and use it with Gradle scripts.<br /><strong>Spring&nbsp;and JPA:</strong>&nbsp;Spring is a framework and&nbsp;suite of libraries that make it possible to&nbsp;build powerful Java web services with very little code. JPA, the Java Persistence API, is the system Spring uses to create and manage databases without needing to learn and write database code.&nbsp;Spring was designed to reduce the amount of code you have to write, and to make that code as simple as possible.&nbsp;Spring Boot and JPA have many advanced features. Don't try to learn or use them all. Focus on just the things you need first.<br /><strong>JavaScript:</strong>&nbsp;As with&nbsp;Java, there is too much about JavaScript to try and learn all at once. Learn in slices. We've tried to include the majority of what you need to know for the tasks, and no more, in the eBook. The most important part initially&nbsp;is how&nbsp;to use JavaScript to request JSON data from a server using AJAX. Getting JSON and using JSON to construct HTML will be the primary front-end coding you need to do throughout this project.<br />&nbsp;<br /><strong>Required resources</strong></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"ca71f0be-01a7-4b4c-8ba7-ffbfdcb44012\"><ac:parameter ac:name=\"title\">Java</ac:parameter><ac:rich-text-body><ul><li><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Where to download Java</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- you want the Java 8 SE JDK, not the larger, more complicated Java EE, nor the JRE, which&nbsp;doesn't include the Java compiler</span></li><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1459\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Introduction to Java</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- This is a quick review. It assumes you've seen a similar language before, such as JavaScript.</span></li><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=29\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Classes in Java</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- All code in Java is organized into classes.</span></li><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=34\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Instances in Java</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Run-time data in Java is stored in instances of classes.</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"b7c8cabf-85b7-4dbb-b3b7-a7c74a5b9ab7\"><ac:parameter ac:name=\"title\">Gradle</ac:parameter><ac:rich-text-body><p><a href=\"https://gradle.org/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Gradle</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;is a command line build tool, in the same spirit as other tools such as&nbsp;</span><a href=\"http://ant.apache.org/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Ant</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;and&nbsp;</span><a href=\"https://maven.apache.org/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Maven</span></span></a><span style=\"color: rgb(35,31,32);\">. Gradle makes it easier to compile and run Java applications with just one command, such as&nbsp;<strong>./gradlew build</strong>&nbsp;and&nbsp;<strong>./gradlew</strong></span> <span style=\"color: rgb(35,31,32);\"><strong>bootRun</strong>. Gradle commands can be executed in a command shell, or by an IDE such as IDEA.&nbsp;</span></p><ul><li><a href=\"https://gradle.org/gradle-download/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Where to download Gradle</span></span></a></li><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1457\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to create a Gradle Spring Project using the Spring Initializr</span></span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"25e75beb-6c80-41da-bc14-8b1f67abb1f7\"><ac:parameter ac:name=\"title\">Intellij IDEA and Gradle</ac:parameter><ac:rich-text-body><p><a href=\"https://www.jetbrains.com/idea/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Intellj IDEA</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;from JetBrains is the recommended editor for this course, for a number of reasons:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">It is a powerful tool, designed for professional developers.</span></li><li><span style=\"color: rgb(35,31,32);\">It is designed and optimized for Java coding.</span></li><li><span style=\"color: rgb(35,31,32);\">It has good support for Java 8, Gradle, and Spring.</span></li><li><span style=\"color: rgb(35,31,32);\">It is not as complex as the most popular alternative,&nbsp;</span><a href=\"http://www.eclipse.org/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Eclipse</span></span></a><span style=\"color: rgb(35,31,32);\">.</span></li><li><span style=\"color: rgb(35,31,32);\">It is the basis for&nbsp;</span><a href=\"http://www.eclipse.org/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Google Android Studio</span></span></a><span style=\"color: rgb(35,31,32);\">, the standard development tool for Android apps.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Use&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1456\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">our&nbsp;eBook on IDEA and Gradle</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;as your starting point for learning about IDEA and Gradle.</span><br /><span style=\"color: rgb(35,31,32);\">Here are some specific sections in the IDEA ebook that you will need:</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1456\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to install Intellij IDEA</span></span></a></li><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1456\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to set up IDEA</span></span></a></li><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=25\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to edit in Intellij IDEA</span></span></a></li></ul><p><span style=\"color: rgb(35,31,32);\">&nbsp;Here are some specific sections about using Gradle within IDEA:</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=23\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to import Gradle projects</span></span></a></li><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=24\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to run Gradle projects</span></span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"36e45b44-cf7d-449e-aafc-a22c53689b2d\"><ac:parameter ac:name=\"title\">Spring and JPA</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\"><strong>JPA</strong>&nbsp;(<strong>Java Persistence API</strong>) is a standard library in Java for describing how Java classes should be&nbsp;<strong>persisted</strong>, i.e., stored in a permanent sharable way, to a relational database. JPA itself just describes an interface language for describing the connection. There are different code libraries that implement JPA. The most popular is called&nbsp;<strong>Hibernate</strong>.</span><br /><span style=\"color: rgb(35,31,32);\">Hibernate is included in the&nbsp;<strong>Spring</strong>&nbsp;Framework, which is a large collection of Java libraries. Spring is very complicated and has to support&nbsp;many complex tasks, including database, security, mapping Java data to JSON (JavaScript Object Notation) and so on.&nbsp;<strong>Spring Boot&nbsp;</strong>is a project designed to make using the Spring tools as simple as possible.</span><br /><span style=\"color: rgb(35,31,32);\">Spring Boot, which includes&nbsp;<strong>JPA</strong>, is a powerful library that makes of advanced Java concepts. Understanding how it works and what you can do with it isn't something you can pick up right away.</span><br /><span style=\"color: rgb(35,31,32);\">But the nice thing about Spring is that you don't have to understand it in depth to use it. Spring was designed to reduce the amount of code you have to write, and to make that code as simple as possible. Each version of Spring, while adding more features, has also simplified what you need to do for the most common cases.</span><br /><span style=\"color: rgb(35,31,32);\">Spring Boot and JPA have many advanced features. Don't try to learn or use them all. Focus on just the things you need first.</span><br /><span style=\"color: rgb(35,31,32);\">Study the following&nbsp;annotated examples using Spring to do tasks very similar to what you need to do. Follow the examples as closely as possible. Change the parts that seem obvious, like names of classes and variables. If something breaks, look to see if you left out an&nbsp;<strong>import</strong>&nbsp;or method definition that the examples had.</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=33\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to define an entity using Spring databases and JPA&nbsp;</span></span></a></li><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1166\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to make a&nbsp;</span><strong>RestRepository</strong></span></a></li><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=44\"><span style=\"color: rgb(35,82,124);\"><span style=\"text-decoration: underline;\">How to initialize application data with&nbsp;a&nbsp;</span><strong>CommandLineRunner</strong><span style=\"text-decoration: underline;\">.</span></span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"8d51a642-da62-4d1f-a126-f7c89ac74898\"><ac:parameter ac:name=\"title\">Javascript</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Despite the name, JavaScript has nothing to do with Java. It was created by a completely different company. It was originally called LiveScript and was renamed JavaScript&nbsp;because Java was becoming&nbsp;very popular at the time.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">For quite a while, JavaScript was considered a useful but minor addition to web browsers to enable amusing web animation tricks. But gradually the language evolved, became standardized, became many times&nbsp;faster in most browsers, accumulated a number of very powerful libraries, and moved in uses&nbsp;beyond&nbsp;the browser.&nbsp;Today it is possible to build an entire web application, front and back, using just JavaScript.&nbsp;&nbsp;&nbsp;</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1060\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">JavaScript eBook</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- skim from the beginning at least through the section on using objects.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The eBook is a condensed fly through the key concepts. If something doesn't make sense, come up with concrete examples of of code you don't understand and go to the web, your peers, and your mentor.</span><br /><span style=\"color: rgb(35,31,32);\">The most important aspect of JavaScript you may not have seen before is getting JSON data from a server with AJAX calls.&nbsp;</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1171\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Overview of AJAX calls in JavaScript</span></span></a></li></ul></ac:rich-text-body></ac:structured-macro><p><strong>Optional resources</strong></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"9c0c036a-cd21-46f9-bee0-dafaa00782d3\"><ac:parameter ac:name=\"title\">Background on Java IDEs</ac:parameter><ac:rich-text-body><ul><li><a href=\"http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/keplersr1\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Overview of Eclipse</span></span></a></li><li><a href=\"https://netbeans.org/features/java/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Overview of Netbeans</span></span></a></li><li><a href=\"https://www.jetbrains.com/idea/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Overview of Intellij IDEA</span></span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"a7f5ca06-bd32-4758-903a-ddce9c0abe10\"><ac:parameter ac:name=\"title\">Gradle and Maven</ac:parameter><ac:rich-text-body><ul><li><a href=\"https://maven.apache.org/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Overview of Maven</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- Maven has been around longer than Gradle, so many articles on Spring use it. Maven uses XML files that are much harder to read than Gradle files.</span><ul><li><span style=\"color: rgb(35,31,32);\">If you want to experiment with a Maven-based project</span><ul><li><span style=\"color: rgb(35,31,32);\">Download it.</span></li><li><span style=\"color: rgb(35,31,32);\">Run&nbsp;<strong>gradle</strong></span> <span style=\"color: rgb(35,31,32);\"><strong>init</strong>&nbsp;to create&nbsp;<strong>.gradle</strong>&nbsp;files from&nbsp;&nbsp;the Maven&nbsp;<strong>.pom&nbsp;</strong>file.</span></li><li><span style=\"color: rgb(35,31,32);\">Study the results.</span></li></ul></li></ul></li><li><a href=\"https://gradle.org/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Overview of Gradle</span></span></a></li><li><a href=\"https://docs.gradle.org/current/userguide/gradle_wrapper.html\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Overview of gradle wrapper</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- if you're curious what the difference is between&nbsp;<strong>gradle</strong>&nbsp;and&nbsp;<strong>gradlew</strong></span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"07d09ee9-93f6-4509-b37e-c06820aeed57\"><ac:parameter ac:name=\"title\">JPA and Spring Boot</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">As you explore and need more features, check out the brief guides the Spring Boot project developers have written:</span></p><ul><li><a href=\"https://spring.io/guides\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Spring Guides</span></span></a></li></ul><p><span style=\"color: rgb(35,31,32);\">These show many examples of different kinds of applications you can do.</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />Caution: The guides are a community effort and not updated very frequently. They may use Spring 1.2 or 1.3. You can tell by looking in the&nbsp;<strong>build.gradle</strong>&nbsp;file for the sample code. Some packages may be renamed in Spring 1.4, or there may be a simpler way to do something. A few major changes happened with Spring Boot 2.0, e.g.,&nbsp;<strong>findOne()</strong>&nbsp;was replaced with the slightly different&nbsp;<strong>findById()</strong>. See&nbsp;<a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=33\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">the ebook</span></span></a>.&nbsp;</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"487ec407-0a12-4c3f-9a8c-14d3aee26f4d\"><ac:parameter ac:name=\"title\">Miscellaneous</ac:parameter><ac:rich-text-body><ul><li><a href=\"https://www.elegantthemes.com/blog/resources/the-11-best-code-editors-available-in-2015\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">List of code editors</span></span></a></li><li><span style=\"color: rgb(35,31,32);\">Firefox: Get&nbsp;</span><a href=\"https://addons.mozilla.org/en-us/firefox/addon/jsonview/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">the JSONView plugin</span></span></a><span style=\"color: rgb(35,31,32);\">.</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "261390618",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java - Task 2 Resources",
    "content": "<p><span style=\"color: rgb(35,31,32);\">A brief guide to the Resource subsections:</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Java:</strong>&nbsp;Besides getting more familiar with Java in general, now is a good time to learn about collections, streams from collections, maps, and dates.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Spring and JPA:&nbsp;</strong>The main new thing to be sure you understand is the many-to-many data relationship.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Databases:</strong>&nbsp;One-to-many, many-to-many, columns, joins, etc., are all concepts from databases, not Java or Spring. While you don't need to write code, e.g., SQL, to directly interact with your databases, it will help you use JPA correctly if you understand what is actually happening under the hood.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>JavaScript:&nbsp;</strong>Focus here is on generating HTML on a web page, based on data in a JSON object, including formatting dates.</span></p><p><br /><span style=\"color: rgb(35,31,32);\"><strong>Required resources</strong></span></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"97154bea-1eb4-4dbe-8579-6196fdca6c77\"><ac:parameter ac:name=\"title\">Java</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Try another pass at the eBook:</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=29\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Java concepts eBook</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- skim from the beginning&nbsp;through&nbsp;at least the section on types</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Java classes particularly useful in this task are collections, streams,&nbsp;and dates.</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=42\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Java collections</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- collections include list, sets, and&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=42&amp;anchor=maps\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">maps</span></span></a><ul><li><span style=\"color: rgb(35,31,32);\">Maps are Java's way of storing keys and values.</span></li><li><span style=\"color: rgb(35,31,32);\">If a request method builds and returns a Map, Spring will add code to convert the map into&nbsp;JSON for you.</span></li></ul></li><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=47\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Streams</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;are a set of classes and methods that make it easy to process a collection, e.g., to transform&nbsp;a list of data from a collection, to sum&nbsp;up a collection of numbers, and so on. Streams lead to very compact and easy to modify code.</span></li><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1167\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How</span></span></a><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1167\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">&nbsp;t</span></span></a><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1167\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">o</span></span></a><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1167\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">&nbsp;create dates</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- dates seem simple but appearances are deceiving. Java is on its third set of classes for handling dates!</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"63c2d1e6-5234-403f-9c2e-8a578c3e8056\"><ac:parameter ac:name=\"title\">Spring and JPA</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">In the&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=32\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Spring Boot eBook</span></span></a><span style=\"color: rgb(35,31,32);\">,&nbsp;you should have looked at the sections up to and including&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1169\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Data Transfer Objects</span></span></a><span style=\"color: rgb(35,31,32);\">.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">An&nbsp;important new JPA concept to understand well is the case where two classes have&nbsp;a &quot;many to many&quot; relationship, e.g., a magazine has many subscribers (i.e., people), and a person may subscribe to many magazines.&nbsp;</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=33&amp;anchor=joined-many-to-many\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to join many-to-many relationships</span></span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"6f64b097-95aa-4e8e-887c-1d3bda37ff52\"><ac:parameter ac:name=\"title\">Databases</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Spring JPA and the Hibernate library will take care of storing and retrieving data from your databases. But it will be easier for you to&nbsp;read error messages and debug problems if you have a basic idea of what JPA needs&nbsp;to do. Plus, some day you will probably need to write database code. This is a good way to get acclimated to the basic concepts.</span><br /><span style=\"color: rgb(35,31,32);\">For a quick introduction to the basic concepts and terms used in databases, see</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=50\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">the Database concepts eBook</span></span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"911d93d0-d5bc-4ebb-99c8-8f28b25b61ac\"><ac:parameter ac:name=\"title\">JavaScript</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Particularly important in this task is generating HTML from&nbsp;JSON data. These two links cover the basics:</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=61\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to create and access data objects</span></span></a></li><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1458\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to create dynamic HTML pages</span></span></a></li><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1058\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">How to format dates for users</span></span></a></li></ul></ac:rich-text-body></ac:structured-macro><p><span style=\"color: rgb(35,31,32);\"><strong>Optional resources</strong></span></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"9daa00df-06bc-4ae0-adef-5652569c37a5\"><ac:parameter ac:name=\"title\">Java</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">As new concepts, such as collections, come up, look for tutorials about them at Oracle</span></p><ul><li><a href=\"http://docs.oracle.com/javase/tutorial/java/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">The Java Trail&nbsp;</span></span></a><span style=\"color: rgb(35,31,32);\">&ndash; an extensive set of tutorials from Oracle, the home of Java</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"8a5c2539-38c5-458b-b3c2-6a558a84f69f\"><ac:parameter ac:name=\"title\">Spring</ac:parameter><ac:rich-text-body><ul><li><a href=\"http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Common Spring Boot configuation properties</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- A list of many of the properties you can set to control how Spring, Hibernate, Jackson, and other tools in the Spring suite behave. The defaults should be all you need, unless instructed otherwise in a Plan of Attack.</span></li><li><a href=\"https://spring.io/guides\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Spring Guides</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- return to the guides as questions arise</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"23f69c8a-2cbb-43ae-9277-fb4b3e400393\"><ac:parameter ac:name=\"title\">Databases</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">A good&nbsp;overview of databases and database operations is</span></p><ul><li><a href=\"http://www.dummies.com/how-to/content/knowing-just-enough-about-relational-databases.html\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Knowing Just Enough about Relational Databases</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;from&nbsp;<strong>Databases For Dummies</strong></span></li></ul><p><span style=\"color: rgb(35,31,32);\">Although the Java Persistence API (JPA) annotations make it unnecessary to write Structured Query Language (SQL) commands for simple applications, knowing what SQL looks like&nbsp;can help you&nbsp;understand how the JPA annotations work and why they use the terms they do.</span><br /><span style=\"color: rgb(35,31,32);\">A good overview of this material is</span></p><ul><li><a href=\"https://docs.oracle.com/javase/tutorial/jdbc/overview/database.html\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">A Relational Database Overview</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;from Oracle</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"710306ee-8e01-4a4d-ad86-16ef17a12a92\"><ac:parameter ac:name=\"title\">Agile Development</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">For a quick introduction to agile software development concepts, see</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1087\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">the Agile Development basic concepts eBook</span></span></a></li></ul><p><span style=\"color: rgb(35,31,32);\">For a wealth of information on agile, see</span></p><ul><li><a href=\"https://www.agilealliance.org/agile101/what-is-agile/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">What is Agile Software Development?</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;from the Agile Alliance</span></li><li><a href=\"https://www.versionone.com/agile-101/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Agile 101</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;from VersionOne</span></li><li><a href=\"http://guide.agilealliance.org/\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Guide to Agile Practices</span></span></a><span style=\"color: rgb(35,31,32);\">&nbsp;from the&nbsp;Agile Alliance</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"d1a8734b-da30-461f-a278-bdcacc88873f\"><ac:parameter ac:name=\"title\">REST</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Roy Fielding in his PhD disssertation analyzed the principles behind this design, and those principles became the REST guidelines for building web applications of all sorts.</span><br /><span style=\"color: rgb(35,31,32);\">We will grossly over-simplify these guidelines as follows:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Do not design&nbsp;URLs as commands, e.g.,&nbsp;<strong>/add/25</strong>&nbsp;or&nbsp;<strong>/register?course=c110&amp;student=pa562</strong>&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">Instead, design&nbsp;URLs as identifiers for resources. &quot;Resource&quot; here means &quot;container of content.&quot;&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">Use the HTTP methods&nbsp;<strong>GET</strong>,&nbsp;<strong>POST</strong>,&nbsp;<strong>PUT</strong>, and&nbsp;<strong>DELETE</strong>&nbsp;to manage resources.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The idea is to make web applications work just like classic static web sites.&nbsp;When your browser asks for a file &ndash; HTML, CSS, JavaScript, image, whatever &ndash; &nbsp;the browser sends a&nbsp;<strong>GET</strong>&nbsp;command and a URL. That URL&nbsp;is a unique&nbsp;identifier for the file.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\"><strong>GET</strong>&nbsp;should have&nbsp;no side effects on the server. Getting something twice should get the same resource.</span><br /><span style=\"color: rgb(35,31,32);\">A&nbsp;resource is a container.&nbsp;<strong>GET&nbsp;</strong><em>URL</em>&nbsp;should always return the same&nbsp;container, but the contents may&nbsp;change. E.g., a shopping cart is a resource, but what's in it will change as a user adds and removes items from it.</span><br /><span style=\"color: rgb(35,31,32);\">The web, in particular, the</span> <span style=\"color: rgb(35,31,32);\">HyperText Transfer Protocol (HTTP), has just a few commands (called methods) to accessing and&nbsp;changine&nbsp;the resources on the server:</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong>GET</strong>&nbsp;<em>URL</em>&nbsp;says &quot;get the source with this URL.&quot;&nbsp;<strong>GET</strong>&nbsp;should have&nbsp;no side effect on the server.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>PUT</strong>&nbsp;<em>URL +&nbsp;data</em>&nbsp;says &quot;create a resource with the given URL&nbsp;with&nbsp;the given data.&quot;&nbsp;<strong>PUT&nbsp;</strong>will affect the server, but one or more&nbsp;calls with&nbsp;the same URL and data should have the same effect.&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>POST</strong>&nbsp;<em>URL +&nbsp;data</em>&nbsp;says &quot;modify&nbsp;the resource with the given URL using&nbsp;the given data.&quot;&nbsp;Exactly what this means up to the application. Multiple calls with the same URL and data might have different effects.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>DELETE</strong>&nbsp;<em>URL</em>&nbsp;says &quot;delete the resource with this URL.&quot;</span></li></ul><p><span style=\"color: rgb(35,31,32);\">REST says you should do the same thing when building any kind of web application, even one that seems like it is all about actions by users. For example:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">A shopping site:</span><ul><li><span style=\"color: rgb(35,31,32);\">Resources are catalogs, lists items to buy, customers, and shopping carts</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>GET</strong>&nbsp;is used to get items, customer profiles, carts, etc.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>PUT</strong>&nbsp;and&nbsp;<strong>POST</strong>&nbsp;are used to add items to catalogs, create customers, create carts, add items to carts</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">A chess game</span><ul><li><span style=\"color: rgb(35,31,32);\">Resources are players, games, lists of moves</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>GET</strong>&nbsp;is used to get players, games, and move histories</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>PUT</strong>&nbsp;and&nbsp;<strong>POST</strong>&nbsp;are used to create players, games, and add moves to the move lists</span></li></ul></li></ul><p><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />Read more in this&nbsp;<a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1168\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">ebook section about Applications and Controllers</span></span></a>.<br /><span style=\"color: rgb(35,31,32);\">A nice overview of REST in the Spring context:</span></p><ul><li><a href=\"https://spring.io/understanding/REST\"><span style=\"color: rgb(51,122,183);\"><span style=\"text-decoration: underline;\">Understanding REST</span></span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "261423376",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java - Task 3",
    "content": "<h2><span style=\"color: rgb(153,153,153);\">Introduction</span></h2><p><span style=\"color: rgb(35,31,32);\">You've been asked to implement the story &quot;As a player in a game, I can see a display of where my ships are.&quot;&nbsp;The user interface for this will be a simple grid on an HTML page. The exact look of this table is up to you, as long as it shows marks for cells occupied by ships, and&nbsp;includes the standard Salvo row and column labels.</span><br /><span style=\"color: rgb(35,31,32);\">This story is the first part of implementing &quot;As a player, I can see all the information about a game that I'm playing.&quot;&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">This means that instead of showing all games, with just a little data per game, you will generate JSON to show one game in more detail.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">First you will show&nbsp;ships. Later you will add&nbsp;salvos and other information.</span><br /><span style=\"color: rgb(35,31,32);\">Implementing this current story means implementing</span></p><ul><li><span style=\"color: rgb(35,31,32);\">JPA code and database tables for&nbsp;ships&nbsp;and ship locations</span></li><li><span style=\"color: rgb(35,31,32);\">Java code&nbsp;for a game player to return&nbsp;the ships a player has&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">application controller code&nbsp;to include the player's ship locations in the&nbsp;JSON&nbsp;for the player's view of the game</span></li><li><span style=\"color: rgb(35,31,32);\">web page code to display the JSON data in the grid form, i.e., an HTML table</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Fortunately, this does not involve anywhere near as many concepts as the previous task. This is an opportunity to apply and practice what you've learned, with slight variations.</span></p><h2><span style=\"color: rgb(153,153,153);\">Path Variables</span></h2><p><span style=\"color: rgb(35,31,32);\">To get the JSON data transfer object with the ships for a particular game player, you need to include who the game player is in the request.</span><br /><span style=\"color: rgb(35,31,32);\">For a RESTful application, the standard approach is to use a URL that includes&nbsp;<strong>nn</strong>. For example, the&nbsp;<strong>PlayerRestRepository</strong>&nbsp;takes a URL like this:</span><br /><span style=\"color: rgb(35,31,32);\">/rest/players/nn</span><br /><span style=\"color: rgb(35,31,32);\">where&nbsp;<strong>nn</strong>&nbsp;is the ID of the player. So we could do the same thing for our app controller, e.g.,&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">/api/game_view/nn</span><br /><span style=\"color: rgb(35,31,32);\">to return the view of a game that GamePlayer&nbsp;<strong>nn</strong>&nbsp;should see.</span><br /><span style=\"color: rgb(35,31,32);\">These are called&nbsp;<strong>path variables</strong>&nbsp;because values, like&nbsp;<strong>nn</strong>, are stored in the URL directly. Spring makes it fairly easy to define requests that do this. For example, here's a fragment of&nbsp;such a&nbsp;method definition in a Spring controller:</span><br />@RequestMapping(&quot;/owners/{ownerId}&quot;)<br />public String findOwner(@PathVariable Long ownerId) {<br />Owner owner = ownerService.findOwner(ownerId);<br />...<br />}<br /><span style=\"color: rgb(35,31,32);\">This will match URLs such as&nbsp;<strong>/api/owners/32</strong>&nbsp;and will set&nbsp;<strong>ownerId</strong>&nbsp;to the long integer&nbsp;<strong>32</strong>. Spring automatically takes care of parsing out the number from the URL string. For more details, see the&nbsp;<strong>Resources</strong>.</span></p><h2><span style=\"color: rgb(153,153,153);\">One-to-Many Relationships with&nbsp;@ElementCollection</span></h2><p><span style=\"color: rgb(35,31,32);\">A ship has several locations, e.g., H3, H4, and H5. I.e., you have&nbsp;a&nbsp;<strong>one-to-many</strong>&nbsp;relationship between ships and locations.</span><br /><span style=\"color: rgb(35,31,32);\">In the previous task, you implemented a&nbsp;<strong>many-to-many</strong>&nbsp;relationship between games and players by creating a&nbsp;<strong>GamePlayer</strong>&nbsp;object implementing two&nbsp;<strong>one-to-many</strong>&nbsp;relationships between entities:</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong>Game</strong>&nbsp;has&nbsp;a&nbsp;<strong>one-to-many</strong>&nbsp;relationship with&nbsp;<strong>GamePlayer</strong></span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Player</strong>&nbsp;has&nbsp;a&nbsp;<strong>one-to-many</strong>&nbsp;relationship with&nbsp;<strong>GamePlayer</strong></span></li><li><span style=\"color: rgb(35,31,32);\">ergo,&nbsp;<strong>Game</strong>&nbsp;has a&nbsp;<strong>many-to-many</strong>&nbsp;relationship with&nbsp;<strong>Player</strong></span></li></ul><p><span style=\"color: rgb(35,31,32);\">For this task, you could create a&nbsp;<strong>ShipLocation</strong>&nbsp;entity, and set up a&nbsp;<strong>one-to-many</strong>&nbsp;relationship from&nbsp;<strong>Ship</strong>&nbsp;to&nbsp;<strong>ShipLocation</strong>.</span><br /><span style=\"color: rgb(35,31,32);\">There's no need to create new entities for simple data, such as numbers and strings.&nbsp;Locations are just strings, e.g.,&nbsp; &quot;H2&quot; and &quot;B3&quot;. In Java JPA, you can create a&nbsp;<strong>one-to-many</strong>&nbsp;relationship from an entity, such as&nbsp;<strong>Ship</strong>, to a basic data type, such as a location string, using the&nbsp;<strong>@ElementCollection&nbsp;</strong>annotation.&nbsp;&nbsp;See the entry on&nbsp;<strong>@ElementCollection</strong>&nbsp;in the&nbsp;<strong>Resources</strong>.</span></p><h2><span style=\"color: rgb(153,153,153);\">Data Transfer Objects</span></h2><p><span style=\"color: rgb(35,31,32);\">The main goal of this task is to send a player a JSON object with all the data that player needs to play the game. There are two ideas you might have for how to do this with as little new Java code&nbsp;as possible:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Write JavaScript to get&nbsp;JSON using&nbsp;the&nbsp;<strong>RestRepository</strong>&nbsp;URLs.&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">Write one short method in the application controller to return a&nbsp;<strong>GamePlayer&nbsp;</strong>object. That object contains not only player information but a link to the entire game object.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Both have serious problems. The first method, using the RestRepository URLs,&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">requires many separate requests&nbsp;to get all the data you need</span></li><li><span style=\"color: rgb(35,31,32);\">each call returns a lot of JSON information you don't need</span></li><li><span style=\"color: rgb(35,31,32);\">a player who knows how to run JavaScript could use similar calls to get information about the opponent!&nbsp;</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The second method, returning a&nbsp;<strong>GamePlayer&nbsp;</strong>object, is even worse.&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">If you could send JSON for a&nbsp;<strong>GamePlayer</strong>&nbsp;object, it would include information about all the players, including where their ships are</span></li><li><span style=\"color: rgb(35,31,32);\">But you can't, because the library to convert a&nbsp;<strong>GamePlayer</strong>&nbsp;to JSON will go into an infinite loop!</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Spring uses the standard&nbsp;<strong>Jackson</strong>&nbsp;library to&nbsp;<strong>serialize</strong>&nbsp;Java objects to JSON strings. &quot;Serialize&quot; means writing an instance of an object as a flat string of text. Data needs to be serialized to send over the internet.</span><br /><span style=\"color: rgb(35,31,32);\">To serialize a&nbsp;<strong>GamePlayer</strong>, Jackson needs to serialize all the values in the instance variables, including the&nbsp;<strong>Game</strong>&nbsp;object a&nbsp;<strong>GamePlayer</strong>&nbsp;contains. To serialize the&nbsp;<strong>Game</strong>&nbsp;object, Jackson needs to serialize the&nbsp;<strong>GamePlayer</strong>&nbsp;objects the game contains. See the loop?</span><br /><span style=\"color: rgb(35,31,32);\">Circular references between instances is very common in applications.&nbsp;They don't bother Java, or&nbsp;the&nbsp;database, but they do bother any code that has to&nbsp;<strong>serialize</strong>&nbsp;instances of such&nbsp;classes, such as Jackson.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">There are ways to annotate classes to tell Jackson how to avoid loops, but things get complicated quickly, because&nbsp;you need&nbsp;different serialization rules for different situations.</span><br /><span style=\"color: rgb(35,31,32);\">It's simpler to instead create&nbsp;<strong>data transfer objects</strong>&nbsp;as needed in Java and give them to Jackson to convert. This is effectively what you did in the first task. You construct&nbsp;Java data transfer objects&nbsp;with just the information you want to share, and no circular references. Then Jackson will convert them to JSON for you. See the entry on data transfer objects in the&nbsp;<strong>Resources</strong>.</span></p><p class=\"auto-cursor-target\"><br /></p><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"ea0eb42f-feeb-4121-b6e9-ecd54b5dd321\"><ac:parameter ac:name=\"title\">Step 1 - Create a Ship REST repository</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">As with implementing games and players, implementing ships requires implementing&nbsp;two Java classes.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Implement the&nbsp;<strong>Ship</strong>&nbsp;class.&nbsp;A ship object needs to have a unique ID&mdash;so it can be referred to&nbsp;elsewhere; a type&mdash;whether it's e.g., a cruiser, destroyer, or battleship; and a list of locations.</span></li><li><span style=\"color: rgb(35,31,32);\">Implement the&nbsp;<strong>ShipRepository</strong>&nbsp;class. This manages the creation and retrieval of ships from the database.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">You also need to add fields and methods to link game players to ships:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">A ship has a game player. &nbsp;</span><ul><li><span style=\"color: rgb(35,31,32);\"><strong>ship.getGamePlayer()</strong>&nbsp;should return that player.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">A game player has a set of ships.&nbsp;</span><ul><li><span style=\"color: rgb(35,31,32);\"><strong>gamePlayer.getShips()</strong>&nbsp;should return a&nbsp;<strong>Set</strong>&nbsp;of ships</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">This will look very much like the code you defined linking&nbsp;players and game players.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Define the Java Classes</span></h2><p><span style=\"color: rgb(35,31,32);\">Repeat the process you did with&nbsp;<strong>Game</strong>&nbsp;to create&nbsp;<strong>Ship&nbsp;</strong>and&nbsp;<strong>ShipRepository</strong>. &nbsp;Define the classes for&nbsp;<strong>Ship&nbsp;</strong>and&nbsp;<strong>ShipRepository</strong>&nbsp;following the examples in&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=33\"><span style=\"color: rgb(51,122,183);\">the eBook on Spring databases and JPA</span></a><span style=\"color: rgb(35,31,32);\">.&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">In Intellij IDEA, use&nbsp;<strong>File | New ... | Java Class</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Name the class&nbsp;<strong>Ship</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Edit the generated Java code as appropriate to define&nbsp;<strong>Ship</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Repeat by making a new class for&nbsp;<strong>ShipRepository</strong></span><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1166\"><span style=\"color: rgb(51,122,183);\">Make the repository a&nbsp;RestRepository</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;so that you can use your browser to view the stored data in the testing below.&nbsp;</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">A ship object needs data fields for</span></p><ul><li><span style=\"color: rgb(35,31,32);\">A database-generated ID, as with&nbsp;<strong>Game</strong></span></li><li><span style=\"color: rgb(35,31,32);\">A ship type (i.e. &quot;cruiser&quot;)</span></li><li><span style=\"color: rgb(35,31,32);\">A&nbsp;<strong>GamePlayer</strong></span></li><li><span style=\"color: rgb(35,31,32);\">A list of locations, i.e., cells on the grid, e.g., [&quot;H3&quot;, &quot;H4&quot;, &quot;H5&quot;]</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Because GamePlayer is a&nbsp;reference to an object stored in another data table, you need to add JPA annotations to tell JPA how to connect the tables together. &nbsp;One gamePlayer has many ships, so follow the&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=33\"><span style=\"color: rgb(51,122,183);\">example of one-to-many relationships</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;to connect the GamePlayer and Ship tables.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Because the locations are simple strings, you do not need to create a new repository for ship locations. You can just use an&nbsp;<strong>ElementCollection</strong>. See the&nbsp;<strong>Resources</strong>&nbsp;for details.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test Your Syntax</span></h2><p><span style=\"color: rgb(35,31,32);\">Run the Gradle&nbsp;<strong>build</strong>&nbsp;task to make sure your code is syntactically correct, &nbsp;all necessary classes and methods are defined, and all necessary library code is imported.</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />If&nbsp;<strong>build</strong>&nbsp;fails, it's because of a compiler error. Look at&nbsp;<em>the&nbsp;<span style=\"text-decoration: underline;\">first</span>&nbsp;few error messages</em>. Fix those and&nbsp;<strong>build</strong>&nbsp;again. The first&nbsp;syntax&nbsp;error&nbsp;can cause many error messages, so just focus on fixing the first few errors, and any you see that are obvious, like a misspelled name.</p><h2><span style=\"color: rgb(153,153,153);\">Create the Sample Data</span></h2><p><span style=\"color: rgb(35,31,32);\">Change your&nbsp;<strong>CommandLineRunner</strong>&nbsp;in your application class to create ships, using&nbsp;<strong>new Ship()</strong>.<strong>&nbsp;</strong></span></p><ul><li><span style=\"color: rgb(35,31,32);\">Create at least several ships for several players in several games, using&nbsp;<strong>new Ship()</strong>,&nbsp;<em>gamePlayer</em><strong>.addShip()</strong>, and so on.&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">Use the example ship data given in the testbed database document attached to the email in Task 1.</span></li><li><span style=\"color: rgb(35,31,32);\">Save the entities in the appropriate repositories.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">When creating ships, you will need to give lists of locations. See the&nbsp;<strong>Resources</strong>&nbsp;for easy ways to create lists in test data.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test by Browsing the JSON &nbsp;</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>Run the Gradle task&nbsp;bootRun.</strong></span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />If&nbsp;<strong>bootRun</strong>&nbsp;fails with a compiler error, check for and fix the first few errors as above, then try again.<br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />If the&nbsp;last line of the&nbsp;<strong>bootrun</strong>&nbsp;output is not &quot;Started Application in ... seconds ...&quot;&nbsp;then&nbsp;<strong>bootRun</strong>&nbsp;failed to start the web service.&nbsp;&nbsp;Look at&nbsp;<em>the last error message&nbsp;</em>in the output window.&nbsp;When runtime errors happen, the last message will often be&nbsp;the&nbsp;<strong>root</strong>&nbsp;cause of the error.<br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />One common root cause is that another bootRun service is still active. If&nbsp;<strong>Run | Stop</strong>&nbsp;is available, that's the problem. Stop the previous run, close the extraneous bootRun output tab, and run again.<br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />Another common cause of&nbsp;<strong>bootRun</strong>&nbsp;failure is a problem creating or saving the test data. &nbsp;Look for root cause error messages about an unknown data column, or an&nbsp;entity that can't be saved because it contains another unsaved entity. Fix your code appropriately.<br /><span style=\"color: rgb(35,31,32);\">If&nbsp;<strong>bootRun</strong>&nbsp;starts the application, open&nbsp;the&nbsp;<strong>RestRepository</strong>&nbsp;URLs in your &nbsp;browser to see if the stored data is correct and complete:</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong><a class=\"external-link\" href=\"http://localhost:8080/rest/gamePlayers/1\" rel=\"nofollow\">http://localhost:8080/rest/gamePlayers/1</a></strong>&nbsp;should show&nbsp;a list of ships&nbsp;for game player 1, for example</span></li><li><span style=\"color: rgb(35,31,32);\"><strong><a class=\"external-link\" href=\"http://localhost:8080/rest/ships\" rel=\"nofollow\">http://localhost:8080/rest/ships</a></strong>&nbsp;should show a list of all ships&nbsp;in all games</span></li></ul><p><span style=\"color: rgb(35,31,32);\">If data is missing, it might be because you didn't</span></p><ul><li><span style=\"color: rgb(35,31,32);\">save everything in the appropriate repositories</span></li><li><span style=\"color: rgb(35,31,32);\">connect entities together completely, e.g., there's no link from a ship to game player, or from a game player to their ships</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"ddca08a7-d2ea-4450-a226-578e24b9f044\"><ac:parameter ac:name=\"title\">Step 2 - Update the controller</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">We need to update our game controller to have a new method that responds to URLs asking for information about a specific game from a specific game player's point of view. That information for now should include</span></p><ul><li><span style=\"color: rgb(35,31,32);\">the&nbsp;game player: name and game player ID</span></li><li><span style=\"color: rgb(35,31,32);\">the opponent of this game player: name and game player ID</span></li><li><span style=\"color: rgb(35,31,32);\">what kinds of&nbsp;ships this game player has placed, e.g., destroyer, patrol boat, ...</span></li><li><span style=\"color: rgb(35,31,32);\">where those ships are</span></li></ul><p><span style=\"color: rgb(35,31,32);\">By defining a method in your&nbsp;<strong>RestController</strong>&nbsp;in Java in your web app, you can do all this. When you do, you'll be ready to create the web page and JavaScript to get that JSON data and display it in HTML.</span></p><h2><span style=\"color: rgb(153,153,153);\">Define a Method&nbsp;to Return JSON with GamePlayer Information</span></h2><p><span style=\"color: rgb(35,31,32);\">As a first step, write the code to take a URL of the form&nbsp;<strong>/api/game_view/<em>nn</em></strong><em>&nbsp;and&nbsp;</em>return a JSON object like the game list, but for just one game. E.g., for the first game, it might be the following.&nbsp;</span><br /><span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;created&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1456438201629</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;gamePlayers&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;player&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;email&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;j.bauer@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span> <span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">},</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">2</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;player&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">2</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;email&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;c.obrian@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span> <span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">}</span> <br /><span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(35,31,32);\">One of the GamePlayer IDs should be the&nbsp;<strong><em>nn</em></strong>&nbsp;given in the URL. If not, you've done something wrong.</span><br /><span style=\"color: rgb(35,31,32);\">To do this,&nbsp;you need to add a method to return a game view, given a URL of the form&nbsp;<strong>/api/game_view/<em>nn</em></strong>. To make that happen, you need to</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Add a method that</span><ul><li><span style=\"color: rgb(35,31,32);\">takes a game player ID as a parameter</span></li><li><span style=\"color: rgb(35,31,32);\">returns a&nbsp;<strong>Map&lt;String, Object&gt;</strong>&nbsp;that will be translated into the JSON&nbsp;object&nbsp;above</span><ul><li><span style=\"color: rgb(35,31,32);\">A Java&nbsp;<strong>Map</strong>&nbsp;will turn into a&nbsp;JSON object of the form&nbsp;{&nbsp;<em>key</em>:&nbsp;<em>value</em>, ... }.</span></li><li><span style=\"color: rgb(35,31,32);\">A Java&nbsp;<strong>List&nbsp;</strong>will turn into a&nbsp;JSON array.</span></li><li><span style=\"color: rgb(35,31,32);\">So, to get&nbsp;the above JSON, you want a&nbsp;<strong>Map</strong>&nbsp;with&nbsp;<strong>id</strong>,&nbsp;<strong>created</strong>, and&nbsp;<strong>gamePlayers</strong>, where&nbsp;<strong>gamePlayers</strong>&nbsp;contains a&nbsp;list with a&nbsp;<strong>Map</strong>&nbsp;for each&nbsp;<strong>GamePlayer</strong>.</span></li><li><span style=\"color: rgb(35,31,32);\">Each game player map has an&nbsp;<strong>id</strong>&nbsp;and a&nbsp;<strong>player</strong>, where&nbsp;<strong>player</strong>&nbsp;contains a map for a&nbsp;<strong>Player</strong>.</span></li><li><span style=\"color: rgb(35,31,32);\">The player map has an&nbsp;<strong>id</strong>&nbsp;and&nbsp;<strong>email</strong>.&nbsp;</span></li></ul></li></ul></li><li><span style=\"color: rgb(35,31,32);\">Annotate the method with&nbsp;<strong>@RequestMapping</strong>&nbsp;to map the URL&nbsp;<strong>/game_view/<em>nn</em></strong><em>&nbsp;</em>to that method.</span></li><li><span style=\"color: rgb(35,31,32);\">Annotate the method parameter with&nbsp;<strong>@PathVariable&nbsp;</strong>to extract the desired&nbsp;game player ID&nbsp;<strong><em>nn</em></strong>&nbsp;from&nbsp;the URL as a long integer.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">You will need to autowire a&nbsp;<strong>GamePlayerRepository</strong>&nbsp;into your controller,&nbsp;&nbsp;so that you can get the game player given&nbsp;the ID&nbsp;<strong><em>nn</em></strong>. &nbsp;See the&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1168\"><span style=\"color: rgb(51,122,183);\">ebook</span></a><span style=\"color: rgb(35,31,32);\">from&nbsp;<strong>Resources</strong>&nbsp;for how to</span></p><ul><li><span style=\"color: rgb(35,31,32);\">autowire an instance variable to hold a repository</span></li><li><span style=\"color: rgb(35,31,32);\">get an&nbsp;instance of a class from&nbsp;a&nbsp;<strong>JpaRepository</strong>&nbsp;by ID</span></li><li><span style=\"color: rgb(35,31,32);\">get the&nbsp;<strong><em>nn</em></strong>&nbsp;value from the&nbsp;<strong>RequestMapping</strong>&nbsp;pattern&nbsp;<strong>/api/game_view/<em>nn</em></strong>&nbsp;into a&nbsp;<strong>long&nbsp;</strong>parameter of the method</span></li></ul><p><span style=\"color: rgb(35,31,32);\"><strong>TEST</strong></span><br /><span style=\"color: rgb(35,31,32);\">After updating your controller,&nbsp;start your web app. Assuming it runs, visit&nbsp;<strong><a class=\"external-link\" href=\"http://localhost:8080/api/game_view/1\" rel=\"nofollow\">http://localhost:8080/api/game_view/1</a></strong>&nbsp;in your web browser. Make sure you see the correct game data.</span><br /><span style=\"color: rgb(35,31,32);\">This may not seem like much progress, but&nbsp;it actually means that you wired everything together correctly. Now it's just a matter of including more data in what you send back.</span></p><h2><span style=\"color: rgb(153,153,153);\">Include Ship Data in the&nbsp;JSON</span></h2><p><span style=\"color: rgb(35,31,32);\">Now we want the JSON for the game view for a player to include that player's ships.</span><br /><span style=\"color: rgb(35,31,32);\">The easiest way to do that is to add a new key to the game JSON.</span><br /><span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;created&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1456438201629</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;gamePlayers&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;player&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;email&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;j.bauer@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span> <span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">},</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">2</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;player&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">2</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;email&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;c.obrian@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span> <span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">}</span> <br /><span style=\"color: rgb(153,153,153);\">],</span><br /><span style=\"color: rgb(102,153,0);\">&quot;ships&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><br /><span style=\"color: rgb(153,153,153);\">...</span><br /><span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(35,31,32);\">Since a player has more than one ship, we'll need an array of ships.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Each ship in the array will need to specify&nbsp;two things: what type of ship it is, and what locations it occupies. The locations will be another array.</span><br /><span style=\"color: rgb(35,31,32);\">For example, the first ship assigned to Jack might&nbsp;look like this</span><br /><span style=\"color: rgb(35,31,32);\">{ &quot;type&quot;: &quot;Destroyer&quot;, &quot;locations&quot;: [ &quot;H2&quot;, &quot;H3&quot;, &quot;H4&quot; ] }</span><br /><span style=\"color: rgb(35,31,32);\">The&nbsp;<strong>ships</strong>&nbsp;value for Jack&nbsp;should be a list of JSON items like this:</span><br /><span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;created&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1456438201629</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;gamePlayers&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;player&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;email&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;j.bauer@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span> <span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">},</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">2</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;player&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">2</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;email&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;c.obrian@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span> <span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">}</span> <br /><span style=\"color: rgb(153,153,153);\">],</span><br /><span style=\"color: rgb(102,153,0);\">&quot;ships&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;type&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;Destroyer&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;locations&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(102,153,0);\">&quot;H2&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;H3&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;H4&quot;</span> <span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(153,153,153);\">},</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;type&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;Submarine&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;locations&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(102,153,0);\">&quot;E1&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;F1&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;G1&quot;</span> <span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(153,153,153);\">},</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;type&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;Patrol Boat&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;locations&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(102,153,0);\">&quot;B4&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;B5&quot;</span> <span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(35,31,32);\">Work in small slices. For example, first just try to make and return a list of the JSON for the type of each ship.</span><br /><span style=\"color: rgb(35,31,32);\">{ ...&nbsp;&quot;ships&quot;: [ &quot;Destroyer&quot;, &quot;Submarine&quot;, &quot;Patrol Boat&quot;&nbsp;] }</span><br /><span style=\"color: rgb(35,31,32);\">As in the previous task;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">define private methods to do each subtask</span></li><li><span style=\"color: rgb(35,31,32);\">use streams to loop over collections to collect the data transfer objects</span></li></ul><p><span style=\"color: rgb(35,31,32);\">When the above is working, expand your code to create a list of&nbsp;<strong>Map</strong>s with a&nbsp;<strong>type</strong>&nbsp;key whose value is the ship type,&nbsp;to produce JSON like this</span><br /><span style=\"color: rgb(35,31,32);\">{ ...&nbsp;&quot;ships&quot;: [ { &quot;type&quot;: &quot;Destroyer&quot; }, { &quot;type&quot;: &quot;Submarine&quot; }, { &quot;type&quot;: &quot;Patrol Boat&quot; } ] }</span><br /><span style=\"color: rgb(35,31,32);\">Then finally&nbsp;add code to include in each ship JSON&nbsp;a&nbsp;<strong>location&nbsp;</strong>key whose value is&nbsp;the&nbsp;list of the ship locations.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test!</span></h2><p><span style=\"color: rgb(35,31,32);\">After each change, re-start your web app and check what&nbsp;<strong><a class=\"external-link\" href=\"http://localhost:8080/api/game_view/1\" rel=\"nofollow\">http://localhost:8080/api/game_view/1</a></strong>&nbsp;shows in your web browser. Check that the JSON has the data you need.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"fb297bcd-29cc-4a9c-9139-2421d0a8c975\"><ac:parameter ac:name=\"title\">Step 3 - Create a game web view</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Because you've been inspecting the JSON in your browser, you should be reasonably confident your data is stored correctly.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Now it's time to present this data on a web page for a player. Right now this view will only be showing the player's own ships in a specific game. Later it will include other information, such as where shots have been fired.</span><br /><span style=\"color: rgb(35,31,32);\">As given in the email, the format is simple for now: just a grid with the locations of the ships marked on the grid. That data is in the JSON.</span></p><h2><span style=\"color: rgb(153,153,153);\">Create an Empty Web Page</span></h2><p><span style=\"color: rgb(35,31,32);\">What you need to do now is</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Create a web page&nbsp;<strong>game.html</strong>, with the usual&nbsp;HEAD and BODY boilerplate, in your&nbsp;<strong>web</strong>&nbsp;directory.</span><ul><li><span style=\"color: rgb(35,31,32);\">This page will be a player's view of a game. Right now, all they will see are the ships they have placed.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">Include some title, e.g.,&nbsp;<strong>Ship Locations!</strong>, so that you will know that the page has loaded.</span></li><li><span style=\"color: rgb(35,31,32);\">Have&nbsp;<strong>script</strong>&nbsp;tags to load&nbsp;<strong>jQuery</strong>&nbsp;and a local JavaScript file, e.g.,&nbsp;<strong>game.js</strong></span><ul><li><span style=\"color: rgb(35,31,32);\"><strong>game.js</strong>&nbsp;is just a placeholder.&nbsp;Don't worry about what to put in&nbsp;<strong>game.js</strong>&nbsp;yet. You don't even have to create the file yet.</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">See the&nbsp;<strong>Resources</strong>&nbsp;for where to put the web page and other static assets in a Spring MVC application.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>TEST!</strong>&nbsp;Start your web app and point your browser at&nbsp;<strong><a class=\"external-link\" href=\"http://localhost:8080/web/game.html?gp=1\" rel=\"nofollow\">http://localhost:8080/web/game.html?gp=1</a></strong>. You should see your title information.</span><br /><span style=\"color: rgb(35,31,32);\">The&nbsp;<strong>?gp=1</strong>&nbsp;is being ignored right now, but include it in your testing from the start.</span></p><h2><span style=\"color: rgb(153,153,153);\">Create an Empty Grid</span></h2><p><span style=\"color: rgb(35,31,32);\">Create the&nbsp;<strong>game.js</strong>&nbsp;file in your&nbsp;<strong>web</strong>&nbsp;directory.</span><br /><span style=\"color: rgb(35,31,32);\">In&nbsp;<strong>game.js</strong>, write&nbsp;<strong>jQuery</strong>&nbsp;code that on page load will</span></p><ul><li><span style=\"color: rgb(35,31,32);\">create an empty grid with numbers across the top and letters on the left side, per the email.</span><ul><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">See&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1458\"><span style=\"color: rgb(51,122,183);\">how to create dynamic HTML pages</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;for example code to generate lists and tables from lists of data.&nbsp;The lists that drive building Salvo grids&nbsp;are the column and row headers.</span><br /><span style=\"color: rgb(35,31,32);\">Initially, just put an&nbsp;empty grid on the page. Style it with CSS so that it has nice borders and square cells. In the subtasks below, you will change your JavaScript code to loop over the data and fill in the cells&nbsp;appropriately. See the&nbsp;<strong>Resources</strong>.</span></p><h2><span style=\"color: rgb(153,153,153);\">Load the correct GamePlayer data</span></h2><p><span style=\"color: rgb(35,31,32);\">Send an&nbsp;<strong>Ajax</strong>&nbsp;request to&nbsp;<strong>/api/game_view/<em>nn</em></strong></span></p><ul><li style=\"list-style-type: none;\"><ul><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">Refer to the&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1439\"><span style=\"color: rgb(51,122,183);\">JavaScript ebook section 'How to Use URL Parameters'</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;and the Stack Overflow&nbsp;</span><a href=\"http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript\"><span style=\"color: rgb(51,122,183);\">example of how to get the value of a URL parameter</span></a><span style=\"color: rgb(35,31,32);\">, e.g., &quot;1&quot; from&nbsp;<strong>?gp=1</strong>).</span></p><ul><li style=\"list-style-type: none;\"><ul><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">Refer to&nbsp;</span><a href=\"http://stackoverflow.com/questions/31321402/how-to-pass-javascript-variables-inside-a-url-ajax\"><span style=\"color: rgb(51,122,183);\">example of how to call a URL that contains a variable</span></a><span style=\"color: rgb(35,31,32);\">, i.e. /api/gp/gamePlayer_Id)&nbsp;The AJAX data can then be passed into the table loop when it is successfully retrieved.</span></p><h2><span style=\"color: rgb(153,153,153);\">Create&nbsp;Conditional Grid Colors</span></h2><p><span style=\"color: rgb(35,31,32);\">Pass&nbsp;the AJAX data to a function that creates&nbsp;conditional grid colors<strong>&nbsp;</strong>for each game grid location and stores the new grid&nbsp;on the web page. See the&nbsp;<strong>Resources</strong>&nbsp;for the JavaScript ebook sections on looping and conditionals. &nbsp;Remember to work in small slices and test after each change!&nbsp;</span></p><ul><li style=\"list-style-type: none;\"><ul><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">You can access specific data from data objects. &nbsp;See the&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=61\"><span style=\"color: rgb(51,122,183);\">JavaScript ebook section on data objects</span></a><span style=\"color: rgb(35,31,32);\">.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>TEST!</strong>&nbsp;Make sure you're seeing the ship locations for each&nbsp;game. They should be located on the grid&nbsp;per the specifications in the email.</span></p><h2><span style=\"color: rgb(153,153,153);\">Show&nbsp;Game&nbsp;and Player info in&nbsp;the Game View</span></h2><p><span style=\"color: rgb(35,31,32);\">In&nbsp;<strong>game.js</strong>, add functions to display information about the game at the top of the game grid web view. It should clearly indicate</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Who is playing this game, and who is viewing this page</span><ul><li><span style=\"color: rgb(35,31,32);\">This could be as simple as&nbsp;<strong><a href=\"mailto:j.bauer@ctu.gov\">j.bauer@ctu.gov</a> (you) vs&nbsp;<a href=\"mailto:c.obrian@ctu.gov\">c.obrian@ctu.gov</a></strong></span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">Use the game player ID in the URL to determine&nbsp;which game player is &quot;the viewer&quot; in the HTML that's generated.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>TEST!</strong>&nbsp;Make sure you see the correct player email with each game grid.</span><br /><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit&nbsp;<strong>game.js</strong>&nbsp;for code view. Select the &quot;code&quot; format and paste in the entire code.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"cff9b38b-a678-485e-84e9-5cb105d7a0e0\"><ac:parameter ac:name=\"title\">Step 4 - Submit your work</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">The objectives of this task were:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Create data tables for ships and ship locations. &nbsp;The key classes / tables are:</span><ul><li><span style=\"color: rgb(35,31,32);\">Ship, which has an ID and the ID of a game player</span></li><li><span style=\"color: rgb(35,31,32);\">Location, which has a ship ID and a grid cell label</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">Link the data tables so that the JSON data for ships and ship locations can be accessed (/rest/gamePlayers/1/ships, /rest/ships, /rest/ships/1/shipLocations, etc).</span></li><li><span style=\"color: rgb(35,31,32);\">Create sample ship and ship location data per email.</span></li><li><span style=\"color: rgb(35,31,32);\">Display where the&nbsp;ships are on a game grid for a specific player and game. &nbsp;</span><ul><li><span style=\"color: rgb(35,31,32);\">the URL&nbsp;<strong>/web/game.html?gp=1</strong>&nbsp;should display the player email&nbsp;and a grid with his ships for game 1.</span></li></ul></li></ul><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />When this is working, send a cleaned zipped archive of your project folder.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "261423414",
    "conflChildrenId": [
      "263913489"
    ]
  },
  {
    "title": "Java - Task 5 Resources",
    "content": "<p><span style=\"color: rgb(35,31,32);\">This task mostly applies concepts you've already seen.</span><br /><span style=\"color: rgb(35,31,32);\">One new technique in Java that is worth learning is using the&nbsp;<strong>Optional&nbsp;</strong>class&nbsp;to simplify the code for getting&nbsp;the first element in a possibly empty list.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Required resources</strong></span></p><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"24b654b6-3206-4915-824c-148acfa70dc8\"><ac:parameter ac:name=\"title\">Java</ac:parameter><ac:rich-text-body><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=47\"><span style=\"color: rgb(51,122,183);\">How to use&nbsp;<strong>Optional</strong>&nbsp;and&nbsp;<strong>findFirst()</strong>&nbsp;to get an element from a possibly empty stream</span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "263716912",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java - Task 6",
    "content": "<h2><span style=\"color: rgb(153,153,153);\">Introduction</span></h2><p><span style=\"color: rgb(35,31,32);\">You've been asked to add the ability for players to log into the game system with a password. This will require</span></p><ul><li><span style=\"color: rgb(35,31,32);\">modifying the player database table to include password information</span></li><li><span style=\"color: rgb(35,31,32);\">adding authentication code to the&nbsp;web server to handle log in and log out</span></li><li><span style=\"color: rgb(35,31,32);\">adding a method to the application controller to create a new player, if valid information is sent</span></li><li><span style=\"color: rgb(35,31,32);\">modifying the main page JavaScript to&nbsp;get and send log in and sign up information to the server</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The team lead has said that a user who is not logged in would be able to see the current games, and can log in or sign up, by given an email field as a user name, and a password.&nbsp;A logged in user would not see those fields and buttons for logging in, but would see a log out button, and more buttons for joining and creating games.</span><br /><span style=\"color: rgb(35,31,32);\">The team lead is recommending doing all this on the&nbsp;<strong>games.html</strong>&nbsp;page.</span></p><h2><span style=\"color: rgb(153,153,153);\">Authentication and Authorization</span></h2><p><span style=\"color: rgb(35,31,32);\">This is your first encounter with creating a secure web service. Security is a large and complex topic, with many new concepts. Spring Boot will do a lot of the hard work for you, but be prepared for a lot of trial and error to&nbsp;set everything up properly.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Two key concepts&nbsp;to keep straight are authentication and authorization.</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong>Authentication</strong>&nbsp;means determining who the user is.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Authorization</strong>&nbsp;means determining what the user is allowed to do.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Both are critical to securing a web application,&nbsp;protecting user data from accidental or malicious tampering or theft.</span><br /><span style=\"color: rgb(35,31,32);\">Authentication happens first. It involves a negotiation between the web browser and the web server. When the browser sends a request for a protected web page, the web server returns a message saying &quot;login required.&quot; This message also says how login needs to happen.</span><br /><span style=\"color: rgb(35,31,32);\">If login succeeds, then the web server knows who the user is. It can then look for&nbsp;<strong>authorization</strong>&nbsp;rules that say what the user is allowed to read&nbsp;and modify. Even if you have logged in successfully, you might still not be authorized to look at the page you requested.</span><br /><span style=\"color: rgb(35,31,32);\">See the entry on authentication and authorization in the&nbsp;<strong>Resources&nbsp;</strong>for more on&nbsp;this large and complex topic of security.</span></p><h2><span style=\"color: rgb(153,153,153);\">Securing Web Pages</span></h2><p><span style=\"color: rgb(35,31,32);\">Much of what you will find on the web is about securing web pages. When the Spring documentation talks about securing an MVC (model view application) system), that's what they are referring to. The idea is that certain pages are protected, i.e., will only be shown to users who are logged in, i.e., authenticated.</span><br /><span style=\"color: rgb(35,31,32);\">When a web browser requests a page that is protected, the server will tell the browser that the user does not have access to that page with an HTTP error response. That response will&nbsp;also tell&nbsp;the browser on what method needs to be used to log a user in. There are many standardized methods, including BASIC authentication, where the browser gets the name and password information, form-based authentication, where the server provides&nbsp;an HTML form to get that information, and token-based authentication methods where a third-party service, e.g., Google or Facebook, handles the login and provides a token, i.e., a long unique string, for the browser to use as a &quot;key&quot; to access your web app.</span><br /><span style=\"color: rgb(35,31,32);\">However login is done,&nbsp;the browser and the server need some way to remember that&nbsp;someone has logged in so that they don't need to log in over and over. The browser normally handles this by storing a small file, called a&nbsp;<strong>cookie</strong>, with some string sent by the server, that is a &quot;key&quot;.&nbsp;When an&nbsp;authenticated user tries to access another protected page, the browser sends that key string along with the page request. If the server sees a valid key, it just returns the requested page without asking for another log in. The browser and server need to expire this permission, so that others can't sit down to a machine&nbsp;that some previous user was on, and access the protected sites the user was at.</span></p><h2><span style=\"color: rgb(153,153,153);\">Securing Web Services</span></h2><p><span style=\"color: rgb(35,31,32);\">Securing&nbsp;a web app that primarily uses&nbsp;AJAX to send JSON back and forth to a web service is a little different than securing typical web pages. Securing&nbsp;web pages typically involves sending HTML pages to the user at various times, e.g.,</span></p><ul><li><span style=\"color: rgb(35,31,32);\">When you try to access a protected resource, you get an HTML form for logging in.</span></li><li><span style=\"color: rgb(35,31,32);\">When you log out, you get an HTML page saying you have logged out.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">A&nbsp;web service just wants to send JSON back and forth. No&nbsp;HTML should be&nbsp;returned. Fortunately, Spring has the methods for changing&nbsp;what gets sent after various authentication events. The links in the&nbsp;<strong>Resources</strong>&nbsp;describe how to call them.</span><br /><span style=\"color: rgb(35,31,32);\">The major new concept in this task is implementing&nbsp;RESTful HTTP requests to&nbsp;create&nbsp;data on the server. This requests should be done through your application controller API, not through your RESTRepositories. The latter&nbsp;would give end users&nbsp;too much access to your data.</span></p><h2><span style=\"color: rgb(153,153,153);\">RESTful Create Requests</span></h2><p><span style=\"color: rgb(35,31,32);\">The action of signing up&nbsp;means creating a new player. Although you could use PUT with your existing REST controller to add a player object, this not a good idea because it doesn't check if someone is trying to create new player using a name already in use</span><br /><span style=\"color: rgb(35,31,32);\">Therefore, you will want to define an application controller method that responds to a POST with user name and password information, and only adds a new player to the repository if the information is valid and doesn't conflict with&nbsp;an existing player.</span><br /><span style=\"color: rgb(35,31,32);\">In REST, all resource creation actions should follow several HTTP standards:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">The HTTP method&nbsp;should be either a PUT or POST, because those are the methods for adding data to a resource.</span></li><li><span style=\"color: rgb(35,31,32);\">The response status code should be 201, which means data was created.</span></li><li><span style=\"color: rgb(35,31,32);\">The response header may&nbsp;optionally include the URL of the new resource.</span></li><li><span style=\"color: rgb(35,31,32);\">The&nbsp;response body, if there is no error, may optionally contain useful information, e.g.,&nbsp;JSON for the new player.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">In addition, there are standard responses that should be sent if an action fails, namely,</span></p><ul><li><span style=\"color: rgb(35,31,32);\">If an authenticated user is required to do an action, but none is logged in,&nbsp;a 401 (<strong>Unauthorized</strong>) response code should be sent.</span></li><li><span style=\"color: rgb(35,31,32);\">If a user is logged in, but does not have the authorization for the action, a 403 (<strong>Forbidden)</strong>&nbsp;response code should be sent.</span></li><li><span style=\"color: rgb(35,31,32);\">If the request is incorrect in some way, e.g., has bad data, a 400 (<strong>Bad request)</strong>&nbsp;response code should be sent.</span><ul><li><span style=\"color: rgb(35,31,32);\">Often the body of the response will be a string or JSON object explaining the specific problem.</span></li></ul></li></ul><h2><span style=\"color: rgb(153,153,153);\">Response&nbsp;Entities</span></h2><p><span style=\"color: rgb(35,31,32);\">In Spring, the way to write a method that&nbsp;return a specific HTTP response code is to return a&nbsp;<strong>ResponseEntity</strong>. A response entity contains&nbsp;an HTTP status code, and optionally some Java object that is the&nbsp;body of the response, such as a JSON object with more information, e.g.,</span><br /><span style=\"color: rgb(35,31,32);\">{ &quot;status&quot;: &quot;error&quot;, &quot;reason&quot;: &quot;...some text giving the reason for the error&quot; }</span><br /><span style=\"color: rgb(35,31,32);\">It's good practice to always return JSON, if you're going to return it sometimes, because&nbsp;empty response can break the jQuery JSON parser.</span><br /><span style=\"color: rgb(35,31,32);\">When you write a controller method that returns a JSON object, it is really returning a response entity with a 200 (<strong>OK</strong>)&nbsp;code.</span><br /><span style=\"color: rgb(35,31,32);\">See the&nbsp;<strong>Resources</strong>&nbsp;for information&nbsp;on response entities&nbsp;and how to create them in a controller.</span>&nbsp;</p><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"560f4225-6f65-4ca7-8ab0-fc7635da6fd5\"><ac:parameter ac:name=\"title\">Step 1 - Modify Player to support login</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">You already have a class that can represent users:&nbsp;<strong>Player</strong>. Two things needed to be added to make players usable for authentication.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">There needs to be a way to retrieve player data, given a player's name.</span></li><li><span style=\"color: rgb(35,31,32);\">There needs to be a password attached to each player. &nbsp;</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Both of these are fairly easy to add.</span></p><ol><li><span style=\"color: rgb(35,31,32);\">Add a&nbsp;<strong>findByUserName()</strong>&nbsp;method to the&nbsp;<strong>PlayerRepository</strong>&nbsp;class, if not already present.</span><ol><li><span style=\"color: rgb(35,31,32);\">You just need to declare it in the repository class. Spring will write the code for you!&nbsp;</span></li></ol></li><li><span style=\"color: rgb(35,31,32);\">Add a private String&nbsp;<strong>password</strong>&nbsp;field to&nbsp;the&nbsp;<strong>Player</strong>&nbsp;class, and the associated&nbsp;<strong>getPassword</strong>,&nbsp;<strong>setPassword</strong>&nbsp;methods.</span></li><li><span style=\"color: rgb(35,31,32);\">Change your&nbsp;<strong>Application</strong>&nbsp;code that creates sample players to include the passwords for each one.</span><ol><li><span style=\"color: rgb(35,31,32);\">See the example testbed document for what these passwords should be.</span></li></ol></li></ol><p><span style=\"color: rgb(35,31,32);\">To create&nbsp;<strong>findByUserName()</strong>, see&nbsp;the entry on repository query methods in the&nbsp;<strong>Resources</strong>.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"917aa5e2-8db1-4ec4-b3f1-8c5077fd7a2b\"><ac:parameter ac:name=\"title\">Step 2 - Add the Spring security library to the project</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Adding security to a project is easy. As soon as you do it, everything is protected. The&nbsp;tricky&nbsp;part is configuring the security rules to make the right things public again.</span><br /><span style=\"color: rgb(35,31,32);\">You just need to add a single line to your&nbsp;<strong>build.gradle</strong>&nbsp;file to include the Spring Boot security framework. As always, when you change&nbsp;<strong>build.gradle</strong>, you need to&nbsp;re-synchronize&nbsp;your IDEA project with Gradle. See the entry on authentication and authorization, and the entry on re-syncing IDEA with Gradle, in the&nbsp;<strong>Resources</strong>.</span><br /><span style=\"color: rgb(35,31,32);\">As soon as you add the security library, your app will be locked down. For safety, Spring assumes everything should be protected until you say otherwise. That way, you don't accidentally leave an opening for a hacker.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong></span><br /><span style=\"color: rgb(35,31,32);\">If you run your server now and try to access any page or REST URL, you should&nbsp;get an access violation.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">The next step will add code to make some URLs public and others available to authenticated users.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"4d7e9947-0b1f-4128-9231-334796f7b106\"><ac:parameter ac:name=\"title\">Step 3 - Configuring user access</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">This is the most complicated step in the task. Expect to take a fair amount of time looking at examples, reading about the concepts, and debugging mistakes in configuration.</span><br /><span style=\"color: rgb(35,31,32);\">Spring has a lot of code to manage the authentication process. It will catch an attempt to access a protected URL and signal an exception. It provides code to authenticate a user if and only if the name and password provided matches what is required. It provides code to implement someone logging out.</span><br /><span style=\"color: rgb(35,31,32);\">What you have to do is provide Spring with the information it needs to do these tasks, i.e.,</span></p><ul><li><span style=\"color: rgb(35,31,32);\">What user names are there?</span></li><li><span style=\"color: rgb(35,31,32);\">What password goes with each name?</span></li><li><span style=\"color: rgb(35,31,32);\">What kinds of users are there, e.g., guests, normal users, admin super users.</span></li><li><span style=\"color: rgb(35,31,32);\">What method should the browser use to get name and password?</span></li></ul><p><span style=\"color: rgb(35,31,32);\">In Spring, this is done by adding two special subclasses&nbsp;in your&nbsp;<strong>Application</strong>&nbsp;class file:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">One class provides the code that Spring should run to get a user's password and roles, e.g.,&nbsp;<strong>user</strong>&nbsp;or&nbsp;<strong>admin</strong>,&nbsp;given their user name.</span></li><li><span style=\"color: rgb(35,31,32);\">The other class specifies&nbsp;which URLs are public, what method the browser should use to get name and password, and whether&nbsp;authentication communication should use HTML or just HTTP success/failure response codes</span></li></ul><h2><span style=\"color: rgb(153,153,153);\">Configure Names and Passwords</span></h2><p><span style=\"color: rgb(35,31,32);\">In your case, a user's password and roles are stored in&nbsp;the&nbsp;<strong>Player</strong>&nbsp;repository. To give&nbsp;Spring a method&nbsp;to get&nbsp;that information, you create a subclass of&nbsp;<strong>GlobalAuthenticationConfigurerAdapter</strong>&nbsp;for your application, e.g.,&nbsp;</span><br />@SpringBootApplication<br />public class Application extends SpringBootServletInitializer {<br />...<br />} <br class=\"atl-forced-newline\" />@Configuration<br />class WebSecurityConfiguration extends GlobalAuthenticationConfigurerAdapter {<br />...<br />}</p><ol><li><span style=\"color: rgb(35,31,32);\">This class definition should appear after and completely outside of the definition of the&nbsp;<strong>Application</strong>&nbsp;class.</span></li><li><span style=\"color: rgb(35,31,32);\">It should not be&nbsp;<strong>public</strong>.&nbsp;Java lets you define&nbsp;multiple classes in one file, but only one class can be&nbsp;<strong>public</strong>.</span></li><li><span style=\"color: rgb(35,31,32);\">The annotation&nbsp;<strong>@Configuration&nbsp;</strong>tells Spring to create&nbsp;an instance of this class automatically. It can then be found and used by the security framework.</span></li></ol><p><span style=\"color: rgb(35,31,32);\">Within this class, you define a method that returns a&nbsp;<strong>UserDetailsService</strong>&nbsp;class with a&nbsp;<strong>loadUserByUsername(<em>name</em>)</strong>&nbsp;method. You define that method to get the player with the name&nbsp;<strong><em>name</em></strong>, if any, and return a&nbsp;<strong>UserDetails</strong>&nbsp;object with the player's name and password. Spring can then use that object to see if the right name and password have been sent for login.&nbsp;See the entries on authentication and authorization in the&nbsp;<strong>Resources&nbsp;</strong>&nbsp;for example code.</span></p><h2><span style=\"color: rgb(153,153,153);\">Enable URL Access to Authenticated Users</span></h2><p><span style=\"color: rgb(35,31,32);\">Having defined how to authenticate users, you now have to tell Spring who is authorized to see what. You do this by creating a subclass of&nbsp;<strong>WebSecurityConfigurerAdapter</strong>&nbsp;to your application. Add it as another non-public class in&nbsp;<strong>Application.java</strong>, similar to what&nbsp;you did above. In this new class, the rules for what is public, how information is sent, and so on, is specified in the definition of the&nbsp;<strong>configure()</strong>&nbsp;method.</span><br />@EnableWebSecurity<br />@Configuration<br />class WebSecurityConfig extends WebSecurityConfigurerAdapter { <br class=\"atl-forced-newline\" />@Override<br />protected void configure(HttpSecurity http) throws Exception {<br />...<br />}<br />}<br /><span style=\"color: rgb(35,31,32);\">Again, this should be non-<strong>public</strong>&nbsp;class&nbsp;with the annotation&nbsp;<strong>@Configuration</strong>.</span><br /><span style=\"color: rgb(35,31,32);\">In this class, you define one method,&nbsp;<strong>configure()</strong>. In that method, you write the rules describing</span></p><ul><li><span style=\"color: rgb(35,31,32);\">how&nbsp;the browser should&nbsp;get the user name and password&nbsp;to send the web application</span></li><li><span style=\"color: rgb(35,31,32);\">the patterns of URLs that are and are not accessible to different types of users</span><ul><li><span style=\"color: rgb(35,31,32);\">Note that your team lead wants&nbsp;<strong>/api/login</strong>&nbsp;and&nbsp;<strong>/api/logout</strong>&nbsp;for the login and logout endpoints</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">Don't forget to override the default settings that send HTML forms when unauthenticated access happens and when someone logs in or out. See the&nbsp;<strong>Resources</strong>&nbsp;for example code. Be sure to follow the example for web services. You want Spring to just sent HTTP success and response codes, no HTML pages.</span></p><h2><span style=\"color: rgb(153,153,153);\"><strong>Test!</strong></span></h2><p><span style=\"color: rgb(35,31,32);\">First, test that you get an 401 access error if you try to access any URL other than the ones you've listed as public in your&nbsp;<strong>configure()</strong>&nbsp;method.</span><br /><span style=\"color: rgb(35,31,32);\">Test that you can access, without error, the URLs you have configured as public. Check the console log to make sure that when you reload&nbsp;<strong>games.html</strong>, you do not see any failures loading files, such as&nbsp;stylesheets, JavaScript, or images.</span><br /><span style=\"color: rgb(35,31,32);\">Now, test to see log in is working, using the&nbsp;JavaScript console&nbsp;to execute jQuery&nbsp;<strong>post()</strong>&nbsp;to whatever&nbsp;login URL you specified.</span><br /><span style=\"color: rgb(35,31,32);\">First, try an invalid name and password, e.g.,&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">$.post(&quot;/api/login&quot;, { username: &quot;j.bauer@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;, password: &quot;123&quot; }).done(function() { console.log(&quot;logged in!&quot;); })</span><br /><span style=\"color: rgb(35,31,32);\">You should see a 401 error.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Now try the same line but with a valid name and password.</span><br /><span style=\"color: rgb(35,31,32);\">You should see the logged in message. If so, you should now be able in the browser window to access&nbsp;the protected URLs without error.</span><br /><span style=\"color: rgb(35,31,32);\">Then test logging out.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">$.post(&quot;/api/logout&quot;).done(function() { console.log(&quot;logged out&quot;); })</span><br /><span style=\"color: rgb(35,31,32);\">You should see the logged out message. If so, you should now once more get errors if you try to&nbsp;access&nbsp;the protected URLs.</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit the code for your two web security configuration classes, using the &quot;code&quot; format.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"919de4e6-1066-4d66-81ee-4a8de28770e4\"><ac:parameter ac:name=\"title\">Step 4 - Add current user information to the JSON games object</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Now it's time to make your application send the current user information, when there is an authenticated user.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">You need to add code to&nbsp;your application controller&nbsp;methods to get&nbsp;the current&nbsp;authenticated user, if any. &nbsp;See the&nbsp;<strong>Resources</strong>&nbsp;for links to example code that gets such information from an&nbsp;<strong>Authentication</strong>&nbsp;object.</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />You're going to be adding code that needs&nbsp;the current user in many methods in your controller. Don't repeat yourself (DRY) Define a private method that takes an&nbsp;<strong>Authentication</strong>&nbsp;object and returns the&nbsp;<strong>Player</strong>&nbsp;object that has the user name in the Authentication object. It should return null if no one is logged in, or if whoever is logged in is not a player (this may not be possible, but it's good to check for it.)&nbsp;<br /><span style=\"color: rgb(35,31,32);\">In particular, change your application controller code&nbsp;that currently returns the JSON for the list of all games&nbsp;to return instead an object like this</span><br /><span style=\"color: rgb(35,31,32);\">{ &quot;player&quot;: { &quot;id&quot;:&nbsp;<em>nn</em>, &quot;name&quot;:&nbsp;<em>username</em> }, &quot;games&quot;: [ ... ] }</span><br /><span style=\"color: rgb(35,31,32);\">The&nbsp;<strong>games</strong>&nbsp;key will have the list of games you were returning before.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">The&nbsp;<strong>player</strong>&nbsp;key will have a JSON object with information about the current user, if there is one. If there is not, you can decide whether to omit the&nbsp;<strong>player</strong>&nbsp;key entirely, or use the value&nbsp;<strong>null</strong>.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Be sure to not include the player's password in the information sent back!</span><br /><span style=\"color: rgb(35,31,32);\">I.e., the JSON for a list of games might&nbsp;look something like this&nbsp;if player 3 is logged in</span><br /><span style=\"color: rgb(35,31,32);\">{ &quot;player&quot;: { &quot;id&quot;: 3, &quot;name&quot;: &quot;kim_bauer@<a href=\"http://gmail.com\">gmail.com</a>&quot; }, &quot;games&quot;: [ ... ] }</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Test!&nbsp;</strong>&nbsp;Enter the URL&nbsp;<strong>/api/games</strong>&nbsp;and verify that you see the correct player information when you are logged in, and no player information when you are not.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"0a6572f4-d45f-49e3-848b-60a66c58bb92\"><ac:parameter ac:name=\"title\">Step 5 - Add a create player method to the application controller</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">The security code will take care of login and logout, but you have to add a method that&nbsp;responds to a request to create a new player.</span><br /><span style=\"color: rgb(35,31,32);\">Define such a method in your application controller. It should take two request parameters: the username and the password.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Your team lead wants the URL endpoint to be&nbsp;<strong>/api/players</strong>.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The method needs to see if there is an existing player with the same name. If so, the method needs to return a&nbsp;<strong>ResponseEntity</strong>&nbsp;with the 403&nbsp;<strong>Forbidden</strong>&nbsp;HTTP status code. It should also include a JSON object describing the reason, e.g.,&nbsp;{ &quot;error&quot;: &quot;Name in use&quot; }.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">If there is no problem, the method should save the new Player in the repository, and return a&nbsp;<strong>ResponseEntity</strong>&nbsp;with the&nbsp;201 code and a JSON object with the player's name. Do NOT send back the password! Applications should avoid transmitting passwords.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test</span></h2><p><span style=\"color: rgb(35,31,32);\">In your web browser, in the JavaScript console, trying posting a new user. First, try creating a player the same name as an existing player</span><br /><span style=\"color: rgb(35,31,32);\">$.post(&quot;/api/players&quot;, { username: &quot;j.bauer@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;, password: &quot;1234&quot; })</span><br /><span style=\"color: rgb(35,31,32);\">Verify that you get the correct error response.</span><br /><span style=\"color: rgb(35,31,32);\">Then try creating a new player, e.g.,</span><br /><span style=\"color: rgb(35,31,32);\">$.post(&quot;/api/players&quot;, { username: &quot;newbie@<a href=\"http://aol.com\">aol.com</a>&quot;, password: &quot;1234&quot; })</span><br /><span style=\"color: rgb(35,31,32);\">You should get a 201 response and the JSON with the player name.</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit the Java code for your method that creates a new player. Use the &quot;code&quot; format.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"00127615-c2fc-44ed-8323-990f183338c3\"><ac:parameter ac:name=\"title\">Step 6 - Update the games pin for login and signup</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(153,153,153);\">Add logging in</span></h2><p><span style=\"color: rgb(35,31,32);\">Add an HTML form to your&nbsp;<strong>games.html</strong>&nbsp;page for login and signup. The form should have &nbsp;fields for name and password and a&nbsp;<strong>login</strong>&nbsp;button.</span><br /><span style=\"color: rgb(35,31,32);\">In your JavaScript, attach a function to the login&nbsp;button to post the data to your login URL, using AJAX.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Be sure to add code to reject invalid&nbsp;fields.</span></li><li><span style=\"color: rgb(35,31,32);\">If login is successful,&nbsp;reload the&nbsp;page.</span></li><li><span style=\"color: rgb(35,31,32);\">If login fails, display a helpful alert.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Update&nbsp;your HTML and JavaScript to show the current user's name if there is a non-null value for&nbsp;<strong>player</strong>&nbsp;in the game data.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Test!&nbsp;</strong>After logging in with a valid name and password, you&nbsp;should see the player's name. The name should remain if you reload the page.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Add logging out</span></h2><p><span style=\"color: rgb(35,31,32);\">Add another form with just one button,&nbsp;<strong>logout</strong>. Attach a JavaScript function to it to post to your logout URL, using AJAX. If successful, reload the page.</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />Using a separate form will make it easy to hide and show the appropriate controls after login and logout.</p><h2><span style=\"color: rgb(153,153,153);\">Add conditional&nbsp;HTML</span></h2><p><span style=\"color: rgb(35,31,32);\">Add JavaScript so that the login form appears only when there is no user logged in, and the logout form appears&nbsp;only when there is a user logged in.</span><br /><span style=\"color: rgb(35,31,32);\">If you are using jQuery,&nbsp;use conditionals&nbsp;to test the JSON for a player and create different HTML.&nbsp; If you are using Vue, use&nbsp;<strong>v-if</strong>&nbsp;and&nbsp;<strong>v-else</strong>&nbsp;in your HTML.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Test!&nbsp;</strong>Make sure the appropriate data and forms appear when you log in and log out, and refresh the page.</span></p><h2><span style=\"color: rgb(153,153,153);\">Add signing up</span></h2><p><span style=\"color: rgb(35,31,32);\">Add a&nbsp;<strong>signup&nbsp;</strong>button&nbsp;to your login form. No new fields should be needed.</span><br /><span style=\"color: rgb(35,31,32);\">Add JavaScript code so that when you enter a user name and password and click the signup button, the potential new player information is POSTed&nbsp;to the URL you defined for your create player method.</span><br /><span style=\"color: rgb(35,31,32);\">If the POST is successful, the&nbsp;JavaScript code should then&nbsp;POST the same data to the login URL, to automatically log the new user in. If that succeeds, reload the page.&nbsp; If either step&nbsp;fails,&nbsp;show a helpful alert.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Try signing up with an existing user. Verify that an alert appears rejecting this signup. It doesn't matter what the password is.</span><br /><span style=\"color: rgb(35,31,32);\">Then try a new user name and password. Verify that you are logged in as that user.</span><br /><span style=\"color: rgb(35,31,32);\">Log out and trying logging in again as that user. Verify that this works.</span></p><h2><span style=\"color: rgb(153,153,153);\">Add logging out to the game page</span></h2><p><span style=\"color: rgb(35,31,32);\">Finally, add just the logout form to your page for playing a game. &nbsp;(It doesn't make sense to add a login form here, since you can't see a game page unless you are logged in.)</span><br /><span style=\"color: rgb(35,31,32);\">In your JavaScript&nbsp;code for this button, the&nbsp;<strong>done()</strong>&nbsp;method should&nbsp;send the browser back to&nbsp;<strong>games.html</strong>&nbsp;page when a user successfully logs out.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Test!</strong>&nbsp;Log in, enter a URL for an active game, and click the logout button.</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit the JavaScript code that does login, logout, and signup, using the &quot;code&quot; format. The HTML form code is not required, but if you send it, put it first, clearly&nbsp;labeled.&nbsp;</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"0699f3c3-0913-440e-9f5d-38df9efb2ebd\"><ac:parameter ac:name=\"title\">Step 7 - Submit your work</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\">Send your&nbsp;zipped project folder per the instructions in the 'Submit Your Work' Tab.&nbsp;</span></p></ac:rich-text-body></ac:structured-macro><p><br /></p>",
    "conflPageId": "263716926",
    "conflChildrenId": [
      "263913587"
    ]
  },
  {
    "title": "Java - Task 7 Resources",
    "content": "<p><span style=\"color: rgb(35,31,32);\">A brief guide to the Resource subsections:</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Spring and JPA:</strong>&nbsp;How to return&nbsp;HTTP responses when something goes wrong, e.g., a user is not authorized to see certain data, or a game has no room for another player</span><br /><span style=\"color: rgb(35,31,32);\"><strong>JavaScript:&nbsp;</strong>how to send the browser to another URL using JavaScript</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Java</strong>:&nbsp;how to create instances</span></p><p><span style=\"color: rgb(35,31,32);\"><strong>Required resources</strong></span> </p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"92eb207b-55f3-47e5-9999-26e57d5fc2b6\"><ac:parameter ac:name=\"title\">Spring and JPA</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(153,153,153);\">Response Entities</span></h2><p><span style=\"color: rgb(35,31,32);\">A&nbsp;<strong>response</strong>&nbsp;in HTTP is more than just HTML or JSON. A response has a status code, e.g.,&nbsp;<strong>200</strong>&nbsp;for a&nbsp;successful GET,&nbsp;<strong>404</strong>&nbsp;for page not found, and so on. A response also has a number of&nbsp;<strong>headers</strong>, each of which is a key and value, e.g.,&nbsp;&quot;Last-Modified: Wed, 15 Nov 1995 04:58:08 GMT&quot;. The HTML, CSS, JSON, etc. are found in the body or&nbsp;<strong>content</strong>&nbsp;of the response.</span><br /><span style=\"color: rgb(35,31,32);\">For most controller methods, you just need to say what content to return and Spring will construct the appropriate&nbsp;<strong>response entity</strong>&nbsp;for you. But if you need to send some special response, e.g., an error response when some application-level rule is violated, then you need to create the&nbsp;response entity yourself.</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1442\"><span style=\"color: rgb(51,122,183);\">Response entities</span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"d0a3e889-46dd-47f1-84cd-6f06c1d5d9c4\"><ac:parameter ac:name=\"title\">JavaScript</ac:parameter><ac:rich-text-body><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1461\"><span style=\"color: rgb(51,122,183);\">How to change browser locations in JavaScript</span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"94fc202b-4bcf-4354-a9f7-f5865fc906ad\"><ac:parameter ac:name=\"title\">Java</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">You'll need to create instances of a ResponseEntity.&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=34\"><span style=\"color: rgb(51,122,183);\">Here is a link to the instances section of the ebook.</span></a></p></ac:rich-text-body></ac:structured-macro><p><br /></p>",
    "conflPageId": "263716931",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java - Task 9",
    "content": "<h2><span style=\"color: rgb(153,153,153);\">Introduction</span></h2><p><span style=\"color: rgb(35,31,32);\">You been asked to implement the user story &quot;As a player&nbsp;in&nbsp;a game, I can submit a salvo of shots.&quot; The back-end data repository code already supports&nbsp;storing salvos&nbsp;for a game player. What you need to add is:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">HTML and JavaScript on the front-end to collect and send a salvo&nbsp;to the server.</span></li><li><span style=\"color: rgb(35,31,32);\">A controller method to receive this request and call the appropriate repository methods.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The user interface for this is a lot simpler than for placing ships. Simply clicking on squares in the shot grid should work. You should allow the user to unselect squares, until they are satisfied with their salvo.</span><br /><span style=\"color: rgb(35,31,32);\">The one extra bit is tracking the turn. This should be done on the server side. If it's turn #4, you don't want a player to be able to change history by constructing and submitting a new salvo for turn #3.</span><br /><span style=\"color: rgb(35,31,32);\">For now, you just need a fixed turn on the server. For example, if the test data for a game has 2 salvos from each player, then it's turn #3.&nbsp;Incrementing the&nbsp;turn counter on the server will happen in a later task when game play logic is implemented.</span> </p><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"0427ff06-a5d3-4d9b-b1a9-71c5e172f9bb\"><ac:parameter ac:name=\"title\">Step 1 - Implement a controller method to store salvos</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">The request should return a failure response, of the appropriate type,&nbsp;if the user is not logged is, or is not the game player the ID refers to.</span><br /><span style=\"color: rgb(35,31,32);\">Implement a back-end controller method that can receive a salvo object, consisting of a turn and a list of&nbsp;locations.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">The URL should be&nbsp;<strong>/games/players/{gamePlayerId}/salvos</strong>.</span></li><li><span style=\"color: rgb(35,31,32);\">The body of the request should be parsed into a&nbsp;<strong>Salvo</strong>&nbsp;object</span></li><li><span style=\"color: rgb(35,31,32);\">An&nbsp;<strong>Unauthorized</strong>&nbsp;response should be sent if</span><ul><li><span style=\"color: rgb(35,31,32);\">there is no current user logged in, or</span></li><li><span style=\"color: rgb(35,31,32);\">there is no game player with the given ID, or</span></li><li><span style=\"color: rgb(35,31,32);\">the current user is not the game player the ID references</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">A&nbsp;<strong>Forbidden</strong>&nbsp;response should be sent if the user already has submitted a salvo for the turn&nbsp;listed.</span></li><li><span style=\"color: rgb(35,31,32);\">Otherwise, the salvo&nbsp;should be added to the game player and saved, and a&nbsp;<strong>Created</strong>&nbsp;response should be sent.</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"7dd881d5-c8e7-46ca-a974-04fc676b58af\"><ac:parameter ac:name=\"title\">Step 2 - Implement the user interface to create and send a salvo</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">This should be relatively straightforward, similar to but simpler than the ship interface.</span><br /><span style=\"color: rgb(35,31,32);\">A player should be able to click squares on and off in the salvo grid to construct a salvo to submit. There's just a few constraints:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">The player can't select more than allowed number of shots.</span></li><li><span style=\"color: rgb(35,31,32);\">Squares previous fired on should not be selectable.</span></li><li><span style=\"color: rgb(35,31,32);\">If somehow the user submits a salvo but is not logged in, or is logged in a different user than the URL says, the request should fail.</span></li></ul><p><span style=\"color: rgb(35,31,32);\"><strong>TEST!&nbsp;</strong>Verify that the salvo is saved, under the correct turn and the display is updated correctly when new JSON is retrieved. Keep the console log and watch for error messages.</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit your JavaScript and Java code for sending a salvo to the server, in that order, clearly labeled, using the &quot;code&quot; format. Only include the&nbsp;HTML and JavaScript for selecting salvo locations if you would like comments on that code as well.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"8822d794-c58e-4a21-aebc-88ecfdbbba83\"><ac:parameter ac:name=\"title\">Step 3 - Submit your work</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\">Send your&nbsp;zipped project folder per the instructions in the 'Submit Your Work' Tab.</span></p></ac:rich-text-body></ac:structured-macro><p><br /></p>",
    "conflPageId": "263716938",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java - Task 10",
    "content": "<h2><span style=\"color: rgb(153,153,153);\">Introduction</span></h2><p><span style=\"color: rgb(35,31,32);\">You've been asked to implement the user story &quot;As a player in&nbsp;a game, I can find out when I hit or sink my opponent's ships.&quot; To do this requires:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Implementing logic on the back-end&nbsp;to calculate for each turn what ships have been hit and/or sunk&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">Including this information in JSON form in each player's view of the game</span></li><li><span style=\"color: rgb(35,31,32);\">Displaying this information on the front-end interface</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The main challenge in this task is calculating hits and sinks.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">In any given turn, the number of&nbsp;<strong>hits&nbsp;</strong>on a&nbsp;ship for a game player is equal to the number of locations the ship has in common with the&nbsp;salvo by the opponent in that turn.</span></li><li><span style=\"color: rgb(35,31,32);\">A ship has been&nbsp;<strong>sunk</strong>&nbsp;in a turn if all of its locations have been hit in this or some earlier&nbsp;turn.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">This task involves writing code to loop&nbsp;over a number of different ranges:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Looping over locations in ships and salvos to find hits in a turn.</span></li><li><span style=\"color: rgb(35,31,32);\">Looping over location in ships and turns to see if a ship has been sunk.</span></li><li><span style=\"color: rgb(35,31,32);\">Looping over players to calculate the hits and sinks&nbsp;for each player.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Implementing this code will give you a lot of practice on loops inside loops.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Nested Loops with Java Streams</span></h2><p><span style=\"color: rgb(35,31,32);\">Learning to write clean efficient readable&nbsp;loops is a core&nbsp;coding skill.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">In classical C, C++, and Java programs, looping was typically&nbsp;done with a&nbsp;<strong>numeric for&nbsp;</strong>&nbsp;loop, e.g.,&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">for (int i = 0; i &lt; 100; ++i) { ... }</span><br /><span style=\"color: rgb(35,31,32);\">Most of the loops in this application, and in many applications, are over various lists of data.&nbsp;This is common in data-intensive code. &nbsp;Other examples might be &quot;for every employee in every department in every branch ...&quot; and &quot;for every item in every order from every customer ...&quot;</span><br /><span style=\"color: rgb(35,31,32);\">These can be done with numeric&nbsp;<strong>for</strong>&nbsp;loops, e.g.,&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">for (int i = 0; i &lt; items.size(); ++i) { ...do something with item i... }</span><br /><span style=\"color: rgb(35,31,32);\">But such loops are&nbsp;more&nbsp;verbose than necessary. For that reason, Java 8&nbsp;added&nbsp;<strong>streams</strong>&nbsp;to make it easier to do the most common operations on collections of objects:</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong>mapping:&nbsp;</strong>apply a function to every object and make a list of results</span><ul><li><span style=\"color: rgb(35,31,32);\">e.g., take a list of numbers and return a list of those numbers squared</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\"><strong>filtering:&nbsp;</strong>apply a function&nbsp;to every object and save those for which the function returns&nbsp;true</span><ul><li><span style=\"color: rgb(35,31,32);\">e.g., take a list of numbers and return a list of the odd numbers</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\"><strong>aggregating:&nbsp;</strong>apply a function to every object and return an accumulated result</span><ul><li><span style=\"color: rgb(35,31,32);\">e.g., add up a list of a list of numbers</span></li><li><span style=\"color: rgb(35,31,32);\">e.g., count how long a list is</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\"><strong>searching:&nbsp;</strong>apply a function to every object and return the function one for which the function returns true</span><ul><li><span style=\"color: rgb(35,31,32);\">e.g., take a list of numbers and return the first odd one</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\"><strong>testing:&nbsp;</strong>return true if a function returns&nbsp;true for every object in the list</span><ul><li><span style=\"color: rgb(35,31,32);\">e.g., return true if every number in a list is odd</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">Combination of these operations usually take care of most common operations on lists of data. The&nbsp;<strong>streams</strong>&nbsp;framework make combining these operations very simple.&nbsp;See the entry on streams in the&nbsp;<strong>Resources</strong>&nbsp;for more details.</span> </p><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"4aac7bf4-077a-4edd-bf70-07529bd1c98e\"><ac:parameter ac:name=\"title\">Step 1 - Implement back-end code to calculate and return how many ships are afloat</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">You don't need any new public methods in your application controller. Instead, you need to expand the game view object you send to each player to include JSON with a history of hits and sinks. Even though every player gets JSON with all the salvos &ndash; that's public knowledge &ndash; they don't have information about the opponents ships.</span><br /><span style=\"color: rgb(35,31,32);\">What needs to be in the history of hits and sinks is basically what you see in the sample table in the email:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">for each turn</span><ul><li><span style=\"color: rgb(35,31,32);\">a list of number of&nbsp;<em>new<strong>&nbsp;</strong></em>hits and sinks for the player, including the types of ships involved</span></li><li><span style=\"color: rgb(35,31,32);\">a similar list for the opponent</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">One way to approach this is from the front-end backward:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">First design a JSON object for sample data.</span></li><li><span style=\"color: rgb(35,31,32);\">Write test JavaScript code to create the HTML table you want for that data.</span></li><li><span style=\"color: rgb(35,31,32);\">Modify your JSON to make&nbsp;the JavaScript loops simpler, as necessary.</span></li><li><span style=\"color: rgb(35,31,32);\">Do not put display-specific information in the JSON.</span><ul><li><span style=\"color: rgb(35,31,32);\">No HTML or CSS style information.</span></li><li><span style=\"color: rgb(35,31,32);\">Don't worry about sorting. Let the JavaScript sort by turn as fits your interface.</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">When you have JSON you like, then develop a private method&nbsp;in your application controller to build a&nbsp;<strong>Map</strong>&nbsp;from the history of salvos and ship information that matches the JSON.</span><br /><span style=\"color: rgb(35,31,32);\">This will probably be the hardest code you have to write in this task. You need to think carefully about the logic for deciding what new hits&nbsp;are caused by each salvo in each turn, and what new ships have been sunk.</span><br /><span style=\"color: rgb(35,31,32);\">When that method seems to be working, add a line in your code to build your game view&nbsp;<strong>Map&nbsp;</strong>to include a key with this history map as the value.&nbsp;</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />Be careful not to include any objects with circular references. Create safe data transfer objects for everything.<br /><span style=\"color: rgb(35,31,32);\">There are no Spring concepts here, just basic JavaScript and Java methods, loops, and calculation. Because there are so many loops, but they do fairly simple things, like counting, Java collection streams can lead to fairly clean maintainable code.</span><br /><span style=\"color: rgb(35,31,32);\">Testing is especially critical here.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit all of the Java code you added to calculate and send to the browser&nbsp;what ships remain. Clearly label what file or files each section of code is in.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"cfd84b20-9571-459c-a5bb-a926b251abe8\"><ac:parameter ac:name=\"title\">Step 2 - Implement the user interface to show the state of the game</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">This step should be fairly easy if you have already written the JavaScript to generate the HTML table for the game history:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">You want to add some place in your HTML to display the history table.</span></li><li><span style=\"color: rgb(35,31,32);\">You want to add code in your JavaScript to&nbsp;fill in this table.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">&nbsp;<strong>Test!</strong>&nbsp;The sample testbed has several games in different states. Some are over, some are in progress, some have not yet begun. Be sure your&nbsp;<strong>game.html</strong>&nbsp;page works for all of them, for all players in the games.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"758c6145-6a9c-4210-9e52-ea5458b79f30\"><ac:parameter ac:name=\"title\">Step 3 - Submit your work</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\">Send your&nbsp;zipped project folder per the instructions in the 'Submit Your Work' Tab.</span></p></ac:rich-text-body></ac:structured-macro><p><span style=\"color: rgb(35,31,32);\">&nbsp;</span></p>",
    "conflPageId": "263716943",
    "conflChildrenId": [
      "263913620"
    ]
  },
  {
    "title": "Java - Task 11",
    "content": "<h2><span style=\"color: rgb(153,153,153);\">Introduction</span></h2><p><span style=\"color: rgb(35,31,32);\">You been asked to implement the use story &quot;As a player in&nbsp;a game, I can play a complete game...&quot; &nbsp;This will require implementing</span></p><ul><li><span style=\"color: rgb(35,31,32);\">back-end code to determine and send the current state of the game for each player to the front-end in JSON, e.g., &quot;waiting for your salvo&quot; versus &quot;waiting for the other player&quot; versus &quot;game is over&quot;</span></li><li><span style=\"color: rgb(35,31,32);\">back-end code to update the scores database when a game is over</span></li><li><span style=\"color: rgb(35,31,32);\">front-end code to display the appropriate controls and results</span></li><li><span style=\"color: rgb(35,31,32);\">front-end code to handle those times&nbsp;when the player has to wait until other players finish their actions</span></li></ul><p><span style=\"color: rgb(35,31,32);\">You've already done one of the most complicated parts of the back-end: figuring out how many ships each player still has. With this, it's pretty easy to tell when the game is over. The remaining coding to be done is to calculate and return a JSON snapshot of the game such that the JavaScript in the client can correctly determine which of the states applies. Be careful not reveal information in the JSON that a player should not have. A&nbsp;game player should never get JSON showing the opponent's ships, nor should they get the other&nbsp;player's salvo until they've sent&nbsp;their own salvo.</span><br /><span style=\"color: rgb(35,31,32);\">The front-end needs to correctly interpret the JSON and show only those controls that make sense. I.e.,</span></p><ul><li><span style=\"color: rgb(35,31,32);\">until ships are placed, there should be no controls to fire salvos</span></li><li><span style=\"color: rgb(35,31,32);\">after salvos start, there should be no controls to place ships</span></li><li><span style=\"color: rgb(35,31,32);\">after the player has sent a salvo, but the other player has not, there should be no controls to fire another salvo</span></li><li><span style=\"color: rgb(35,31,32);\">after the game is over, there should be no controls for ships or salvos</span></li></ul><h2><span style=\"color: rgb(153,153,153);\">REST versus RPC</span></h2><p><span style=\"color: rgb(35,31,32);\">A common pitfall when implementing an interactive system, like a game, is viewing the task as similar to calling methods in code or sending messages back and forth. For example, you might implement the application so that the front-end sends a salvo and the controller sends back what happened, e.g.,&nbsp; &quot;you just hit his patrol boat, the opponent just sank your battleship.&quot;&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">In web services, this approach is known as&nbsp;<strong>remote procedure calls</strong>&nbsp;or&nbsp;<strong>RPC</strong>. For a while, RPC was a very common approach, with standard frameworks to support it, such as&nbsp;<strong>XML-RPC</strong>&nbsp;and&nbsp;<strong>SOAP</strong>&nbsp;(Simple Object Access Protocol).</span><br /><span style=\"color: rgb(35,31,32);\">It was this approach that Roy Fielding criticized in his doctoral dissertation on REST. The world-wide web, he noted, was able to scale up with very little change from&nbsp;100s of documents on a few dozen servers &nbsp;to millions upon millions of documents on thousands of servers. This happened because the web's model was based not on procedure calls and return values, but on document resources and&nbsp;stateless interactions. Stateless means that a server can handle a&nbsp;request knowing just the information in the request and the document(s) that request references. Neither the server nor the client need to remember any other history of&nbsp;previous requests.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">So, a RESTful approach to a game is&nbsp;to have the back-end always return a JSON document that simply describes the current and complete state of game. For example, consider&nbsp;an online chess game. All you really need is where the pieces currently are on the board. How they got there doesn't matter. You can however keep a transcript of moves as part of the snapshot, if desired for review, but it's not necessary for game play.</span><br /><span style=\"color: rgb(35,31,32);\">Any actions that change the state of the game are submitted as POST or PUT requests. Following HTTP standards, the server tells the client if the request succeeded or failed. Either way, the client then can request&nbsp;an&nbsp;updated snapshot of the game. A&nbsp;player can refreshes the page one or many times, can bookmark the URL, exit the browser,&nbsp;come back later, and so on.&nbsp;The URL for the game always works to retrieve the current state of the game.</span><br /><span style=\"color: rgb(35,31,32);\">The main thing that you have to ensure is that the JSON for a game sent to the browser has all the information&nbsp;needed&nbsp;to show the right messages.&nbsp;Can the browser JavaScript determine unambiguously each of the states the game might&nbsp;be in, based solely on the JSON it is given. It should not need any other locally kept values, e.g, it should not need to know what it last sent to the server.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Polling the server</span></h2><p><span style=\"color: rgb(35,31,32);\">As noted in the email, some times the player has to wait for someone else to do something. If one player has sent a salvo, but the other has not, the&nbsp;first player has to wait for the other player.&nbsp;The snapshot for a game with a missing salvo has to display &quot;waiting for other player.&quot; But how will the first player know when the other player is done?</span><br /><span style=\"color: rgb(35,31,32);\">You could have the first player periodically refresh the page. This is safe, in a RESTful system, because getting a URL has no side effects on the server. It is however tedious for the player.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">The better approach is to have the web page take care of refreshing the data. JavaScript has two methods for calling some code periodically:&nbsp;<strong>setTimeout()</strong>&nbsp;and&nbsp;<strong>setInterval()</strong>. &nbsp;<strong>setTimeout()</strong>&nbsp;lets you&nbsp;do something after waiting N seconds.&nbsp;<strong>setInterval()</strong>&nbsp;lets you do something every N seconds. In any given context, one will usually make more sense than the other. See the&nbsp;<strong>Resources</strong>&nbsp;for more.</span> </p><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"450c1172-78f9-409c-9471-102533b83e24\"><ac:parameter ac:name=\"title\">Step 1 - Implement back-end game state management</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">REST forces a clean separation between getting a resource, and updating resources. This makes some design decisions fairly clear.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Your code to add ships and salvos should be pretty much done. The one thing you should&nbsp;add&nbsp;code for in the controller is rejecting&nbsp;updates that are illegal, e.g., trying to</span></p><ul><li><span style=\"color: rgb(35,31,32);\">place ships if they've already been placed</span></li><li><span style=\"color: rgb(35,31,32);\">fire more than one salvo in a turn</span></li><li><span style=\"color: rgb(35,31,32);\">fire a salvo after the game is over</span></li><li><span style=\"color: rgb(35,31,32);\">do anything in a game if you're not logged in as the appropriate player</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Otherwise, your main focus will&nbsp;be on returning JSON to a game player describing the state and history of the game. The JSON needs to</span></p><ul><li><span style=\"color: rgb(35,31,32);\">be complete enough for the browser code to be able to show the correct controls and messages</span><ul><li><span style=\"color: rgb(35,31,32);\">This includes being able to tell which hits and sinks happened in which&nbsp;turns.&nbsp;</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">not reveal any information about the opponent other than where they're fired in previous turns, and what hits and sinks they've suffered</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The JSON sent should include</span></p><ul><li><span style=\"color: rgb(35,31,32);\">the state of the game, as defined in the game state diagram in the email</span></li><li><span style=\"color: rgb(35,31,32);\">for each player how many ships they have left, but no location&nbsp;information about the opponent's ships</span></li><li><span style=\"color: rgb(35,31,32);\">what happened (sinks and hits) in each turn so far</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Think carefully about the logic for deciding what&nbsp;state the game is in. Here are some example situations that your code might get confused about:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">It confuses&nbsp;&quot;the&nbsp;<strong>enter ship</strong>&nbsp;state with&nbsp;no ships placed by anyone&quot; with&nbsp;&quot;the&nbsp;<strong>game over&nbsp;</strong>state where&nbsp;all ships have been sunk&quot;.</span></li><li><span style=\"color: rgb(35,31,32);\">It confuses&nbsp;&quot;the&nbsp;<strong>wait</strong>&nbsp;state for turn #2, where you&nbsp;sent two&nbsp;salvos&quot; with&nbsp;&quot;the&nbsp;<strong>enter salvo</strong>&nbsp;state for turn #3,&nbsp;where you&nbsp;sent two salvos&quot;.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Try to avoid sending redundant information. Don't send values&nbsp;that&nbsp;can be calculated from other information already in the JSON. That runs the risk of calculating and sending inconsistent information.</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit all the Java code you wrote in this step to manage and send to players the state of the game. Clearly label what file or files each section of code is in.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"a16e956f-4430-4037-8e7e-dcce0080e324\"><ac:parameter ac:name=\"title\">Step 2 - Implement state-aware front-end game display</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">The first and simplest thing to do is to have your front-end user interface&nbsp;hide the salvo grid until the player has submitted a set of ship placements.</span><br /><span style=\"color: rgb(35,31,32);\">As soon as they do that, the ship placement controls should be gone, and the salvo grid and controls can appear.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">it's OK if a player&nbsp;wants to submit a&nbsp;first salvo, even though the other player has not placed ships, or another player has not even joined yet.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">After&nbsp;a player places their ships or submits a salvo for a turn, one of two displays&nbsp;can appear:</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong>Wait for other player</strong>: The other player has not submitted a salvo: the display shows the salvo grid with&nbsp;the player's new salvo, but the salvo controls should be missing or disabled, and there should be some text or icon for &quot;waiting for other player to fire salvo.&quot;</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>Enter salvo</strong>: The other player has already submitted a salvo: the display shows the updated salvo grid, controls, and text describing the hits and sinks for all players for this turn.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Which display to show should be easily determined in the browser by the state information in the JSON.</span><br /><span style=\"color: rgb(35,31,32);\">To have the display change automatically&nbsp;from&nbsp;<strong>Wait for other player</strong>&nbsp;to&nbsp;<strong>Enter salvo</strong>&nbsp;after the other player finally takes action, you will need to add JavaScript timer code to check periodically if the game server has received the other player's salvo. See the&nbsp;<strong>Resources</strong>&nbsp;for how to do this in JavaScript.</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit the JavaScript code you wrote manage game play, from placing ships, to firing salvos, to showing game end. Submit HTML code only if you think it's necessary, or you want feedback on it.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"592d2069-bae3-4793-bbd5-39389234ccf1\"><ac:parameter ac:name=\"title\">Step 3 - Submit your work</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\">Send your&nbsp;zipped project folder per the instructions in the 'Submit Your Work' Tab.</span></p></ac:rich-text-body></ac:structured-macro><p><span style=\"color: rgb(35,31,32);\">&nbsp;</span></p>",
    "conflPageId": "263716948",
    "conflChildrenId": [
      "263913626"
    ]
  },
  {
    "title": "Java - Task 3 Resources",
    "content": "<p><span style=\"color: rgb(35,31,32);\">Here's a brief guide to the Resource subsections:</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Java:</strong>&nbsp;a few concepts to review, including a reminder on how to create lists of data.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Spring and JPA:</strong>&nbsp;How to get data sent from a&nbsp;browser,&nbsp;and how to use&nbsp;<strong>@ElementCollection</strong>&nbsp;for adding simple lists to JPA entities</span><br /><span style=\"color: rgb(35,31,32);\"><strong>JavaScript</strong>: how to access information in the URL of the current web page, and how to send data to the server</span> <br class=\"atl-forced-newline\" /><br class=\"atl-forced-newline\" /></p><p><strong style=\"\">Required resources</strong></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"a0311880-7dc0-416b-b80c-1999dc7ec14f\"><ac:parameter ac:name=\"title\">Java</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">At this point, you should be at least up to the section on&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=47\"><span style=\"color: rgb(51,122,183);\">Java streams</span></a><span style=\"color: rgb(35,31,32);\">&nbsp; in&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=29\"><span style=\"color: rgb(51,122,183);\">Java concepts eBook</span></a><span style=\"color: rgb(35,31,32);\">. &nbsp;As your application controller sends more and more collections of data to the client, streams and maps will play an increasingly important role in your code.</span><br /><span style=\"color: rgb(35,31,32);\">To create lists of data for testing, pay particular attention to</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=42&amp;anchor=arrays-to-lists\"><span style=\"color: rgb(51,122,183);\">Converting arrays to lists</span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"e65c239d-0479-4f3c-9c11-76397756e85b\"><ac:parameter ac:name=\"title\">Spring and JPA</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">The biggest&nbsp;new Spring concept you want to learn is how Jackson, the library that turns your maps into JSON to send to the client, can be used in the other direction to turn JSON into Java classes in your controller&nbsp;</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1445\"><span style=\"color: rgb(51,122,183);\">Sending data to the Application</span></a><span style=\"color: rgb(35,31,32);\">&nbsp; &ndash; this covers all the normal ways to send data from a web page to a server, including path variables and sending JSON objects</span></li></ul><p><span style=\"color: rgb(35,31,32);\">A very&nbsp;useful annotation in JPA is&nbsp;<strong>@ElementCollection</strong>, for adding lists of simple values, such as numbers and strings, to an entity.</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=33&amp;anchor=one-to-many-basic\"><span style=\"color: rgb(51,122,183);\">One to many relationships for simple data using @ElementCollection</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;in the Spring eBook</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"1b43bb1e-9e30-4266-8e50-4c85bac84813\"><ac:parameter ac:name=\"title\">JavaScript</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">The new JavaScript tasks&nbsp;you have&nbsp;before you are</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Getting the ID of a game from the URL so you can ask for that data from the server</span></li><li><span style=\"color: rgb(35,31,32);\">Using AJAX to&nbsp;send JSON from the web page to a server</span></li><li><span style=\"color: rgb(35,31,32);\">Generating fairly complicated HTML from a complex JSON object&nbsp;</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Here are the relevant sections of the eBook:</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1171\"><span style=\"color: rgb(51,122,183);\">how to make AJAX calls</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- both GET and POST are covered</span></li><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1439\"><span style=\"color: rgb(51,122,183);\">How to Use URL Parameters</span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><strong style=\"\">Optional resources</strong></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"63171114-b226-4c38-b8a7-c8f41a9333fe\"><ac:parameter ac:name=\"title\">JavaScript</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Some examples you might want to look at for the JavaScript tasks, if the eBook is not enough:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Stack Overflow&nbsp;</span><a href=\"http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript\"><span style=\"color: rgb(51,122,183);\">How to get the value of a URL parameter</span></a></li><li><span style=\"color: rgb(35,31,32);\">Stack Overflow&nbsp;</span><a href=\"http://stackoverflow.com/questions/31321402/how-to-pass-javascript-variables-inside-a-url-ajax\"><span style=\"color: rgb(51,122,183);\">How to do AJAX call with a URL variable</span></a></li></ul></ac:rich-text-body></ac:structured-macro><p><br /></p><p><br /></p><p><br /></p><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "263913489",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java - Task 4",
    "content": "<h2><span style=\"color: rgb(153,153,153);\">Introduction</span></h2><p><span style=\"color: rgb(35,31,32);\">You've been asked to implement two&nbsp;stories involving salvoes:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">&quot;As a player in a game, I can see all the shots I've fired, so I can pick other places&nbsp;to shoot.&quot;</span></li><li><span style=\"color: rgb(35,31,32);\">&quot;As a player in a game, I can see all the hits on my ships.&quot;</span></li></ul><p><span style=\"color: rgb(35,31,32);\">You also need to implement a user interface for these stories, both using simple grids showing the locations of shots fired.</span><br /><span style=\"color: rgb(35,31,32);\">Implementing these stories means implementing</span></p><ul><li><span style=\"color: rgb(35,31,32);\">JPA code and database tables for salvoes&nbsp;and salvo&nbsp;locations</span></li><li><span style=\"color: rgb(35,31,32);\">Java code&nbsp;for a game player to return&nbsp;the salvoes&nbsp;a game player has fired</span></li><li><span style=\"color: rgb(35,31,32);\">application controller code&nbsp;to include salvo data in the&nbsp;JSON for the player's view of the game&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">web page code to display the salvo&nbsp;data in a&nbsp;grid</span></li></ul><p><span style=\"color: rgb(35,31,32);\">This is another opportunity to apply and become fluent with the database and looping concepts from the previous task.</span></p><h2><span style=\"color: rgb(153,153,153);\">Shots vs Ships</span></h2><p><span style=\"color: rgb(35,31,32);\">Like ships, salvoes are associated with a game player and several locations, e.g., H3, H4, and H5. Unlike ships, the locations in a salvo do not have to be adjacent, and there is no restriction on different salvoes referencing the same locations.</span><br /><span style=\"color: rgb(35,31,32);\">More importantly, salvoes are also associated with a&nbsp;<strong>turn</strong>, i.e., there will be a salvo in turn 1 for player 1, a salvo in turn 1 for player 2, a salvo in turn 2 for player 1, and so on.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Like ships, salvoes can be implemented with a&nbsp;<strong>one-to-many</strong>&nbsp;relationship using&nbsp;two tables: salvoes&nbsp;and salvo&nbsp;locations. Salvo&nbsp;locations are simple strings, just like ship locations, so an&nbsp;<strong>@ElementCollection</strong>&nbsp;annotation can be used to link a salvo to its locations.</span></p><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"ed420352-f663-491b-b0d1-a4b8e38b535d\"><ac:parameter ac:name=\"title\">Step 1 - Create a Salvo REST Repository</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">As with implementing ships&nbsp;and shipLocations, implementing salvoes requires implementing&nbsp;two Java classes.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Implement the&nbsp;<strong>Salvo</strong>&nbsp;class.&nbsp;A salvo object just needs to have a unique ID, so it can be referred to&nbsp;elsewhere; a gamePlayer ID; a turn number; and a list of locations.</span></li><li><span style=\"color: rgb(35,31,32);\">Implement the&nbsp;<strong>SalvoRepository</strong>&nbsp;class. This manages the creation and retrieval of salvoes from the database.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">You also need to add code to&nbsp;<strong>GamePlayer</strong>&nbsp;so that&nbsp;<em>gamePlayer</em><strong>.getSalvoes()</strong>&nbsp;returns a list of the salvo objects, describing the salvo the gamePlayer has fired.</span></p><h2><span style=\"color: rgb(153,153,153);\">Define the Java Classes</span></h2><p><span style=\"color: rgb(35,31,32);\">Repeat the process you did with&nbsp;<strong>Ship</strong>&nbsp;to create&nbsp;<strong>Salvo&nbsp;</strong>and&nbsp;<strong>SalvoRepository</strong>. &nbsp;Define the classes for&nbsp;<strong>Salvo&nbsp;</strong>and&nbsp;<strong>SalvoRepository</strong>&nbsp;following the examples in&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=33\"><span style=\"color: rgb(51,122,183);\">the eBook on Spring databases and JPA</span></a><span style=\"color: rgb(35,31,32);\">.&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">In Intellij IDEA, use&nbsp;<strong>File | New ... | Java Class</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Name the class&nbsp;<strong>Salvo</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Edit the generated Java code as appropriate to define&nbsp;<strong>Salvo</strong></span></li><li><span style=\"color: rgb(35,31,32);\">Repeat by making a new class for&nbsp;<strong>SalvoRepository</strong></span><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1166\"><span style=\"color: rgb(51,122,183);\">Make the repository a&nbsp;RestRepository</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;so that you can use your browser to view the stored data in the testing below.&nbsp;</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">A salvo object needs data fields for</span></p><ul><li><span style=\"color: rgb(35,31,32);\">A database-generated ID, as with&nbsp;<strong>Ship</strong></span></li><li><span style=\"color: rgb(35,31,32);\">A&nbsp;<strong>GamePlayer</strong></span></li><li><span style=\"color: rgb(35,31,32);\">A turn number</span></li><li><span style=\"color: rgb(35,31,32);\">A list of locations</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Because&nbsp;<strong>GamePlayer</strong>&nbsp;is a&nbsp;reference to an object stored in another data table, you need to add JPA annotations to tell JPA how to connect the tables together. &nbsp;One game player has many salvoes, so follow the&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=33\"><span style=\"color: rgb(51,122,183);\">example of one-to-many relationships</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;to connect the&nbsp;<strong>GamePlayer</strong>&nbsp;and&nbsp;<strong>Salvo</strong>tables.</span><br /><span style=\"color: rgb(35,31,32);\">The locations can be handled the same way they were handled with ships.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test Your Syntax</span></h2><p><span style=\"color: rgb(35,31,32);\">Run the Gradle&nbsp;<strong>build</strong>&nbsp;task to make sure your code is syntactically correct, &nbsp;all necessary classes and methods are defined, and all necessary library code is imported.</span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />If&nbsp;<strong>build</strong>&nbsp;fails, it's because of a compiler error. Look at&nbsp;<em>the&nbsp;<span style=\"text-decoration: underline;\">first</span>&nbsp;few error messages</em>. Fix those and&nbsp;<strong>build</strong>&nbsp;again. The first&nbsp;syntax&nbsp;error&nbsp;can cause many error messages, so just focus on fixing the first few errors, and any you see that are obvious, like a misspelled name.</p><h2><span style=\"color: rgb(153,153,153);\">Create the Sample Data</span></h2><p><span style=\"color: rgb(35,31,32);\">Change your&nbsp;<strong>CommandLineRunner</strong>&nbsp;in your application class to create salvoes.<strong>&nbsp;</strong></span></p><ul><li><span style=\"color: rgb(35,31,32);\">Create several salvoes for several turns&nbsp;for several players in several games.&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">Use the example ship data given in the testbed database document attached to the email in Task 1.</span></li><li><span style=\"color: rgb(35,31,32);\">Save the entities in the appropriate repositories.</span></li></ul><h2><span style=\"color: rgb(153,153,153);\">Test by Browsing the JSON &nbsp;</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>Run the Gradle task&nbsp;bootRun.</strong></span><br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />If&nbsp;<strong>bootRun</strong>&nbsp;fails with a compiler error, check for and fix the first few errors as above, then try again.<br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />If the&nbsp;last line of the&nbsp;<strong>bootrun</strong>&nbsp;output is not &quot;Started Application in ... seconds ...&quot;&nbsp;then&nbsp;<strong>bootRun</strong>&nbsp;failed to start the web service.&nbsp;&nbsp;Look at&nbsp;<em>the last error message&nbsp;</em>in the output window.&nbsp;When runtime errors happen, the last message will often be&nbsp;the&nbsp;<strong>root</strong>&nbsp;cause of the error.<br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />One common root cause is that another bootRun service is still active. If the&nbsp;<strong>Run | Stop</strong>&nbsp;menu item is available, that's the problem. Stop the previous run, close the extraneous bootRun output tab, and run again.<br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />Another common cause of a&nbsp;<strong>bootRun</strong>&nbsp;failure is a problem creating or saving the test data. &nbsp;Look for root cause error messages about an unknown data column, or an&nbsp;entity that can't be saved because it contains another unsaved entity. Fix your code appropriately.<br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Check the&nbsp;<strong>RestRepository</strong>&nbsp;URLs to see if the stored data is correct and complete</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong><a class=\"external-link\" href=\"http://localhost:8080/rest/gamePlayers/1\" rel=\"nofollow\">http://localhost:8080/rest/gamePlayers/1</a></strong>&nbsp;should show&nbsp;a list of salvoes for game player 1, for example</span></li><li><span style=\"color: rgb(35,31,32);\"><strong><a class=\"external-link\" href=\"http://localhost:8080/rest/salvoes\" rel=\"nofollow\">http://localhost:8080/rest/salvoes</a></strong>&nbsp;should show a list of all salvoes in all games</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Note that Spring JPA knows that the plural of&nbsp;<strong>salvo&nbsp;</strong>is&nbsp;<strong>salvoes</strong>.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"77037ce7-1118-4376-b307-08ac1221ae6f\"><ac:parameter ac:name=\"title\">Step 2 - Update the Controller</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">We need to update our game controller again.</span><br /><span style=\"color: rgb(35,31,32);\">Specifically, you want the game view that is returned to now include&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">all the salvoes fired by both players in the game</span></li><li><span style=\"color: rgb(35,31,32);\">with enough detail to know who fired each salvo in what turn</span></li><li><span style=\"color: rgb(35,31,32);\">in JSON that is easy to convert to HTML</span></li><li><span style=\"color: rgb(35,31,32);\">requiring just&nbsp;one HTTP call</span></li></ul><p><span style=\"color: rgb(35,31,32);\">This should&nbsp;not require any new request mappings. Instead, the existing code to&nbsp;construct&nbsp;a game view needs to be expanded to include salvo information.&nbsp;That will probably require some new&nbsp;<strong>private</strong>&nbsp;methods, to keep your code readable.</span><br /><span style=\"color: rgb(35,31,32);\">When the new game view data is being returned, you'll be ready to create the web page and JavaScript to get that JSON data and display it in HTML.</span></p><h2><span style=\"color: rgb(153,153,153);\">Extend the game view data transfer object</span></h2><p><span style=\"color: rgb(35,31,32);\">Your current code creates a view of the game using a&nbsp;<strong>Map</strong>&nbsp;with a key&nbsp;for the players,&nbsp;and a key for the ships the game player has.</span><br /><span style=\"color: rgb(35,31,32);\">Now you want to add another key to this map for the salvoes. The value will be some list or map that contains all the&nbsp;salvoes for both players in this game.</span><br /><span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;created&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1456438201629</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;gamePlayers&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">...</span> <span style=\"color: rgb(153,153,153);\">}</span> <br /><span style=\"color: rgb(153,153,153);\">],</span><br /><span style=\"color: rgb(102,153,0);\">&quot;ships&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">...</span> <span style=\"color: rgb(153,153,153);\">],</span><br /><span style=\"color: rgb(102,153,0);\">&quot;salvoes&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">...</span><br /><span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(35,31,32);\">Salvo data is a bit more complicated than ship data. The ship data was for just one player, but the salvo data is for all players, for multiple turns. The user interface is going to need all that information to display the salvoes on the correct grids with the correct turn labels.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">The best way to decide how to organize the&nbsp;data transfer object is to first figure out what JSON would be simplest to write JavaScript code for in the front-end. For example, here's the same small set of salvo data, organized three different ways.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\"><strong>A flat list:&nbsp;</strong></span><br /><span style=\"color: rgb(153,153,153);\">[</span><br /><span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;turn&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;1&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;player&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;23&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;locations&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;H1&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;A2&quot;</span><span style=\"color: rgb(153,153,153);\">]</span> <span style=\"color: rgb(153,153,153);\">},</span><br /><span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;turn&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;1&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;player&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;54&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;locations&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;C5&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;E6&quot;</span><span style=\"color: rgb(153,153,153);\">]</span> <span style=\"color: rgb(153,153,153);\">},</span><br /><span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;turn&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;2&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;player&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;23&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;locations&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;B4&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;D8&quot;</span><span style=\"color: rgb(153,153,153);\">]</span> <span style=\"color: rgb(153,153,153);\">},</span><br /><span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;turn&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;2&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;player&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;54&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;locations&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;A7&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;F1&quot;</span><span style=\"color: rgb(153,153,153);\">]</span> <span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(35,31,32);\"><strong>An object, with turns as keys, and within each turn, an object with player IDs as keys:</strong></span><br /><span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;1&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;23&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;H1&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;A2&quot;</span><span style=\"color: rgb(153,153,153);\">],</span> <span style=\"color: rgb(102,153,0);\">&quot;54&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;C5&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;E6&quot;</span><span style=\"color: rgb(153,153,153);\">]</span> <span style=\"color: rgb(153,153,153);\">},</span><br /><span style=\"color: rgb(102,153,0);\">&quot;2&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;23&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;B4&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;D8&quot;</span><span style=\"color: rgb(153,153,153);\">],</span> <span style=\"color: rgb(102,153,0);\">&quot;54&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;A7&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;F1&quot;</span><span style=\"color: rgb(153,153,153);\">]</span> <span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(35,31,32);\"><strong>An object with&nbsp;player IDs as keys, and within each player, an object with turns as keys:</strong></span><br /><span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;23&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;1&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;H1&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;A2&quot;</span><span style=\"color: rgb(153,153,153);\">],</span> <span style=\"color: rgb(102,153,0);\">&quot;2&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;B4&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;D8&quot;</span><span style=\"color: rgb(153,153,153);\">]</span> <span style=\"color: rgb(153,153,153);\">},</span><br /><span style=\"color: rgb(102,153,0);\">&quot;54&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;1&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;C5&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;E6&quot;</span><span style=\"color: rgb(153,153,153);\">],</span> <span style=\"color: rgb(102,153,0);\">&quot;2&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;A7&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;F1&quot;</span><span style=\"color: rgb(153,153,153);\">]</span> <span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(35,31,32);\">All of these representations are complete. The only question is which one is most convenient to write code for?</span><br /><span style=\"color: rgb(35,31,32);\">Try writing the JavaScript loops&nbsp;to display the salvoes in the ship grid and salvo grid. Which of these three forms makes that code simplest for you? Is there another organization&nbsp;that works even better?</span><br /><span style=\"color: rgb(35,31,32);\">Once you decide on your JSON, it's easy to write Java code to create the equivalents lists and maps.&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">When you need a JSON object, i.e.,&nbsp;{ key: value, key, value ... }, you create a&nbsp;<strong>Map</strong>.</span></li><li><span style=\"color: rgb(35,31,32);\">When you need a JSON array, you create a&nbsp;<strong>List</strong>.</span></li></ul><h2><span style=\"color: rgb(153,153,153);\">Test in your browser&nbsp;</span></h2><p><span style=\"color: rgb(35,31,32);\"><strong>bootRun</strong>&nbsp;your application. Enter the URL for your game view,&nbsp;<strong><a class=\"external-link\" href=\"http://localhost:8080/api/game_view/\" rel=\"nofollow\">http://localhost:8080/api/game_view/</a><em>nn</em></strong><em>&nbsp;</em>for some game player ID&nbsp;<strong><em>nn</em></strong>.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Does the JSON for the game view of the salvoes look correct and complete?</span></li><li><span style=\"color: rgb(35,31,32);\">Is there any unnecessary information or information game player&nbsp;<strong><em>nn</em></strong><em>&nbsp;</em>should not be allowed to see?</span></li></ul><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit your controller code. Use the &quot;code&quot; format.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"ce940d61-84bb-4a00-8c11-01a20ee28b41\"><ac:parameter ac:name=\"title\">Step 3 - Create the salvo web view</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Because you've been inspecting the JSON in your browser, you should be reasonably confident your data is stored correctly.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Now it's time to present this data on a web page for a player's salvoes in a specific game, as well as the opponent salvoes that hit the gamePlayers ships. As given in the email, the format is simple for now: just a grid with the locations of the salvoes marked on the grid and an updated ship grid marked with hits made by the opponent gamePlayer. That data is in the JSON.</span></p><h2><span style=\"color: rgb(153,153,153);\">Create an empty salvo&nbsp;grid</span></h2><p><span style=\"color: rgb(35,31,32);\">In&nbsp;<strong>game.html</strong>&nbsp;and&nbsp;<strong>game.js</strong>,&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Add the code necessary to&nbsp;create a new&nbsp;empty grid, for salvoes fired by the player.</span><ul><li><span style=\"color: rgb(35,31,32);\">As with the ship grid, JavaScript should create the rows, columns, and labels.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">Make sure&nbsp;the HTML&nbsp;clearly labels which is&nbsp;the ship grid and which is the salvo grid.</span></li><li><span style=\"color: rgb(35,31,32);\">Update your CSS if necessary so that salvo grid is styled correctly.</span></li></ul><p><span style=\"color: rgb(35,31,32);\"><strong>Test</strong>: Verify that the salvo grid appears next to the ship grid, properly labeled, but empty.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Put the player's&nbsp;salvoes on the&nbsp;salvo grid</span></h2><p><span style=\"color: rgb(35,31,32);\">Change the&nbsp;code that draws the salvo grid to&nbsp;indicate which cells have appeared in a salvo fired by the player.&nbsp;</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Initially, get it to work so that a grid cell is either empty or colored to show a salvo has been fired on it.</span><ul><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">If you've followed&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1458\"><span style=\"color: rgb(51,122,183);\">the example coding pattern for generating the grid as an HTML table</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;(<em>Example: Rendering JSON Data in an HTML Table</em>&nbsp;section), then this work will occur&nbsp;inside the function that returns the HTML for an individual cell. You'll need a conditional that asks &quot;is this cell in some salvo fired by an opponent?&quot; Define one or more subfunctions to organize this code in a clear way.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">When your code&nbsp;works, extend&nbsp;it so that the grid cell also shows&nbsp;the turn when that cell was fired on.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">See the&nbsp;<strong>Resources</strong>&nbsp;for the JavaScript ebook sections on looping, conditionals, and dynamic HTML. &nbsp;Remember to work in small slices and test after each change!&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Test in the browser</span></h2><p><span style=\"color: rgb(35,31,32);\">Enter the URL&nbsp;<strong><a class=\"external-link\" href=\"http://localhost:8080/web/game.html?gp=\" rel=\"nofollow\">http://localhost:8080/web/game.html?gp=</a><em>nn</em></strong>&nbsp;for some game player&nbsp;<strong><em>nn</em></strong>.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\"><strong>TEST!</strong>&nbsp;Make sure you're seeing the salvo locations that the gamePlayer has shot at their opponent. They should be located on the salvo grid&nbsp;per the specifications in the email.</span></p><h2><span style=\"color: rgb(153,153,153);\">Add Salvo 'Hits' to the Ship Grid&nbsp;</span></h2><p><span style=\"color: rgb(35,31,32);\">In&nbsp;<strong>game.js</strong>, change the function&nbsp;that draws the&nbsp;ship grid to indicate which ship locations&nbsp;have been hit by a salvo fired by the opponent. There are three possible grid cell situations. The cell is</span></p><ul><li><span style=\"color: rgb(35,31,32);\">empty</span></li><li><span style=\"color: rgb(35,31,32);\">contains a ship location that's been hit</span></li><li><span style=\"color: rgb(35,31,32);\">contains a ship location that has not been hit</span></li></ul><p><span style=\"color: rgb(35,31,32);\"><strong>TEST!</strong>&nbsp;Make sure you see the correct 'hits' on the ship grid made by the opponent per the sample data.</span><br /><span style=\"color: rgb(35,31,32);\">When this is working, change the code so that a &quot;hit&quot; cell&nbsp;shows&nbsp;what turn that hit occurred in.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>TEST!</strong>&nbsp;Make sure you see the correct turn numbers on the salvo and ship grid.</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit your game.html and game.js code. Use the &quot;code&quot; format. Put the HTML code first, then the JavaScript, with lines labelling the source file for each section.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"98a6fee8-0c61-49cb-8c71-594cbc1b2c6f\"><ac:parameter ac:name=\"title\">Step 4 - Submit your work</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">The objectives of this task were:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Create data tables for salvoes and salvo locations. &nbsp;The key classes / tables are:</span><ul><li><span style=\"color: rgb(35,31,32);\">Salvo, which has an ID, a turn number, and the ID of a game player</span></li><li><span style=\"color: rgb(35,31,32);\">SalvoLocation, which has a salvo ID and a grid cell label</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">Link the data tables so that the JSON data for salvoes and salvo locations can be accessed (/rest/gamePlayers/1/salvoes, /rest/salvoes, /rest/salvoes/1/salvoLocations, etc).</span></li><li><span style=\"color: rgb(35,31,32);\">Create sample salvo and salvo location data per email.</span></li><li><span style=\"color: rgb(35,31,32);\">Display where the&nbsp;salvoes are on game gridsfor a specific player and game.</span><ul><li><span style=\"color: rgb(35,31,32);\">one grid for the player with his ships marked with opponent hits</span></li><li><span style=\"color: rgb(35,31,32);\">one grid for shots fired at the opponent &nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">the URL&nbsp;<strong>/web/game.html?gp=1</strong>&nbsp;should display the player email&nbsp;and grids for game 1.</span></li></ul></li></ul><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\">When this is working, send a zipped archive of your project folder. Don't forget to run the&nbsp;<strong>clean</strong>&nbsp;task first.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "263913528",
    "conflChildrenId": [
      "263913551"
    ]
  },
  {
    "title": "Java - Task 4 Resources",
    "content": "<p><span style=\"color: rgb(35,31,32);\">Things are starting to calm down! No major new concepts are needed in this task.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>JavaScript</strong>: It might be useful to revisit how conditionals and comparisons work in JavaScript, because your web page loops are getting pretty complicated now!</span> </p><p><strong><span style=\"color: rgb(35,31,32);\">Required resources</span></strong></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"04688edb-e007-4a6b-995f-7e7f5560e952\"><ac:parameter ac:name=\"title\">JavaScript</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Your conditionals for the grids with salvos are getting more complicated. It may help to review&nbsp;</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1062\"><span style=\"color: rgb(51,122,183);\">How to do looping and conditional in JavaScript</span></a></li></ul></ac:rich-text-body></ac:structured-macro><p><br /></p>",
    "conflPageId": "263913551",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java - Task 5",
    "content": "<h2><span style=\"color: rgb(153,153,153);\">Introduction</span></h2><p><span style=\"color: rgb(35,31,32);\">You've been asked to implement scores and a leaderboard:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">&quot;As a player, I can see the&nbsp;number of wins, losses, and ties for all players.&quot;</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Implementing this story means implementing</span></p><ul><li><span style=\"color: rgb(35,31,32);\">a database table with the score for each game player and when the game was finished</span></li><li><span style=\"color: rgb(35,31,32);\">changing the controller to include scores in the list of games data from Task 2</span></li><li><span style=\"color: rgb(35,31,32);\">changing&nbsp;<strong>games.html&nbsp;</strong>to&nbsp;display the leaderboard</span></li></ul><p><span style=\"color: rgb(35,31,32);\">This is another opportunity to apply and become fluent with the database and looping concepts from the previous task.</span><br /><span style=\"color: rgb(35,31,32);\">Notice that this task needs to work with both&nbsp;<strong>players</strong>&nbsp;and&nbsp;<strong>game players</strong>. A game player in a game gets a score, but if the score were saved in the database that way, then to make the leaderboard,&nbsp;your code would have to get all the game players&mdash;which means all the games and players&mdash;just to get a list of scores.</span></p><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"bb547812-8779-4a89-904f-aa89b7ba16e4\"><ac:parameter ac:name=\"title\">Step 1 - Create a Score REST Repository</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(153,153,153);\">Define the Java Classes</span></h2><p><span style=\"color: rgb(35,31,32);\">Given your experience creating classes and repositories,&nbsp;the&nbsp;<strong>data schema diagram</strong>&nbsp;in the email should be enough for you to create a&nbsp;<strong>Score</strong>class and repository, and link it correctly to game players.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Define the classes by&nbsp;following the examples in&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=33\"><span style=\"color: rgb(51,122,183);\">the eBook on Spring databases and JPA</span></a><span style=\"color: rgb(35,31,32);\">. &nbsp;</span></li><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1166\"><span style=\"color: rgb(51,122,183);\">Make the repository a&nbsp;RestRepository</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;so that you can use your browser to view the stored data while&nbsp;testing.</span></li><li><span style=\"color: rgb(35,31,32);\">Refer to the&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=33\"><span style=\"color: rgb(51,122,183);\">table relationship examples</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;to connect the tables.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The relationship between games, players, and scores is just like the relationship between games, players, and game players, so use that as your model for defining and updating classes.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test Your Syntax</span></h2><p><span style=\"color: rgb(35,31,32);\">Run the Gradle&nbsp;<strong>build</strong>&nbsp;task to make sure your code is syntactically correct, &nbsp;all necessary classes and methods are defined, and all necessary library code is imported.</span></p><h2><span style=\"color: rgb(153,153,153);\">Create the Sample Data</span></h2><p><span style=\"color: rgb(35,31,32);\">Change the&nbsp;<strong>CommandLineRunner</strong>&nbsp;in your application class to store scores for game players.<strong>&nbsp;</strong></span></p><ul><li><span style=\"color: rgb(35,31,32);\">Use the example ship data given in the testbed database document attached to the email in Task 1.</span></li><li><span style=\"color: rgb(35,31,32);\">Save the entities in the appropriate repositories.</span></li></ul><h2><span style=\"color: rgb(153,153,153);\">Test by Browsing the JSON &nbsp;</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>Run the Gradle task&nbsp;bootRun.</strong></span><br /><span style=\"color: rgb(35,31,32);\">Check the&nbsp;<strong>RestRepository</strong>&nbsp;URLs to see if the stored data is correct and complete</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong><a class=\"external-link\" href=\"http://localhost:8080/rest/players/1/scores\" rel=\"nofollow\">http://localhost:8080/rest/players/1/scores</a></strong>&nbsp;should show the scores for player 1</span></li><li><span style=\"color: rgb(35,31,32);\"><strong><a class=\"external-link\" href=\"http://localhost:8080/rest/scores\" rel=\"nofollow\">http://localhost:8080/rest/scores</a></strong>&nbsp;should show all scores&nbsp;in all games</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"79523856-20b6-4671-96b0-4a41397ccf30\"><ac:parameter ac:name=\"title\">Step 2 - Update the Controller</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Once score data is being saved, you want to make it available&nbsp;in the&nbsp;JSON you send to the browser.&nbsp;Score data is needed for the leaderboard when listing all games, not for a specific game, so it makes sense to add score information to the JSON returned by&nbsp;<strong>/api/games</strong>.</span><br /><span style=\"color: rgb(35,31,32);\">Specifically, when creating the JSON for a&nbsp;list of games, you create JSON for each game. When you create game JSON, you create JSON for each game player in the game. This is the code in&nbsp;the controller to change&nbsp;to add a key with&nbsp;the score for the game, if there is a score for the game in the score repository. &nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">You will probably need to add two&nbsp;methods to your entity classes:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">A&nbsp;<strong>GamePlayer.getScore()</strong>&nbsp;method that returns a&nbsp;<strong>Score</strong>&nbsp;that&nbsp;the controller can call to get the score, if any.&nbsp;<strong>null&nbsp;</strong>means the game is not finished.</span></li><li><span style=\"color: rgb(35,31,32);\">A<strong>&nbsp;Player.getScore(game)</strong>&nbsp;method that returns a&nbsp;<strong>Score</strong>&nbsp;that&nbsp;<strong>GamePlayer&nbsp;</strong>can call, if&nbsp;you are storing scores&nbsp;in the&nbsp;<strong>Player</strong>&nbsp;class.</span></li></ul><p><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />To search the scores in a&nbsp;<strong>Player</strong>&nbsp;and return the one&nbsp;for&nbsp;<strong>game</strong>, if any, or&nbsp;<strong>null</strong>,&nbsp;see&nbsp;a handy method in streams called&nbsp;<strong>findFirst()</strong>. See the&nbsp;<strong>Resources</strong>.<br /><span style=\"color: rgb(35,31,32);\">The client JavaScript code (next step) will&nbsp;take care of displaying&nbsp;this information.</span><br /><span style=\"color: rgb(35,31,32);\">Work in small slices.</span></p><h2><span style=\"color: rgb(153,153,153);\">Test in your browser&nbsp;</span></h2><p><span style=\"color: rgb(35,31,32);\"><strong>TEST:&nbsp;</strong>After each change to the controller,&nbsp;<strong>bootRun</strong>&nbsp;your application. Assuming it runs, visit&nbsp;<strong><a class=\"external-link\" href=\"http://localhost:8080/api/games\" rel=\"nofollow\">http://localhost:8080/api/games</a></strong>&nbsp;in your web browser.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Does the JSON include the scores for all game players that have them?</span></li><li><span style=\"color: rgb(35,31,32);\">Is the JSON correct for&nbsp;game players that do not have scores?</span></li></ul><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit your controller code. Use the &quot;code&quot; format.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"dba6a99e-2937-4a46-a80b-4f1026a2ce4f\"><ac:parameter ac:name=\"title\">Step 3 - Change the games list page to show the leaderboard</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Because you've been inspecting the JSON in your browser, you should be reasonably confident your data is stored correctly.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Update your&nbsp;HTML and JavaScript so that&nbsp;<strong>games.html</strong>&nbsp;displays a leaderboard. The leaderboard should be a table, showing total score, wins, losses, and ties, for every player.</span></p><h2><span style=\"color: rgb(153,153,153);\">Create JSON for the leaderboard</span></h2><p><span style=\"color: rgb(35,31,32);\">The&nbsp;scoring data is structured very differently from&nbsp;what the leaderboard needs. The JSON has</span></p><ul><li><span style=\"color: rgb(35,31,32);\">a list of games</span></li><li><span style=\"color: rgb(35,31,32);\">each game has a list of gameplayers</span></li><li><span style=\"color: rgb(35,31,32);\">in games that are over, each&nbsp;game player has a score of 0, 0.5, or 1</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The leaderboard on the other hand wants data like this:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">a list of players</span></li><li><span style=\"color: rgb(35,31,32);\">for each player,</span><ul><li><span style=\"color: rgb(35,31,32);\">a total score</span></li><li><span style=\"color: rgb(35,31,32);\">a total number of wins</span></li><li><span style=\"color: rgb(35,31,32);\">a total number of losses</span></li><li><span style=\"color: rgb(35,31,32);\">a total number of ties</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">The best way to do this kind of code is to</span></p><ul><li><span style=\"color: rgb(35,31,32);\">first write code to return&nbsp;a JSON object structured to fit the needs of&nbsp;the leaderboard</span></li><li><span style=\"color: rgb(35,31,32);\">then write code to display that JSON in HTML</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Most of the challenges will be in the first part. By working on a function to return the desired&nbsp;JSON object first, you will be&nbsp;writing&nbsp;code that is easier to develop incrementally and test.</span><br /><span style=\"color: rgb(35,31,32);\">For example, here's a possible sequence of slices you could write to create the JSON for the leaderboard:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">a function to create a list of all distinct players</span></li><li><span style=\"color: rgb(35,31,32);\">a function that takes a player and returns that player's total score, i.e., the sum of the scores they have</span></li><li><span style=\"color: rgb(35,31,32);\">a function that takes a player and returns that player's total win count, i.e., how many 1's</span></li><li><span style=\"color: rgb(35,31,32);\">a function that takes a player and returns that player's total loss&nbsp;count, i.e., how many 0's</span></li><li><span style=\"color: rgb(35,31,32);\">a function that takes a player and returns that player's total tie&nbsp;count, i.e., how many 0.5's</span></li><li><span style=\"color: rgb(35,31,32);\">combine the above functions to create the leaderboard JSON</span></li></ul><p><span style=\"color: rgb(35,31,32);\">&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Test!&nbsp;</strong>With each function, test in the JavaScript console&mdash;using the test JSON game data&mdash;to verify that the right answers are being returned.</span><br /><span style=\"color: rgb(35,31,32);\">See the&nbsp;<strong>Resources</strong>&nbsp;for&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1062\"><span style=\"color: rgb(51,122,183);\">JavaScript basics, like looping and conditionals</span></a><span style=\"color: rgb(35,31,32);\">.</span></p><h2><span style=\"color: rgb(153,153,153);\">Display the leaderboard JSON in HTML</span></h2><p><span style=\"color: rgb(35,31,32);\">This part should be fairly straightforward if your leaderboard JSON is correct. You just need to loop over your JSON and create the HTML table rows and columns.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>TEST!</strong>&nbsp;Make sure you see the correct scores&nbsp;and game data (per the sample data) in the table format&nbsp;outlined in the email.</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit your game.html and game.js code. Use the &quot;code&quot; format. Put the HMTL code first, then the JavaScript code, with lines labelling the source file for each section.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"7265946d-1f7c-4665-ab5a-94769c839169\"><ac:parameter ac:name=\"title\">Step 4 - Submit your work</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">The objectives of this task were:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Create a Score class and&nbsp;tables to collect information about scores. &nbsp;The Score class has an ID, a score&nbsp;number, the ID of a game and the ID of a player</span></li><li><span style=\"color: rgb(35,31,32);\">Link the data tables so that the JSON data for scores,&nbsp;games, and players&nbsp;can be accessed.</span></li><li><span style=\"color: rgb(35,31,32);\">Create sample score data per email.</span></li><li><span style=\"color: rgb(35,31,32);\">Display a&nbsp;summary of score data on the&nbsp;<strong>games.html</strong>&nbsp;page</span><ul><li><span style=\"color: rgb(35,31,32);\">one table for all the players with their totals tallied per the email</span></li></ul></li></ul><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\">When this is working, send a zipped archive of your project folder. Be sure to run the&nbsp;<strong>clean</strong>&nbsp;task first.</span></p></ac:rich-text-body></ac:structured-macro><p><br /></p><p><br /></p>",
    "conflPageId": "263913556",
    "conflChildrenId": [
      "263716912"
    ]
  },
  {
    "title": "Java - Task 6 Resources",
    "content": "<p>Adding security to a web application introduces a number of new concepts. Many of these concepts, such as authentication and authorization, users and roles, are general and come up in any programming framework. Others, such as&nbsp;you&nbsp;define&nbsp;users and find who is logged in, are specific to Spring's security tools.<br /><strong>Spring and JPA:</strong>&nbsp;Several distinct new areas of Spring are covered:</p><ul><li>how you configure&nbsp;authentication and authorization,</li><li>how you add a query method to a repository such as &quot;find by user name,&quot; so that you can log players in by name,</li><li>how you can get the current logged in user, if any, in a controller method</li><li>how you return response codes when creating a resource or failing to create one</li></ul><p><strong>IDEA and Gradle:</strong>&nbsp;Since you are modifying your&nbsp;<strong>build.gradle</strong>&nbsp;file, a reminder on what to do to make sure IDEA&nbsp;and Gradle agree on what the project contains</p><p><strong>Required resources</strong> </p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"3a5d4d16-7218-4096-a1c5-08365821aeda\"><ac:parameter ac:name=\"title\">Spring and JPA</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(153,153,153);\">Authentication and Authorization</span></h2><p><span style=\"color: rgb(35,31,32);\">Most critical is&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1436\"><span style=\"color: rgb(51,122,183);\">the&nbsp;basic introduction&nbsp;to the Spring Boot security framework</span></a><span style=\"color: rgb(35,31,32);\">.&nbsp;There's a lot here, but the key things&nbsp;you will need to do, in different steps, are</span></p><ul><li><span style=\"color: rgb(35,31,32);\">add the security library to your application in Gradle</span></li><li><span style=\"color: rgb(35,31,32);\">use the&nbsp;<strong>GlobalAuthenticationConfigurerAdapter</strong>&nbsp;class to configure your user database&nbsp;</span><ul><li><span style=\"color: rgb(35,31,32);\">Don't create a new database. Use the database of users you already have.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">use the&nbsp;<strong>WebSecurityConfigurerAdapter</strong>&nbsp;class to define rules for which&nbsp;URLs are public and which&nbsp;require login</span><ul><li><span style=\"color: rgb(35,31,32);\">Be sure to pay special attention to how to configure for AJAX-based web apps.</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">use the&nbsp;<strong>Authentication</strong>&nbsp;class to&nbsp;get the current user information in your application controller methods</span></li><li><span style=\"color: rgb(35,31,32);\">add a query method to your repository to get user by name (see next subsection)</span></li><li><span style=\"color: rgb(35,31,32);\">use&nbsp;the&nbsp;<strong>Authentication&nbsp;</strong>class in your application controller method to get the current logged in user.</span></li></ul><h2><span style=\"color: rgb(153,153,153);\">Login&nbsp;and Signup Forms</span></h2><p><span style=\"color: rgb(35,31,32);\">Login and signup&nbsp;forms are just like other code you've written to send data to the server. You are just posting data to a URL.&nbsp;</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1445\"><span style=\"color: rgb(51,122,183);\">Sending data to the application</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- this describes the different ways you can send data to a server.</span><ul><li><span style=\"color: rgb(35,31,32);\">For this task, use the simple AJAX approach. That gives you the most control over what happens if logging succeeds or fails.</span></li></ul></li></ul><h2><span style=\"color: rgb(153,153,153);\">Query Methods</span></h2><p><span style=\"color: rgb(35,31,32);\">Spring Data JPA makes it very easy to create additional&nbsp;query methods for a repository, such as&nbsp;<strong>findByUserLastName</strong>, so that you can retrieve data without writing database code.&nbsp;You just give the name of the method you want, the parameters it takes, and the type of value it returns, but no actual code. Spring figures out what code to write based on the types and the method name. Specific words must be used, but&nbsp;they are&nbsp;pretty&nbsp;intuitive.</span></p><ul><li><a href=\"http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.query-methods.query-creation\"><span style=\"color: rgb(51,122,183);\">Examples and rules for creating query methods</span></a></li></ul><h2><span style=\"color: rgb(153,153,153);\">Response Entities</span></h2><p><span style=\"color: rgb(35,31,32);\">A&nbsp;<strong>response</strong>&nbsp;in HTTP is more than just HTML or JSON. A response has a status code, e.g.,&nbsp;<strong>200</strong>&nbsp;for a&nbsp;successful GET,&nbsp;<strong>404</strong>&nbsp;for page not found, and so on. A response also has a number of&nbsp;<strong>headers</strong>, each of which is a key and value, e.g.,&nbsp;&quot;Last-Modified: Wed, 15 Nov 1995 04:58:08 GMT&quot;. The HTML, CSS, JSON, etc. are found in the body or&nbsp;<strong>content</strong>&nbsp;of the response.</span><br /><span style=\"color: rgb(35,31,32);\">For most controller methods, you just need to say what content to return and Spring will construct the appropriate&nbsp;<strong>response entity</strong>&nbsp;for you. But if you need to send some special response, e.g., an error response when some application-level rule is violated, then you need to create the&nbsp;response entity yourself.</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1442\"><span style=\"color: rgb(51,122,183);\">Response entities</span></a></li><li><a href=\"http://www.leveluplunch.com/java/tutorials/014-post-json-to-spring-rest-webservice/\"><span style=\"color: rgb(51,122,183);\">Post JSON to Spring REST service</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- warning: shows some&nbsp;simple POSTing, but then gets into more complicated cases.</span></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"4cc0feb1-def7-42f6-90dd-a13f072ec620\"><ac:parameter ac:name=\"title\">IDEA and Gradle</ac:parameter><ac:rich-text-body><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1434\"><span style=\"color: rgb(51,122,183);\">How to re-sync&nbsp;IDEA with build.gradle</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;-- any time you change build.gradle, do this so that IDEA knows&nbsp;what Java libraries you are using</span></li></ul></ac:rich-text-body></ac:structured-macro><p><strong>Optional resources</strong> </p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"2f24584c-2831-4fc4-92eb-a0f519c245c3\"><ac:parameter ac:name=\"title\">Authentication and Authorization</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Some examples of adding security to Spring applications:</span></p><ul><li><a href=\"https://spring.io/guides/gs/securing-web/\"><span style=\"color: rgb(51,122,183);\">Spring guide example of adding security to a simple Spring MVC applications</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;</span><ul><li><span style=\"color: rgb(35,31,32);\">Note: This creates a tiny&nbsp;in-memory user database for demonstration purposes. You don't need this in your app, because you already have a database of users.</span></li></ul></li><li><a href=\"http://www.codesandnotes.be/2014/10/31/restful-authentication-using-spring-security-on-spring-boot-and-jquery-as-a-web-client/\"><span style=\"color: rgb(51,122,183);\">Diego Pappalardo's&nbsp;RESTful authentication using Spring Security on Spring Boot, and jQuery as a web client</span></a></li></ul></ac:rich-text-body></ac:structured-macro><p><br class=\"atl-forced-newline\" /></p>",
    "conflPageId": "263913587",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java - Task 7",
    "content": "<h2><span style=\"color: rgb(153,153,153);\">Introduction</span></h2><p><span style=\"color: rgb(35,31,32);\">You been asked to implement creating, joining, and re-entering games for logged-in users. To do this, you will need to:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Add code on the back end web server to map URLs for joining and creating games to code that updates&nbsp;the data tables appropriately, and returns the JSON for the game created or joined.</span></li><li><span style=\"color: rgb(35,31,32);\">Add code on the front end so that&nbsp;the&nbsp;<strong>Join Game</strong>&nbsp;and&nbsp;<strong>Create Game</strong>&nbsp;buttons send the appropriate command to the web server.</span></li><li><span style=\"color: rgb(35,31,32);\">Add code on the front end to respond to successfully joining or creating a game to switch to the grid view of that particular game.</span></li><li><span style=\"color: rgb(35,31,32);\">Add code to create links to games the player has already joined.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">The major new concept in this task is implementing&nbsp;RESTful HTTP requests to&nbsp;create&nbsp;data on the server. This requests should be done through your application controller API, not through your RESTRepositories. The latter&nbsp;would give end users&nbsp;too much access to your data.</span></p><h2><span style=\"color: rgb(153,153,153);\">RESTful Create Requests</span></h2><p><span style=\"color: rgb(35,31,32);\">Creating a new game and joining an existing game are very similar, as defined by the data schema you have been implementing. Both operations involve creating new data entries.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Join a game = add a new game player entry</span></li><li><span style=\"color: rgb(35,31,32);\">Create a game = add a new game + add a new game player entry</span></li></ul><p><span style=\"color: rgb(35,31,32);\">As before, be sure to send the appropriate response codes when creating a resource, or failing to create one.</span><br /><span style=\"color: rgb(35,31,32);\">&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">HTML Data Attributes</span></h2><p><span style=\"color: rgb(35,31,32);\">One problem with&nbsp;implementing the&nbsp;<strong>Join Game</strong>&nbsp;buttons is how to make&nbsp;each game button refer to a different game. You could write code that look at the text&nbsp;in the HTML next to&nbsp;the button,&nbsp;but this code is fragile, i.e., it breaks easily, whenever anyone makes a simple change to the web layout.. A graphic artist redesigning the web layout could easily break the code.</span><br /><span style=\"color: rgb(35,31,32);\">A&nbsp;better approach is to mark the button for&nbsp;each game with the ID of the game it's connected to.</span><br /><span style=\"color: rgb(35,31,32);\">Before HTML5 there was no standards-compliant way&nbsp;to attach data to HTML elements. HTML validators would complain about extra tags or attributes. Browsers would silently ignore unknown tags and attributes. Pages usually&nbsp;looked OK but JavaScript code that used non-standard&nbsp;attributes was not guaranteed to work.</span><br /><span style=\"color: rgb(35,31,32);\">HTML5 added&nbsp;<strong>data attributes</strong>&nbsp;just for this purpose. You can add attributes of the form&nbsp;<strong>data-<em>name</em>=&quot;<em>value</em>&quot;</strong>&nbsp;to any element. For example, an&nbsp;application might&nbsp;generate a date&nbsp;in&nbsp;a human-friendly form in the visible text, and a computer-friendly form (ISO-8601) in an attribute on a&nbsp;<strong>span</strong>&nbsp;around the text.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Today is &lt;span data-date=&quot;2016-06-30&quot;&gt;June 30&lt;/span&gt;.</span><br /><span style=\"color: rgb(35,31,32);\">JavaScript code can then retrieve and use&nbsp;the date&nbsp;information using normal DOM methods. Libraries like jQuery provide utilities to make this simple code even simpler.</span><br /><span style=\"color: rgb(35,31,32);\">You are free to add&nbsp;any&nbsp;<strong>data-</strong>&nbsp;attribute you want to&nbsp;the game buttons to indicate what game or game player they refer to.</span>&nbsp;</p><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"06d24990-2f73-4524-a53d-6f9706212857\"><ac:parameter ac:name=\"title\">Step 1 - Add the ability to return to a game</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">You want users to be able to re-enter&nbsp;a game they're in.</span></p><h2><span style=\"color: rgb(153,153,153);\">Add game player information to the list of games</span></h2><p><span style=\"color: rgb(35,31,32);\">If necessary, change the data transfer object you build for the list of games to include the IDs for each game player in each game. E.g., your JSON might look something like this:</span><br /><span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;games&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;created&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1473346240147</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;players&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;gpid&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">1</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;name&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;j.bauer@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span><br /><span style=\"color: rgb(153,153,153);\">},</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(102,153,0);\">&quot;gpid&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">2</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;id&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,0,85);\">2</span><span style=\"color: rgb(153,153,153);\">,</span><br /><span style=\"color: rgb(102,153,0);\">&quot;name&quot;</span> <span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;c.obrian@<a href=\"http://ctu.gov\">ctu.gov</a>&quot;</span><br /><span style=\"color: rgb(153,153,153);\">}</span> <span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(153,153,153);\">},</span><br /><span style=\"color: rgb(153,153,153);\">...</span><br /><span style=\"color: rgb(153,153,153);\">]</span><br /><span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(35,31,32);\">This says that Game #1 has two game players. The game player IDs are 1 and 2. That also happens to be their player IDs but that's a coincidence.</span></p><h2><span style=\"color: rgb(153,153,153);\">Add links to join games</span></h2><p><span style=\"color: rgb(35,31,32);\">Modify the&nbsp;JavaScript that writes the HTML for the list of games in&nbsp;<strong>games.html&nbsp;</strong>to wrap the game description inside a link to the URL for the appropriate game page, i.e.,&nbsp;<strong>game.html?gp=<em>nn</em></strong>&nbsp;where&nbsp;<strong><em>nn</em></strong>&nbsp;is the game player ID that player has for that game.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">The code&nbsp;should only do this&nbsp;if (1) there is logged in user, and (2) that user is a player in that game.</span></li></ul><p><span style=\"color: rgb(35,31,32);\"><strong>TEST!</strong>&nbsp;Try logging in as different users. Verify that links appear only on those games the user has joined. Verify that the&nbsp;links go to the right game, and that there are no user access errors.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">Remember when testing that to change who you are&nbsp;with&nbsp;BASIC authentication, you need to exit and restart your browser.</span></p><h2><span style=\"color: rgb(153,153,153);\">Prevent players from seeing other players' data</span></h2><p><span style=\"color: rgb(35,31,32);\">The links you generate in the HTML should take players to only those games they are playing in, and show them their own data, e.g., where their ships are and what salvoes have been fired.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">But imagine an enterprising player who knows JavaScript, opens the developer window, and sees the HTML, JSON and URL links. &nbsp;If the player sees that her&nbsp;opponent has ID 15, then she&nbsp;can try entering&nbsp;<strong>game.html?gp=15</strong>&nbsp;into the browser window, to sneak a peak at her&nbsp;opponent's ships.</span><br /><span style=\"color: rgb(35,31,32);\">A&nbsp;logged-in player should not be able to cheat and see the game page for another player. To prevent that, you need to add code to the application controller method that returns a player's game view to</span></p><ul><li><span style=\"color: rgb(35,31,32);\">the current user is in fact the game player referenced by the ID&nbsp;<strong><em>nn</em></strong>&nbsp;</span></li><li><span style=\"color: rgb(35,31,32);\">send an&nbsp;<strong>UNAUTHORIZED</strong>&nbsp;response if this is not true</span></li></ul><p><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />There is a way to do this kind of test&nbsp;with&nbsp;Spring annotations on the request methods, but it's just as easy to write conditional code in the&nbsp;controller method. See the entry on how to send responses like&nbsp;<strong>UNAUTHORIZED</strong>&nbsp;in the&nbsp;<strong>Resources</strong>.<br /><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span><br />You'll need to create instances of a ResponseEntity. See the&nbsp;<strong>Resources</strong>&nbsp;on how to create instances.&nbsp;</p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit the methods you changed to check that a player is authorized to see the information requested. Use the &quot;code&quot; format.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"6f996ab1-5fd0-4422-aa60-965e31122957\"><ac:parameter ac:name=\"title\">Step 2 - Add the ability to create a game</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Creating games is a little simpler than joining a game, because you don't have to worry that someone else might have joined a game just before the user did.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Back-end: Add a create game method to your app controller</strong></span><br /><span style=\"color: rgb(35,31,32);\">As per the team lead's table, a game is created with a&nbsp;<strong>POST&nbsp;</strong>to&nbsp;the&nbsp;URL &nbsp;<strong>/api/games</strong>. This request&nbsp;should map to a method&nbsp;that</span></p><ul><li><span style=\"color: rgb(35,31,32);\">gets the current user</span><ul><li><span style=\"color: rgb(35,31,32);\">if there is none, it should send an&nbsp;<strong>Unauthorized</strong>&nbsp;response&nbsp;</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">creates and saves a new game</span></li><li><span style=\"color: rgb(35,31,32);\">creates and saves a new game player&nbsp;for&nbsp;this game and the&nbsp;current&nbsp;user</span></li><li><span style=\"color: rgb(35,31,32);\">send a&nbsp;<strong>Created</strong>&nbsp;response, with&nbsp;<strong>JSON&nbsp;</strong>containing the new game player ID, e.g.,&nbsp;{ &quot;gpid&quot;: 32 }</span><ul><li><span style=\"color: rgb(35,31,32);\">Note: a number or string is not a valid JSON object.&nbsp;</span><a href=\"http://www.json.org/\"><span style=\"color: rgb(51,122,183);\">Only key-value objects and arrays qualify as top-level JSON.</span></a></li><li><span style=\"color: rgb(35,31,32);\">It's not worth sending back an entire game view because the front-end code added&nbsp;below will request a game view automatically.</span></li><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">Refer to&nbsp;ebook sections:&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1442\"><span style=\"color: rgb(51,122,183);\">Response Entities, Spring Controllers and Response Objects</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;for an example of POST with request mapping method in a controller&nbsp;or&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1445\"><span style=\"color: rgb(51,122,183);\">Sending Data to the Application, Sending data in the request body example</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;for another example of POST with&nbsp;request mapping.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Front-end: Add AJAX code to post the create&nbsp;request and handle the response</strong></span></p><ul><li><span style=\"color: rgb(35,31,32);\">Add a&nbsp;<strong>Create Game</strong>&nbsp;button to&nbsp;<strong>games.html</strong>.</span></li><li><span style=\"color: rgb(35,31,32);\">Add an on-click method to the button that sends a POST to&nbsp;<strong>/api/games</strong>.</span></li><li><span style=\"color: rgb(35,31,32);\">If the request is successful, the JavaScript&nbsp;should&nbsp;send the browser to the URL&nbsp;<strong>game.html?gp=<em>mm</em></strong><em>&nbsp;</em>where&nbsp;<strong><em>mm</em></strong>&nbsp;is the new game player ID</span></li><li><span style=\"color: rgb(35,31,32);\">If the request fails, the JavaScript should pop up an alert with the error.</span></li><li><span style=\"color: rgb(23,155,201);\"><strong>TIP:</strong></span></li></ul><p><span style=\"color: rgb(35,31,32);\">See ebook section:&nbsp;</span><a href=\"https://codeacademy.ubiqum.com/ebooks/item?id=1171\"><span style=\"color: rgb(51,122,183);\">JavaScript: How to Make AJAX Calls</span></a><span style=\"color: rgb(35,31,32);\">&nbsp;(shows how to use $.post() in an AJAX call)</span><br /><span style=\"color: rgb(35,31,32);\">See the&nbsp;<strong>Resources</strong>&nbsp;for how to change browser locations in JavaScript.</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Send both the front-end JavaScript code and the back-end Java method(s) to handle creating a game. Put the JavaScript first and clearly label each section. Use the &quot;code&quot; format.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"14903fe3-8f50-4ceb-b337-a77c547578eb\"><ac:parameter ac:name=\"title\">Step 3 - Add the ability to join a game</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">This will&nbsp;be similar to creating a game, but with a few additional parts, because you need to get the ID of&nbsp;existing game, and check if someone else has&nbsp;already joined.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Add a join&nbsp;game method to your app controller</strong></span><br /><span style=\"color: rgb(35,31,32);\">As per the diagram, the request will be a&nbsp;<strong>POST</strong>&nbsp;to the URL&nbsp;<strong>/api/game/<em>nn</em>/players</strong>&nbsp;where&nbsp;<strong><em>nn</em></strong>&nbsp;is the ID of the game the user wants to join.&nbsp;This request&nbsp;should map to a method&nbsp;that</span></p><ul><li><span style=\"color: rgb(35,31,32);\">gets the current user</span><ul><li><span style=\"color: rgb(35,31,32);\">if there is none, it sends an&nbsp;<strong>Unauthorized</strong>&nbsp;response&nbsp;</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">gets the game with that ID</span><ul><li><span style=\"color: rgb(35,31,32);\">if there is none, it sends a&nbsp;<strong>Forbidden</strong>&nbsp;response with descriptive&nbsp;text, such as &quot;No such game&quot;</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">checks that the game has&nbsp;only one player</span><ul><li><span style=\"color: rgb(35,31,32);\">if there are two players, it sends a&nbsp;<strong>Forbidden</strong>&nbsp;response with descriptive text, such as &quot;Game is full&quot;</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">creates and saves a new game player, with this game and the&nbsp;current&nbsp;user</span></li><li><span style=\"color: rgb(35,31,32);\">sends a&nbsp;<strong>Created</strong>&nbsp;response, with the body containing JSON with&nbsp;the new game player ID, e.g.,&nbsp;{ &quot;gpid&quot;: 32 }</span></li></ul><p><span style=\"color: rgb(35,31,32);\"><strong>Add Game ID data to the Join buttons</strong></span></p><ul><li><span style=\"color: rgb(35,31,32);\">Change the&nbsp;JavaScript code that generates the list of games and the&nbsp;<strong>Join</strong>&nbsp;buttons to&nbsp;add a&nbsp;<strong>data-...&nbsp;</strong>attribute to each&nbsp;button with the appropriate game ID.</span></li></ul><p><span style=\"color: rgb(35,31,32);\"><strong>Add AJAX code to post the join&nbsp;request and handle the response</strong></span></p><ul><li><span style=\"color: rgb(35,31,32);\">Add an on-click method to the&nbsp;<strong>Join&nbsp;Game</strong>&nbsp;button that POSTs to&nbsp;the URL&nbsp;<strong>/api/game/<em>nn</em>/players</strong>, where&nbsp;<strong><em>nn</em></strong>&nbsp;is extracted from the&nbsp;<strong>data-game</strong>&nbsp;attribute on the button.</span></li><li><span style=\"color: rgb(35,31,32);\">If the request is successful, the JavaScript&nbsp;should&nbsp;send the browser to&nbsp;<strong>game.html?gp=<em>mm</em></strong>&nbsp;where&nbsp;<strong><em>mm</em></strong>&nbsp;is the new game player ID.</span></li><li><span style=\"color: rgb(35,31,32);\">If the request fails, the JavaScript should pop up an alert with an&nbsp;error message.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">See the&nbsp;<strong>Resources</strong>&nbsp;for how to change browser location in JavaScript.</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit the JavaScript and Java code you wrote for joining a game, in that order, clearly labeled, using the &quot;code&quot; format.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"54b844bd-edf7-487f-955b-7b4cbb375203\"><ac:parameter ac:name=\"title\">Step 4 - Submit your work</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\">Send your&nbsp;zipped project folder per the instructions in the 'Submit Your Work' Tab.&nbsp;</span></p></ac:rich-text-body></ac:structured-macro><p><br /></p>",
    "conflPageId": "263913599",
    "conflChildrenId": [
      "263716931"
    ]
  },
  {
    "title": "Java - Task 8",
    "content": "<h2><span style=\"color: rgb(153,153,153);\">Introduction</span></h2><p><span style=\"color: rgb(35,31,32);\">You been asked to implement the user story &quot;As a player in a new game, I can place ships.&quot; The back-end data repository code already supports&nbsp;storing&nbsp;ships with locations for a game player. What you need to add is:</span></p><ul><li><span style=\"color: rgb(35,31,32);\">HTML and JavaScript on the front-end to collect and send a set of ship locations to the server.</span></li><li><span style=\"color: rgb(35,31,32);\">A controller method to receive this request and call the appropriate repository methods.</span></li></ul><p><span style=\"color: rgb(35,31,32);\">There are two challenges here.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">Building a nice easy to use interface for placing ships on a grid in HTML and JavaScript.</span></li><li><span style=\"color: rgb(35,31,32);\">Sending complex data, i.e., a set of ships for a game player, where each ship has a type and a list of locations, from the front-end to the back-end. Until now, you have only needed to send a game or game player ID.&nbsp;</span></li></ul><h2><span style=\"color: rgb(153,153,153);\">Modal&nbsp;Interactions</span></h2><p><span style=\"color: rgb(35,31,32);\">What makes this user interface a bit tricky is that it's hard to avoid a&nbsp;<strong>modal interaction&nbsp;</strong>design.&nbsp;Modal means that an interaction needs&nbsp;several steps. Doing the first step puts you in a special&nbsp;<strong>mode</strong>&nbsp;waiting for you&nbsp;to&nbsp;do the&nbsp;remaining steps. While in the special mode, other actions either can't be done, or, if allowed, cancel the action you were doing.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">For example, suppose you decide that the way to place a ship is to (1) click on the ship in a list of &quot;ships to place&quot; (2) click on a square in the ship grid to specify&nbsp;one end of the ship, and (3) click on another square to specify the other end of the ship.&nbsp;</span><br /><span style=\"color: rgb(35,31,32);\">What if the user clicks on something else in steps (2) or (3)? What if the user clicks on endpoints that don't match where the selected ship can go. What if the user clicks a square already occupied? &nbsp;Do these errors cancel the mode? Or does the interface&nbsp;ignore such clicks? Or does it beep? How does the user know visually that they're in ship-adding mode?</span><br /><span style=\"color: rgb(35,31,32);\">Modern interface designers try very hard to avoid modal interfaces. That's one&nbsp;reason they use some kind of drag-and-drop action, because it replaces a multi-step action with one gesture. But drag-and-drop is fairly complex to implement. It also doesn't solve the problem of how a user decides between vertical and horizontal placement.</span><br /><span style=\"color: rgb(35,31,32);\">The interface&nbsp;challenge is up to you. You want it to be easy for users to place ships and adjust them. You want to prevent illegal placements, e.g., more than the allowed number of ships,&nbsp;ships overlapping each other, or ships going off the grid. At the same time, you want the interface to be easy for you to build and maintain. Brainstorm alternatives. Search the web for examples, Try out&nbsp;different ideas.</span></p><h2><span style=\"color: rgb(153,153,153);\">Posting&nbsp;Complex Data with JSON</span></h2><p><span style=\"color: rgb(35,31,32);\">Sending complex data to the web server involves some new concepts, but not&nbsp;very much code. In older&nbsp;HTML web apps, the only way to send data was&nbsp;to&nbsp;submit a form. Submitting a form sends the server a flat list of key-value pairs. It was up to the code on the back end&nbsp;to construct whatever Java objects were intended.</span><br /><span style=\"color: rgb(35,31,32);\">JSON-based apps, like Spring apps, have a more direct approach. You can use AJAX to post&nbsp;a JSON object that looks like the Java object you want to send, and framework code on the back end will construct the Java object for you.</span><br /><span style=\"color: rgb(35,31,32);\">For example, a&nbsp;pet tracking web site&nbsp;might have a form where a logged-in user could add a new pet to be tracked. The key part of the code for sending the data would look something like this:</span><br /><span style=\"color: rgb(112,128,144);\">// ... variables petName</span> <span style=\"color: rgb(112,128,144);\">etc set by earlier code from a form</span><br />$<span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(221,74,104);\">post</span><span style=\"color: rgb(153,153,153);\">({</span><br />url<span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;/owners/23/pets&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <br />data<span style=\"color: rgb(153,153,153);\">:</span> JSON<span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(221,74,104);\">stringify</span><span style=\"color: rgb(153,153,153);\">({</span> name<span style=\"color: rgb(153,153,153);\">:</span> petName<span style=\"color: rgb(153,153,153);\">,</span> type<span style=\"color: rgb(153,153,153);\">:</span> petType<span style=\"color: rgb(153,153,153);\">,</span> age<span style=\"color: rgb(153,153,153);\">:</span> petAge <span style=\"color: rgb(153,153,153);\">}),</span><br />dataType<span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;text&quot;</span><span style=\"color: rgb(153,153,153);\">,</span><br />contentType<span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;application/json&quot;</span><br /><span style=\"color: rgb(153,153,153);\">})</span><br /><span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(221,74,104);\">done</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(0,119,170);\">function</span> <span style=\"color: rgb(153,153,153);\">(</span>response<span style=\"color: rgb(153,153,153);\">,</span> status<span style=\"color: rgb(153,153,153);\">,</span> jqXHR<span style=\"color: rgb(153,153,153);\">)</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(221,74,104);\">alert</span><span style=\"color: rgb(153,153,153);\">(</span> <span style=\"color: rgb(102,153,0);\">&quot;Pet added: &quot;</span> <span style=\"color: rgb(166,127,89);\">+</span> response <span style=\"color: rgb(153,153,153);\">);</span><br /><span style=\"color: rgb(153,153,153);\">})</span><br /><span style=\"color: rgb(153,153,153);\">.</span><span style=\"color: rgb(221,74,104);\">fail</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(0,119,170);\">function</span> <span style=\"color: rgb(153,153,153);\">(</span>jqXHR<span style=\"color: rgb(153,153,153);\">,</span> status<span style=\"color: rgb(153,153,153);\">,</span> httpError<span style=\"color: rgb(153,153,153);\">)</span> <span style=\"color: rgb(153,153,153);\">{</span><br /><span style=\"color: rgb(221,74,104);\">alert</span><span style=\"color: rgb(153,153,153);\">(</span><span style=\"color: rgb(102,153,0);\">&quot;Failed to add pet: &quot;</span> <span style=\"color: rgb(166,127,89);\">+</span> textStatus <span style=\"color: rgb(166,127,89);\">+</span> <span style=\"color: rgb(102,153,0);\">&quot; &quot;</span> <span style=\"color: rgb(166,127,89);\">+</span> httpError<span style=\"color: rgb(153,153,153);\">);</span><br /><span style=\"color: rgb(153,153,153);\">})</span><br /><span style=\"color: rgb(35,31,32);\">The controller for handling this request might look something like this, leaving out error checking and creating the response entity:</span><br />@RequestMapping(value=&quot;/owners/{ownerId}/pets&quot;, method=RequestMethod.POST)<br />public ResponseEntity&lt;String&gt; addPet(@PathVariable long ownerId, @RequestBody Pet pet) {<br />Person person = personRepository.findById(ownerId).orElse(null);<br />pet.setOwner(person);<br />petRepository.save(pet);<br />...<br />}<br /><span style=\"color: rgb(35,31,32);\">This example&nbsp;method is getting data from two very different places:</span></p><ul><li><span style=\"color: rgb(35,31,32);\"><strong>@PathVariable long ownerId</strong>&nbsp;tells Spring to extract an ID number from the URL.</span></li><li><span style=\"color: rgb(35,31,32);\"><strong>@RequestBody Pet pet</strong>&nbsp;tells Spring to parse the request body as a&nbsp;JSON object and use that object to make&nbsp;an instance of&nbsp;<strong>Pet</strong>.</span><ul><li><span style=\"color: rgb(35,31,32);\">An error will occur if the JSON keys and values do not match&nbsp;the fields of&nbsp;<strong>Pet</strong>.</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">&nbsp;See the entries on sending data to an application in the&nbsp;<strong>Resources</strong>.</span>&nbsp;</p><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"49cef106-5430-4162-8828-4d1e4f5b9d4a\"><ac:parameter ac:name=\"title\">Step 1 - Implement a controller method for a list of placed ships</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Implement a back-end controller method that can receive a list of ship objects, with locations, save them in your ship repository, and return a &quot;created&quot; response if there are no problems.</span></p><ul><li><span style=\"color: rgb(35,31,32);\">The URL should be&nbsp;<strong>/games/players/{gamePlayerId}/ships</strong>.</span></li><li><span style=\"color: rgb(35,31,32);\">The body of the request should be parsed into a list of ships</span></li><li><span style=\"color: rgb(35,31,32);\">An&nbsp;<strong>Unauthorized</strong>&nbsp;response should be sent if</span><ul><li><span style=\"color: rgb(35,31,32);\">there is no current user logged in, or</span></li><li><span style=\"color: rgb(35,31,32);\">there is no game player with the given ID, or</span></li><li><span style=\"color: rgb(35,31,32);\">the current user is not the game player the ID references</span></li></ul></li><li><span style=\"color: rgb(35,31,32);\">A&nbsp;<strong>Forbidden</strong>&nbsp;response should be sent if the user already has ships placed.</span></li><li><span style=\"color: rgb(35,31,32);\">Otherwise, the ships should be added to the game player and saved, and a&nbsp;<strong>Created</strong>&nbsp;response should be sent.</span><ul><li><span style=\"color: rgb(35,31,32);\">There's no need for new content in the response, because&nbsp;the&nbsp;page needs to&nbsp;request an updated game view, to see possible&nbsp;actions by the opponent.</span></li></ul></li></ul><p><span style=\"color: rgb(35,31,32);\">See the next task for how to test if this is working.</span></p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"7c5ff425-2b9d-4560-9119-c65ec38cac14\"><ac:parameter ac:name=\"title\">Step 2 - Implement JavaScript to post a list of ships to the server</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Write JavaScript functions to construct and POST&nbsp;with AJAX&nbsp;the JSON string for a list of ships to the controller you defined.</span><br /><span style=\"color: rgb(35,31,32);\">The JSON for each ship should include the type of the ship and a list of locations.</span><br /><span style=\"color: rgb(35,31,32);\">If the POST is successful, the JavaScript should get an updated game view and redisplay the grids. That way, the game view is guaranteed to include both player's actions and any the opponent has done.</span><br /><span style=\"color: rgb(35,31,32);\"><strong>TEST</strong>! Run the JavaScript with some canned data. Keep a JavaScript console window open. Verify&nbsp;that</span></p><ul><li><span style=\"color: rgb(35,31,32);\">posting fails if you are not logged in, or are logged in as the wrong user</span></li><li><span style=\"color: rgb(35,31,32);\">a &quot;created&quot; response is returned for valid posting</span></li><li><span style=\"color: rgb(35,31,32);\">after a valid post, if you get the JSON for the game, it now includes the ship data that was posted</span></li></ul><p><span style=\"color: rgb(35,31,32);\">Here's some example&nbsp;JSON for a list of ships:</span><br /><span style=\"color: rgb(153,153,153);\">[</span> <span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;type&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;destroyer&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;locations&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;A1&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;B1&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;C1&quot;</span><span style=\"color: rgb(153,153,153);\">]</span> <span style=\"color: rgb(153,153,153);\">},</span><br /><span style=\"color: rgb(153,153,153);\">{</span> <span style=\"color: rgb(102,153,0);\">&quot;type&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(102,153,0);\">&quot;patrol boat&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;locations&quot;</span><span style=\"color: rgb(153,153,153);\">:</span> <span style=\"color: rgb(153,153,153);\">[</span><span style=\"color: rgb(102,153,0);\">&quot;H5&quot;</span><span style=\"color: rgb(153,153,153);\">,</span> <span style=\"color: rgb(102,153,0);\">&quot;H6&quot;</span><span style=\"color: rgb(153,153,153);\">]</span> <span style=\"color: rgb(153,153,153);\">}</span><br /><span style=\"color: rgb(153,153,153);\">]</span></p><h2><span style=\"color: rgb(153,153,153);\">&nbsp;Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit the JavaScript and Java code for posting ship locations to the server, in that order, clearly labeled, using the &quot;code&quot; format.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"30a5590a-e6ff-46a3-afed-f1401e571958\"><ac:parameter ac:name=\"title\">Step 3 - Implement the HTML interface to place and submit ships</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">This is the most open-ended and trickiest task. You want an interface that lets&nbsp;a player</span></p><ul><li><span style=\"color: rgb(35,31,32);\">see what ships they have placed so far</span></li><li><span style=\"color: rgb(35,31,32);\">see what ships they still need to place</span></li><li><span style=\"color: rgb(35,31,32);\">select and place a ship</span></li><li><span style=\"color: rgb(35,31,32);\">select and move a placed ship</span></li><li><span style=\"color: rgb(35,31,32);\">submit the placed ships when, and only when, there is a valid placement</span></li></ul><p><span style=\"color: rgb(35,31,32);\">You already have done the part about showing what ships are placed, based on what's in the game JSON.</span><br /><span style=\"color: rgb(35,31,32);\">To show what ships they need to place, you need to display a&nbsp;list of ship types defined for the game, e.g., one battleship, one destroyer, etc. It would be nice to show them how big each ship is, and, in this list, which ones have already been placed in the grid, especially since there are two ship types that have the same size.&nbsp;</span></p><h2><span style=\"color: rgb(153,153,153);\">Submit</span></h2><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br />Submit your HTML and JavaScript code for placing ships on the ship grid. Put the HTML first, and clearly label each section. Use the &quot;code&quot; format to submit.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"9f5cedb0-2641-4aef-850c-2749ba2ff681\"><ac:parameter ac:name=\"title\">Step 4 - Submit your work</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(23,155,201);\"><strong>SUBMIT:</strong></span><br /><span style=\"color: rgb(35,31,32);\">Send your&nbsp;zipped project folder per the instructions in the 'Submit Your Work' Tab.&nbsp;</span></p></ac:rich-text-body></ac:structured-macro><p><br /></p>",
    "conflPageId": "263913608",
    "conflChildrenId": [
      "263913613"
    ]
  },
  {
    "title": "Java - Task 8 Resources",
    "content": "<p><span style=\"color: rgb(35,31,32);\">A brief guide to the Resource subsections:</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Spring and JPA:&nbsp;</strong>This covers the&nbsp;several different ways a browser can send data to a server, from a simple value in a URL, to values in a form, to a complex JSON object. &nbsp;</span></p><p><span style=\"color: rgb(35,31,32);\"><strong>Required resources</strong></span></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"b1b81789-0c96-4637-bbe4-6a7d52989814\"><ac:parameter ac:name=\"title\">Spring and JPA</ac:parameter><ac:rich-text-body><h2><span style=\"color: rgb(153,153,153);\">Sending Data&nbsp;to a Web App</span></h2><p><span style=\"color: rgb(35,31,32);\">HTTP has two methods for sending data: POST and PUT. POST is for sending any kind of data, for the web server to handle however it chooses. PUT is for sending a resource to be stored on the server. Because older browsers only support GET and POST, web applications often use POST to send&nbsp;all data.</span><br /><span style=\"color: rgb(35,31,32);\">Data can be sent as a simple set of key and value pairs. This is what happens when you submit a normal HTML form. The keys and values are simple strings. This is simple on the browser side, but requires more code on the server to construct the objects you need.</span><br /><span style=\"color: rgb(35,31,32);\">With AJAX, data can also be sent in the body of the request. The body is a string containing a JSON object.</span><br /><span style=\"color: rgb(35,31,32);\">With the Spring framework, you can POST&nbsp;JSON that matches some Java class, and Spring code will take care of constructing an instance of that class from the JSON for you, just as it converts Java instances to JSON for GET.</span></p><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1445\"><span style=\"color: rgb(51,122,183);\">Sending data to an application</span></a></li></ul></ac:rich-text-body></ac:structured-macro><p><span style=\"color: rgb(35,31,32);\"><strong>Optional resources</strong></span></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"ea5d02c7-7bbf-424d-8982-9c1b623ac598\"><ac:parameter ac:name=\"title\">Spring</ac:parameter><ac:rich-text-body><p><span style=\"color: rgb(35,31,32);\">Some examples of sending different types of objects with JSON:</span></p><ul><li><a href=\"http://www.leveluplunch.com/java/tutorials/014-post-json-to-spring-rest-webservice/\"><span style=\"color: rgb(51,122,183);\">LevelUp Lunch: Post JSON to spring REST</span></a></li></ul><p><span style=\"color: rgb(35,31,32);\">Some sample code to show how to control what the Jackson library will include and not include when serializing Java to JSON and deserializing JSON to Java:</span></p><ul><li><a href=\"http://www.baeldung.com/jackson-field-serializable-deserializable-or-not\"><span style=\"color: rgb(51,122,183);\">Specifying what Jackson should serialize / deserialize</span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "263913613",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java - Task 10 Resources",
    "content": "<p><span style=\"color: rgb(35,31,32);\">A brief guide to the Resource subsections:</span><br /><span style=\"color: rgb(35,31,32);\"><strong>Java:</strong>&nbsp;This task involves a fair amount of nested loops over multiple collections of data, counting and summing. Complex though these loops are, they can be done fairly compactly with Java's streams and lambda expressions.</span></p><p><span style=\"color: rgb(35,31,32);\"><strong>Required resources</strong></span> </p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"0ca96c67-8c17-42dd-9013-c7be8b14bafc\"><ac:parameter ac:name=\"title\">Java</ac:parameter><ac:rich-text-body><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=47\"><span style=\"color: rgb(51,122,183);\">Looping with&nbsp;streams</span></a></li></ul></ac:rich-text-body></ac:structured-macro><p><span style=\"color: rgb(35,31,32);\"><strong>Optional resources</strong></span></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"3d9c2b98-7dee-4024-b0eb-f55229c5e779\"><ac:parameter ac:name=\"title\">Java</ac:parameter><ac:rich-text-body><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1447\"><span style=\"color: rgb(51,122,183);\">General introduction to looping in Java</span></a></li></ul></ac:rich-text-body></ac:structured-macro><p><br /></p>",
    "conflPageId": "263913620",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Java - Task 11 Resources",
    "content": "<p><span style=\"color: rgb(35,31,32);\">A brief guide to the Resource subsections:</span><br /><span style=\"color: rgb(35,31,32);\"><strong>JavaScript:</strong>&nbsp;Many games require code that executes periodically, e.g., every second, to update the positions of objects, count down to a deadline, and so on. This resource shows how to do that in JavaScript so that you can check to see if the other player has moved yet.</span></p><p><span style=\"color: rgb(35,31,32);\"><strong>Required resources</strong></span> </p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" ac:macro-id=\"bd0a0b75-0b90-4649-be49-1789cd0cfc9c\"><ac:parameter ac:name=\"title\">JavaScript</ac:parameter><ac:rich-text-body><ul><li><a href=\"https://codeacademy.ubiqum.com/mc/ebook?id=1446\"><span style=\"color: rgb(51,122,183);\">How to execute JavaScript code periodically</span></a></li></ul></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br /></p>",
    "conflPageId": "263913626",
    "conflChildrenId": [

    ]
  },
  {
    "title": "JS Classes Exercises (before starting with Java)",
    "content": "<p style=\"\"><strong>Important: always implement one exercise at a time (if possible just parts of it), and test each solution (or each change). The general idea is, code a bit and try, code a bit and try&hellip;<span>&nbsp;</span></strong>Here's an example with an explanation about classes in JavaScript.</p><p style=\"\">Classes were added in last version of JavaScript (called ECMAScript 6 or just ES6). It's something similar to how classes work in other languages (Java, Ruby, etc). This is a very important concept in programming, so sooner or later you'll want to learn about it. (And I highly recommend you to do it before the Java modules).</p><p style=\"\">In this example you will find an index.html and 3 JavaScript files: main1.js, main2.js and main3.js.</p><p style=\"\">The index.html loads main1.js. Read the main1.js file and see how it creates a plain literal object with some methods.</p><p style=\"\">When you understand main1.js make index.html load main2.js instead, and try to understand what main2.js does. It just creates the object from inside a function, to avoid code repetition.</p><p style=\"\">Finally replace main2.js by main3.js, where you can see how you can use classes instead of plain objects.</p><p style=\"\">You can play with the Car class in main3.js to understand how it works.</p><p style=\"\"><strong>Suggested exercises:</strong></p><ol><li style=\"\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Add another property like model, so you can create a &ldquo;Ford&rdquo; with model &ldquo;Mondeo&rdquo;. Make the status method display the model too.</span></li><li style=\"\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Fix the brake method so the car never reduces its speed below zero (a Car can't run at -50 km/h) even when you try to brake more than necessary.</span></li><li style=\"\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Add a new method to stop the car immediately (set the speed to 0). It doesn't need parameters.</span></span></li><li style=\"\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Add a method that returns a boolean saying if the car is running (speed is greater than zero) or not.</span></span></span><span style=\"color: rgb(85,85,85);text-decoration: none;\"></span></li></ol><p style=\"\">You can also try to create other classes.</p><p style=\"\"><strong>TV class:</strong></p><ol><li style=\"\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Create a TV class with properties like brand, channel and volume.</span></li><li style=\"\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Specify brand in a constructor parameter. Channel should be 1 by default. Volume should be 50 by default.</span></li><li style=\"\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Add methods to increase and decrease volume. Volume can't never be below 0 or above 100.</span></span></li><li style=\"\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Add a method to set the channel. Let's say the TV has only 50 channels so if you try to set channel 60 the TV will stay at the current channel.</span></span></span></li><li style=\"\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Add a method to reset TV so it goes back to channel 1 and volume 50. (Hint: consider using it from the constructor).</span></span></span></span></li><li style=\"\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">It's useful to write a status, that returns info about the TV status like: &ldquo;Panasonic at channel 8, volume 75&rdquo;.</span></span></span></span></span></li></ol><p><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Look for main4.js and main5.js here. After reading, playing with them and understanding what they do,<span>&nbsp;</span></span><strong style=\"text-decoration: none;\">here are some exercises</strong><span style=\"color: rgb(85,85,85);text-decoration: none;\">:</span></span></span></span></span></span></p><ol><li><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">In ShoppingCart, define a method totalPrice() that returns the total amount of the products it contains.</span></span></span></span></span></span></span></li><li><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Now let's say that, if you buy 5 products or more, you have a 10% of discount. Change totalPrice to reflect this calculation.</span></span></span></span></span></span></span></span></li><li><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Besides the previous discount, if you buy 3 items of the same type (e.g. 3 pencils) you may get one more for free. So, if you buy 4 pencils you only pay 3, if you buy 8 pencils you only pay 6, etc. Change totalPrice so it considers the free items you get. Notice that if you buy 3 pencils you just pay the 3 of them.</span></span></span></span></span></span></span></span></span></li><li><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Sometimes a product is sold out and has to be replaced by a new one. Add a method replace(productName, replacementProduct) that looks for products with productName and replaces them by new instances of the product like replacementProduct. Notice that productName is a string, and replacementProduct is a Product. Also, bear in mind that you don't have to add the replacementProduct itself to the cart, but create new products like that one (whenever necessary).</span></span></span></span></span></span></span></span></span></span></li></ol><p><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span style=\"color: rgb(85,85,85);text-decoration: none;\">Important: always implement one exercise at a time (if possible just parts of it), and test each solution (or each change) with different combinations of products. The general idea is, code a bit and try, code a bit and try&hellip;</span></span></span></span></span></span></span></span></span></span></span></p><p><span style=\"color: rgb(85,85,85);text-decoration: none;\">Exercises to send to students:</span></p><p><span style=\"color: rgb(85,85,85);text-decoration: none;\"><span>&nbsp;</span></span><ac:structured-macro ac:name=\"view-file\" ac:schema-version=\"1\" ac:macro-id=\"d7def2e7-61cc-465f-b94e-ec297202aae3\"><ac:parameter ac:name=\"name\"><ri:attachment ri:filename=\"JS classes intro-20190318T104532Z-001.zip\" ri:version-at-save=\"1\" /></ac:parameter><ac:parameter ac:name=\"height\">150</ac:parameter></ac:structured-macro></p>",
    "conflPageId": "282263572",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Web Development Resources and E-Books",
    "content": "<p>This page is filled with links to resources and e-books for the web development program.</p><p><br /></p><p>eBooks:</p><p>- Ubiqum eBooks: <a href=\"https://codeacademy.ubiqum.com/ebooks/\">https://codeacademy.ubiqum.com/ebooks/</a> . If you don&acute;t have an account, use the following credentials:</p><ul style=\"list-style-type: square;\"><li>User: <span class=\"c-message__body\"><a class=\"c-link\" href=\"mailto:ubiqum.course@gmail.com\">ubiqum.course@gmail.com</a></span></li><li>Password: <span class=\"c-message__body\">15Ub129</span></li></ul><p>-&nbsp;Free eBooks: <a href=\"https://books.goalkicker.com/\">https://books.goalkicker.com/</a></p><p><br /></p><p>Recommended tutorials:</p><p>- CSS Grid: <a href=\"https://www.youtube.com/watch?v=jV8B24rSN5o\">https://www.youtube.com/watch?v=jV8B24rSN5o</a></p><p>- Bootstrap: <a href=\"https://www.youtube.com/watch?v=gqOEoUR5RHg\">https://www.youtube.com/watch?v=gqOEoUR5RHg</a></p><p>- VueJS (1-14): <a href=\"https://www.youtube.com/watch?v=5LYrN_cAJoA&amp;list=PL4cUxeGkcC9gQcYgjhBoeQH7wiAyZNrYa\">https://www.youtube.com/watch?v=5LYrN_cAJoA&amp;list=PL4cUxeGkcC9gQcYgjhBoeQH7wiAyZNrYa</a></p><p>- Firebase: <a href=\"https://www.youtube.com/watch?v=F6UWb9FNnj4\">https://www.youtube.com/watch?v=F6UWb9FNnj4</a></p><p>- NodeJS: <a href=\"https://www.youtube.com/watch?v=w-7RQ46RgxU&amp;list=PL4cUxeGkcC9gcy9lrvMJ75z9maRw4byYp&amp;index=1\">https://www.youtube.com/watch?v=w-7RQ46RgxU&amp;list=PL4cUxeGkcC9gcy9lrvMJ75z9maRw4byYp&amp;index=1</a></p><p>- Node, Express and MongoDB Set Up: <a href=\"https://www.youtube.com/watch?v=BRdcRFvuqsE&amp;list=PL4cUxeGkcC9jBcybHMTIia56aV21o2cZ8&amp;index=1\">https://www.youtube.com/watch?v=BRdcRFvuqsE&amp;list=PL4cUxeGkcC9jBcybHMTIia56aV21o2cZ8&amp;index=1</a></p><p>- React &amp; Redux: <a href=\"https://www.youtube.com/watch?v=OxIDLw0M-m0&amp;list=PL4cUxeGkcC9ij8CfkAY2RAGb-tmkNwQHG\">https://www.youtube.com/watch?v=OxIDLw0M-m0&amp;list=PL4cUxeGkcC9ij8CfkAY2RAGb-tmkNwQH</a></p><p>-&nbsp;Redux (Chapters 1-3): <a href=\"https://www.freecodecamp.org/news/understanding-redux-the-worlds-easiest-guide-to-beginning-redux-c695f45546f6/\">https://www.freecodecamp.org/news/understanding-redux-the-worlds-easiest-guide-to-beginning-redux-c695f45546f6/</a></p><p>- Complete MERN Application: <a href=\"https://www.youtube.com/watch?v=PBTYxXADG_k&amp;list=PLillGF-RfqbbiTGgA77tGO426V3hRF9iE\">https://www.youtube.com/watch?v=PBTYxXADG_k&amp;list=PLillGF-RfqbbiTGgA77tGO426V3hRF9iE</a></p><p><br /></p><p>Other resources:</p><p>- FlexBox: <a href=\"https://flexboxfroggy.com/\">https://flexboxfroggy.com/</a></p><p>-&nbsp;Passport (1-14): <a href=\"https://www.youtube.com/watch?v=sakQbeRjgwg&amp;list=PL4cUxeGkcC9jdm7QX143aMLAqyM-jTZ2x\">https://www.youtube.com/watch?v=sakQbeRjgwg&amp;list=PL4cUxeGkcC9jdm7QX143aMLAqyM-jTZ2x</a></p><p><br /></p>",
    "conflPageId": "294354945",
    "conflChildrenId": [

    ]
  },
  {
    "title": "React Recruiter Coding Task (Part Time)",
    "content": "<h2>Email from company</h2><p style=\"\">Hi there,&nbsp;</p><div style=\"\"><p><br /></p></div><div style=\"\"><p>thank you for your application in our company.<span>&nbsp;</span></p></div><p><span style=\"color: rgb(34,34,34);\">What we want to accomplish, is to get a feeling for your code styling. So please share your repository in the end and provide deployment instructions.&nbsp;</span><br style=\"\" /><br style=\"\" /><span style=\"color: rgb(34,34,34);\">We would like the app to use a modern JavaScript framework such as React.</span><br style=\"\" /><br style=\"\" /><span style=\"color: rgb(34,34,34);\">Prepare two simple screens:&nbsp;</span><br style=\"\" /><br style=\"\" /><span style=\"color: rgb(34,34,34);\">1. List of all beers including name, abv, ibu After a click on one list item you get a second screen&nbsp;</span><br style=\"\" /><br style=\"\" /><span style=\"color: rgb(34,34,34);\">2. Details of beer including: name, abv, ibu, isOrganic, labels, year, status, if available: related glass data&nbsp;</span><br style=\"\" /><br style=\"\" /><span style=\"color: rgb(34,34,34);\">please use:&nbsp;</span><a style=\"\" href=\"https://www.brewerydb.com/\">https://www.brewerydb.com/</a><span style=\"color: rgb(34,34,34);\">&nbsp;</span><br style=\"\" /><br style=\"\" /><br style=\"\" /><br style=\"\" /><span style=\"color: rgb(34,34,34);\">It would be great if you could answer share the GitHub repository in your next mail.&nbsp;</span><br style=\"\" /><br style=\"\" /><br style=\"\" /><span style=\"color: rgb(34,34,34);\">&nbsp;Best,&nbsp;</span><br style=\"\" /><br style=\"\" /><span style=\"color: rgb(34,34,34);\">Recruiter</span></p><h2 class=\"adL\" style=\"\">Ressources</h2><ul><li>CORS policy issue. Find information about CORS issues. Use this serveur as a prefix of the URL to bypass this issue :&nbsp;<a style=\"text-decoration: underline;text-align: left;\" href=\"https://ubiqum-cors-anywhere.herokuapp.com/\">https://ubiqum-cors-anywhere.herokuapp.com/</a></li><li>Paginated API. Notice that the API has been paginated, it means that every response only returns a limites number of results. Find a solution to this issue</li></ul>",
    "conflPageId": "296976386",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Career Services - Student Tasks",
    "content": "<p />",
    "conflPageId": "298090497",
    "conflChildrenId": [
      "300843039",
      "300449834",
      "306839553"
    ]
  },
  {
    "title": "Practice a Data Technical Test with your mentor",
    "content": "<ac:image ac:align=\"center\" ac:layout=\"center\" ac:src=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\"><ri:url ri:value=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\" /></ac:image><p><strong>FROM:</strong> Rachel Mildred <br /><strong>Subject:</strong> Technical test</p><p>Good morning,</p><p>As a Recruiter at Blackwell Electronics, I am very interested in your profile and think you'd be a good fit for a position in our company as a Data Analyst. The open position requires knowledge of machine learning, predictive analysis, business insights and reporting. You would be in charge of the Data Analysis department and in close contact with Marketing and Sales, so communication is also a must for this position.</p><p>We have found you through LinkedIn but we would like to see your work as well. Do you have a Rpubs account? That way we can see your portfolio so far. If you don't have a Rpubs account at this point, please create one and share the link with us.</p><p>For this interview, we have provided you with a set of technical tests so please choose the one that you think will better suit your interests. You can either choose the one that fits better with your skills or the one that is more challenging, it's up to you.</p><p>Good luck, and I hope you get the position.</p><p>Best regards,</p><p>Rachel</p><p /><p>Rachel Mildred</p><p>Head of Recruitment</p><p>Blackwell Electronics</p><p><br /></p>",
    "conflPageId": "298123283",
    "conflChildrenId": [
      "298287143"
    ]
  },
  {
    "title": "Plan of Attack T5",
    "content": "<p><a href=\"https://gbstool.learningbydoingtools.com/mc/poa?productID=3724&amp;taskID=3987#introduction\">INTRODUCTION</a></p><p><strong>The most common questions in a job interview&hellip;</strong></p><p>A job interview is a challenge for both the person in charge of the selection and the candidate. The recruiter wants to find the ideal candidate for the position and you want to be the chosen one. For this reason you must be ready for answering the questions he/she asks in the best way possible and effectively.</p><p>We have compiled a <strong>list of questions</strong> you will see in the sections below, that are common to all the interviewers and that will help you be prepared for any interview challenge.</p><p>How to answer them?</p><ul><li><p>Shortly but meaningful</p></li><li><p>Quick response</p></li><li><p>Well structure and clear language</p></li><li><p>Using real life experiences</p></li><li><p>Mentioning the abilities learned</p></li><li><p>Highlighting your main achievements</p></li><li><p>Showing clear goals and motivations</p></li><li><p>Adapting your speech to the position</p></li><li><p>Being yourself</p></li><li><p>Showing interest in the company</p></li><li><p>Don&rsquo;t forget anything relevant!</p></li></ul><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"45de3e1f-e690-4c98-a877-ce0ec5a59e6b\"><ac:parameter ac:name=\"title\">1. Introduction</ac:parameter><ac:rich-text-body><p><strong>Tell me a bit about yourself. /Can you tell me about [this] interesting point in time in your career?</strong></p><p>This is usually the first question of every interview. It&rsquo;s a challenging question used to get a first impression about you and to break the ice. The interviewer wants to see how you handle explaining the most relevant aspects of your career and profile in a brief but meaningful time or starts directly asking for some specific experience. You don&rsquo;t need to extend too much (4/5 points) and you can help yourself with your elevator pitch we worked on earlier. Remember to have a look at the candidate requirements of the job offer and adapt your speech to these.</p><p /><p><strong>What do you know about us?</strong></p><p>The company will appreciate some research about them (main values, goals, missions, roles, impacts, services&hellip;). This will prove your interest in the position and that you are seriously involved. You can also check the company's social media and make a comment about some of the information shared lately. This answer will help you with the next question.</p><p /><p><strong>What is your motivation for working with us?</strong></p><p>This question is basic for demonstrating again your interest and motivation for working in their company and for showing that you really fit with their philosophy. This is a good time to explain your trust in their company, express interest in growing professionally with them, highlight past employment within the same sector, etc. Always be honest about your intentions. Add that you think it really fits with your profile and personal interests. Justify this, using examples.</p><p /><p><strong>Why did you decide to make a career change?</strong></p><p>Here, try to avoid making negative comments about your previous company or experiences, because every experience teach you something and they may think you could talk about them in the same way later on in your career.</p><p>Try to focus on your need to face new challenges, to try something different, (another kind of company or role for example), to learn new competencies or to contribute in another sector/position where you think you can perform better or you are more motivated to work.</p><p /><p><strong>Can you walk me through your most significant career achievement?</strong></p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"dda4b8ef-b1fd-4543-b12d-3584fd78e1ae\"><ac:parameter ac:name=\"title\">2. Adaptability</ac:parameter><ac:rich-text-body><p><strong>Tell me about a time when you were asked to do something you had never done before. How did you react? What did you learn?</strong></p><p /><p><strong>Describe a situation in which you embraced a new system, process, technology, or idea at work that was a major departure from the old way of doing things.</strong></p><p /><p><strong>Recall a time when you were assigned a task outside of your job description. How did you handle the situation? What was the outcome?</strong></p><p /><p><strong>Tell me about the biggest change that you have had to deal with. How did you adapt to that change?/ What was harder for you during the course?</strong></p><p /><p><strong>Tell me about a time when you had to adjust to a colleague&rsquo;s working style in order to complete a project or achieve your objectives.</strong></p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"279ba0f9-f4ff-4918-9a0d-1c1b4519fb51\"><ac:parameter ac:name=\"title\">3. Culture Fit</ac:parameter><ac:rich-text-body><p><strong>What are the three things that are most important to you in a job?</strong></p><p /><p><strong>Tell me about a time in the last week when you&rsquo;ve been satisfied, energized, and productive at work. What were you doing?</strong></p><p /><p><strong>What&rsquo;s the most interesting thing about you that&rsquo;s not on your resume?</strong></p><p /><p><strong>What would make you chose our company over others?</strong></p><p /><p><strong>What&rsquo;s the biggest misconception your coworkers have about you and why do they think that?</strong></p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"c7d315e6-fce2-4b67-8c8a-6b80f2b64610\"><ac:parameter ac:name=\"title\">4. Out of The Box</ac:parameter><ac:rich-text-body><p><strong>How many wheels roll in the airport of Barcelona in one day long?</strong></p><p>Of course, you don't know the exact number, neither do I nor the recruiter! What they are going to evaluate here is your capacity to extract a number by using your logic and reason. You have to extract different deductions that will lead you to a specific number.</p><p>How can you do that?</p><p>By proposing a hypothesis, for example:</p><p>&quot;If the planes have x wheels, and there are x planes landing every hour and x taking off... If one day has 24 hours... If there is approximately one suitcase per person that has x wheels, and every hour they are x people walking with their suitcase...<strong>The answer will be</strong>... &quot;</p><p>By saying which information you will need to get to this number:</p><p>&quot; I should know how many planes land and take off every hour... then I will do x calculation... I should know how many people walk with suitcases in an hour... then do this calculation...I should...</p><p /><p><strong>How many </strong><em><strong>la Caixa </strong></em><strong>banks are in Barcelona? /</strong></p><p><strong>What 3 objects would you pick up with you to the moon?</strong></p><p>Same as the previous one.</p><p /><p><strong>How would you explain Facebook to your grandmother?</strong></p><p>This question is asked to evaluate your capacity of explaining something complex in the most practical and easy way to make everybody understand it.</p><p>In your job processes, you will have to deal with that, when being interviewed by a recruiter who doesn't control coding or data technologies.</p><p>Here you can find a <a href=\"https://drive.google.com/file/d/0B1U9Xh4FelDnbExRMUlTb09PT0ZzSThRdHZiS1ZMZXhEbWt3/view?usp=sharing\">logical test</a> that a company send to one of our students. Get some practice!</p><p /><p><strong>How would you describe yourself in one word? / If you could be an animal, which one would you choose?</strong></p><p>There is no wrong response, just explain why.</p><p /></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"0b6e0bb4-8a4e-4d31-9ea2-dad210ef0723\"><ac:parameter ac:name=\"title\">5. Collaboration</ac:parameter><ac:rich-text-body><p><strong>Give an example of when you had to work with someone who was difficult to get along with. How did you handle interactions with</strong></p><p><strong>that person?</strong></p><p /><p><strong>Tell me about a time when you were communicating with someone and they did not understand you. What did you do?</strong></p><p /><p><strong>Tell me about one of your favourite experiences working with a team and your contribution.</strong></p><p /><p><strong>Describe the best partner or supervisor with whom you&rsquo;ve worked. What part of their managing style appealed to you?</strong></p><p /><p><strong>Can you share an experience where a project dramatically shifted directions at the last minute? What did you do?</strong></p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"eb9a0a7f-4ac4-4ab7-95f7-f58cc0b64a85\"><ac:parameter ac:name=\"title\">6. Growth Potential</ac:parameter><ac:rich-text-body><p><strong>Recall a time when your manager was unavailable when a problem arose. How did you handle the situation? With whom did you consult?</strong></p><p /><p><strong>What professional milestones are you hoping to achieve at our company?</strong></p><p /><p><strong>What would motivate you to make a move from your current role?</strong></p><p /><p><strong>When was the last occasion you asked for direct feedback from a superior? Why? What&rsquo;s the biggest career goal you&rsquo;ve ever achieved?</strong></p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"107cd258-86b1-4d15-ba21-6a1667d84073\"><ac:parameter ac:name=\"title\">7. Emotional Intelligence</ac:parameter><ac:rich-text-body><p><strong>Give me an example of a time that you lost your temper. Tell me what happened. What was the outcome?</strong></p><p /><p><strong>Here&rsquo;s problem, X. Can you offer a win-win solution?</strong></p><p /><p><strong>Tell me about a time that a client was disappointed with your work. How did you respond?</strong></p><p /><p><strong>How you managed to quit your last job? How is your relationship with your ex-boss?</strong></p><p /><p><strong>Did you have some conflict with a peer? Did you solve it? How?</strong></p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"bcefd6ef-4dfb-45e3-8006-0d461d606688\"><ac:parameter ac:name=\"title\">8. Prioritization</ac:parameter><ac:rich-text-body><p><strong>ell me about a time when you had to juggle several projects at the same time. How did you organize your time? What was the result?</strong></p><p /><p><strong>Tell me about a project that you planned. How did you organize and schedule the tasks?</strong></p><p><strong>Describe a time when you felt stressed or overwhelmed. How did you handle it?</strong></p><p /><p><strong>How do you determine what amount of time is reasonable for a task?</strong></p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"f7137bf5-cc0f-4eb9-a314-57887bc3a701\"><ac:parameter ac:name=\"title\">9. Leadership</ac:parameter><ac:rich-text-body><p><strong>Tell me about the last time something significant didn&rsquo;t go according to plan at work. What was your role? What was the outcome?</strong></p><p /><p><strong>Describe a situation where you needed to persuade someone to see things your way. What steps did you take? What were the results?</strong></p><p /><p><strong>Give me an example of a time when you felt you led by example. What did you do and how did others react?</strong></p><p /><p><strong>Tell me about the toughest decision you had to make in the last six months.</strong></p><p /><p><strong>Have you ever had to &ldquo;sell&rdquo; an idea to your co-workers or group? How did you do it? What were the results?</strong></p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"51fde54d-308c-44cd-8f27-ca8faec8f203\"><ac:parameter ac:name=\"title\">10. Regarding Technology</ac:parameter><ac:rich-text-body><p><strong>How you stay updated with data analysis/development?</strong></p><p>It is important you show interest in the market and follow other professionals, youtubers, bloggers or assist to the main events to demonstrate that you are very passionate about what you are doing. This is a good way to be up to date with the news and actual tendencies of the Tech world. Check these articles to get some ideas of who to follow:</p><p>- <a href=\"https://phraseapp.com/blog/posts/10-must-read-blogs-for-software-developer/\">10 Must-Read Blogs for Software Developer</a></p><p>- <a href=\"https://usersnap.com/blog/12-best-web-development-blogs-reading-right-now/\">11 best web development blogs you should be reading right now</a></p><p>- <a href=\"https://www.blendo.co/blog/the-best-blogs-every-data-analyst-should-follow/\">The best blogs every data analyst should follow</a></p><p /><p><strong>How do you document yourself to resolve a coding challenge?</strong></p><p>The recruiter wants to see the ability you have to learn by your own, that you describe the tools you use to solve specific problems related to coding (websites, blogs, Ubiqum program, etc.). You can talk about these two websites for the Java course (<a href=\"https://stackoverflow.com/\">Stackoverflow</a>, <a href=\"https://www.w3schools.com/\">W3schools</a>), for example.</p><p /><p><strong>Tell me about the most difficult technical challenge you&rsquo;ve encountered and how you resolved it.</strong></p><p>Companies are not looking for people who can just churn through bugs, but people who can understand the big picture as part of a larger product team.</p><p /><p><strong>What technologies could you not live without?/What are your favorite gadgets? Apps? Websites?</strong></p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"f14f96b6-8a52-46af-a992-c244d0d1dd5e\"><ac:parameter ac:name=\"title\">11. Technical Questions for Developers</ac:parameter><ac:rich-text-body><ul><li><p>Watch the following <a href=\"https://www.youtube.com/watch?v=gNLvqV2KrjQ\">video</a> that will help you prepare the answers to the technical questions</p></li></ul><ol><li><p>Check and be prepared for this <a href=\"https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/questions\">technical questions in GitHub</a> and also these ones:</p><ol><li><p>Which design patterns do you implement? How can you develop a web from 0?</p></li><li><p>Which is the difference between MVVM and MVC?</p></li><li><p>What is an Event Loob in Node Js?</p></li><li><p>What is a closhure?</p></li><li><p>How do you test code? Which systems do you use?</p></li><li><p>Which is the difference between a Null Variable and an undefined?</p></li><li><p>Which version controls do you use?</p></li></ol></li></ol></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"04c30c6f-f9cb-4f67-9235-3ca3f949aee5\"><ac:parameter ac:name=\"title\">12. Closing</ac:parameter><ac:rich-text-body><p><strong>Are you currently in any other selection processes?</strong></p><p>Do not be afraid to tell the interviewer that you are actively seeking for employment and that you have already attended other interviews. Having a high demand is an interesting quality.</p><p><strong>What is your salary expectations?</strong></p><p>To answer this question, it is best that you find out in advance what the market standard is. For the first position as a junior, the salary usually ranges between 18,000&euro; gross/year and 21,000&euro; for developers and between 18.000 and 26.000&euro; for junior data analysts. In some cases where there is technical career or previous experience relevant to the company, salary can be higher. You do not have to give a specific amount, but comment that you expect at least a minimum or more, depending on your qualifications.</p><p><strong>Do you have any other question for us? </strong><br /></p><p>This is a perfect time to show your motivation regarding the position. We recommend that you do not leave it unanswered with an &quot;everything is clear&quot;. You can take the opportunity to show again your interest in their project by asking them any curiosity you have in mind about the company or the position.</p><p>What can you ask regarding the company? The culture of the company, their plans for expansion, if they have a presence in any other country or which is their main competitor&hellip;</p><p>What can you ask regarding the position? Your situation inside the company (who are you dependent on), the dynamic (in team or autonomous), the possibilities of promotion, the trainings&hellip;</p><p>You can also ask about the hiring process (when they will let you know if you passed to the next phase, which is the next steps if you can keep in contact via email to know how the process is advancing...)</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"8bfa93d9-fbc0-4d49-8475-4233913b037c\"><ac:parameter ac:name=\"title\">13. What NOT To Say or Do</ac:parameter><ac:rich-text-body><p><strong>1. A candidate who refuses to admit to any failures</strong></p><p><strong>2. When a candidate says they want a new job because they are bored</strong></p><p><a href=\"https://www.linkedin.com/profile/view?id=AAkAAAB1rxUBmY5oeRkClY-bML_Bli4VluICGsk&amp;authType=NAME_SEARCH&amp;authToken=85EZ&amp;locale=en_US&amp;trk=tyah&amp;trkInfo=clickedVertical%3Amynetwork%2CclickedEntityId%3A7712533%2CauthType%3ANAME_SEARCH%2Cidx%3A1-3-3%2CtarId%3A1442512822046%2Ctas%3Asarah%20smith\">Smith</a>, the vice president of HR and user operations at Quora, always asks candidates why they are interested in the offered role. If they say they want it because they are &ldquo;bored&rdquo; at their current company, she sees it as a general lack of intellectual curiosity by the applicant.</p><p>I've worked in some very mundane jobs earlier in my career and have never been &lsquo;bored&rsquo;, there is always something to learn.&rdquo;</p><p><strong>3. Someone who is late and blames the commute</strong></p><p><strong>4. People who ask questions just for the sake of asking questions</strong></p><p><strong>5. Someone who applies to every job at your company</strong></p><p>Full-time professionals should have enough focus and self-awareness to apply for only the job they are most qualified for.</p><p><strong>6. Not answer what is being asked</strong></p></ac:rich-text-body></ac:structured-macro>",
    "conflPageId": "298123326",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Plan of Attack T4",
    "content": "<p><a href=\"https://gbstool.learningbydoingtools.com/mc/poa?productID=3724&amp;taskID=3986#introduction\">INTRODUCTION</a></p><p>The recommended structure for your pitch is:</p><ol><li><p>Presentation: Who am I, what do I do?</p></li><li><p>Competitive advantages and strengths</p></li><li><p>What are you passionate about in regards to the project?</p></li><li><p>What do you want them to remember about you?</p></li></ol><p>Collect your answers from the questions in order to complete your pitch. Check it and try to make the result a smooth and meaningful pitch.</p><p /><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"865f8986-b085-49a9-8dc3-5cc8fd5a2bac\"><ac:parameter ac:name=\"title\">1. Get Inspired</ac:parameter><ac:rich-text-body><ul><li><p>Watch the following videos to know the basis of this technique: <a href=\"https://vimeo.com/118741104\">https://vimeo.com/118741104</a> (in Spanish)</p></li><li><p><a href=\"https://www.youtube.com/watch?v=GqsWKaR9Q6M\">https://www.youtube.com/watch?v=GqsWKaR9Q6M</a> (in English)</p></li><li><p>Look at <a href=\"https://drive.google.com/file/d/0B5ZzfeqDu4sWLVBRODItYXVFNUU/view\">this</a> example of alumni to inspire you.</p></li></ul><p><br /></p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"195c5948-4f97-408e-8833-ce65c4639c28\"><ac:parameter ac:name=\"title\">2. Presentation: Who I am, What I do...</ac:parameter><ac:rich-text-body><ul><li><p>Watch this video: <a href=\"https://vimeo.com/118741107\">What we have to include in a pitch</a> (Spanish)</p></li><li><p>Think of at least 5 different ways to introduce yourself and choose the best one.</p></li><li><p>Make a list of the things you want them to know about you and remember to include all the important points.</p></li><li><p>Classify your professional career in two or three statements, giving them each a title. This way you can briefly explain your history.</p></li></ul></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"b2dddd5e-cfb8-4cf3-9567-ca5fd931717d\"><ac:parameter ac:name=\"title\">3. Think About What Your Audience Needs to Hear</ac:parameter><ac:rich-text-body><p>Think about and answer the following questions about your audience (Recruiter, CTO...):</p><ul><li><p>What do they want to hear?</p></li><li><p>What do they want to feel?</p></li><li><p>What interests them?</p></li><li><p>What are your strengths and competitive advantages?</p></li><li><p>What are the benefits that the company obtains by hiring you?</p></li></ul><p>Some suggestions: Most Recruiters are looking for the following:</p><ul><li><p>passion</p></li><li><p>commitment</p></li><li><p>trustworthiness and honesty</p></li><li><p>prior experience</p></li><li><p>that you'll be a good fit for the team</p></li><li><p>listening skills</p></li><li><p>ability to learn</p></li></ul><p /><p>By the end of the pitch, they should be able to see how they would benefit by hiring you. To show them this, remember the following important points:<br /><br /><strong>Demonstrate self-confidence:</strong> Talking about your qualities such as honesty, commitment, experience, and enthusiasm. In addition, show your achievements from your previous experiences.<br /><br /><strong>Highlight your competitive advantages in comparison to the rest:</strong> Think about the advantages compared to the market competition, such as recent university graduates. Highlight how many hours you've invested, the projects you've worked on, the programming languages you use, the Learn By Doing methodology, and your spoken languages - English is a great plus for employers. <br /><br /><strong>Be convincing. Why YOU?:</strong> Mention your strengths and present them credibly.</p><p><br />At the time of writing your pitch, you must take into account the words you decide to use.<br /><br /></p><p>Avoid using words that convey strange meanings such as:</p><ul><li><p>treatment</p></li><li><p>sign</p></li><li><p>tried</p></li><li><p>difficult</p></li><li><p>failure</p></li><li><p>cost</p></li><li><p>worry</p></li><li><p>decision</p></li><li><p>responsibility</p></li><li><p>difficulty</p></li></ul><p>Words that create a good atmosphere, attract attention and are useable:</p><ul><li><p>beneficial</p></li><li><p>passionate</p></li><li><p>current</p></li><li><p>interesting</p></li><li><p>value</p></li></ul><ul><li><p>opportunity</p></li><li><p>comfortable</p></li></ul><ul><li><p>faithful</p></li></ul><ul><li><p>happy</p></li><li><p>pleasure</p></li></ul><ul><li><p>insurance</p></li></ul></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"0b92e46c-e398-4f1a-ad7c-040b41037a8e\"><ac:parameter ac:name=\"title\">4. What Do You Love About the Project?</ac:parameter><ac:rich-text-body><ul><li><p>Why do you want to work with them and not another company? Choose one that you already know and create an example pitch.</p></li><li><p>What has motivated you to apply?</p></li><li><p>Why do you think you'd be a good fit for this company?</p></li></ul><p>This is a very important part: Companies love to feel special and receive real interest in their project. They want to hire people who are also passionate about the project.</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"2064751c-ae3f-4161-baea-e2223e030054\"><ac:parameter ac:name=\"title\">5. What Do You Want Them To Remember About You?</ac:parameter><ac:rich-text-body><p>Find an emotional / impactful final phrase that you want them to remember about you.</p></ac:rich-text-body></ac:structured-macro>",
    "conflPageId": "298156069",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Task 1: Defining My Professional Profile",
    "content": "<ac:image ac:align=\"center\" ac:layout=\"center\" ac:src=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\"><ri:url ri:value=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\" /></ac:image><p><strong>FROM:</strong> Jane Phillips <br /><strong>Subject:</strong> Boost your career!</p><p>Hello!</p><p>My name is Jane Phillips, I am a Job Consultant who specialises in IT profiles. I like the look of your profile and believe you have a promising career ahead of you. I have a list of candidates for the IT sector that I would like to add you to so that you can be well placed in the job market. In order to begin creating your professional profile for this competitive market, I am going to first ask you for a few things.</p><p>In the attached document, you will see the steps you have to follow in order to complete this task, as well as some useful pieces of advice along the way. The Career Advisors from your school will help you with that.</p><p>Remember that the more effort you put in, the greater the possibility that you'll get your dream job!</p><p>Please send this to me by the end of the day!</p><p>Regards,</p><p>Jane</p><p><br /></p><p class=\"media-group\"><ac:structured-macro ac:name=\"view-file\" ac:schema-version=\"1\" ac:macro-id=\"214d25dd-7207-44a1-a9c3-2940d7587287\"><ac:parameter ac:name=\"name\"><ri:attachment ri:filename=\"My Professional Profile.docx\" ri:version-at-save=\"1\" /></ac:parameter></ac:structured-macro></p><p />",
    "conflPageId": "298188801",
    "conflChildrenId": [
      "298483733",
      "298254337"
    ]
  },
  {
    "title": "Creating an Optimized CV",
    "content": "<ac:image ac:align=\"center\" ac:layout=\"center\" ac:src=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\"><ri:url ri:value=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\" /></ac:image><p><strong>FROM:</strong> Jane Phillips <br /><strong>Subject:</strong> Create a new CV</p><p /><p>Good morning,</p><p>You're ready to create your new Curriculum Vitae (CV) and include all of your strengths that will help you to achieve your goal. Your resume is a way of marketing yourself to potential employers quickly and effectively.</p><p>I want you to work on a very specific resume for the IT sector based on your skills. Remember that a good CV is the first step to getting an interview and a position in a credible company, so investing your time and energy in your CV now will have priceless results.</p><p>I have created a guide to help you create a CV that will make you stand out from the others based on my professional experience. Just follow the steps in the 'Plan of Attack' and the tips I suggest in 'Resources' to get started. The Career Advisors will help you have the final version of the CV ready for today!</p><p>Best regards,</p><p>Jane</p><p><br /></p>",
    "conflPageId": "298254337",
    "conflChildrenId": [
      "298319895",
      "300351492",
      "298418191"
    ]
  },
  {
    "title": "Plan of Attack T6",
    "content": "<p><a href=\"https://gbstool.learningbydoingtools.com/mc/poa?productID=3724&amp;taskID=3982#introduction\">INTRODUCTION</a></p><h2><strong>Your Task</strong></h2><p>Blackwell Electronics' Head of Recruitment, Rachel Mildred, has asked you to take a technical test in order to test your data analytics skills. It is very typical for a Recruiter to send you a problem and expect to get a reasonable solution from you in a few days. Remember that communication is as important as the analysis itself so you will be asked to:</p><ul><li><p>Explore the problem and perform an analysis.</p></li><li><p>Submit your analysis to kaggle so that you can measure the quality of your analysis.</p></li><li><p>Present your findings and insights in a brief report to the Recruiter.</p></li></ul><p /><p>The technical test requires you to present one deliverable:</p><p><strong>Technical test number #. </strong>A zip file that includes a two-page report summarising your findings and conclusions.</p><p /><p>Now it's time to choose one of the technical tests given to you.</p><h2>The Titanic disaster</h2><p>The sinking of the RMS Titanic is one of the most infamous shipwrecks in history. On April 15, 1912, during her maiden voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew. This sensational tragedy shocked the international community and led to better safety regulations for ships.</p><p>One of the reasons that the shipwreck led to such loss of life was that there were not enough lifeboats for the passengers and crew. Although there was some element of luck involved in surviving the sinking, some groups of people were more likely to survive than others, such as women, children, and the upper-class.</p><p>In this challenge, we ask you to complete the analysis of what sorts of people were likely to survive. In particular, we ask you to apply the tools of machine learning to predict which passengers survived the tragedy.</p><p>In this case, we will ask you to define which are the most important variables in the case of survival or not of the people on board the ship and to submit the accuracy of your prediction as well as to send your predictions of the competition to kaggle.</p><p>Follow this <a href=\"https://www.kaggle.com/c/titanic\">link</a> to start with your technical test.</p>",
    "conflPageId": "298287143",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Task 2: Using Linkedin Like a Pro",
    "content": "<hr /><ac:image ac:align=\"center\" ac:layout=\"center\" ac:src=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\"><ri:url ri:value=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\" /></ac:image><p><strong>FROM:</strong> Jane Phillips <br /><strong>Subject:</strong> Your Linkedin Profile</p><p>Hello again!</p><p>Our Recruiters are demanding more and more quality candidates like yourself. But apart from having a look at your CV, they are also searching for your profile on LinkedIn! If you don't have one already, it is very important that you create a profile and keep it up-to-date!</p><p>LinkedIn is a very useful tool to connect you to companies, find interesting job offers, and create relevant connections. It is heavily used by Recruiters when looking for specific profiles so it will increase your exposure to these companies. Having a profile on LinkedIn will also show more professionalism from your side and make your profile more competitive. Prepare and use your LinkedIn profile to get more job opportunities easily!</p><p>P.s: Have you started applying for any open job listings?</p><p>Regards,</p><p>Jane</p><p /><p /><p><br /></p>",
    "conflPageId": "298319873",
    "conflChildrenId": [
      "298319904",
      "298516501",
      "300613635"
    ]
  },
  {
    "title": "Plan of Attack 1",
    "content": "<p><a href=\"https://gbstool.learningbydoingtools.com/mc/poa?productID=3724&amp;taskID=3980#introduction\">INTRODUCTION</a></p><ol><li><p>Review the resources and examples of Ubiqum graduates for inspiration.</p></li><li><p>Choose a CV template.</p></li><li><p>Think about the different sections of your CV.</p></li><li><p>Complete each section, taking into consideration the tips and the examples given.</p></li><li><p>Share your CV with colleagues and ask them if your CV is easy to read, clear and results orientated.</p></li><li><p>Finally, go over your CV as if you were a Recruiter who receives hundreds of applications. Try to make changes that you feel make your CV stand out from the crowd.</p></li></ol><p><br /></p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"c2eb0780-cc33-4792-ba1e-4477d2df915b\"><ac:parameter ac:name=\"title\">1. Get Inspired</ac:parameter><ac:rich-text-body><p>To create an idea of what kind of CV we are asking you to create, find some <a href=\"https://drive.google.com/open?id=0B6HP-xHxatxNQkRBLUJDdkxndDg\">examples of CVs</a> from Ubiqum graduates. A quick LinkedIn Search for Ubiqum will also bring up the profiles of some of our former graduates where you should be able to find descriptions about their projects during the course. Feel free to copy paste those descriptions.</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"1b6e9828-2e03-4bcc-aabc-aad429e1c7d9\"><ac:parameter ac:name=\"title\">2. Choose a Template</ac:parameter><ac:rich-text-body><p>First impressions count - the format and presentation of your CV is what a recruiter will instantly consider. To assist with the design, on the internet there are thousands of pre-prepared CV templates for you to use.</p><p>Based on recruiter feedback and student outcomes we recommend the following services:</p><ol><li><p>Have a look at this template <a href=\"http://plantillas-curriculum.com/\">website</a> where you can find all kind of professional CVs and download them by free.</p></li><li><p><a href=\"http://craft-cv.com/es\">Craft-cv</a></p></li></ol><p>You can use the free version, but Ubiqum students get a discount on the Premium package. With premium, you get 90 days access to create and download unlimited versions.</p><p /><p><strong>TIP:</strong></p><p><strong>Discount Code: ubiqum</strong></p><p /><p><strong>Prices</strong><em> (all are one off payments)</em>:</p><p>Starter 2&euro;</p><p>Premium 3&euro;</p><p>Duo Elite 6&euro;</p><p /><p>3.<a href=\"https://enhancv.com/\">Enhance-cv</a></p><p>This is a great alternative and comes with some added features including sharing with colleagues and auto-correct features. Again there are free and paid versions. You can download a word version <a href=\"https://drive.google.com/file/d/0B6HP-xHxatxNS1I4cUFFbWFENHBHLXE2WDlyaC1xNnB5Qnhv/view\">here</a> created by one of our students.</p><p /><p>4. <a href=\"https://www.topcv.com/\">TopCV.com</a></p><p>Once you are done building your CV and you adapted it for a certain position, you can get your version checked here for free and get a Data related feedback aswell as job invitations.</p><p /><p>5.<a href=\"https://resume.io/create-resume\"> Resume.io</a></p><p>Use professional field-tested resume templates that follow the exact &lsquo;resume rules&rsquo; employers look for. Easy to use &amp; done within minutes - we believe you can try this for free!</p><p /><p>6. <a href=\"https://smashresume.com/downloads/simple-word-cv/\">Smash Resume</a></p><p /><p>7. <a href=\"https://www.resume-now.com/build-resume/choose-template\">Resume now</a></p><p /><p>8. <a href=\"https://resumegenius.com/resume-samples/web-developer-resume-example\">Resume Genius</a></p><p /><p><a href=\"https://www.canva.com/create/resumes/\">9. Canva </a></p><p>Free Resume Builder </p><p /><p>10.<a href=\"https://flowcv.io\"> Flow CV</a></p><p>Free Resume Builder </p><p>- Extremely flexible (makes templates obsolete)<br />- All functionality works without a paywall<br />- Intuitive design<br />- Live preview<br />- Easy versioning<br />- Data privacy<br />- Beautiful resumes</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"0fc8628c-cab9-4722-882c-364664666339\"><ac:parameter ac:name=\"title\">3. Personal Information</ac:parameter><ac:rich-text-body><p>Make sure you include:</p><ul><li><p>Complete Name</p></li><li><p>Job Title</p></li><li><p>Contact (email and phone)</p></li><li><p>Github or portfolio</p></li><li><p>Linkedin (optional)</p></li><li><p>City</p></li><li><p>Extract/About your profile</p></li><li><p>Recent and Professional photo</p></li></ul><p><br /></p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"201\" ac:original-width=\"597\"><ri:attachment ri:filename=\"cabecera.png\" ri:version-at-save=\"1\" /></ac:image><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"274\" ac:original-width=\"599\"><ri:attachment ri:filename=\"neus.png\" ri:version-at-save=\"1\" /></ac:image><p>Include a title that best suits your current role. At Ubiqum it makes sense that you would mention that your studies with us, the projects completed and place this as your desired future <strong>job title</strong>.</p><p /><p><strong>***TIP:***</strong></p><p>Write a extract about your profile including strengths, what can you offer and what are you looking for. </p><p /><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"126\" ac:original-width=\"400\"><ri:attachment ri:filename=\"pasted image 0 (5).png\" ri:version-at-save=\"1\" /></ac:image><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"103\" ac:original-width=\"212\" ac:width=\"204\"><ri:attachment ri:filename=\"Capturabr.png\" ri:version-at-save=\"1\" /></ac:image><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"182\" ac:original-width=\"519\"><ri:attachment ri:filename=\"pasted image 0 (4).png\" ri:version-at-save=\"1\" /></ac:image><p /></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"9cf9e3c7-5865-4bb5-a0ff-bcac9ed4234d\"><ac:parameter ac:name=\"title\">4. Experience and Education</ac:parameter><ac:rich-text-body><p>When explaining your experience and education remember always to put emphasis on your <strong>achievements</strong> as seen in Session 2. This will add value to your profile. Try also to add numbers in order to make it more representative.</p><p>If you have unrelated work experience, but have some personal successes which demonstrate certain skills, be sure to mention them. This could include: technical skills, interpersonal skills, communication ability and management experience. Don't focus on the functions you did in your previous jobs, because maybe they are not related and relevant for the position you are applying.</p><p><br /></p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"243\" ac:original-width=\"275\"><ri:attachment ri:filename=\"exp1.png\" ri:version-at-save=\"1\" /></ac:image><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"253\" ac:original-width=\"278\" ac:width=\"340\"><ri:attachment ri:filename=\"exp2.png\" ri:version-at-save=\"1\" /></ac:image><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"424\" ac:original-width=\"391\"><ri:attachment ri:filename=\"phd.png\" ri:version-at-save=\"1\" /></ac:image><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"317\" ac:original-width=\"290\"><ri:attachment ri:filename=\"est.png\" ri:version-at-save=\"1\" /></ac:image><p /><p><em><strong>If you have several unrelated and not really relevant work experiences you can agroup them by sector or skills:</strong></em></p><p><br /></p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"239\" ac:original-width=\"346\" ac:width=\"442\"><ri:attachment ri:filename=\"Captura.png\" ri:version-at-save=\"1\" /></ac:image><p /></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"68aab4e1-af9d-406f-929f-aae1f4f876e0\"><ac:parameter ac:name=\"title\">5. Where Should I Put My Ubiqum Experience and Projects?</ac:parameter><ac:rich-text-body><p>It doesn&rsquo;t mind, as long as it is the first thing people see when looking at your CV. You can put it with your work experience or with your education experience. We recommend you to place it in the weakest area so you can add value to it. These are the advantages of the method learning by doing. Don&rsquo;t forget to mention the projects you have worked on.</p><p>You can also do a quick LinkedIn Search for Ubiqum, where you will see how our graduates reflect their Ubiqum experience in their profiles. This will help you get ideas on how to describe your projects.</p><p /><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"371\" ac:original-width=\"388\"><ri:attachment ri:filename=\"ub.png\" ri:version-at-save=\"1\" /></ac:image><p>Also, you can add it to both sections like in this example. Just focus on different aspects and if they ask you in the interview explain that it can be considered both because it is a course but you work in real projects, so it is also a work experience. In the section experience, you can add the projects you worked on during the course or create another section about that. Make sure you include a very short description of the project and the technologies you have used.</p><p>The structure is:</p><p><em><strong>Name of the project</strong></em></p><p><em>Short description</em></p><p><em>Technologies Used</em></p><p /><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"200\" ac:original-width=\"287\"><ri:attachment ri:filename=\"ub2.png\" ri:version-at-save=\"1\" /></ac:image><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"166\" ac:original-width=\"281\"><ri:attachment ri:filename=\"un3.png\" ri:version-at-save=\"1\" /></ac:image><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"341\" ac:original-width=\"287\"><ri:attachment ri:filename=\"proje.png\" ri:version-at-save=\"1\" /></ac:image><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"369\" ac:original-width=\"253\"><ri:attachment ri:filename=\"projee.png\" ri:version-at-save=\"1\" /></ac:image><p /></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"661877e5-d478-41cc-8fec-9aa5a075b1b3\"><ac:parameter ac:name=\"title\">6. Technical Skills and Soft Skills</ac:parameter><ac:rich-text-body><p>It is very important (especially in your sector) to include your <strong>Technical Abilities</strong> in a legible place. Put it always in the first page.</p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"179\" ac:original-width=\"343\"><ri:attachment ri:filename=\"skills.png\" ri:version-at-save=\"1\" /></ac:image><p>You can also include a section about your Soft Skills and achievements.</p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"363\" ac:original-width=\"237\"><ri:attachment ri:filename=\"ss.png\" ri:version-at-save=\"1\" /></ac:image><p>Do not forget to make a section about the languages you speak and if you want you can also include the level.</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"263abe09-c414-4de9-bd79-0738f57e54cb\"><ac:parameter ac:name=\"title\">7. Additional Sections</ac:parameter><ac:rich-text-body><p>You can include other sections like Hobbys, References, achievements and other information, courses and seminars you have attended, non profit causes you have participated...</p><p>Make sure it adds value to your profile and do it only if you have available space. Do not create a new page only to include this additional info.</p><p><br /></p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"269\" ac:original-width=\"289\"><ri:attachment ri:filename=\"ACHIV.png\" ri:version-at-save=\"1\" /></ac:image><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"178\" ac:original-width=\"572\"><ri:attachment ri:filename=\"OTHERS.png\" ri:version-at-save=\"1\" /></ac:image><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"233\" ac:original-width=\"256\"><ri:attachment ri:filename=\"non.png\" ri:version-at-save=\"1\" /></ac:image><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"119\" ac:original-width=\"417\"><ri:attachment ri:filename=\"cc.png\" ri:version-at-save=\"1\" /></ac:image><p /></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"70282469-8d41-4304-b729-e1fad3b0fae6\"><ac:parameter ac:name=\"title\">8. Put Yourself In the Recruiters' Shoes</ac:parameter><ac:rich-text-body><p><strong>What impression does your colleague's CV gives you?</strong></p><p>Take one of your colleague's updated CV and putting yourself in the recruiter shoes evaluate his resume taking into account the following <a href=\"https://docs.google.com/document/d/1cfaQlu6k7z2OLRT4_2wfbCwWcS6awGCwY-owF6jOSN0/edit\">criteria. </a>He will have to do the same with yours.</p><p>Give constructive feedback, and take your colleague's in order to do the proper changes.</p><p>Consult it with the advisors.</p><p><br /></p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"89554ab3-8d3b-49e2-80c5-32f27bb83e08\"><ac:parameter ac:name=\"title\">9. Find a Job in Barcelona</ac:parameter><ac:rich-text-body><p>Once you have the validation of your final CV, you can start applying for job offers.</p><p>How to do it?</p><p>Use generic job boards/ social networks such as <a href=\"https://www.linkedin.com/feed/\">Linkedin </a>and <a href=\"https://www.infojobs.net/\">InfoJobs</a></p><p>You can also use <a href=\"https://docs.google.com/document/d/15L3HggL_nBs5jd6UXR7YZAf2NBogv4pPEEJLEuBrwbQ/edit\">tech websites</a> that have exclusive offers related to the sector.</p><p>Use <a href=\"https://www.glassdoor.com/index.htm\">Glassdoor</a> to search millions of jobs and get the inside scoop on companies with employee reviews, personalized salary tools, and more.</p><p /></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"073174a9-c1e1-4680-b2bc-39f2ede40343\"><ac:parameter ac:name=\"title\">10. Find a Job in Germany</ac:parameter><ac:rich-text-body><p>Once you have the validation of your final CV, you can start applying for job offers.</p><p>How to do it?</p><p><a href=\"https://trabajarporelmundo.org/portale-de-trabajo-dgenerales-de-alemania/\">Here</a> you can find general and specialized job portals, job portals for Spanish people and another web of interest like the best companies to work for. <em>Translate the article if you do not understand Spanish (right click on the page and Translate to your language)</em></p><p><a href=\"https://www.make-it-in-germany.com/en/for-qualified-professionals/working/guide/looking-for-a-job\">Here</a> you can find everything you need to find a job in Germany if you are a nonresident (Work permission, job portal, living in Germany....)<br /><br />Some usefull platforms are: <a href=\"https://www.stepstone.de/en/\">Stepstone</a>, <a href=\"https://www.talent.io/\">talent.io</a>, <a href=\"https://jobboerse.arbeitsagentur.de/vamJB/startseite.html?aa=1&amp;m=1&amp;kgr=as&amp;vorschlagsfunktionaktiv=true\">Jobb&ouml;rse,</a> <a href=\"https://www.monster.de/en/?intcid=swoop_TopNav_English\">Monster</a> or <a href=\"http://berlinstartupjobs.com/\">Berlin Startup Jobs</a></p><p>Use <a href=\"https://www.glassdoor.com/index.htm\">Glassdoor</a> to search millions of jobs and get the inside scoop on companies with employee reviews, personalized salary tools, and more.</p><p>We recommend you to use <a href=\"https://www.honeypot.io/pages/how_it_works\">Honeypot</a>, where companies apply to developers and not the other way. They also help you with the whole process and do code review.</p><p>We collaborate with:</p><p><a href=\"https://www.talent.io/\">Talent.io</a></p><p><a href=\"https://gb.wantedly.com/\">Wantedly</a></p><p><a href=\"https://4scotty.com/en?setLanguage=true\">4scotty</a></p><p>For internships please register with this link: <a href=\"https://www.campusjaeger.de/?rId=f4OLhj4w5zpi\">https://www.campusjaeger.de/?rId=f4OLhj4w5zpi</a></p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"9a6fc0a7-40c3-4ea3-8482-21f67e81773b\"><ac:parameter ac:name=\"title\">11. Find a Job in The Netherlands</ac:parameter><ac:rich-text-body><p>Your CV is a Marketing document built to sell your profile. If something doesn't sell you, do not include it.</p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"679\" ac:original-width=\"914\"><ri:attachment ri:filename=\"AMS job platforms.png\" ri:version-at-save=\"1\" /></ac:image><p /><p><strong>TIP:</strong></p><p>The one single focused objective of your resume is to <strong>get you a job interview</strong>. Nothing else.</p><p /><p>Now that your CV is fully optimised, you can start A/B test it on the job market.</p><p>Please click <a href=\"https://www.expatica.com/nl/employment/finding-a-job/work-in-the-netherlands-finding-a-job-102331/\">here</a> for the ultimate job guide to working in the Netherlands, including information on the Dutch job market, vacancies, work permits, job websites and other places to find jobs in the Netherlands.</p><p>Another <a href=\"https://undutchables.nl/working-and-living/working-in-the-netherlands\">resource</a> for everything you need to know about getting employed in the Netherlands. To work in the Netherlands, you will need a Citizen Service Number; BSN in Dutch. Please click <a href=\"https://www.government.nl/topics/personal-data/citizen-service-number-bsn\">here</a> for more info.</p><p /><p>We collaborate with <a href=\"https://www.honeypot.io/\">Honeypot</a> and recommend you to sign up on their platform, where companies apply to you.</p><p><code>*there might be a coding challenge involved, they will discuss this with you*</code></p><p><a href=\"https://www.talent.io/\">Talent.io</a> is another platform you can sign up for - they pride themselves on having a personal touch with each and every candidate.</p></ac:rich-text-body></ac:structured-macro>",
    "conflPageId": "298319895",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Plan of Attack 2",
    "content": "<p>It is time to start creating your <a href=\"https://www.linkedin.com/\">LinkedIn</a> profile.</p><p>Follow the following <a href=\"https://docs.google.com/presentation/d/1w-W9Jt1XpOetJlTYB7eEw4UiUcrU4D8AGH0aeroHoKY/edit#slide=id.p3\">steps</a> to make your profile as competitive and professional as possible, increasing your job opportunities and grabbing the Recruiter's attention.</p><p /><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"5bf86a09-210c-471d-962b-a6c6c84c510d\"><ac:parameter ac:name=\"title\">1. Getting Started</ac:parameter><ac:rich-text-body><p>Create a Linkedin account if you do not already have one.</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"a53686ef-bffa-41f6-8f3f-e680eb140e69\"><ac:parameter ac:name=\"title\">2. Choose the Language</ac:parameter><ac:rich-text-body><p>Decide if you will create your profile in Spanish, German, Portuguese, Dutch, French etc and English or both. You can find more information on this topic h<a href=\"http://www.exprimiendolinkedin.com/2014/12/crear-perfil-linkedin-diferentes-idiomas/\">ere</a>.</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"f0a136df-cde3-496e-872b-cf7244f1bf88\"><ac:parameter ac:name=\"title\">3. Complete Your Profile</ac:parameter><ac:rich-text-body><p>Transfer your CV information to your Linkedin profile and complete it with the most relevant information in each of the Linkedin sections (remember the importance of the <strong>introduction </strong>and actual <strong>career situation</strong>). In resources you will find tips to do it in the most efficient way. You can include skills and achievements that you could not include in your CV due to lack of space, and also upload some projects. This allows you to go into more detail than you could in your CV.</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"d26879e2-57ac-4f00-aefc-28fdbd2eb204\"><ac:parameter ac:name=\"title\">4. Recommendations</ac:parameter><ac:rich-text-body><p><a href=\"https://www.linkedin.com/help/linkedin/answer/608/solicita-una-recomendacion?lang=en\">Ask for recommendations</a> from your peers, mentors and former co-workers/colleagues. It helps to offer your sincere recommendation for them.<br /><br />This is really an option that will make you stand out towards other candidates. <br /><br />Creating video content about you and uploading it on your profile is almost a garantuee for interview invites.</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"271772e9-d9f5-4206-80d7-50f8d7b016ac\"><ac:parameter ac:name=\"title\">5. Skills Validation</ac:parameter><ac:rich-text-body><p>Validate the skills of your peers and ask them to validate yours too. Put the 3 main skills companies are looking for in the top.</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"f9bacb92-3873-4fd7-b3b7-b9ac951b709f\"><ac:parameter ac:name=\"title\">6. Networking</ac:parameter><ac:rich-text-body><p>Send requests to your contacts suggested by Linkedin and connect with the maximum number of people who can help you in your job search (i.e your colleagues, Ubiqum team, headhunters). You can contact recruiters or other professionals in your industry by following them or even by sending them a private message with your interest. They spend all day looking for talent like you! Do not hesitate to do it with the companies you want to work in. Also, apply to job offers in the section of <a href=\"https://www.linkedin.com/jobs/\">Jobs</a>.</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"5701ce6d-f8d8-4638-8207-6c530e8c1e19\"><ac:parameter ac:name=\"title\">7. Be Part of the Industry</ac:parameter><ac:rich-text-body><p>Share industry relevant content in your profile regularly to get the attention of the recruiters who review Linkedin daily and positioned yourself as an expert in the field. Try to share:</p><ol><li><p>a screenshot of the project you are working on</p></li><li><p>a presentation of a project you are proud of</p></li><li><p>an update that you are about to graduate as a Developer/Data Analyst</p></li><li><p>Articles/Resources that interested you and are related with the industry you are interested in</p></li></ol></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"2a5b2424-ac5a-4dee-962f-b878d2491c1b\"><ac:parameter ac:name=\"title\">8. Actively Seeking</ac:parameter><ac:rich-text-body><p>Make sure you allow the <a href=\"https://blog.linkedin.com/2016/10/06/now-you-can-privately-signal-to-recruiters-youre-open-to-new-job\">option</a> to let recruiters know you are looking for new job opportunities.</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"2022e085-ba1d-44e4-95ec-b14444d123c0\"><ac:parameter ac:name=\"title\">9. Improve your Network</ac:parameter><ac:rich-text-body><p>One of the biggest benefits of LinkedIn is the huge network. The side is growing by the day and so should you. <br />Make sure to follow interesting persons and companies. There you should be actively commenting, sharing and participating.</p><p>Also don't hesitate to get connected to the community which you try to enter. With the string search you are able to find usefull people, companies or topics. <br /><br />For example you could use: Data AND Barcelona AND hiring</p><p>or Java AND Job AND junior AND Berlin <br /><br />One first step for you to make more contacts is the Ubiqum Alumni, students and staff group:<br /><a href=\"https://www.linkedin.com/groups/12212214/\">https://www.linkedin.com/groups/12212214/</a></p></ac:rich-text-body></ac:structured-macro><p />",
    "conflPageId": "298319904",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Practice a Java Technical Test with your Mentor",
    "content": "<ac:image ac:align=\"center\" ac:layout=\"center\" ac:src=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\"><ri:url ri:value=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\" /></ac:image><p><strong>FROM:</strong> Jane Phillips <br /><strong>Subject:</strong> Technical test</p><p>Hello, it's Jane again.</p><p>I am very satisfied with the work you did for the client I introduced your profile to. I am therefore happy to inform you that they would like for you to continue to the next phase of the process: the technical test.<br /><br />All of our candidates must go through the same test. This helps us verify that we are not making a mistake in hiring you and that you really have the skills and knowledge to join the client's company.<br /><br />I'm not in charge of supervising and receiving the results of these tests, as we have a department dedicated to this, but I'm interested in you joining the team.<br /><br />You can choose the test that you prefer depending on if you are more interested in being considered for a Front-end or Back-end Developer position. Normally, the exercise is designed to be done in approximately 4 hours, but only if you do it face-to-face. As you're doing it online, we will give you all day, so tomorrow you will have to send the results to me via email.<br /><br />Without further delay, here it goes. Good luck.</p>",
    "conflPageId": "298418180",
    "conflChildrenId": [
      "298451021"
    ]
  },
  {
    "title": "Resources 1",
    "content": "<p>Above all, try to remember what a CV is designed to do.</p><p>If you don&rsquo;t put some effort into your CV it&rsquo;s quite possible that an employer may overlook your hidden talents. Below are some top tips on how to get noticed:</p><p /><p>1.<strong> A well-structured CV will help the Recruiter</strong></p><p>A well-structured CV should:</p><ul><li><p>Be easy to read</p></li><li><p>Include the most important info at the top</p></li><li><p>Use a concise summary for each area</p></li></ul><p /><p>2.<strong> Make your CV as relevant as possible</strong></p><p>A CV isn&rsquo;t just a list of everything you&rsquo;ve done! It&rsquo;s a chance sell and tailor your profile to the desired role.</p><p>As you describe your experience, make sure to include the key successes in each position. This may be a team or individual target, goal or achievement. Include numbers where possible.</p><p>The work completed in Session 2: Achievements and learnings should help you complete this.</p><p /><p>3.<strong> An attractive design should be easy to read</strong></p><p /><p>When we say make your CV original we don&rsquo;t mean make your CV a work of art. If we remember that the goal of a CV is to allow a Recruiter to quickly appraise your qualities for the job, then the design can help facilitate that.</p><p /><p>Try to think about how each section best represents your strengths for the given role and adopt the order accordingly. Try to always use a legible font and give the CV some generous spacing between lines and sections.</p><p /><p>Make sure all the info on your CV is relevant to the position you are applying for. For a Junior profile, one CV page should be enough.</p><p /><p>4.<strong> Adapt your CV to the position</strong></p><p>The goal of a CV is to allow the Recruiter to quickly appraise your qualities for the job. <strong>You must adapt your CV to your desired position</strong>. In order to achieve this, you must study the company and the job role advertised and make changes to your CV accordingly, being always fair and asking yourself which of your strengths will attract the Recruiter for this position.</p><p /><p><strong>TIP:</strong></p><p>Your CV should be in the same language as the offer you are applying for.</p><p /><p><strong>TIP:</strong></p><p>Always keep in mind what the Recruiter is looking for. Analyse the job offer thoroughly and use the same keywords they are asking for (only if it's true).</p><p /><p><strong>TIP:</strong></p><p>Do not get frustrated because you don't have all the skills they are asking for. Every company is looking for the ideal candidate but in the end, they need to adapt their demands to the reality of the market. When applying for a job, make sure that you meet 60% of their requirements.</p><p /><p><em>Source: http://blog.infoempleo.com/a/5-aspectos-revisar-saber-curriculum-da-la-talla/</em></p><h2>Optional Resources</h2><h3>Cover Letter</h3><p /><p><strong>The purpose of a cover letter</strong></p><p>A cover letter needs to:</p><ul><li><p>introduce you</p></li><li><p>mention the job (or kind of job) you're applying for (or looking for)</p></li><li><p>match your skills and experiences with the skills and experiences required by the job</p></li><li><p>encourage the reader to read your resume</p></li><li><p>finish with a call to action (for example, requesting an interview or asking to meet).</p></li></ul><p /><p><strong>How long should a cover letter be?</strong></p><p>A cover letter shouldn't be more than one page. It's only meant to be a summary of the information you put in your resume, so remember to keep things short.</p><p /><p><strong>Matching your cover letter to the job</strong></p><p>You should never use the same cover letter for different job applications. Your cover letter needs to show that you know what the job involves and what the organisation is looking for.</p><p>To do this you need to be as specific as you can about your skills and qualities and how they match the job or organisation's needs.</p><ol><li><p>Find out who to address it to</p></li><li><p>Find out more about the job</p></li><li><p>Find out more about the company</p></li></ol><p /><p><strong>What you should include in your cover letter</strong></p><p>Here's a list of things you should include in your cover letter. For examples of how to include these things, visit our <a href=\"https://www.youthcentral.vic.gov.au/jobs-and-careers/applying-for-a-job/what-is-a-cover-letter/sample-cover-letters\">Sample cover letters</a> page.</p><p /><p><u>Your name and contact details</u></p><p>Put your name and contact details at the top of your cover letter. You don't have to give your postal address, but you do need to include your email and phone number.</p><p /><p><u>Their name and contact details</u></p><p>Under your own name and contact details you should include:</p><ul><li><p>the name of the person you're writing to</p></li><li><p>their position or the name of their company</p></li></ul><p>You can also use &quot;To Whom It May Concern&quot;, but try to only use this as a last resort.</p><p /><p><u>The name of the job you're going for</u></p><p>At the start of your cover letter you need to explain which job you're applying for.</p><p>You can either do this on a line by itself (for example, &quot;Re: Application for Stock Controller position&quot;) or in the opening paragraph (for example, &quot;I am writing to apply for the recently advertised Stock Controller position.&quot;)</p><p>For examples of how to do this, visit our <a href=\"https://www.youthcentral.vic.gov.au/jobs-and-careers/applying-for-a-job/what-is-a-cover-letter/sample-cover-letters\">Sample cover letters page</a>.</p><p /><p><u>A list of your relevant skills</u></p><p>Your letter should include a brief summary that matches your skills and experiences to the job description.</p><p>If you're answering a job ad, either the ad or the position description may provide a list of skills and experiences that are essential for doing the job. It may also provide a list of &quot;desirable&quot; skills and experience. Your cover letter needs to respond to all of the items on the &quot;essential&quot; list and as many items as possible on the &quot;desirable&quot; list in as short a way as possible.</p><p>Remember that if you say you have a skill or experience, you need to show how you've used it or how you got it (for example, if you say you've got child-minding skills, mention some jobs where you've used them).</p><p /><p><u>A summary of why you're right for the job</u></p><p>After listing your skills and experience you should explain why these mean you're suited to the job (for example, &quot;The combination of my interest in AFL and my experience with book-keeping makes me ideally suited for this job.&quot;)</p><p /><p><u>Speak their language</u></p><p>Using the same language as people who do a particular job is a good way to convince people you're suited to the job.</p><p /><p>For example, if there's a tool or software or skill the job requires, like machining tools or cash handling, mention it in your cover letter (but make sure you mention it correctly!).</p><p /><p><u>Ask them to read your resume &amp; contact you</u></p><p>Your cover letter should finish by asking the reader to read your resume. It should also ask them to contact you about an interview.</p><p /><p>Try something simple like, &quot;I have attached a copy of my resume. I look forward to hearing from you about this job.&quot;</p><h2>Examples of Cover Letters</h2><p>Enter to this <a href=\"https://resumegenius.com/cover-letters-the-how-to-guide/information-technology-cover-letter-sample\">link</a><u><a href=\"https://resumegenius.com/cover-letters-the-how-to-guide/information-technology-cover-letter-sample\"> </a></u>and see some cover letter examples directly related to the IT field.</p><p />",
    "conflPageId": "298418191",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Task 5: Preparing Interviews That Will Get You Hired",
    "content": "<hr /><ac:image ac:align=\"center\" ac:layout=\"center\" ac:src=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\"><ri:url ri:value=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\" /></ac:image><p><strong>FROM:</strong> Jane Phillips <br /><strong>Subject:</strong> Interview</p><p>Hello!</p><p>How are you?</p><p>Today we'll have an intensive day preparing for interviews (both technical and personal questions). Also, you will work on your body language in the roleplay session we've prepared! We'll make sure to cover everything so that you're ready for the Hiring Day!</p><p>First of all, download the attached document and prepare your own answers. Consider all the previous work you have done (especially the first day) and the Plan of Attack section.</p><p>Once you have the answers prepared, you will do a roleplay session with your peers and improve according to their feedback. I have also attached the rubric you are going to use to evaluate each other.</p><p>You will also have a workshop on technical questions with mentors!</p><p>At the end of the day, professional Recruiters will come to do the final roleplaying and give you some feedback on your performance in the first interviews. So there is no time to lose!</p><p>Regards and good luck,</p><p>Jane.</p><p><br /></p><p class=\"media-group\"><ac:structured-macro ac:name=\"view-file\" ac:schema-version=\"1\" ac:macro-id=\"10932eb5-65ed-4eae-963f-f15d03d5aa15\"><ac:parameter ac:name=\"name\"><ri:attachment ri:filename=\"Interview Rubric (1).docx\" ri:version-at-save=\"1\" /></ac:parameter></ac:structured-macro><ac:structured-macro ac:name=\"view-file\" ac:schema-version=\"1\" ac:macro-id=\"8326b324-a3b4-4f57-b3f3-a65f17368bc1\"><ac:parameter ac:name=\"name\"><ri:attachment ri:filename=\"Interview questions.docx\" ri:version-at-save=\"1\" /></ac:parameter></ac:structured-macro></p><p />",
    "conflPageId": "298450953",
    "conflChildrenId": [
      "298123326",
      "298450997",
      "300580888"
    ]
  },
  {
    "title": "Resources T5",
    "content": "<hr /><p><strong>Other important aspects that matter...</strong></p><p>Preparing the previous questions in writing will help you to well perform in the real-life interview. It is a way to don&rsquo;t black out and forget representative information.</p><p>There are other factors than the questions that matter when having the real interview like:</p><ul><li><p>Punctuality</p></li><li><p>Presence and <a href=\"https://s3.amazonaws.com/gbstool/courses/949/docs/what-to-wear-to-a-startup-or-tech-job-interview-story.jpg?AWSAccessKeyId=AKIAJBIZLMJQ2O6DKIAA&amp;Expires=1565168400&amp;Signature=vFWNyMGo5rVzBVOJZ0VvxyKpQKQ%3D\">Dress code</a></p></li><li><p>Education</p></li><li><p>That you call him by his/her name</p></li><li><p>The body language: this aspect matters in a big percentage, watch the following <a href=\"https://www.youtube.com/watch?v=PCWVi5pAa30\">video</a> and take some notes</p></li><li><p>The tone of voice, articulation and polite</p></li><li><p>Better to bring your CV print</p></li></ul><p><strong>Optional resources</strong></p><p /><h2>TESTS</h2><p>Some selection processes include tests that help the recruiter to determine the professional capacity, personality and personal skills of the candidate. Even if these tests aren&rsquo;t always demandable it is advisable to prepare them in order to have more possibilities when applying to a job.</p><p>We distinguish three main types of selection tests:</p><ol><li><p><strong>Professional Tests:</strong> These tests are exercises that evaluate the knowledge and skills you have to perform a determine job position. You will see this in the next tasks, when you will have to carry out some technical tests focused on Java and Data knowledge that will be useful for your career path. Here we can also include language tests.</p></li><li><p><strong>Personality Tests: </strong>These tests are used to extract the main traits of your personality and help the recruiter to evaluate your adaptability to the job position. They are also useful for you, to distinguish your strengths and weaknesses, and work on them as seen in task 1.There are aspects that are evaluated in practically any job position and it is important you know: initiative, persuasion, empathy, social adaptability, adaptability to changes, level of responsibility and maturity, motivations and emotional stability. Be honest with your questions and answer spontaneously. Here you have one <a href=\"https://www.16personalities.com/free-personality-test\">example of a test</a> you can do on your own to practice and know you better.</p></li><li><p><strong>Psycho-technical Tests:</strong> Also called intelligence tests, they are used to evaluate your logic and skills to see how you would manage current and new tasks in the company. They evaluate things such as general intelligence, memory, perception, attention&hellip; and have a limited time. <a href=\"https://www.123test.com/iq-test/#classical-intelligence-test\">Here</a> you have one website with an example that can help you get to practice.</p></li></ol><h2>GROUP INTERVIEWS</h2><ol><li><p>Read this <a href=\"http://blog.infoempleo.com/a/consejos-entrevista-trabajo-grupo/\">article</a> to learn more about group interviews.</p></li></ol>",
    "conflPageId": "298450997",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Plan of Attack T6(2)",
    "content": "<p><a href=\"https://gbstool.learningbydoingtools.com/mc/poa?productID=3724&amp;taskID=3983#introduction\">INTRODUCTION</a></p><p>Remember how dealing with problems in the simplest way possible can be the fastest way to reach the final solution.</p><p>Always try to follow the steps indicated to face each test. Sometimes a simple distraction can cause you to make an erroneous decision at the beginning.</p><p /><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"1fe7c1bf-b4f6-4c4c-bbff-283dbbdb0ed1\"><ac:parameter ac:name=\"title\">Front-End Test</ac:parameter><ac:rich-text-body><h1>GITHUB API EXERCISE</h1><h2>Instructions:</h2><h4>The main goal of this tech test is to create a client-side web application that reproduces the screenshots below by using <a href=\"https://developer.github.com/v3/\">GitHub API</a>.</h4><p>We will only evaluate the client side code and the criteria will be based mainly on:</p><ol><li><p>Good use of <strong>pure JavaScript</strong> language without external libraries and frameworks like jQuery, React...</p></li><li><p>Clean HTML and CSS markup</p></li><li><p>Clean, maintainable &amp; easy&shy; to&shy; read</p></li><li><p>Good architectural practices</p></li></ol><h2>HOW TO START</h2><p>Option 1:</p><ol><li><p>Investigate the GitHub API calls for user and repositories (for example: test them in the browser)</p></li><li><p>Launch the web application, for example with: Python -m SimpleHTTPServer 1337</p></li><li><p>Open the browser with http://localhost:1337/ and start coding!</p></li></ol><p>Option 2:</p><ol><li><p>Investigate the GitHub API calls for user and repositories (for example: test them in the browser)</p></li><li><p>Launch the web application, for example with the &quot;lighting option&quot; in brackets.</p></li><li><p>Be sure that you are testing the URL: &quot;127.0.0.1:xxxxx&quot;</p></li></ol><h2>SCREENSHOTS</h2><h4>First Screen</h4><p>The user can search a GitHub username</p><h4>Success Screen</h4><p>If the searched username does exist: The searched user profile is displayed with all his repositories</p><p /><p>If the searched username does not exist: An error is shown</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"8763c4b3-3f3f-4c43-ad35-60b787376875\"><ac:parameter ac:name=\"title\">Back-End Test</ac:parameter><ac:rich-text-body><h1>PETS EXERCISE</h1><h2>Instructions:</h2><p>At Ubiqum we have two pets that help us improve our services day by day. The first pet is called Jukes. Jukes is a charming puppy that at the time of playing barks every 5 seconds. In contrast, when Feeder the quiet kitten plays, he meows every 1 second.<br /><br />The two pets, like animals, have the following:</p><p>Name, Age, Skin colour, Eye colour and Number of legs.</p><p>Also, the actions that they usually do during the day are:</p><p>Eat, Drink, Sleep, and Play.</p><p>Dogs, in addition to barking, have an Identity Number and the size of this is known. On the other hand, it is known if cats are allergic and there is a list of forbidden foods they cannot eat.<br /><br />Create a scenario for Jukes and Feeder:<br /><br />Play for 120 seconds, then drink water, eat [bread and ham] and finally rest for 200 seconds.</p><p><br /><br /><strong>NOTES:</strong><br /><br /></p><ul><li><p>1. Use the <strong>inheritance</strong> to solve this exercise.<br /><br /></p></li><li><p>2. The sizes of a dog are: <strong>XS, S, M, L or XL.</strong><br /><br /></p></li><li><p>3. Available Food: <strong>Cereals, Fodder, Bread, and Ham.</strong><br /><br /></p></li><li><p>4. Feeder is allergic to Ham, is grey, is 2 years old and has blue eyes.<br /><br /></p></li><li><p>5. Jukes has the identifier C3P0, is size M, has green eyes, is 3 years old and is brown.<br /><br /></p></li><li><p>6. All actions must print by console: &quot;Hi, I'm&quot; + name + &quot;and I'm&quot; + action.<br /><br /></p></li><li><p>7. You must bear in mind that you can not instantiate an Animal, only Dogs or Cats.<br /><br /></p></li><li><p>8. In case a cat should eat a prohibited food, it should say: &quot;I can not eat&quot; + food + &quot;because I am allergic&quot;.<br /><br /></p></li><li><p>9. The execution of the actions can be synchronous, they do not need to be executed in parallel.</p></li></ul></ac:rich-text-body></ac:structured-macro>",
    "conflPageId": "298451021",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Task 4: Building My Pitch",
    "content": "<hr /><ac:image ac:align=\"center\" ac:layout=\"center\" ac:src=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\"><ri:url ri:value=\"https://s3.amazonaws.com/gbstool/characters/avatar-6.png\" /></ac:image><p><strong>FROM:</strong> Jane Phillips <br /><strong>Subject:</strong> Your Pitch</p><p>Hi,</p><p>You completed one of the most important steps in the job seeking process: you completed your CV! This is imperative and will help you in the process of getting hired, but don't forget that the important thing is you. Companies are looking for real, enthusiastic and positive people who are willing to add value to their projects. So now its time to prepare yourself to meet with Recruiters and potential employers in networking events, job fairs or interviews.</p><p>Knowing how to present yourself and having a clear speech and adequate non-verbal communication is a key point in making any good interview or networking opportunity a success. That's why you will now prepare your pitch of no more than 2 minutes. This will contain the most relevant information about your profile and should be presented in an interesting way. You also might have heard it called the elevator pitch. You can record yourself and use it as a video CV or share it on your Linkedin!</p><p>Follow the steps in the Plan of Attack and prepare your pitch.</p><p>Keep in touch,</p><p>Jane</p><p /><p><br /></p>",
    "conflPageId": "298483713",
    "conflChildrenId": [
      "298156069",
      "300744719"
    ]
  },
  {
    "title": "Resources T1",
    "content": "<p /><p><a href=\"https://docs.google.com/document/d/1cfaQlu6k7z2OLRT4_2wfbCwWcS6awGCwY-owF6jOSN0/edit\">CV EVALUATION </a></p><p />",
    "conflPageId": "298483733",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Resources T2",
    "content": "<p>Here you will find some useful recommendations that will help you make your profile easy to find among Recruiters and make you an attractive candidate in the industry market. Please follow the advice!</p><hr /><p><br />Recruiters use LinkedIn to seek suitable candidates for their positions by using keywords. It is important that you take a look at the <a href=\"http://www.mejorartucv.com/10-claves-para-aparecer-en-el-buscador-de-linkedin/\">10 keys to appearing in the LinkedIn search engine</a> (use Google to translate the content). Complete the steps indicated in the article to create a successful profile<br /></p><ul><li><p>Use one of the following titles to make it clear what position you are interested in: <br /></p><ul><li><p>Java Developer</p></li><li><p>Junior Java Full Stack Developer</p></li><li><p>Java FullStack</p></li><li><p>FullStack Developer</p></li><li><p>Data Analyst</p></li><li><p>Junior Data Analyst</p></li><li><p>Junior Javascript Full Stack Developer ( MERN)</p></li></ul></li></ul><p /><ul><li><p>Do not use symbols or it can be hard to find you!</p></li><li><p>In the current position section you can put that you are working at Ubiqum Code Academy and explain the projects that you have developed.</p></li><li><p>We also recommend this short LinkedIn tutorial &ldquo;<a href=\"https://www.linkedin.com/learning/j-t-o-donnell-on-making-recruiters-come-to-you/delight-a-recruiter-with-your-resume\">Making Recruiters come to you</a>&rdquo;. There are lots of interesting tutorials in <a href=\"https://www.linkedin.com/learning/me\">LinkedIn Learning</a> that can also help you improve your LinkedIn.</p></li></ul>",
    "conflPageId": "298516501",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Submit Your Work T1",
    "content": "<p>Please send your cv and LinkedIn to your allocated Career Advisor for feedback.</p><p>Ana Popov: <a href=\"mailto:ana@ubiqum.com\">ana@ubiqum.com</a> </p><p>Alinne Shedid: <a href=\"mailto:alinne@ubiqum.com\">alinne@ubiqum.com</a></p><p>Jost Lepere: <a href=\"mailto:jost@ubiqum.com\">jost@ubiqum.com</a> </p><p />",
    "conflPageId": "300351492",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Day 2 with Career Advisor",
    "content": "<p />",
    "conflPageId": "300449834",
    "conflChildrenId": [
      "300515378",
      "298483713",
      "298450953"
    ]
  },
  {
    "title": "Task 3: Strengths /Weaknesses and Market Review",
    "content": "<p>During this workshop, we will review the Market situation and each type of company.</p><p /><p class=\"media-group\"><ac:structured-macro ac:name=\"view-file\" ac:schema-version=\"1\" ac:macro-id=\"660a53bc-79b4-4eba-97ac-08c4c4609d95\"><ac:parameter ac:name=\"name\"><ri:attachment ri:filename=\"Market Situation.pdf\" ri:version-at-save=\"1\" /></ac:parameter></ac:structured-macro></p><p>We will do a search on the job you would like to apply to and search for the key technical words as well as the soft skills companies are recruiting for today.</p><p>You will see how your Tech skills obtained at Ubiqum Code Academy and your soft skills,  match what the market is looking for and how you are ready to start your job search.</p><p>More and more, we will do a Personality test to have more of an idea of the strenghts and weaknesses you have.</p><p><a href=\"https://www.outofservice.com/bigfive/\">Personality Test</a></p><p /><p>After this, we will do a role play based in strenghts and weaknesses to understand more how to present them during your job interview.</p><p /><p /><p />",
    "conflPageId": "300515378",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Submit Your Work T5",
    "content": "<p>Please send your work to your allocated Career Advisor for feedback.</p><p>Ana Popov: <a href=\"mailto:ana@ubiqum.com\">ana@ubiqum.com</a> </p><p>Alinne Shedid: <a href=\"mailto:alinne@ubiqum.com\">alinne@ubiqum.com</a></p><p>Jost Lepere: <a href=\"mailto:jost@ubiqum.com\">jost@ubiqum.com</a> </p><p />",
    "conflPageId": "300580888",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Submit Your Work 2",
    "content": "<p>Please send your work to your allocated Career Advisor for feedback.</p><p>Ana Popov: <a href=\"mailto:ana@ubiqum.com\">ana@ubiqum.com</a> </p><p>Alinne Shedid: <a href=\"mailto:alinne@ubiqum.com\">alinne@ubiqum.com</a></p><p>Jost Lepere: <a href=\"mailto:jost@ubiqum.com\">jost@ubiqum.com</a> </p><p />",
    "conflPageId": "300613635",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Submit Your Work T4",
    "content": "<p>Please send your work to your allocated Career Advisor for feedback.</p><p>Ana Popov: <a href=\"mailto:ana@ubiqum.com\">ana@ubiqum.com</a> </p><p>Alinne Shedid: <a href=\"mailto:alinne@ubiqum.com\">alinne@ubiqum.com</a></p><p>Jost Lepere: <a href=\"mailto:jost@ubiqum.com\">jost@ubiqum.com</a> </p><p />",
    "conflPageId": "300744719",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Day 1 with Career Advisor",
    "content": "<p />",
    "conflPageId": "300843039",
    "conflChildrenId": [
      "298188801",
      "298319873"
    ]
  },
  {
    "title": "Day 3 With Your Mentor",
    "content": "<p>Please contact your mentor for the Web Development Program or Data Analytics to prepare for a technical interview.</p>",
    "conflPageId": "306839553",
    "conflChildrenId": [
      "298418180",
      "298123283"
    ]
  },
  {
    "title": "Arduino Project",
    "content": "<p>The Arduino Uno is a microcontroller board that you can program to interact with the world around you. With the right components, your Arduino board can become a machine that solves Rubiks' Cubes or prints 3D objects, a drone that flies around collecting environmental data, a robot that can navigate and memorize mazes, it can even be used to control IoT environments. These are all things that people have done using Arduino. Once you have mastered the use of Arduino, the limit is your imagination. </p><p>This page is where you&rsquo;ll find everything you need to start creating your own Arduino projects.</p><p /><p>For inspiration check out some of these projects that people have made using Arduino.</p><ac:structured-macro ac:name=\"widget\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"5b5d6eaf-11ce-47b9-8230-4c996e83450a\"><ac:parameter ac:name=\"overlay\">youtube</ac:parameter><ac:parameter ac:name=\"_template\">com/atlassian/confluence/extra/widgetconnector/templates/youtube.vm</ac:parameter><ac:parameter ac:name=\"width\">400px</ac:parameter><ac:parameter ac:name=\"url\"><ri:url ri:value=\"https://www.youtube.com/watch?v=enyIGWev7HQ\" /></ac:parameter><ac:parameter ac:name=\"height\">300px</ac:parameter></ac:structured-macro><p />",
    "conflPageId": "312246281",
    "conflChildrenId": [
      "312344583",
      "312344601",
      "312508417",
      "312279046",
      "312344608"
    ]
  },
  {
    "title": "Temperature and Humidity Data Collection with Arduino",
    "content": "<p>For this project, the circuitry is quite straight forward. We will be using a DHT11 temperature and humidity multi sensor. The sensor itself is a small box with a pattern of holes on the front. Contained within this box is a thermistor (a resister that changes its resistance depending on the ambient temperature) and a capacitive humidity sensor (a capacitor that changes its capacitance depending on the percent relative humidity; further reading on capacitors can be found at the bottom of this page).</p><table data-layout=\"default\"><colgroup><col style=\"width: 708.0px;\" /><col style=\"width: 51.0px;\" /></colgroup><tbody><tr><td><p style=\"text-align: center;\">You Will Need</p></td><td><p style=\"text-align: center;\">#</p></td></tr><tr><td><p style=\"text-align: center;\">Arduino Uno (with USB cable)</p></td><td><p style=\"text-align: center;\">1</p></td></tr><tr><td><p style=\"text-align: center;\">Breadboard</p></td><td><p style=\"text-align: center;\">1</p></td></tr><tr><td><p style=\"text-align: center;\">Wires (m/m)</p></td><td><p style=\"text-align: center;\">3</p></td></tr><tr><td><p style=\"text-align: center;\">DHT11 multi sensor</p></td><td><p style=\"text-align: center;\">1</p></td></tr></tbody></table><p>It is possible to buy the DHT11 multi sensor either on its own or as part of an integrated circuit. This page will tell you how to set up the project with either option. Neither option is necessarily better than the other. The circuit design is similar and the same code will work for both.</p><p>In addition to the hardware needed for this project, you will need to install a couple Arduino libraries (provided below). You will also need to find a software that can read serial port data and store it in a csv file. Tera Term is a good option for this.</p><p /><p><strong>Arduino Setup &ndash; with Integrated Circuit (IC)</strong></p><p>The IC connected to the sensor will have three pins which are labelled: positive, negative, and data (the last pin may have a different label, but it is used for data collection). We can use these pins to connect the sensor to our breadboard. Ensure that all three pins are in separate nodes. The positive and negative terminals of the IC are what we use to power the sensor. Using jumper wires, connect the 5-Volt pin of your Arduino board to the node containing the positive terminal of the IC. Use a second jumper wire to connect a ground pin on your Arduino board to the node containing the negative terminal of the IC. Connect the last terminal of the IC to digital pin 7 on your Arduino board using the last jumper wire. The circuit is now complete.</p><p><strong>Arduino Setup &ndash; without Integrated Circuit</strong></p><p>The multi sensor has four pins along the bottom as shown in Figure 1 below. Insert the sensor into your breadboard in such a way that each pin is in a different node. We will number the nodes according to the numbering scheme shown in figure 1 (i.e. node 1 is the node containing pin 1). Using jumper wires, connect node 1 to the 5-Volt pin on your Arduino board, connect node 2 to digital pin 7, and connect node 4 to one of the ground pins. The circuit is now complete.</p><p style=\"text-align: center;\">Figure 1 &ndash; DHT11 Multi Sensor Pin Key</p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"227\" ac:original-width=\"297\"><ri:attachment ri:filename=\"image-20190911-130833.png\" ri:version-at-save=\"1\" /></ac:image><p><strong>The Code</strong></p><p>We want to collect data points at given time intervals over a long period of time. In order to do this, we need to install two libraries to be used in Arduino: DHT_Library and Time-master. These libraries are attached to this page as zip files. Extract their contents to the libraries folder nested within the Arduino folder. DHT_Library allows us to read the digital data we will be receiving from the DHT11 multi sensor. Time-master allows us to track the time of our measurements.</p><p /><p style=\"margin-left: 30.0px;\"><em>The libraries you will need to install:</em></p><p class=\"media-group\"><ac:structured-macro ac:name=\"view-file\" ac:schema-version=\"1\" ac:macro-id=\"4e4f85e9-b3f7-4cef-aee4-8e8e1701dd21\"><ac:parameter ac:name=\"name\"><ri:attachment ri:filename=\"Time-master.zip\" ri:version-at-save=\"3\" /></ac:parameter></ac:structured-macro><ac:structured-macro ac:name=\"view-file\" ac:schema-version=\"1\" ac:macro-id=\"1dd1783e-1278-46d7-84ae-be8ac838f29e\"><ac:parameter ac:name=\"name\"><ri:attachment ri:filename=\"DHT_Library.zip\" ri:version-at-save=\"2\" /></ac:parameter></ac:structured-macro></p><p /><p style=\"margin-left: 30.0px;\">&middot; If you are using a multi sensor that has an attached integrated circuit, it is possible that the provided DHT library won&rsquo;t be compatible. If this is the case, you will need to search the web for a library that will work with your sensor.</p><p style=\"margin-left: 30.0px;\">&middot; If the provided software is not up to date, you may have to find more recent versions.</p><p /><p>Once you have installed the libraries you need to include them in your Arduino IDE code. To do this, open a new Arduino IDE file, go to the &ldquo;Sketch&rdquo; dropdown menu, and hover over the &ldquo;Include Library&rdquo; option. If you have correctly installed the libraries, they should appear in the &ldquo;contributed libraries&rdquo; section of the dropdown menu. Selecting both libraries will generate the code that loads them into your program. Below the generated line <strong>#include &lt;dht.h&gt;</strong> add the line: <strong>dht DHT; </strong>. Don&rsquo;t forget to define constants and pin designations before moving on to the setup function.</p><p /><p>From here, the coding is up to you, although some useful information is provided below. Your code can be written using the given information. However, further research can be done to improve efficiency.</p><p><strong>Library Syntax:</strong></p><ul><li><p><strong>second() </strong>returns the number of seconds <u>since the program started</u>. Resets to 0 after 59.</p></li><li><p><strong>minute() </strong>returns the number of minutes <u>since the program started</u>. Resets to 0 after 59.</p></li><li><p><strong>hour()</strong> returns the number of hours <u>since the program started</u>. Resets to 0 after 19.</p></li><li><p><strong>int varName = DHT.read11(sensorPin) </strong>reads the data, storing the temperature (˚C) and the percent relative humidity (%) as integers in <strong>DHT.temperature </strong>and <strong>DHT.humidity </strong>respectively. <strong>varName </strong>can be any name that isn&rsquo;t defined elsewhere in the code and <strong>sensorPin</strong> is a variable containing the number corresponding to the digital pin we are using to collect data.</p></li><li><p>Since we will be using a software that reads serial data, you will need to use <strong>Serial.print()</strong> or <strong>Serial.println()</strong> in order to store your data.</p></li></ul><p><strong>Tips</strong>: </p><ul><li><p>For each data point you should record 5 values: temperature, humidity, hour, minute, second. Since we will be storing these values in a csv file, be sure to use <strong>Serial.print(&ldquo;,&rdquo;) </strong>between printing each value. Also, when printing the last value, use <strong>Serial.println()</strong> (not followed by a comma). This will put each successive data point on a new line.</p></li><li><p>Any code you write will take a short amount of time to run (on the order of 10 milliseconds). If you use the <strong>delay()</strong> function to regulate the interval between data points, you must consider the additional delay of running the code. If you are collecting a large set of data points, this additional delay cannot be ignored.</p><p /></li></ul><p>Once you have constructed your circuit and written your code, you will need to figure out how to store the serial data into a csv file. The next section discusses how to do that using the Tera Term software.</p><p /><p><strong>Data Storage with Tera Term</strong></p><p>Once you have installed Tera Term, using it for data collection is relatively easy. Once you have set up Tera Term to read the serial port, you won&rsquo;t be able to upload the program to your Arduino. Therefore, before you run Tera Term, you must upload your code. Once the code has been uploaded, you can open Tera Term. Click on the Serial option in the window that pops up and ensure that the correct USB port is selected before clicking OK. This will open a new window where the collected data will be displayed.</p><p>When you have reached the data collection window, you need to set up the storage of the data. Open the &ldquo;File&rdquo; dropdown menu and select &ldquo;log.&rdquo; This will open another window where you can set up a path for accessing your file. Save the data in a place you will remember it and be sure that the file name ends in .csv. The data collection will now continue until the Tera Term window is closed or the Arduino is disconnected.</p><p /><p /><p><br /></p><p /><p /><p style=\"text-align: center;\"><strong>Capacitors (Optional Reading):</strong></p><p>A capacitor is an electrical component that is comprised of two conductive plates separated by a dielectric material. A dielectric material is an electric insulator meaning it does not conduct electricity and no current can flow through it. However, in the case of a capacitor, the dielectric material only forms a thin layer of separation between the plates. How does this work in circuits? We know that electrical current is the flow of electrons through a conductive material. When an electron flows into one of the plates of a capacitor, the plate takes on a slight negative charge. To account for the negative charge on plate 1, plate 2 wants to become positively charged. In order to gain a positive charge, it forces an electron out. In summary, when an electron flows into one plate, a different electron flows out of the other. This seems to suggest that current flows normally through capacitors despite the dielectric material. This would be true, however, as current continues to flow, the charge on both plates continues to grow. The more negatively charged plate 1 becomes, the less willing it is to take on electrons. The amount of charge that can be held by the plates depends on the capacitance of the component. Once the plates reach this maximum charge, current will stop flowing. The capacitance depends on three characteristics of the capacitor: the surface area of the plates, the distance between the plates, and the dielectric material separating the plates. The behavior of capacitors can be further understood in the example given below.</p><p>The capacitor in the DHT11 multi sensor has a fixed area and distance between the plates. However, the dielectric material used in the capacitor can absorb moisture from the air. As it absorbs moisture, the dielectric properties of the material change. Increasing the amount of water particles in the dielectric, increases the capacitance of the capacitor. We can detect these changes in capacitance in order to determine the relative humidity of the air.</p><p><em>Capacitor Example</em></p><p>In this example, we have an RC circuit which is the simplest capacitor circuit. Initially, when a voltage drop is applied across a capacitor, the effective resistance of the capacitor is zero. This means that if we did not include the resistor, the circuit would be shorted when the voltage is applied. From Ohm&rsquo;s law (V = iR), we can see that for a fixed, non-zero voltage, as the resistance approaches zero, the current approaches infinity. An infinite current is of course impossible, so the resistance can never be zero. This is reconciled by the fact that all electrical conductors have an intrinsic resistance. However, this resistance is typically quite small meaning, even though the current isn&rsquo;t infinite, it does become extremely large. Shorting a circuit like this will likely destroy the power source, which is something we want to avoid.</p><p /><p style=\"text-align: center;\">Figure 2 &ndash; Capacitor Example</p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"369\" ac:original-width=\"416\" ac:width=\"680\"><ri:attachment ri:filename=\"image-20190911-140128.png\" ri:version-at-save=\"1\" /></ac:image><p>Given that our example circuit contains a 500 Ohm resistor and a 5-Volt power source, we can calculate that the initial current through the circuit will be 10 milliamps. As the capacitor fills up, its effective resistance increases exponentially which means that the current through the circuit follows an exponential decay approaching zero. The time dependent behavior of the current in this circuit is given by the following equation:</p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"82\" ac:original-width=\"412\" ac:width=\"224\"><ri:attachment ri:filename=\"image-20190911-140723.png\" ri:version-at-save=\"1\" /></ac:image><p>In this equation, 10mA is the initial current, R is the resistance of the resistor, and C is the capacitance of the capacitor.</p>",
    "conflPageId": "312279046",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Purchasing your Arduino Board",
    "content": "<p>In the Arduino project, you will be introduced to the abilities of the Arduino Uno Board and software. In this project you will first learn how to construct basic circuits and program them using the Arduino IDE. Next you will learn how to use the DHT11 multi sensor to collect and store ambient temperature and humidity data. Finally, you will learn how to program your Arduino board using JavaScript. By the end of this project, you should have the tools and resources necessary to develop your very own Arduino projects suited to your own needs. </p><p>This project doesn&rsquo;t require much hardware or prior knowledge of electrical circuits. The project will use a small collection of electrical components which can be purchased at relatively low costs. (LEDs and resistors are not required for the data collection portion of the project, but are recommended and can be purchased very cheaply.) Ask your mentor if any of these components are already available from past projects.</p><p /><p><strong><u>What you will need:</u></strong></p><table data-layout=\"default\"><tbody><tr><td><p style=\"text-align: center;\"><a href=\"https://es.aliexpress.com/item/32967816885.html?src=google&amp;albslr=226710689&amp;src=google&amp;albch=shopping&amp;acnt=494-037-6276&amp;isdl=y&amp;slnk=&amp;plac=&amp;mtctp=&amp;albbt=Google_7_shopping&amp;aff_platform=google&amp;aff_short_key=UneMJZVf&amp;&amp;albagn=888888&amp;albcp=1633820309&amp;albag=63890294393&amp;trgt=539263010115&amp;crea=es32967816885&amp;netw=u&amp;device=c&amp;gclid=Cj0KCQjwwb3rBRDrARIsALR3Xebh34VuCyewbVy4pWws5tKQOv68nU4gpuHb_8O0tZTWJ8-pTJl12DgaAsmWEALw_wcB&amp;gclsrc=aw.ds\">Arduino Uno</a> (with USB Cable)</p></td></tr><tr><td><p style=\"text-align: center;\"><a href=\"https://www.tiendatec.es/arduino/modulos/627-modulo-h1-dht11-temperatura-y-humedad-para-arduino-8406271480015.html?gclid=Cj0KCQjwwb3rBRDrARIsALR3XeaJctl2nbc671_91zAaNsc0WGbILqz1jF3-LZUfn04gjNSyVmgfTncaAkBvEALw_wcB\">DHT11</a> Temperature/Humidity Multi-Sensor</p></td></tr><tr><td><p style=\"text-align: center;\"><a href=\"https://es.aliexpress.com/item/32857051841.html?src=google&amp;albslr=227552571&amp;src=google&amp;albch=shopping&amp;acnt=494-037-6276&amp;isdl=y&amp;slnk=&amp;plac=&amp;mtctp=&amp;albbt=Google_7_shopping&amp;aff_platform=google&amp;aff_short_key=UneMJZVf&amp;&amp;albagn=888888&amp;albcp=2047572441&amp;albag=80829465588&amp;trgt=743612850714&amp;crea=es32857051841&amp;netw=u&amp;device=c&amp;gclid=Cj0KCQjwwb3rBRDrARIsALR3XeaAET1I2EUnqykCz9Ua-FMWx0ImFL_6y7R26Sh_tAvysrIfhRk5LmwaAu5iEALw_wcB&amp;gclsrc=aw.ds\">Breadboard</a></p></td></tr><tr><td><p style=\"text-align: center;\"> <a href=\"https://es.aliexpress.com/item/1847829829.html?spm=a2g0o.detail.1000060.1.50ba7812yTHv2F&amp;gps-id=pcDetailBottomMoreThisSeller&amp;scm=1007.13339.139618.0&amp;scm_id=1007.13339.139618.0&amp;scm-url=1007.13339.139618.0&amp;pvid=db18b36f-55ad-4709-983f-7b448ab5696a\">Jumper Wires</a></p></td></tr><tr><td><p style=\"text-align: center;\"><a href=\"https://es.aliexpress.com/item/32885166741.html?src=google&amp;albslr=225542106&amp;src=google&amp;albch=shopping&amp;acnt=494-037-6276&amp;isdl=y&amp;slnk=&amp;plac=&amp;mtctp=&amp;albbt=Google_7_shopping&amp;aff_platform=google&amp;aff_short_key=UneMJZVf&amp;&amp;albagn=888888&amp;albcp=2047572441&amp;albag=80829465588&amp;trgt=743612850714&amp;crea=es32885166741&amp;netw=u&amp;device=c&amp;gclid=CjwKCAjwtuLrBRAlEiwAPVcZBkiz4tss6iFdSB62lW1iTGzhsRbspFkNTWG873-pHxQgnUtXH9evKxoCDwUQAvD_BwE&amp;gclsrc=aw.ds\">LEDs</a> + <a href=\"https://www.banggood.com/300pcs-16W-1-Metal-Film-Resistor-Kit-10-ohm-1M-ohm-Color-Ring-Resistance-10R-1MR-Resistor-Assorted-Set-30-Values-p-1469115.html?rmmds=buy&amp;cur_warehouse=CN\">Resistors</a></p></td></tr></tbody></table><p /><p>The Arduino hardware designs are open sourced so it&rsquo;s very easy to find low cost options for these items (the table contains links to some of the best options). AliExpress seems to be a good place to look.</p><p /><p>There are countless possible projects that can be made using Arduino. The project you will be working on barely scratches the surface of what is possible. Because it doesn&rsquo;t involve many components, you will be greatly limited in the possible projects you can develop in the future. Therefore, if you are interested in exploring more of the abilities of Arduino, it is highly recommended that you investing in a starter kit instead of buying the components listed above. There are many of these kits available online. If you choose to buy one of these kits, ensure that they contain the components necessary for the project.</p><p>&middot; <a href=\"https://es.aliexpress.com/item/33001724839.html?src=google&amp;albslr=221668190&amp;src=google&amp;albch=shopping&amp;acnt=494-037-6276&amp;isdl=y&amp;slnk=&amp;plac=&amp;mtctp=&amp;albbt=Google_7_shopping&amp;aff_platform=google&amp;aff_short_key=UneMJZVf&amp;&amp;albagn=888888&amp;albcp=2047572441&amp;albag=80829465588&amp;trgt=743612850714&amp;crea=es33001724839&amp;netw=u&amp;device=c&amp;gclid=Cj0KCQjwwb3rBRDrARIsALR3XeZUGvnDTIpaWJd0A1vAHmDbjQIoLD9KJEPVCbCoaUFdkeJDJjnBhBQaAtSvEALw_wcB&amp;gclsrc=aw.ds\">Super Starter Kit for Arduino UNO R3 with the Tutorial</a></p><p>&middot; <a href=\"https://hobbyking.com/es_es/kingduino-4wd-ultrasonic-robot-kit-1.html?countrycode=ES&amp;gclid=Cj0KCQjwwb3rBRDrARIsALR3XeYXkRZmyW_UpVXiqNgCqFDD1Ojj88VGEUrGOE-npty7XcQ1MFDKh6EaAigXEALw_wcB&amp;gclsrc=aw.ds\">Kingduino 4WD Ultrasonic Robot Kit</a></p><p /><p /><p>While you&rsquo;re waiting for your new Arduino board, take a look at the next page, &ldquo;An Introduction to Basic Circuits.&rdquo;</p>",
    "conflPageId": "312344583",
    "conflChildrenId": [

    ]
  },
  {
    "title": "An Introduction to Basic Circuits",
    "content": "<p>There are a few concepts you need to understand before designing your first circuit. These concepts may seem confusing at first, but they&rsquo;re not too complicated. If you take the time to understand them now then working with Arduino will become a lot easier. These concepts are best introduced using the most well known equation in electrical circuits. </p><p /><p style=\"text-align: center;\">Ohm&rsquo;s law: <strong>V = iR</strong> (Voltage = Current ∙ Resistance)</p><p style=\"text-align: center;\" /><p>Breaking this equation into its three pieces:</p><p /><p><em><u>Current (measured in Amperes)</u></em> is the most intuitive of the factors in this equation. Current measures the flow of electricity through a conductive material (such as a wire). Physically, electrical current simply means the flow of electrons.</p><p><em><u>Resistance (measured in Ohms)</u></em> impedes the flow of electrical current and, in doing so, absorbs power. Many of the components you will use in your circuits have a certain amount of resistance to the flow of current. If these components create a resistance, then it must mean they are absorbing power. This is exactly how power is provided to components in your circuits.</p><p><em><u>Voltage (measured in Volts)</u></em> is a measure of the electric potential difference between two points. A voltage difference across a resistor is what is needed to &ldquo;pull&rdquo; electrons through that resistor. A large voltage drop between two points will &ldquo;pull&rdquo; electrons harder than a small voltage drop. Voltage is complicated because it can only be measured as a difference between two points in a circuit. It physically doesn&rsquo;t make sense to measure the voltage at a single point. This is why batteries always have two terminals. A 5-Volt battery has a voltage difference of 5 Volts between it&rsquo;s two terminals.</p><p /><p>Bringing the pieces back together: </p><p>If you connect the two terminals of a 5-Volt battery with a 5 Ohm resistor, a voltage drop of 5 Volts will force electrical current to flow through the resistor. Ohm&rsquo;s law can be applied to this scenario to calculate that 1 Ampere of current will flow through the resistor:</p><p style=\"text-align: center;\">V = iR</p><p style=\"text-align: center;\">(5V) = i (5&Omega;)</p><p style=\"text-align: center;\">i = (5/5) A = 1A</p><p style=\"text-align: center;\">(&Omega; is the symbol used for Ohms)</p><p style=\"text-align: center;\">Note: 1 Ampere is a very large current in most applications and would likely damage your hardware. It would be more realistic to use a resistor of 500 Ohms which would make the equation: 5 = i(500). This yields a more realistic current of 0.01 Amperes</p><p /><p /><p>A fun way to try to understand these concepts is to think about drinking through a straw:</p><p>Your goal is to get liquid flowing from the glass, up the straw, and into your mouth. In order to do that, you suck on the straw. When you suck on the straw, what you are actually doing is decreasing the pressure of the air in the straw to be lower than the pressure of the air outside of the straw (We are creating a pressure difference). This essentially means the air outside the straw pushes down on the liquid&rsquo;s surface harder than the air inside the straw does. The stronger push wins meaning that the liquid is pushed up through the straw and into your mouth. </p><p>Using this example to think about circuits: a pressure difference causing the fluid to flow is the same as a voltage difference causing electrons to flow. The straw causes a resistance to the flow. If you don&rsquo;t believe this, consider what would happen if you were to suck on a thinner straw just as hard. Less liquid would flow through the straw. For the same pressure difference, a larger resistance to flow means a smaller flow. </p><p>This last statement demonstrates Ohm&rsquo;s law (V = iR) quite nicely. If voltage stays the same, then a higher resistance means a lower current.</p>",
    "conflPageId": "312344601",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Setting up your Arduino Project with JavaScript",
    "content": "<p>Johnny-Five is Node.js module that allows users to program Arduino boards (and similar microcontrollers) using JavaScript. This platform was developed in order to extend the capabilities of the Arduino board with an emphasis in the field of robotics. One of the benefits of using Johnny-Five is the fact that it allows you to program microcontrollers without having to write any code in the Arduino IDE. Therefore, Johnny-Five is a great option for experienced JavaScript programmers who want to get a quick start without having to learn the Arduino development language.</p><p /><p><em>Johnny-five Installation</em></p><p>Because Johnny-Five is a Node.js module, in order to install it, you must first have Node.js installed on your computer. If you have not already done so, please install Node.js.</p><p>With Node.js now on your computer, you can install the Johnny-Five module. To do this, open the command prompt window on your computer and enter <strong>npm init</strong>. This will initialize the node package manager which you will need for the installation. After running this command, the window will begin to walk you through the process of setting up a package.json file. The default options should be adequate for the installation, so you may press enter until it prompts you with the final line <strong>Is this OK? (yes)</strong>. This time, after you hit enter, you will be able to access the node package manager. At this point, you can install Johnny-five. This can be done by entering the command <strong>npm install johnny-five</strong>.</p><p /><p><em>Configuring your Arduino Board to Run JavaScript Code</em></p><p>Before you can start programming your Arduino with JavaScript, you need to configure the board to understand JavaScript code. Johnny-Five uses a Firmata protocol to communicate with Arduino. Conveniently enough, the Arduino IDE already has some Firmata protocols built into the software. These are prewritten programs that you can upload to your Arduino board. In order to access the program, open your Arduino IDE and follow the path of dropdown menus: <strong>File&gt;Examples&gt;Firmata&gt;StandardFirmataPlus</strong>. Doing this will generate a script which you can upload to your Arduino board. Once you upload this, your board will be configured for Johnny-Five.</p><p /><p><em>Programming Your Arduino with JavaScript</em></p><p>With Johnny-five installed and the Firmata protocol now running on your Arduino board, you can start programming it using JavaScript. To do this, open a new .js file where you can start writing your code. The following lines of code should be used for any program you write to your Arduino board.</p><p /><p><strong>var five = require(&ldquo;johnny-five&rdquo;);</strong></p><p><strong>var board = new five.Board();</strong></p><p /><p><strong>board.on(&ldquo;ready&rdquo;, function() {</strong></p><p style=\"margin-left: 30.0px;\"><strong>//All your code will be written in this function.</strong></p><p><strong>});</strong></p><p /><p>The Johnny-Five <a href=\"http://johnny-five.io/\">website</a> has everything you will need to start learning how to use the module, including pages dedicated to <a href=\"http://johnny-five.io/api/\">API </a>and <a href=\"http://johnny-five.io/examples/\">examples</a>. The examples cover everything from basic code and board configuration to the integration of complex components and sensors into your projects. Work through a few of these examples on your own and you will be well on your way to developing your own projects using JavaScript.</p><p />",
    "conflPageId": "312344608",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Getting Started with Arduino",
    "content": "<p><strong>Introduction to Arduino</strong></p><p>Start by taking a second to inspect your Arduino board. Notice that there is a row of pins along each side of the device. You can connect jumper wires to these pins to connect your Arduino Board to any circuit you desire.</p><p /><p><em>Power Pins</em></p><p>Start by looking along the left side of the board (with the main ports oriented away from you). The top grouping of pins is used to provide power to our circuits and there is no coding associated with the use of these pins. The important pins here are the ones labeled 3.3V, 5V, and GND. Recall that it doesn&rsquo;t make sense to know the voltage at a point, so how are there pins for 3.3V and 5V? This is where the GND (ground) pin comes in. The 3.3V and 5V pins are measuring voltages relative to the ground pin, so you can think of the ground pin as having a voltage of zero. If this seems confusing, refer back to the page that discusses the basics of circuits.</p><p /><p><em>Digital Pins</em></p><p>Now shift your attention to the pins along the right side of the board. These are the digital input/output pins which can read or write voltages in binary states: on/off (high/low voltage). These voltages are again measured relative to your Arduino&rsquo;s ground pins. The digital pins can act as output pins (sending information to your circuit) or input pins (collecting information from the circuit). </p><p /><p><strong>digitalWrite(pinNumber, HIGH); </strong>will set the voltage of the specified pin to 5 Volts (relative to ground).</p><p><strong>digitalWrite(pinNumber, LOW); </strong>will set the voltage of the specified pin to 0 Volts (relative to ground).</p><p><strong>digitalRead(pinNumber); </strong>will return a 1 if the pin reads a voltage not equal to ground and a 0 if it reads a voltage equal to ground.</p><p /><p><em>Analog Pins</em></p><p>The last grouping of pins are the analog pins. These are the 6 pins along the lower left side of the board. These pins allow you to work with a wider range of voltages instead of just the on/off digital states. Again, these pins can be used for both output and input. If you are writing a voltage to your circuit, you will specify a value between 0 and 255 (an 8-bit value). The specified value is linearly scaled to a voltage between 0 and 5 Volts (example: 255 &rarr; 5V). If you are using the analog pins to read a voltage at some point in a circuit, the pin reading will return a value between 0 and 1023 (a 10-bit value). This value is linearly scaled from a voltage between 0 and 5 Volts (example: 5V &rarr; 1023).</p><p /><p><strong>analogWrite(pinNumber, value); </strong>will set the voltage of the specified pin to (<strong>value</strong> * 5 / 255) Volts.</p><p><strong>analogRead(pinNumber); </strong>will return a value between 0 and 1023. If you multiply the result by (5 / 1023), you will obtain the measured voltage. </p><p /><p><strong>Software</strong></p><p>Before you can start interacting with your Arduino Uno board you need to install the <a href=\"https://www.arduino.cc/en/Main/Software\">Arduino IDE</a> software. The software is open sourced and works with all operating platforms. It can be downloaded for free through the Arduino website. The Arduino IDE is one of the main reasons that microcontroller programming has become so popular and accessible to so many people. The software, based in c/c++, is relatively intuitive and is quite easy to learn regardless of your previous knowledge of coding.</p><p>When you first open the program, you will have to check the settings to ensure the software can properly communicate with your board. First, open <strong>Tools&gt;Board</strong> and select the board you are using (likely Arduino/Genuino Uno). Next, open <strong>Tools&gt;Port</strong> and ensure that the correct USB port is selected (your Adruino will have to be plugged in for this part).</p><p>You will notice that there is already some script written for you. This code sets up two functions: setup and loop. The setup function is where you will write any of the code you need to setup your project. This code will only run once. The loop function is where the important stuff happens. After the setup function runs once, the loop function will start and will continue to loop until the Arduino stops receiving power. You can start learning about the software by building the following LED circuit.</p><p /><p><strong>Basic LED Circuit</strong></p><p>The goal of this circuit will be to use the Arduino IDE to control a basic LED circuit. This will help you to start understanding both how electrical components work together and how to use the software.</p><table data-layout=\"default\"><colgroup><col style=\"width: 711.0px;\" /><col style=\"width: 48.0px;\" /></colgroup><tbody><tr><td><p style=\"text-align: center;\">You Will Need</p></td><td><p style=\"text-align: center;\">#</p></td></tr><tr><td><p style=\"text-align: center;\">Arduino Uno (with USB cable)</p></td><td><p style=\"text-align: center;\">1</p></td></tr><tr><td><p style=\"text-align: center;\">Breadboard</p></td><td><p style=\"text-align: center;\">1</p></td></tr><tr><td><p style=\"text-align: center;\">Wires (m/m)</p></td><td><p style=\"text-align: center;\">2</p></td></tr><tr><td><p style=\"text-align: center;\">~220 Ohm Resistor</p></td><td><p style=\"text-align: center;\">1</p></td></tr><tr><td><p style=\"text-align: center;\">LED</p></td><td><p style=\"text-align: center;\">1</p></td></tr></tbody></table><p /><p><em>Breadboard</em></p><p>Breadboards are a useful tool for circuit design (reference Figure 1). They are composed of a grid of small holes into which we can plug our components (jumper wires, resistors, LEDs, etc.). Across the center of the board there are two grid sections comprised of a series of five-hole columns. In each column of five (a node), all the holes are connected to each other with conductive material, but each column is isolated from all other columns. This means that all holes in a node have the same voltage and any current that flows into the node through one (or more) of the holes must flow out of one (or more) of the others. Along the top and bottom of the board are the power strips (two rows labelled positive and negative). Each full row acts as a node (connected all the way across the board) and these are typically used if many components need to be powered. Using jumper wires, ground the negative row by connecting any of the holes to one of the ground pins on the Arduino Board. Now connect one of the voltage pins to the positive row in the same manner. Any components that are connected to these nodes will now be powered by the voltage drop.</p><p /><p style=\"text-align: center;\"><em>Figure 1 - Breadboard</em></p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"171\" ac:original-width=\"415\" ac:width=\"557\"><ri:attachment ri:filename=\"image-20190912-120800.png\" ri:version-at-save=\"1\" /></ac:image><p /><p><em>The Circuit</em></p><p>For this basic circuit, the goal is to power an LED on and off over a given time interval. LEDs have very small resistance which means that if a voltage drop of 5 Volts is directly applied across the terminals, a very large current will flow through the LED. This means that the LED will be receiving far too much power and will likely blow out quickly. The current must somehow be reduced which means the resistance of the circuit needs to be increased. Resistors have the important property that if they are connected in series, their resistances add together (illustrated in Figure 2). This property permits an easy way to increase the resistance of the LED circuit. Simply connecting the LED to a resistor.</p><p /><p style=\"text-align: center;\"><em>Figure 2 &ndash; Equivalent Resistance (Series)</em></p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"56\" ac:original-width=\"415\" ac:width=\"557\"><ri:attachment ri:filename=\"image-20190912-120823.png\" ri:version-at-save=\"1\" /></ac:image><p /><p style=\"margin-left: 30.0px;\">Setup:</p><p style=\"margin-left: 30.0px;\">1. Link any two nodes of the breadboard with the resistor.</p><p style=\"margin-left: 30.0px;\">2. Connect one terminal of the LED to one of these nodes and plug the other terminal into a free node.</p><p style=\"margin-left: 30.0px;\">(Note: LEDs are directional which means that it matters which direction current flows through them. One of the wires is longer than the other. The longer wire needs to have a higher voltage than the shorter wire. It doesn&rsquo;t matter which side connects to the resistor, or what order the resistor and LED are connected, but remember which side of the LED/resistor pair needs to have an applied voltage and which side needs to be grounded.)</p><p style=\"margin-left: 30.0px;\">3. Use a jumper wire to connect the digital ground pin of your Arduino board to the appropriate node of your circuit.</p><p style=\"margin-left: 30.0px;\">4. Use another jumper wire to connect one of the numbered digital pins of your Arduino board to the other side of your circuit.</p><p /><p><em>The Code</em></p><p>A basic code for this circuit is attached to this page. Upload it to your Arduino to see what happens (The serial monitor can be accessed through the Tools dropdown menu).</p><p>This code uses some of the basic operations that you can do with the Arduino IDE. Take some time to look through the code and watch what it&rsquo;s doing. Notes are included in the code to help guide you. You can also use the <a href=\"https://www.arduino.cc/reference/en/#page-title\">Arduino website</a> as a resource. Notice that constants are defined above the setup and loop functions and a few commands are written to the setup function, but the bulk of the code is contained within the loop function. Remember the setup function runs once at the beginning then the loop function runs repeatedly until we disconnect the Arduino.</p><p>Once you understand the code, try making the following alterations so you can practice working with the code yourself:</p><p /><p style=\"margin-left: 30.0px;\">&middot; Set different intervals for the light to be on and off</p><p style=\"margin-left: 30.0px;\">&middot; Add a second LED/resistor pair which turns on when the first turns off (and vice versa)</p><p style=\"margin-left: 30.0px;\">&middot; Use 6 LEDS (2 Red, 2 Yellow, 2 Green) to program a traffic light simulation.</p><p style=\"margin-left: 30.0px;\">&middot; If you have any other components available to you (buttons, dials, etc.) integrate them into your circuit to turn your lights on and off manually. You will probably need to do further research to figure out how to integrate new components. Don&rsquo;t forget you can reference the <a href=\"https://www.arduino.cc/reference/en/#page-title\">Arduino website</a> for more documentation.</p><p /><p>LED Code: </p><p class=\"media-group\"><ac:structured-macro ac:name=\"view-file\" ac:schema-version=\"1\" ac:macro-id=\"a50c2865-4c5b-4192-b78e-920b1f30ac93\"><ac:parameter ac:name=\"name\"><ri:attachment ri:filename=\"BasicLED.ino\" ri:version-at-save=\"1\" /></ac:parameter></ac:structured-macro></p><p>In the &ldquo;Arduino&rdquo; file on your computer, create a folder called BasicLED. Save this file to the BasicLED folder.</p>",
    "conflPageId": "312508417",
    "conflChildrenId": [

    ]
  },
  {
    "title": "MERN Project",
    "content": "<h3 style=\"text-align: center;\">Welcome the MERN Full Stack Resources</h3><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"744\" ac:original-width=\"1300\" ac:width=\"340\"><ri:attachment ri:filename=\"MERN.jpeg\" ri:version-at-save=\"1\" /></ac:image><h3>About M.E.R.N</h3><p>Before we start, here are a few terms that should be familiar to you. If they are not, conduct your own research before continuing:</p><ul><li><p>Progressive Web App (PWA)</p></li><li><p>Full Stack</p></li><li><p>M.E.R.N acronym </p></li></ul><h3><ac:emoticon ac:name=\"blue-star\" ac:emoji-shortname=\":office:\" ac:emoji-id=\"1f3e2\" ac:emoji-fallback=\"🏢\" /> My Itinerary</h3><p>You have been hired by &ldquo;My Itinerary&rdquo;, a startup that plans to build a progressive web app (PWA) for travelers. This collaborative app will provide access to different itineraries and activities for users wanting to discover or share experiences in a city.</p><p>You will be working with a young, (fictional), and dynamic team. Your colleagues will communicate with you via email throughout the development of the app. </p><p>The team:</p><ul><li><p><strong>Sabrina Miller:</strong> The digital product owner, is responsible for the product and team management. She will guide you through the required tasks and the deadlines you need to meet.</p></li><li><p><strong>Martin Wright</strong>: Technical development team leads. Oversees the technical development of the company. He will assist you with the technical steps of the project.</p></li><li><p><strong>Sai Patel</strong>: UX Designer. In charge of user interface (UI) and design, he will send you wire-frames of what the app should look like.</p></li><li><p><strong>You</strong>: Junior Full Stack Developer</p></li></ul><h3><ac:emoticon ac:name=\"blue-star\" ac:emoji-shortname=\":twisted_rightwards_arrows:\" ac:emoji-id=\"1f500\" ac:emoji-fallback=\"🔀\" /> Paths:</h3><p>There are two ways to carry out the My Itinerary MERN project. If needed, have a discussion with your mentor about which option is most suited to you:</p><ul><li><p>The first and more realistic path is to develop the Front and Back end in parallel. This represents the normal life-cycle of an app's development. For this, follow the tasks tagged:<br /><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"a0c2e888-9ea9-4994-8cf7-d3fd8c8d78f0\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro> and <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"d704d650-31d6-4c93-b52e-7b1ffaaca131\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  </p></li><li><p>Alternatively, you can follow the &lsquo;Front End first&rsquo; alternative. During this process, you will focus on building a front end using a ready made back end. For this option, follow the tasks tagged:<br /><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"261999af-447a-44e5-ab3e-1e81b09b73ba\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  and <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"718a5aec-b884-4fc8-980a-9343d8570265\"><ac:parameter ac:name=\"title\">FRONT END ALT</ac:parameter><ac:parameter ac:name=\"colour\">Green</ac:parameter></ac:structured-macro> </p></li></ul><p style=\"margin-left: 30.0px;\">If time allows, once you have successfully built the front end you will be able to restart the task and build your own Back End. </p><p>If you are developing fast, spend some time on the tasks marked <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"b62e98f9-e045-4a42-8d56-65ce76b4bc9d\"><ac:parameter ac:name=\"title\">NICE TO HAVE</ac:parameter><ac:parameter ac:name=\"colour\">Purple</ac:parameter></ac:structured-macro>. Implementing these extra features will help further develop your skill set and prove valuable in future projects.</p><p /><h3><ac:emoticon ac:name=\"blue-star\" ac:emoji-shortname=\":bar_chart:\" ac:emoji-id=\"1f4ca\" ac:emoji-fallback=\"📊\" />  Presentations &amp; Code review</h3><p>During the project, you will have to present your work on many aspects:</p><ul><li><p>Application functional architecture</p></li><li><p>End user demonstrations</p></li><li><p>Code reviews</p></li></ul><p>Being able to prioritise tasks and provide feedback on work you carry out is an essential part of being a developer. To assist with preparation for the task, you will need to create a slideshow that clearly illustrates the individual elements of the MERN stack, and how they work together. You have been provided with a set of slide templates with some content to get you started:<br /><a href=\"https://docs.google.com/presentation/d/1DAvoCY3rOOHyUHz8RDpX_n5gF_0OiRFuLCIy5VlSwSk/edit?usp=sharing\">My Itinerary MERN Presentation</a></p><p>You can of course, re-design the slides to your liking.</p><p /><h3><ac:emoticon ac:name=\"blue-star\" ac:emoji-shortname=\":page_facing_up:\" ac:emoji-id=\"1f4c4\" ac:emoji-fallback=\"📄\" /> Sprint summary</h3><ol><li><p> <ac:link ac:card-appearance=\"inline\"><ri:page ri:content-title=\"V2 MERN Sprint 1\" ri:version-at-save=\"35\" /><ac:link-body>V2 MERN Sprint 1</ac:link-body></ac:link>  -  Create stack diagram, install and configure React and use it to build the app&rsquo;s Landing Page.</p></li><li><p><ac:link ac:card-appearance=\"inline\"><ri:page ri:content-title=\"V2 MERN Sprint 2\" ri:version-at-save=\"11\" /><ac:link-body>V2 MERN Sprint 2</ac:link-body></ac:link>   - Set up the foundations of the backend using Node.js libraries and connect to Mongo DB database. GET and POST data.</p></li><li><p> <ac:link ac:card-appearance=\"inline\"><ri:page ri:content-title=\"V2 MERN Sprint 3\" ri:version-at-save=\"12\" /><ac:link-body>V2 MERN Sprint 3</ac:link-body></ac:link>  - Implement state management with Redux and create new models and routes</p></li><li><p> <ac:link ac:card-appearance=\"inline\"><ri:page ri:content-title=\"V2 MERN Sprint 4\" ri:version-at-save=\"15\" /><ac:link-body>V2 MERN Sprint 4</ac:link-body></ac:link>  User management and web token security</p></li><li><p> <a href=\"https://ubiqum.atlassian.net/wiki/spaces/PRODUCT/pages/346816530/V2+MERN+Sprint+5\" data-card-appearance=\"inline\">https://ubiqum.atlassian.net/wiki/spaces/PRODUCT/pages/346816530/V2+MERN+Sprint+5</a> Favorite and comments features</p></li></ol><p /><p><ac:emoticon ac:name=\"blue-star\" ac:emoji-shortname=\":construction:\" ac:emoji-id=\"1f6a7\" ac:emoji-fallback=\"🚧\" />  This course is still in the process of being improved. Please feel free give us any feedback using the form below:</p><p /><ac:structured-macro ac:name=\"iframe\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"4b653bc9-4fcb-454d-bbaf-eecbc9166777\"><ac:parameter ac:name=\"src\"><ri:url ri:value=\"https://docs.google.com/forms/d/e/1FAIpQLScx5F_-Mq6kG4uDFQTX61HddFr2oPgucBA8AHtNqZPb1KDOsg/viewform?embedded=true\" /></ac:parameter><ac:parameter ac:name=\"width\">100%</ac:parameter><ac:parameter ac:name=\"name\">MERN Feedback</ac:parameter><ac:parameter ac:name=\"frameborder\">hide</ac:parameter><ac:parameter ac:name=\"align\">middle</ac:parameter><ac:parameter ac:name=\"height\">1000</ac:parameter><ac:rich-text-body><p /></ac:rich-text-body></ac:structured-macro>",
    "conflPageId": "320045084",
    "conflChildrenId": [
      "321191968",
      "321978430",
      "323452933",
      "324403201",
      "346816530"
    ]
  },
  {
    "title": "V2 MERN Sprint 1",
    "content": "<p>In this first sprint, you will discover, or further your knowledge of the most popular JavaScript framework, <strong>React</strong>. You will create a simple landing page for the MYtinerary mobile app, learn about, and build interactive and reusable UI components.</p><p><br /></p><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"30f545a3-fb90-42a2-9980-79927e82804f\"><ac:parameter ac:name=\"title\">Front end</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro> Epic 1: MERN Stack Diagram</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"wide\" ac:macro-id=\"c57cb5ca-fd14-4181-bb3c-b30a0d82b35d\"><ac:rich-text-body><h4>Task 1: Conduct research into the MERN stack architecture</h4><p>Start by learning about the stack. This introduction to the MEAN and MERN stacks made by a MongoDB developer is a great place to start. It describes the primary elements in the stack as well as some of the benefits of modern javascript-based architecture.</p><p><a href=\"https://www.mongodb.com/blog/post/the-modern-application-stack-part-1-introducing-the-mean-stack\">The Modern Application Stack</a></p><h4>Task 2: Build the MERN stack diagram</h4><p>Make a copy and complete the slides for the presentation of the <a href=\"https://docs.google.com/presentation/d/1DAvoCY3rOOHyUHz8RDpX_n5gF_0OiRFuLCIy5VlSwSk/edit?usp=sharing\">MERN Diagram slides</a>. Make sure to add useful comments to describes every aspect of the diagram. </p><p>The diagram should not be an exact replica of what you find on the web and must be explained in your own words (no copy and paste!).</p><h4>Task 3: Share your presentation with your Slack group</h4><p>When you've completed your presentation, share the link on the Slack channel. To get the link, click Share (top right corner of Google Slides) &gt; Get Shareable Link. Note: make sure that the viewer has comment access!</p><p /></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"3599d4e0-c252-4b1f-801a-31e4db81f371\"><ac:parameter ac:name=\"title\">Front end</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Epic 2: Install and configure React</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"wide\" ac:macro-id=\"3654b7d5-2712-4f83-8890-f29924af3f5a\"><ac:rich-text-body><p>React (also known as React.js) runs in a Node.js environment, and is a JavaScript framework for building user interfaces. It is maintained by Facebook and a community of individual developers and companies.</p><h4>Task 1: Install Node.js on your machine if you haven't already</h4><p>To Install Node.js on your local machine, download it <a href=\"https://nodejs.org/en/\">here</a></p><h4>Not familiar with React yet? Take a moment to do a crash course before you go any <ac:inline-comment-marker ac:ref=\"6ebf0a1e-dcd4-4c27-8d41-0bd3bd1cd308\">further.</ac:inline-comment-marker></h4><p>Being the most widely used JS framework, you will find many crash courses on React. If you haven't used it in previous modules, it is advised to carry out one of these tutorials before going any further. Here are some examples, but you can of course find your own.</p><ul><li><p><a href=\"https://medium.freecodecamp.org/a-complete-beginners-guide-to-react-4d490abc349c\">A Complete Beginner&rsquo;s Guide to React</a></p></li><li><p><a href=\"https://reactjs.org/tutorial/tutorial.html#what-is-react\">Tutorial: Intro to React</a></p></li></ul><ac:structured-macro ac:name=\"widget\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"ae99a986-fea7-4ba9-8d22-da309a153422\"><ac:parameter ac:name=\"overlay\">youtube</ac:parameter><ac:parameter ac:name=\"_template\">com/atlassian/confluence/extra/widgetconnector/templates/youtube.vm</ac:parameter><ac:parameter ac:name=\"width\">400px</ac:parameter><ac:parameter ac:name=\"url\"><ri:url ri:value=\"https://www.youtube.com/watch?v=sBws8MSXN7A\" /></ac:parameter><ac:parameter ac:name=\"height\">300px</ac:parameter></ac:structured-macro><h4>Task 2: Create React project, and name it &ldquo;client&rdquo;</h4><p>Create a new repository for your project and open a terminal at the root path of this repository. <br />Tip for Windows users: In your repository hold Shift and right click too have the option to &quot;open a Powershell here&quot; in the context menu.<br />For Mac users, first enable this in settings &gt; keyboard &gt; shortcuts &gt; services, tick the box for &ldquo;New Terminal at Folder&rdquo;. Now, in Finder, you can right click on any folder &gt; services &gt; New terminal at folder.</p><p>run command: <code>npx create-react-app client</code></p><p><strong>Project Structure</strong></p><p>Take some time to analyse the structure of the project created with client and server.</p><table data-layout=\"default\"><tbody><tr><td data-highlight-colour=\"initial\"><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"95a52d1a-fa7f-44cf-afc2-45f47e74a686\"><ac:parameter ac:name=\"language\">text</ac:parameter><ac:plain-text-body><![CDATA[client/\n  README.md\n  node_modules/\n  package.json\n  public/\n    index.html\n    favicon.ico\n  src/\n    App.css\n    App.js\n    App.test.js\n    index.css\n    index.js\n    logo.svg]]></ac:plain-text-body></ac:structured-macro></td></tr></tbody></table><p>For the project to build, these files must exist with exact filenames:</p><p>public/index.html is the page template;<br />src/index.js is the JavaScript entry point.<br />You can delete or rename the other files.</p><p>You may create sub directories inside src. For faster rebuilds, only files inside src are processed by Webpack (packager tool to build and deploy web projects). You need to put any JS and CSS files inside src, otherwise Webpack won&rsquo;t see them.</p><p>Only files inside public can be used from public/index.html. Read instructions below for using assets from JavaScript and HTML.</p><p>You can, however, create more top-level directories. They will not be included in the production build so you can use them for things like documentation.</p><p>If you have Git installed and your project is not part of a larger repository, then a new repository will be initialised, resulting in an additional top-level .git directory.</p><p><strong>Advice</strong>: A popular way to structure a React project is to create a &quot;screen&quot; folder for all higher level components directly called from the entry point and a &quot;component&quot; folder for other components</p><p><strong>Run the client app</strong></p><p>Lets run the react app template with the following command. Make sure your terminal is at the root of the client directory (you might have to change directory using the command &quot;cd client&quot;): <code>npm run</code></p><p>More documentation from the Create React App Github project is located <a href=\"https://github.com/facebook/create-react-app\">here</a>.</p><h4>Task 3: Optional: Add React developer tools to Chrome</h4><p>The developer tools, while not required, provide some automated tasks like tests that will simplify and speed up some of your React tasks.</p><p><a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\">React Developer Tool Chrome extension</a></p></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"92d20fa1-ae8b-42ea-8a22-ef5472d3ce93\"><ac:parameter ac:name=\"title\">Front end</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Epic 3: Confirm your knowledge of React</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"25a83d34-d18f-41f3-964a-0baa2cedceec\"><ac:rich-text-body><p>With React comes a whole new set of concepts and terms that you need to familiarise yourself with. Conduct some research on the following:</p><ul><li><p><strong>Node dependencies</strong></p></li><li><p><strong>node_modules folder and the package.json file</strong></p></li><li><p><strong>Functional and Class-based Components and the difference between them</strong></p></li><li><p><strong>JSX and component rendering</strong></p></li><li><p><strong>Props</strong></p></li><li><p><strong>State</strong></p></li><li><p><strong>Lifecycle Hooks (in particular &quot;componentDidMount)</strong></p></li></ul><p>Some useful links to help you:</p><h4>Components</h4><p><a href=\"https://reactjs.org/docs/components-and-props.html\">Components and Props</a></p><p>Learn about two different types of React components: <a href=\"https://medium.com/@Zwenza/functional-vs-class-components-in-react-231e3fbd7108\">Functional vs Class Components</a></p><h4>JSX</h4><p><a href=\"https://reactjs.org/docs/introducing-jsx.html\">Introduction to JSX</a></p><p><a href=\"https://reactjs.org/docs/rendering-elements.html\">Render a React elemen</a>t</p><p><a href=\"https://daveceddia.com/display-a-list-in-react/\">Render a list (map)</a></p><h4>React state</h4><p>As you know, one of the benefits of React is its ability to manage dynamic, front-end JS objects. Dynamic objects typically have different &ldquo;states&rdquo;&hellip;the most obvious is a clicked vs un-clicked button, but state also includes components like comments and all the data contained in comments (think for a second how much data in one day the comments feature in Facebook generates!). React states are how these dynamic features are managed (for now&hellip;later on we will learn about Redux a tool for managing this management&hellip;yes it&rsquo;s all very &lsquo;meta&rsquo;).</p><p><a href=\"https://reactjs.org/docs/state-and-lifecycle.html\">State and Lifecycle</a></p></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"31c5e642-b25a-4ee1-8ffb-47427741959a\"><ac:parameter ac:name=\"title\">Front end</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Epic 4: Landing Page component</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"f259fd35-4ca1-444e-953a-041a746e3126\"><ac:rich-text-body><h4>Task 1: Define the Landing Page component hierarchy</h4><p>Because components can contain sub-components React pages have a &ldquo;component hierarchy&rdquo;. It&rsquo;s important to understand how the features of a wire frame translate into this hierarchy before you begin to build it.</p><p>Create a small diagram defining the components hierarchy throughout your project. It should answer the following problematic:</p><ul><li><p>What is the functionality (rendering or app logic)</p></li><li><p>What is the parent component?</p></li><li><p>What is the child component (if any)?</p></li><li><p>What are the props</p></li><li><p>Re-usability of the component</p></li></ul><p>This will help you define if it should be functional or class based</p><p>More info: <a href=\"https://reactjs.org/docs/thinking-in-react.html\">Thinking in React</a></p><h4>Task 2: Create a landing page following instructions sent by the UX designer.</h4><ul><li><p>Create a new functional component, Landing.js. If you would like to personalise and use your design skills, you may edit and adapt the logo and page layout to your preferences. Make sure to name the component with a capital &quot;L&quot; as it is a standard that all components are named starting with a capital letter. In general component should be name using Pascal Case standard: <a href=\"https://wprock.fr/en/blog/conventions-nommage-programmation/\">More info</a></p></li><li><p>As we are building a PWA, remember the golden rule to always design mobile first!</p></li><li><p>In order to save time when creating new component, you might want to install an extension to quickly create a template from a keyboard shortcut, such as the following extension for Visual Studio Code:</p></li></ul><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"81\" ac:original-width=\"613\"><ri:attachment ri:filename=\"ext.PNG?version=1&amp;modificationDate=1569249991537&amp;cacheVersion=1&amp;api=v2\" ri:version-at-save=\"1\" /></ac:image><p>You will then just have to type <span style=\"color: rgb(255,86,48);\">rfc</span> to create the template of a react functional component and <span style=\"color: rgb(255,86,48);\">rcc</span> for a class component</p><h4>Task 3: Render the component</h4><p>Import your newly made component into the entry point of react (App.js) and test that it is being rendered correctly.</p><p><strong>Choose a packaged CSS framework!</strong> </p><p>The most efficient way to use CSS frameworks with React is to use one that has been packaged with Node. There are many and you are welcome to search for the one you prefer. Here are our recommended ones.</p><p><a href=\"https://material-ui.com/\">MaterialUI</a> : Material UI is the React implementation of the material design system from Google. It has advanced features like handling of global theme. It can be hard to handle at first so be ready to spend some time on documentation.</p><p><a href=\"https://react-bootstrap.github.io/\">React-Bootstrap</a>: React Bootstrap is the React implementation of the official Bootstrap 4 UI kit. It provides support for all original components with no 3rd party dependency. Easier to implement than MaterialUI.</p></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"ca61bb67-c0a2-405a-b54b-c2939e3940d6\"><ac:parameter ac:name=\"title\">Front end</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Epic 5: Implement Router functionality</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"535ea5ab-8fde-4aa4-b270-9b3b282586c3\"><ac:rich-text-body><h4>Task 1: Install the React Router</h4><p>The React Router Dom is a dependency to manage the &ldquo;routes&rdquo; between your different web pages as well your different React components. Make sure your terminal is at the root of the client folder, then run: <code>npm i react-router-dom</code></p><h4>Task 2: Configure the Router</h4><p>Main utilities provided by this package are the BrowserRouter, Route and Switch. Let's start by importing them in the entry point of our React project: App.js</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"0d2b7b69-3151-47c6-b929-9816c1f3033a\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[import { BrowserRouter, Route, Switch } from 'react-router-dom']]></ac:plain-text-body></ac:structured-macro><p><br /></p><p>We can now wrap the BrowserRouter around our app and define the first route to be used for our Landing component as shown below</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"378938de-58cb-4f43-ba9e-be53a2b0e5db\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport Landing from './screen/Landing';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Switch>\n            <Route exact path='/' component={Landing} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}]]></ac:plain-text-body></ac:structured-macro><p>Run the app from your terminal (npm run) and ensure that you are routing correctly to the Landing component</p><p>For more info: <a href=\"https://codeburst.io/getting-started-with-react-router-5c978f70df91\">react-router</a></p><p /><h4>Task 3: Use the same process to create a class based component called &quot;Cities&quot;  and a route &quot;/cities&quot; that will render it.</h4></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"67a95561-5fb8-476b-a584-c70c0699a001\"><ac:parameter ac:name=\"title\">Front end</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Epic 6: Introduction to React <ac:inline-comment-marker ac:ref=\"e1ee98d4-9e65-4db4-8826-cbfecfb3b69e\">Testing</ac:inline-comment-marker></h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"f3cbf41c-f991-4172-b4e9-9fa2e57ea0de\"><ac:rich-text-body><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"395\" ac:original-width=\"1024\" ac:width=\"442\"><ri:attachment ri:filename=\"react-jest.png\" ri:version-at-save=\"1\" /></ac:image><p>To conduct unit testing in React, we will use a tool called Jest, a Javascript testing framework published by Facebook that requires no configuration. The dependency has already been packaged at the project creation (create-react-app) so there is no need to install it.</p><p>The structure a Test suite is as below.</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"077f2b9e-86c3-4db0-9d3c-d242f49889e2\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[// posible test\ndescribe(\"what is the unit under test?\", () => {\n  it(\"define a test scenario that should be tested\", () => {\n    //write your test here\n  });\n  it(\"define an other test scenario that should be tested\", () => {\n    //write your test here\n  });\n});]]></ac:plain-text-body></ac:structured-macro><p><strong>Task 1: Writing assertion tests</strong></p><p>We start by writing assertion test, these are the different scenario to test: </p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"46fd9b7a-f935-4786-8447-ca5e5ad8f64b\"><ac:plain-text-body><![CDATA[it('renders without crashing');\nit('Landing component should render without crashing');\nit(\"Landing component snapshot with Enzyme\")]]></ac:plain-text-body></ac:structured-macro><p /><p><strong>Task 2: First test</strong></p><p> From your terminal run <code>npm test</code></p><p>You will see in your terminal that a test it running and being passed (hopefully). The testing feature is being reran every time you save.</p><p>In your project structure, a App.test.js has been created in your project and it already contains a test that has been generated automatically:</p><p /><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"1c82cd31-162d-4089-b73c-4fec9048bbed\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[it('renders without crashing', () => {\n  const div = document.createElement('div');\n  ReactDOM.render(<App />, div);\n  ReactDOM.unmountComponentAtNode(div);\n});]]></ac:plain-text-body></ac:structured-macro><p>This tests the general good rendering of the full react App. As you can see here we use the default assertion library ReactDOM to conduct the test.</p><p><strong>Task 3: Component Unit Testing with Enzyme</strong></p><p>The same way we tested our App component we will start by testing the general rendering of our Landing component.</p><p>Lets&rsquo;s start by creating a Landing.test.js file next to the Landing component and add our unit test description.</p><p>However this time to conduct the test, we will use the Enzyme library developed by Airbnb. This package is a set of utilities making React component testing easier. The <code>shallow</code> method, allows unit testing by compiling our React component, but not its children. Allowing easier individual component testing.</p><p>Start by installing it <code>npm i enzyme </code>. In order to use enzyme with react you will also need to <ac:inline-comment-marker ac:ref=\"e25f7f1a-473a-4f91-8d39-1963632117cd\">install this adapter </ac:inline-comment-marker><code><ac:inline-comment-marker ac:ref=\"e25f7f1a-473a-4f91-8d39-1963632117cd\">npm i enzyme-adapter-react-16</ac:inline-comment-marker></code> and create a new file <code>setupTests.js</code> (make sure the name of the file is identical) in which you will instantiate the adapter as follow</p><p /><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"a52c20e0-6716-4146-85c2-f572b6c84164\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[import { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\n\nconfigure({ adapter: new Adapter() });]]></ac:plain-text-body></ac:structured-macro><p>We are now ready to write our test in Landing.test.js using shallow method</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"a47c5c15-9d91-477f-ba89-5598e7996e30\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[import React from 'react';\nimport { shallow } from 'enzyme';\nimport Landing from './Landing';\n\nit('Landing component should render without crashing', () => {\n    shallow(<Landing />);\n});]]></ac:plain-text-body></ac:structured-macro><p>The Adapter is responsible for rendering the UI library (React 16, in this case), and shallow allows us to test the Landing component without having to render its children, allowing for a pure unit test. Run and verify that the test is passed.</p><p><strong>Task 4: Snapshot Testing</strong></p><p>Snapshots are a nifty tool specific to Jest. It captures snapshot artefacts, files that contain rendered HTML snippets from your UI and compares it against a stored artefact of the expected result. When the files don&rsquo;t match, it triggers an error.</p><p>We will here need to add a serialize module to convert Enzyme wrappers to a format compatible with Jest snapshot testing. <code>npm install --save-dev enzyme-to-json</code></p><p>We now need to the module to our Jest config. To do so, edit your <code>package.json</code> file and add the following configuration to the object:</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"b915bfa2-ff87-406d-8138-bc7c7d60493b\"><ac:parameter ac:name=\"language\">json</ac:parameter><ac:plain-text-body><![CDATA[ \"jest\": {\n    \"snapshotSerializers\": [\n      \"enzyme-to-json/serializer\"\n    ]\n  },]]></ac:plain-text-body></ac:structured-macro><p>Add the following snapshot test to your Landing.test.js file and run <code>npm test</code></p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"81ba0212-bd41-43b5-9baf-8e7fad301293\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[import React from 'react';\nimport { shallow } from 'enzyme';\nimport Landing from './Landing';\nimport toJson from 'enzyme-to-json';\n\nit('Landing component should render without crashing', () => {\n    shallow(<Landing />);\n});\n\nit(\"landing component snapshot with Enzyme\", () => {\n    const wrapper = shallow(<Landing />);\n    expect(toJson(wrapper)).toMatchSnapshot();\n});]]></ac:plain-text-body></ac:structured-macro><p>You will notice that Jest has create a new folder <code>__snapshots__</code> containing the HTML image at the time you ran the test. </p><p>Now edit your Landing component&rsquo;s render and re run your tests. You should see the snapshot as obsolete. It is a good way to verify the integrity of your components as you add more features to your app.</p><p>If you want to re generate a new snapshot, press <code>u</code> in the terminal.</p><p><strong>More documentation:</strong></p><p>Basics of  <a href=\"https://www.gistia.com/react-testing-javascript-best-practices/\">React Testing</a></p><p>More about <a href=\"https://www.jonathan-petitcolas.com/2017/10/31/learning-jest-through-practice.html\">Jest and React</a></p></ac:rich-text-body></ac:structured-macro><h2>Extra: Trello Board</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"b1212ef0-0805-4fb8-9768-ef7e03b0415d\"><ac:rich-text-body><ac:structured-macro ac:name=\"trello-board\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"ee09c312-0450-4881-b1c3-83ed6d8821f0\"><ac:parameter ac:name=\"url\">https://trello.com/b/OdYcCJaY/mern-v2-project-sprint-1</ac:parameter></ac:structured-macro></ac:rich-text-body></ac:structured-macro>",
    "conflPageId": "321191968",
    "conflChildrenId": [

    ]
  },
  {
    "title": "V2 MERN Sprint 2",
    "content": "<h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"94a1ffe8-402e-4f24-94eb-0925581f3b26\"><ac:parameter ac:name=\"title\">FRONT END ALT</ac:parameter><ac:parameter ac:name=\"colour\">Green</ac:parameter></ac:structured-macro> Getting data from Ubiqum MERN API</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"f299a7f3-fb45-47e9-9d64-4723e953cf12\"><ac:rich-text-body><h4>Task 1: Install POSTMAN</h4><p>Install POSTMAN on your local machine. You can download it here:</p><ul><li><p><a href=\"http://toolsqa.com/postman/download-and-install-postman/\">http://toolsqa.com/postman/download-and-install-postman/</a></p></li></ul><h4>Task 2: Get familiar with the different endpoints available</h4><ul><li><p>API Endpoints documentation : <a href=\"https://documenter.getpostman.com/view/6286651/SVmyQH9C\">https://documenter.getpostman.com/view/6286651/SVmyQH9C</a></p></li></ul><h4>Task 3: Run in Postman and test that you have the JSON responses</h4><ul><li><p>Click on &quot;Run in Postman&quot; at the top right of the page to import the collection of endpoints in Postman</p></li><li><p>Analyse the different GET endpoints and the way they pass parameters in their queries</p></li></ul></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"c6883dcf-34f2-479f-9268-9a3c60b19871\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  Epic 1: Set up and Configure MongoDB Database</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"4ce5f680-0606-4376-8802-fad6bd04f79c\"><ac:rich-text-body><p><strong>MongoDB</strong> is a general purpose, document-based, distributed database, which means it stores data in JSON-like documents.<br />We will use it as distant repository to store data for our project.</p><h4>Task 1: Create a MongoDB Atlas account</h4><p>Follow the instructions of the first 2 steps to create a MongoDB Atlas:</p><ul><li><p><a href=\"https://cloud.mongodb.com/user#/atlas/register/accountProfile\">https://cloud.mongodb.com/user#/atlas/register/accountProfile</a></p></li></ul><h4>Task 2: Create a new database and user</h4><p>Watch the video until 7:00 min and follow the instructions on how to create a MongoDB database.</p><ac:structured-macro ac:name=\"widget\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"94d50621-a872-4d00-be32-49a74fea7c9a\"><ac:parameter ac:name=\"overlay\">youtube</ac:parameter><ac:parameter ac:name=\"_template\">com/atlassian/confluence/extra/widgetconnector/templates/youtube.vm</ac:parameter><ac:parameter ac:name=\"width\">400px</ac:parameter><ac:parameter ac:name=\"url\"><ri:url ri:value=\"https://www.youtube.com/watch?v=KKyag6t98g8\" /></ac:parameter><ac:parameter ac:name=\"height\">300px</ac:parameter></ac:structured-macro><h4>Task 3: Create a new Collection called &ldquo;cities&rdquo;</h4><p><strong>TIP:</strong> Make sure you use ALL lowercase for collection titles in ATLAS!</p><h4>Task 4: Populate MongoDB &lsquo;cities&rsquo; collection with name, country and image (URL)</h4><p>Manually populate the collection &quot;cities&quot; with 5 cities that you like. No other cities are required at this point.</p><p>Each entry must have a name and country value (ex: name: &quot;Barcelona&quot;, country: &quot;Spain&quot;).</p><p>This resource refers to general conventions and best practises for MongoDB: <a href=\"http://arkusnexus.com/2016/09/12/coding-guidelines-mongodb/\">MongoDB guidelines</a></p></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"8c7645eb-e66f-4d43-9896-f64917073c92\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  Epic 2: Setup Node.js Back End</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"3d0b4000-2716-45a8-a27a-6da06af6c803\"><ac:rich-text-body><p>Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code outside of a browser.</p><p>It allows developers to use JavaScript to write back end server scripts.</p><p><strong>Project structure:</strong> Start by creating a server folder in your project repository alongside the client folder and open a terminal in the server folder.</p><h4>Task 1: Create new Node.js project</h4><p>run command <code>npm init </code>in your terminal and follow the prompts to initialise the project. This will create a <em>package.json</em> file that is used to keep track of your project information and dependencies.</p><p>For more details: <a href=\"https://nodesource.com/blog/your-first-nodejs-package/\">Node Setup</a></p><h4>Task 2: Install and configure the latest version of Express</h4><p>Express.js, or simply Express, is a web application framework for Node.js, and is designed to build web applications and APIs.</p><p>We will use it to build our backend server. Install with command: <code>npm i express</code></p><p><a href=\"https://www.npmjs.com/package/express\">Express Documentation</a></p><h4>Task 3: Install utility Nodemon globally</h4><p>This utility allows automatic reload of the server on saves. To install globally run command: <code>npm i nodemon -g</code></p><p>FYI: <a href=\"https://alligator.io/workflow/nodemon\">Nodemon workflow</a></p><h4>Task 4: Install Mongoose</h4><p>run command : <code>npm i mongoose</code></p><p>Mongoose is a library to help you manage your data structures and interactions in MongoDB. The following resources explain the need for Mongoose as a dependency and refer to the process of connecting the dependency with Mongo DB:</p><p><a href=\"https://www.npmjs.com/package/mongoose\">Mongoose Documentation</a></p><p><a href=\"https://mongoosejs.com/docs/4.x/docs/connections.html\">Connect to Mongo DB</a></p><h4>Task 5: Create server.js file</h4><p>The server.js file is is the most important of the Node.js app. It is the entry point and the file executed by the back end server.</p><p><strong>Step 1</strong>: The first thing to do is to initialise the server and assign it to a port:</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"8f38be11-a2d9-41d2-829e-45a726c8eb06\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[const express = require(\"express\");\nconst app = express();\nconst port = process.env.PORT || 5000;\napp.listen(port, () => {\n  console.log(\"Server is running on \" + port + \"port\");\n});]]></ac:plain-text-body></ac:structured-macro><p>When hosting your application on another service (like Heroku, Nodejitsu, and AWS), your host may independently configure the process.env.PORT variable for you; after all, your script runs in their environment. So process.env.PORT || 5000 means: whatever is in the <strong>env</strong>ironment variable PORT, or 5000 if there's nothing there.</p><p><strong>Step 2:</strong> In package.json, change the main field from index.js to server.js if you haven't already. In this way the entry point for your backend will be the server file. The field &quot;start&quot; should contain &quot;nodemon server.js&quot; in order to run your server in watch mode. Run <code>npm start</code> and verify the output in the terminal.</p><p><strong>Step 3: </strong>Middleware is used to do something before a request is processed (eg: check if a user is authenticated).</p><p>It's good practice to install at least these two middlewares:</p><ul><li><p>body-parser: in POST requests, you need to use bodyParser() if you want the form data to be available in req.body. Here there is an article that explains what body parser does in more detail: <a href=\"https://medium.com/@adamzerner/how-bodyparser-works-247897a93b90\">https://medium.com/@adamzerner/how-bodyparser-works-247897a93b90</a></p></li><li><p>cors: a JavaScript application running in the browser can usually only access HTTP resources on the same domain (origin) that serves it. If you don&rsquo;t set up a CORS policy on the server that allows to serve third party origins, the request will fail. This is there for your security but if you control both the server and the client, then you&rsquo;ll have all the good reasons to allow them to talk to each other. You can find more informations here: <a href=\"https://expressjs.com/en/resources/middleware/cors.html\">https://expressjs.com/en/resources/middleware/cors.html</a></p></li></ul><p>You should insert this code before you start to listen to the port (server.js):</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"b86198c9-bf05-4108-a33f-ca276a6648d4\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[const bodyParser = require(\"body-parser\");\nconst cors = require(\"cors\");\n\napp.use(bodyParser.json());\napp.use(\n  bodyParser.urlencoded({\n    extended: true\n  })\n);\napp.use(cors());]]></ac:plain-text-body></ac:structured-macro><h4>Task 6: Write a Script to run back end and front end servers simultaneously</h4><p><strong>Step 1</strong>: Install concurrently utility: run command : <code>npm i concurrently</code></p><p>FYI : <a href=\" https://www.npmjs.com/package/concurrently\">Concurrently Documentation</a></p><p><strong>Step 2</strong>: In the package.json file of the back-end, write a Script to run back-end and front-end concurrently. Depending on your folder adapt the following script : </p><p /><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"2086f0f5-86b2-43e8-9f55-9ddec29ee388\"><ac:parameter ac:name=\"language\">json</ac:parameter><ac:plain-text-body><![CDATA[\"scripts\": {\n  \"start\": \"concurrently \\\"nodemonserver.js\\\" \\\"cd../client&&npmstart\\\"\"\n    }]]></ac:plain-text-body></ac:structured-macro><p /><h4>Task 7: Setup git &amp; GitHub</h4><p>You might have already notice that the React project initialiser has set up the client as git repository. However this doesn't include the full stack project .</p><p><strong>Step 1</strong>: Place your terminal at the root of the project and run command : <code>git init</code></p><p><strong>Step 2</strong>: Open the <code>.gitignore</code> file and add lines to ignore the node_modules folders by adding the line: <code>node_modules/</code> to ignore all sub folders with named <code>node_modules</code></p><p>Step 3: Make your initial commit and push to a new remote GitHub repository</p><p><strong>What you should have so far:</strong></p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"803\" ac:original-width=\"965\"><ri:attachment ri:filename=\"Capture.PNG\" ri:version-at-save=\"1\" /></ac:image><h4>Task 8: Write first test route</h4><p>Before we start to write our predefined operations, we should start with some sort of uniform folder structure so that following along with these articles is as clear as possible.</p><p><strong>Step 1: </strong>Create a folder in the backend along side the server.js file and name it &ldquo;routes.&rdquo;</p><p><strong>Step 2: </strong>Inside this folder we will code all of our predefined operations related to each collection type in our database. Start by creating a file named cities.js.</p><p><strong>Step 3: </strong>Navigate back to the server.js file and make a call to &ldquo;app.use&rdquo; and pass in two arguments, the api route and the relative path to the file where we will defining our route methods.<br /></p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"cbd7d508-256a-4a45-9ec5-5142b91b4e4b\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[app.use('/cities', require('./routes/cities'))]]></ac:plain-text-body></ac:structured-macro><p><strong>Step 4: </strong>Back in our cities.js file let&rsquo;s write a test route just to make sure everything is connected correctly. At the top of our file, require &ldquo;express&rdquo; by setting it to a variable and create an instance of the express router by setting it to a variable called &ldquo;router.&rdquo;</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"177c62c5-7286-4cf5-8f10-7aaeb684395a\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[const express = require('express')\n\nconst router = express.Router()]]></ac:plain-text-body></ac:structured-macro><p><strong>Step 5: </strong>Write a test route.</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"2a83a55b-d8a9-412b-84ba-383462ae6add\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[router.get('/test', (req, res) => {\n})]]></ac:plain-text-body></ac:structured-macro><p>We pass two arguments into our get method. The path and a callback function with our request object and response object as parameters. Don&rsquo;t forget to export the router</p><p>Since we made the call to app.use() in our server.js file we only need to pass in &ldquo;/test&rdquo; as our first argument here, however this refers to the endpoint &ldquo;localhost:3000/cities/test&rdquo;.</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"b9cfa1f9-5110-4806-b1d9-dbbb8c00efcf\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[res.send({ msg: 'Cities test route.' })\n\n})\nmodule.exports = router]]></ac:plain-text-body></ac:structured-macro><p>In our response object we send back a simple string in JSON format.</p><h4>Task 8: Test route with Postman</h4><p><strong>Step 1: </strong>Make sure our server is running and move into the Postman desktop application.</p><p><strong>Step 2: </strong>Make a &ldquo;GET&rdquo; request to &ldquo;localhost:5000/cities/test&rdquo; and hit send.</p><p><strong>Step 3: </strong>You should receive the message &rdquo;Cities test route&rdquo; in your response body. See Postman screenshot bellow.</p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"335\" ac:original-width=\"1074\"><ri:attachment ri:filename=\"postman.png\" ri:version-at-save=\"2\" /></ac:image></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"18a87fba-61d4-4a9e-88e9-22ca7c7969af\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  Epic 3: Linking the Database to the Back End</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"db6ad59b-4cff-4974-80eb-677b3e348a45\"><ac:rich-text-body><h4>Task 1: Learn about CRUD</h4><p>&quot;CRUD&quot; is an acronym that describes the four operations you can perform in a database: Create, Read, Update, and Delete. This article explains each in detail: <a href=\"https://www.javascriptjanuary.com/blog/basic-routing-http-requests-and-crud-operations-with-express-and-mongodb\">CRUDS</a></p><h4>Task 2: Create configuration file for linking MongoDB to local Express instance</h4><p>You will need to connect MongoDB with Mongoose.</p><p><strong>Step 1</strong>: retrieve your DB credentials on Mongo DB admin page (mongoURI)</p><p><strong>Step 2</strong>: <ac:inline-comment-marker ac:ref=\"3814cd88-5577-46da-ab3e-c541ce9a4c1f\">create a file keys.js to hold the credentials.</ac:inline-comment-marker> This file contains the sensitive information to connect to the DB and should be added in the .gitignore so it doesn't end up on your GitHub!</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"a66cde75-2cbc-4b14-a670-b2e44f96f696\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[module.exports = {\n  mongoURI:\n    \"mongodb+srv://...\",\n};]]></ac:plain-text-body></ac:structured-macro><p><strong>Step 3</strong>: In our server.js, we import our key as follow</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"6d41f6f7-9ce0-407f-a037-c3162a777cd5\"><ac:plain-text-body><![CDATA[const db = require('./keys').mongoURI;]]></ac:plain-text-body></ac:structured-macro><p><strong>Step 4</strong>: Finally, in the same file we connect using mongoose;</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"4653a11b-7e21-4579-bcef-dbc28c579711\"><ac:plain-text-body><![CDATA[const mongoose = require(\"mongoose\");\n\nmongoose.connect(db, { useNewUrlParser: true, useCreateIndex: true })\n    .then(() => console.log('Connection to Mongo DB established'))\n    .catch(err => console.log(err));]]></ac:plain-text-body></ac:structured-macro><p><strong>Step 5</strong>: Run your server and verify the connection</p><p>For more info on mongoose connect function: <a href=\"https://mongoosejs.com/docs/connections.html\">Mongoose Connection</a></p></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"57686e86-df9e-4a03-b4e3-df25b5d77c14\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  Epic 4: Creating the Model</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"9f9da8e6-8d57-4e9d-8578-1e2dad52f0eb\"><ac:rich-text-body><p>Before we start writing routes that manipulate resources, we need to create a model of our resource so that we may ensure some sort of structure for the documents in our database collection.</p><p><strong>Task 1: </strong>Create a &quot;model&quot; folder at the root of our back end and create a cityModel.js file in it.</p><p><strong>Task 2: </strong>At the top of our file import mongoose and set it to a constant.</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"9010a49c-07aa-4ea9-a46c-bb10e4285bec\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[const mongoose = require('mongoose')]]></ac:plain-text-body></ac:structured-macro><p><strong>Task 3: </strong>We then need to create a new instance of a mongoose.Schema and set it to a constant.</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"772e7476-4776-46d1-97c5-d0b3c891b1b8\"><ac:plain-text-body><![CDATA[const citySchema = new mongoose.Schema({]]></ac:plain-text-body></ac:structured-macro><p><strong>Task 4: </strong>Now we define the properties for the citySchema. You can adapt the model to the need of your app</p><p>- name</p><p>- country</p><p>-&hellip;</p><p><strong>Task 5: </strong>Set the values of each property to an object.</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"b3a344b9-4471-4d4a-9049-9e7d720f875a\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[name: {\n    type: String,\n    required: true\n  },\ncountry: ...]]></ac:plain-text-body></ac:structured-macro><p>By setting the value of each property to an object we have a wide range of options when it comes to customising each field.</p><p>The first property of the object is the &ldquo;type&rdquo; which defines which type of data our server can expect to receive when we send our request for the respective property of our schema.</p><p>For instance, if our administrator tries to enter a number into the name field for a city. An error will be thrown and the resource will not be saved to our database.</p><p>The next property of the object is the &ldquo;required&rdquo; field which is a boolean we set to true. This way our admin will also receive an error if they leave an input on our form blank.</p><p><strong>Task 6: </strong>Repeat Step 5 for the country field.</p><p><strong>Task 7</strong>: Export model. Below is an example of a city model that you can adapt.</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"2e24da61-86b2-44d9-89c8-f32483de47d1\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[const citySchema = new mongoose.Schema({\n    name: {\n        type: String,\n        required: true,\n        unique: true\n    },\n    country: {\n        type: String,\n        required: true\n    },\n    img: {\n        type: String,\n    }\n})\n\n//name of module is the singular version (city) of the database name (cities)\nmodule.exports = mongoose.model('city', citySchema)]]></ac:plain-text-body></ac:structured-macro><p>Line 17: We set the export to a variable &lsquo;city&rsquo; and define it as a call to mongoose.Model().</p><p>The first argument is a string of our Schema, this will automatically convert to plural once we post the first city to our database.</p><p>The second argument is the Schema we just defined.</p><h4>Useful documentation:</h4><p>A schema is a skeletal structure that represents an entity within a database.</p><ul><li><p><a href=\"https://medium.freecodecamp.org/introduction-to-mongoose-for-mongodb-d2a7aa593c57\">https://medium.freecodecamp.org/introduction-to-mongoose-for-mongodb-d2a7aa593c57</a></p></li></ul><p>The following resource refers to defining a schema and its pathway from the database</p><ul><li><p><a href=\"https://mongoosejs.com/docs/guide.html\">https://mongoosejs.com/docs/guide.html</a></p></li></ul></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"5f4b0d32-91a8-4bc2-bbc6-6e52fb23f36c\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"9b67bc11-eebc-4fc5-b351-ccdd592216e9\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>    Epic 5: City List GET route and Component</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"ae37cf9a-6090-42bf-a942-8a0d52edfece\"><ac:rich-text-body><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"4082b117-96cc-445c-b260-64e915e70c5b\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  Task 1: Update the route cities.js</h4><p>Let's create a route that allows us to retrieve all the cities from the DB. Use the same process you used to create your test route.</p><p><strong>Step 1</strong> : import our cityModel</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"ce478849-7c7e-40b8-92fc-2e12d75572ee\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[const cityModel = require('../model/cityModel')]]></ac:plain-text-body></ac:structured-macro><p><strong>Step 2:</strong> Create route to retrieve all the cities from the database</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"61b350e6-ee5b-4a92-9b01-4baf05647c16\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[/*get all cities*/\nrouter.get('/all',\n    (req, res) => {\n        cityModel.find({})\n            .then(files => {\n                res.send(files)\n            })\n            .catch(err => console.log(err));\n    });]]></ac:plain-text-body></ac:structured-macro><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"3796d983-15b9-4118-a7e3-8ae3e3e3e6ab\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Task 2: Test retrieval of all cities route through Postman</h4><p>Ensure that your server is running and fetch the URL: <em>http://localhost:5000/cities/all</em> that we have defined in our GET operation.</p><p>Under status Response 200 OK, you should see all the previously created cities from the database. It should look similar to this:</p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"400\" ac:original-width=\"713\"><ri:attachment ri:filename=\"postman2.png\" ri:version-at-save=\"1\" /></ac:image><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"5fa07360-6ca5-4406-adac-6cc0998035d3\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>   Task 3: Create Cities.js Component and fetch Cities List</h4><p>This resource refers to the process of fetching data from MongoDB using a React component:</p><ul><li><p><a href=\"https://code.tutsplus.com/tutorials/fetching-data-in-your-react-application--cms-30670\">https://code.tutsplus.com/tutorials/fetching-data-in-your-react-application--cms-30670</a></p></li></ul><p>NOTE: You should have created a link to the Cities page in Sprint 1 as part of the React Router epic. If you haven&rsquo;t completed this task, please do so now. This resource refers to creating a link within the image that retrieves all the cities data.</p><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"a4b75f5f-b063-4070-ab80-cea029188d9b\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Task 4: Render database results</h4><p>This essential resource from the React documentation explains how to render the data retrieved from the database:</p><ul><li><p><a href=\"https://reactjs.org/docs/lists-and-keys.html\">https://reactjs.org/docs/lists-and-keys.html</a></p></li></ul><p>Your webpage should now look pretty similar to this:</p><ul><li><p><a href=\"https://medium.com/@pshrmn/a-simple-react-router-v4-tutorial-7f23ff27adf\">https://medium.com/@pshrmn/a-simple-react-router-v4-tutorial-7f23ff27adf</a></p></li></ul><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"cfc01b91-458b-4da6-92ea-eda436922e9c\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Task 5: Filter Cities by input field</h4><p>You should create a filter that narrows down your results based on cities that begin with the first letter(s) you type. For instance, if you type &quot;b&quot; you should see Barcelona, Berlin, Bucharest, and Budapest. If you type &quot;bu&quot;, it should now show Budapest and Bucharest. It should ONLY display results beginning with &quot;bu&quot;, not results that simply include &ldquo;bu&rdquo;.</p><p>This resource shows you how to make a filter component:</p><ul><li><p><a href=\"https://medium.com/@AndrewBonner2/filter-results-with-react-f746dc7984c\">https://medium.com/@AndrewBonner2/filter-results-with-react-f746dc7984c</a></p></li></ul></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"85aa54ad-da28-4902-9f6f-038810a1e1f5\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"298ff08f-fa1e-4c8c-9a69-cc923bf83caa\"><ac:parameter ac:name=\"title\">FRONT END ALT</ac:parameter><ac:parameter ac:name=\"colour\">Green</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"60cfee4a-d3f3-4d80-b4ff-4ba8be7fed9b\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"cab8a0b5-d439-4573-a9cc-229de9e06b7b\"><ac:parameter ac:name=\"title\">NICE TO HAVE</ac:parameter><ac:parameter ac:name=\"colour\">Purple</ac:parameter></ac:structured-macro>  Epic 6: City List POST route</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"0f7b1f8b-ce92-4856-bfc7-ae4cd5a51580\"><ac:rich-text-body><p>In the previous Sprint you created a route to get the cities in the database, but what if you wanted to add new ones?</p><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"c72ea6c6-4472-4b46-aee2-4c5cdfb81e1e\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  Task 1: Create POST route in cities.js</h4><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"e6727b94-1023-466c-8c47-1e663ad38135\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[router.post('/', (req, res) => {\n    const newCity = new cityModel({\n        name: req.body.name,\n        country: req.body.country\n    })\n    newCity.save()\n      .then(city => {\n      res.send(city)\n      })\n      .catch(err => {\n      res.status(500).send(\"Server error\")}) \n});]]></ac:plain-text-body></ac:structured-macro><p>You create a new instance of our City model and you save it in a variable. Your model properties will have the values of what you pass in the req.body.</p><p>Finally you call save(). This mongoose method will return a promise. If resolved you can send back the object you created in your response. If rejected you will debug your code.</p><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"7e243cae-0ddc-43cb-8760-4b8d0feb45ad\"><ac:parameter ac:name=\"title\">FRONT END ALT</ac:parameter><ac:parameter ac:name=\"colour\">Green</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"9c023f0c-8732-4ed3-850f-291691a6e7dd\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>    Task 2: Testing on Postman</h4><p>Ensure that your server is running and create a new request. Set the type to POST and the end point to &ldquo;localhost:5000/cities/&rdquo;. </p><p>If you are following the front end alternative, the endpoint is https://mern-ubiqum-v2.herokuapp.com/cities</p><p><strong>Step 1</strong> : In the &ldquo;Headers&rdquo; tab you need to create a key-value pair. Set the key to &ldquo;Content-Type&rdquo; and its value to &ldquo;<em>application/x-www-form-urlencoded</em>&rdquo;.</p><p><strong>Step 2</strong> : Go to the Body tab and select the &ldquo;<em>x-www-form-urlencoded</em>&rdquo; setting. In the key section you create a City object that corresponds with the City Model. Every key must match exactly our mongooseSchema.</p><p><strong>Step 3</strong> : Send the request. In a few seconds you should either receive a successful response or an error message.</p><p>If successful, a new City object should be returned with an <em>_id</em> property, created by MongoDB. You can then move into your MongoDB Atlas account to double check your database to make sure the object was mapped to a document and stored in your cities collection.</p><p>If the request fails you will need to debug either the request you sent or the route method itself.</p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"483\" ac:original-width=\"1065\"><ri:attachment ri:filename=\"postman.png\" ri:version-at-save=\"2\" /></ac:image><p /><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"f60cbad6-ddd2-48ba-bfd9-65353293b359\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  Task 3: Change your code to avoid duplicates and add 10 more cities</h4><p>Now you are able to post new cities. In the previous task you also learned how to (1) find entries in the database and (2) send them to the front-end. Therefore, you should now be able to combine these processes and change your post route: you want to make sure that the user is not able to post the same city twice.</p><p>Tip: Two cities can have the same country, but not the same name! You can retrieve all cities from the database and check if there is one which has the same name as the one you are trying to post. If yes, you should send back an error, if not you should save it in the database.</p><p>Once this is done, use Postman to add 10 more cities of your choosing.</p></ac:rich-text-body></ac:structured-macro><h2>Extra: Trello Board</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"bfee9a84-7add-4a94-92ff-a1bcb26dd5a4\"><ac:rich-text-body><ac:structured-macro ac:name=\"trello-board\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"85a3b9ec-684e-4c8a-becf-3bf78492098c\"><ac:parameter ac:name=\"url\">https://trello.com/b/l4kRslcB/mern-v2-project-sprint-2</ac:parameter></ac:structured-macro></ac:rich-text-body></ac:structured-macro>",
    "conflPageId": "321978430",
    "conflChildrenId": [

    ]
  },
  {
    "title": "V2 MERN Sprint 3",
    "content": "<p>During this sprint, you will apply what you&rsquo;ve learned about the &quot;MERN&quot; stack to build a complex page with a React front-end. While you're not learning anything completely new this week, you will have to combine what you've learned to create a highly interactive page that calls a complex data schema. Optional but highly recommended implementation of a store management tool is suggested (Redux or React context).</p><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"dd1e14db-5ca2-4967-b2a4-bafb4c1f4d29\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"163309a6-2284-4446-9fcf-2df018188a4d\"><ac:parameter ac:name=\"title\">NICE TO HAVE</ac:parameter><ac:parameter ac:name=\"colour\">Purple</ac:parameter></ac:structured-macro> Epic 1: <ac:inline-comment-marker ac:ref=\"d13097c6-a42b-435d-8628-9500cdb7a75f\">Store management</ac:inline-comment-marker> &amp; Redux</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"459d3dec-cf80-499a-a47e-2aaa6b8d7988\"><ac:rich-text-body><p>Store management is an important concept to understand. It is responsible for the organisation and efficient distribution of data throughout our application.</p><p><strong>Store</strong></p><p>The store is just an object that houses and tracks the state of our application. The &ldquo;state&rdquo; is just another word for data that changes over time.</p><p>If you are familiar with the idea of props, then you may have learned the concept of parent components passing pieces of data as &ldquo;props&rdquo; to child components and vice versa. For simple applications, this type of communication between components is completely fine, however as our applications scale up we don&rsquo;t want to be passing data through multiple components in order to render information to our user. Instead we use a <strong>store</strong>. </p><p>Our components will use &ldquo;actions&rdquo; and &ldquo;reducers&quot; to communicate with the Redux store and change our application state. The components that are subscribed to the data being modified will update and re-render when necessary. This happens without needing to pass information through a parent or child component but by simply receiving the updated application state from the store.</p><p>This is not to say that we will stop passing data between components. In fact we will still employ passing data from components heavily throughout this project. Rather we will receive our data from the store in our components that render views and pass pieces of that data as &ldquo;props&rdquo; to child components, whose sole job will be to handle how the particular data is displayed. This has the added benefit of keeping our project more modular and our code cleaner.</p><p><strong>Actions</strong></p><p>Actions allow us to change the application state in the Redux store. People sometimes get intimidated by all these new terms, but it is actually pretty simple.<strong> An action is just an object.</strong> This object is sent to the store and it must have one property: &ldquo;type&rdquo;.</p><p>The type defines what we would like our action to do. It is good to get into the practice of keeping action names short, but also taking semantics into consideration (keep it descriptive). For example let&rsquo;s say we want an action to create a new city in the database, a good name for that action would be CREATE_CITY. It is short but descriptive. Notice that we name the actions in all uppercase letters and spaced with underscores (snake case). This is convention and although using camel case and lowercase letters would not break your code, it is highly recommended you employ this practice.</p><p>Although the only required property of our Action is the &ldquo;<strong>type</strong>&rdquo;, we can send data along inside of a second property. This second property of an action object is commonly called the &ldquo;<strong>payload</strong>.&rdquo; In our application the payload is <em>often </em>going to be the response we receive when making our api calls and querying data from our database. We can access the &ldquo;data&rdquo; from that response and send it along with the Action type to the <strong>Reducer</strong>.</p><p><strong>Reducers or Mutator</strong></p><p>The Actions takes care of describing the data we want to change in our store, but it doesn&rsquo;t actually execute anything. After all, it is only an object. It is the job of the Reducer, which is a function, to, in a sense, read the action type and decide how to update the store based on the type.</p><p>Reducers are &ldquo;pure functions&rdquo;, meaning the output is only determined by the input. Pure functions do not utilise or change anything outside of their scope. The Reducer function takes two arguments: &ldquo;state&rdquo;, and &ldquo;action&rdquo;, and uses this information to determine the new state.</p><p>This all probably sounds very confusing right now. Application state and Redux are hard concepts to grasp just by reading a short article. After you complete the project or even in between some lessons, come back and re-read this to see if it starts to makes more sense.</p><h4>Task 1: Conduct research on Redux and build explanation diagram</h4><p>Redux can be challenging to understand and fully grasp in the beginning. To tackle this, use these resources to help you create your own Redux diagram to better understand the concepts and uses of Redux.</p><ul><li><p>Net Ninja's introduction to Redux: </p></li></ul><ac:structured-macro ac:name=\"widget\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"6b2b8959-fa55-4be8-8a3c-aa4ac15be5ae\"><ac:parameter ac:name=\"overlay\">youtube</ac:parameter><ac:parameter ac:name=\"_template\">com/atlassian/confluence/extra/widgetconnector/templates/youtube.vm</ac:parameter><ac:parameter ac:name=\"width\">400px</ac:parameter><ac:parameter ac:name=\"url\"><ri:url ri:value=\"http://youtube.com/watch?v=HKU24nY8Hsc\" /></ac:parameter><ac:parameter ac:name=\"height\">300px</ac:parameter></ac:structured-macro><ul><li><p><a href=\"https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6\">https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6</a></p></li></ul><h4>Task 2: Add the Redux developer tools</h4><p>Install the plugin Redux Dev Tools on your local machine. You may download it here:</p><ul><li><p><a href=\"https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=es\">https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=es</a></p></li></ul><p>In order to be able to use Redux Dev Tools follow the link to the resource here:</p><ul><li><p><a href=\"https://codeburst.io/redux-devtools-for-dummies-74566c597d7\">https://codeburst.io/redux-devtools-for-dummies-74566c597d7</a></p></li></ul><h4>Task 3: Install Redux inside the client folder with<code> npm i redux react-redux redux-thunk</code></h4><h4>Task 4: Create store folder structure</h4><p>Inside your src folder create a new folder called &quot;store&quot;. This is where you will put all the files related to your store. Inside this folder, create two more, one for reducers and one for actions. In the reducers folder create two files, one called cityReducer.js and one called rootReducer.js.</p><p>In the root reducer you will combine all the different reducers that you will create into one, like this:</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"127c9345-d044-4be0-b71f-2ddd3a04ec9e\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[import { combineReducers } from \"redux\";\nimport citiesReducer from \"./citiesReducer\";\nconst rootReducer = combineReducers({cities: citiesReducer});\nexport default rootReducer;]]></ac:plain-text-body></ac:structured-macro><h4>Task 5: Create Store</h4><p>In order to be able to use the store we need to configure it first.</p><p><strong>Step 1:</strong> Open your index.js file. This is the entry point of our React application, so this is the place where we want to create our store and make it accessible to all components in our application.</p><p><strong>Step 2:</strong> Import these functions into your index.js file:</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"02976c40-2c0b-4b4c-bb52-1cf99e407340\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[import { composeWithDevTools } from \"redux-devtools-extension\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";]]></ac:plain-text-body></ac:structured-macro><p><strong>Step3:</strong> Import your root reducer to your index.js file:</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"61cb7e7e-e544-4d95-a121-78926df00b73\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[import rootReducer from \"./store/reducers/rootReducer\";]]></ac:plain-text-body></ac:structured-macro><p><strong>Step 4:</strong> Configure the store</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"1b878da8-6ee0-4ee7-928e-f4d9815b5821\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[const store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);]]></ac:plain-text-body></ac:structured-macro><p>In this code, you pass your root reducer to the Redux <code>createStore</code> function, which returns a <code>store</code> object. You then pass this object to the <code>react-redux</code> <code>Provider</code> component, which is rendered at the top of our component tree. This ensures that any time we connect to Redux in our app, the store is available to our components.</p><p>With a basic Redux store, you can only do simple synchronous updates by dispatching an action. Middleware extend the stores abilities, and let you write asynchronous (async) logic (eg. fetching information from external sources) that interacts with the store. This is why we need the <code>redux-thunk</code> middleware.</p><h4>Task 6: Create and code cityActions.js</h4><p>Inside your store/actions folder is where you&rsquo;ll store all files related to redux actions, including cityActions.js.</p><p>Now you have completed all the required set up to start coding your actions.</p><p>Actions are payloads of information that send data from your application to your store. They need to have a <em>type </em>property that defines which kind of action you have to perform.</p><p>Here you can find the documentation about basic actions in redux: <a href=\"https://redux.js.org/basics/actions\">https://redux.js.org/basics/actions</a></p><p>And here about async actions, which is what you want to do: <a href=\"https://redux.js.org/advanced/async-actions\">https://redux.js.org/advanced/async-actions</a></p><p>And now, move your AJAX call from the component to the cityAction file.</p><h4>Task 7: Code your cityReducer.js file</h4><p>Reducers specify how the applications state changes in response to actions sent to the store. Here is also where you will define the initial state of your store (in this case the part related to the cities).</p><p>Here you can find the documentation about reducers in redux: <a href=\"https://redux.js.org/basics/reducers\">https://redux.js.org/basics/reducers</a></p><p>Now code your city reducer in order to handle your city actions.</p><h4>Task 8: Dispatch your fetch cities action and subscribe your city component to the store</h4><p>In for our component to access the store, dispatch your fetch cities action and subscribe your city component to the store.</p><p>Your fetch function is now defined as an action, but we still need to dispatch it at a specific point of time in your application.</p><p>This means that your component will have access to the store and will get notified when there are some changes.</p><p>First, we need to import some functions from the react-redux package and the action you want to dispatch:</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"f29a8006-cbc4-40e0-bfae-719c34812a58\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[import { connect } from \"react-redux\";\nimport { <name of your fetch function> } from \"<path to your cityActions.js file>\";]]></ac:plain-text-body></ac:structured-macro><p>Connect will help you to dispatch and subscribe to the store at the same time. It takes two parameters: &ldquo;mapStateToProps&rdquo; and &ldquo;mapDispatchToProps&rdquo;. They are both functions that are mapping your store or your actions and taking or dispatching only the one that you want.</p><p>Here you can find informations about them and how to use them: <a href=\"https://codebrains.io/react-redux-mapstatetoprops-vs-mapdispatchtoprops/\">https://codebrains.io/react-redux-mapstatetoprops-vs-mapdispatchtoprops/</a></p><h4>Task 9: Add a link to the arrow.png in the landing page that matches the wire frame requirements</h4><p>This resource refers to creating a link within the image that retrieves all the cities data.</p><ul><li><p><a href=\"https://medium.com/@pshrmn/a-simple-react-router-v4-tutorial-7f23ff27adf\">https://medium.com/@pshrmn/a-simple-react-router-v4-tutorial-7f23ff27adf</a></p></li></ul><h4>Task 10: Open Redux dev tool and check that the cities are there</h4><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"538\" ac:original-width=\"1150\" ac:width=\"680\"><ri:attachment ri:filename=\"redux-dev-tool.png\" ri:version-at-save=\"1\" /></ac:image><p /></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"05a34902-df83-447e-b0d8-11920bc6d955\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> Epic 2: Setup Itinerary Schema in Database</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"1ee0a30b-477f-4635-b675-88f4c764d69d\"><ac:rich-text-body><h4>Task 1: Define Itinerary schema by creating a file called *Itinerary.js* in the backend folder</h4><h4>Task 2: Determine Collections and DB&rsquo;s needed for MongoDB</h4><p>Note: Be sure to create a separate collection for itineraries.</p><h4>Task 3: Manually populate itineraries in MongoDB Atlas with data from wire frames</h4><p>Hint: each itinerary should have a title, a profile picture(URL), a rating, a duration, a price and some hashtags. Try to think about the most suitable data type for each of these parameters.</p><p>Note: You&rsquo;ll want to make sure that each itinerary is &quot;linked&quot; to a specific city, you will see why later. Think about how you could do that.</p></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"3e654255-b731-47f8-bc72-c842d4816f24\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"c0f40a7f-77dd-4231-b81a-a69043667539\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Epic 3: Retrieve Itineraries for a city</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"3763fc75-b41d-4d35-be03-c19d4a747797\"><ac:rich-text-body><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"f16a6feb-2691-4aa8-8748-afe87617db0f\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  Task 1: Create GET route for Itinerary by specific city</h4><p>Now you need to implement a route that sends back all the itineraries relating to a specific city. In express there is something called &quot;URL parameters&quot; that allows you to extract parameters from the URL. This means that the user could make a request by using a URL that contains a city name or a city id and in the back-end you would be able to read that value.</p><p>This is an example for the city route that you can adapt to get itineraries link to a specific city: </p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"ccc15a8e-b2d7-4532-872c-dbe514ffc6a1\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[//this is code that you have already implemented in your project\nrouter.get('/all',\n    (req, res) => {\n        cityModel.find({})\n            .then(files => {\n                res.send(files)\n            })\n            .catch(err => console.log(err));\n});\n\n//this is how you implement a city route by specific city\nrouter.get('/:name',\n\t(req, res) => {\n  \t\tlet cityRequested = req.params.name;\n  \t\tcityModel.findOne({ name: cityRequested })\n\t\t\t.then(city => {\n\t\t\t\tres.send(city)\n\t\t\t})\n\t\t\t.catch(err => console.log(err));\n});]]></ac:plain-text-body></ac:structured-macro><h4> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"5fc54896-d288-46c4-85d4-1993518c3704\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Task 2: Test it on Postman</h4><p>If you test this route on Postman, this is what you would get:</p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"585\" ac:original-width=\"1147\"><ri:attachment ri:filename=\"get-one-city.png\" ri:version-at-save=\"1\" /></ac:image><p>The mongoose method <code>findOne()</code> is returning the one query object that meets the condition.</p><p>What you want to do is similar to this, but instead of returning one city, you want to return an array of itineraries according to the city name in the URL.</p><p>Here you can find more detailed explanations about mongoose methods and URL parameters:</p><ul><li><p><a href=\"https://mongoosejs.com/docs/api/model.html#model_Model.find\">https://mongoosejs.com/docs/api/model.html#model_Model.find</a></p></li><li><p><a href=\"https://webapplog.com/url-parameters-and-routing-in-express-js/\">https://webapplog.com/url-parameters-and-routing-in-express-js/</a></p></li><li><p><a href=\"https://coursework.vschool.io/express-params-and-query/\">https://coursework.vschool.io/express-params-and-query</a></p></li></ul><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"3f6039ec-d10b-43ca-a205-d7124f6d1355\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Task 3: Create Itinerary.js Component</h4><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"3971dd5e-3525-4eab-a344-1b38ae288dca\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Task 4: Create itineraryReducer.js and create itineraryActions.js</h4><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"409477b8-03de-419a-bb52-613ce996d354\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Task 5: Retrieve itinerary data for each city</h4><p>Hint: When users clicks on a specific city, they should be able to retrieve all the itineraries of this specific city.</p><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"4e243648-c6dc-4b89-a0cc-48b5318dfc72\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Task 6: Open Redux DevTools and verify Itineraries are there exactly like the cities</h4></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"25f684c2-621b-42bc-94e4-17d9987c0b04\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"f34b1495-91b2-4b89-be85-06e75c875ecb\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"0b722f2f-64c7-401a-a95f-70d4628c0c2f\"><ac:parameter ac:name=\"title\">NICE TO HAVE</ac:parameter><ac:parameter ac:name=\"colour\">Purple</ac:parameter></ac:structured-macro> Epic 4: Activities</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"ca124178-b1c4-4c9c-aea5-a5f6bd35bfd4\"><ac:rich-text-body><p>In this Epic you will have to decide on the model you want to apply to an activity object. There are two main ways to think about activities:</p><ul><li><p>Activities are specific to a city and therefore to an itinerary (eg: activities related to Gaudi can be done only in Barcelona);</p></li><li><p>Activities are independent generic entities, which can be done in different cities and for different itineraries (ex: walking in the city center and pub crawling can be done in any city).</p></li></ul><p>It is up to you to decide how you want to see activities. Depending on what you choose, you will have to think about what it makes more sense in the database: should activity be a new independent collection or should it be just a part of the itinerary collection?</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"5356c73b-bbb9-4a95-8e31-570a0001cd89\"><ac:parameter ac:name=\"title\">BACK END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  <strong>Task 1: </strong>Based on the considerations made above, adapt your back end to have activities<br />N.B: It's up to you to decide what you want to show in the activity component (just a title, a title and a picture, only a picture?)</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"c931f0d7-b0d6-4b4e-a22d-10db4cb981fd\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <strong>Task 2:</strong> Create activity component<br /><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"2f611b7a-8c51-4c41-be23-f26ddfd5cf25\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <strong>Task 3:</strong> Nest activity component in itinerary component and add the style of the wire frame<br />Per the functional requirements the component should toggle open and closed on clicks</p></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"289aa8b5-1812-46cd-ad18-66017f5463f4\"><ac:parameter ac:name=\"title\">FRONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  Epic 5 : Test Drive Development: WIP</h2><h2>Extra: Trello Board</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"73dbb9f7-e638-4199-8554-f7a8cfb4e336\"><ac:rich-text-body><ac:structured-macro ac:name=\"trello-board\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"50f97f77-522c-4c1a-9447-d7d5a5e77b0e\"><ac:parameter ac:name=\"url\">https://trello.com/b/qjQpyoob/mern-v2-project-sprint-3</ac:parameter></ac:structured-macro></ac:rich-text-body></ac:structured-macro>",
    "conflPageId": "323452933",
    "conflChildrenId": [

    ]
  },
  {
    "title": "V2 MERN Sprint 4",
    "content": "<p>In this sprint you will learn how to create new users and login to your app. You will also create a login feature, and render content differently depending on whether or not a user is logged in.</p><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"6c2d84cf-8191-4c2a-b68a-2b33b9069d79\"><ac:parameter ac:name=\"title\">FONT END ALT</ac:parameter><ac:parameter ac:name=\"colour\">Green</ac:parameter></ac:structured-macro>  User management</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"2faa5204-1a14-4d09-89c5-a0bff2018dd0\"><ac:rich-text-body><p>All endpoints : <a href=\"https://documenter.getpostman.com/view/6286651/SVtTz9Pu?version=latest\">https://documenter.getpostman.com/view/6286651/SVtTz9Pu?version=latest</a></p></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"466d5ce8-f03f-42f9-89e9-28049dcdd150\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"1901c4f5-df27-47d7-bef1-b4b5a61460ec\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> Epic 1: Build &lsquo;Create New Account&rsquo; page and functionality</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"a4ada0db-5f1f-4ce2-a371-46e672095224\"><ac:rich-text-body><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"d70dd28c-928b-4f16-89ce-71369186080b\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <strong>Task 1: Build component that allows users to create new account</strong></p><p>Key points and subtasks:</p><ul><li><p>Acts as a parent view for internal elements</p></li><li><p>Router should be able to route here</p></li><li><p>Add link in global nav if it doesn&rsquo;t already exist</p></li></ul><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"0ee213ff-d43d-4ed7-997a-bbb7288c40e0\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <strong>Task 2: Build out the Form</strong></p><p>Build a form that will collect user information.</p><p>It should contain at least the following input fields: email, password, picture (this will be a URL).</p><p>Tip: your component state should store all the input field values and dispatch an action only when the user clicks on submit.</p><p>You can find more about forms in React here: <a href=\"https://reactjs.org/docs/forms.html\">https://reactjs.org/docs/forms.html</a></p><h4><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"5a931187-e432-40ed-9030-da62af847bb9\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  <strong>Task 3: Code Form Submit</strong></h4><p>Key points and subtasks:</p><ul><li><p>Create user POST route, user model and user collection in Mongodb, if it doesn&rsquo;t already exist.</p></li><li><p>Provide error to the user if account exist</p></li><li><p>Encrypt your password with <a href=\"https://www.npmjs.com/package/bcrypt\">bcrypt</a> before saving the new user to the database</p></li></ul><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"271441d5-66b8-4932-b402-bf6635948382\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"13e4e083-b9dc-4fd8-9bd0-5d8508c5fe2c\"><ac:parameter ac:name=\"title\">nice to have</ac:parameter><ac:parameter ac:name=\"colour\">Purple</ac:parameter></ac:structured-macro> <strong>Task 4: Validation</strong></p><p>Server-side validation is a key feature in developing websites. This stops Javascript-savvy users from forcing our server to send or receive information they are not entitled to.</p><p>Through the validation process, we can check on the back-end to ensure certain conditions are met.</p><p>Here you can find the documentation of express-validator, a set of middleware that you can use to validate: <a href=\"https://express-validator.github.io/docs/index.html\">https://express-validator.github.io/docs/index.html</a></p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"ad80eaa3-c516-483f-8221-6b8d139af8d9\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <strong>Task 5: Use Fecth/Axios and Async Await to make a POST request</strong></p><p>The last step is to create actions and a reducer to make a request to your user route.</p><p>Other than fetch, there is an other method to perform AJAX calls called Axios.</p><p>You can read more about Axios here:</p><ul><li><p><a href=\"https://medium.com/@thejasonfile/fetch-vs-axios-js-for-making-http-requests-2b261cdd3af5\">https://medium.com/@thejasonfile/fetch-vs-axios-js-for-making-http-requests-2b261cdd3af5</a></p></li><li><p><a href=\"https://www.npmjs.com/package/axios\">https://www.npmjs.com/package/axios</a></p></li></ul><p>Async Await was introduced to work with ES6 Promises. This feature is essentially &ldquo;syntactical sugar&rdquo; which allows us to write asynchronous code that looks synchronous.</p><p>You can use it with both fetch and axios in order to replace the chain of .then() and .catch().</p><p>Here an example of how to use it with fetch: <a href=\"https://dev.to/shoupn/javascript-fetch-api-and-using-asyncawait-47mp\">https://dev.to/shoupn/javascript-fetch-api-and-using-asyncawait-47mp</a></p></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"c81092b9-0859-4b34-9456-39f998ef4183\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"6eceba7e-7281-4896-9780-a2adda7d14a0\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> Epic 2: Build Login page and functionality</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"8184e863-4766-421a-b011-6820d2d51b5f\"><ac:rich-text-body><p>The process of securing a system involves two very important steps: authentication and authorisation.</p><p>Authentication is about validating your credentials like User Name/User ID and password to verify your identity. The system determines whether you are what you say you are using your credentials.<br />Authorisation, on the other hand, occurs after your identity is successfully authenticated by the system, which ultimately gives you full permission to access the resources such as information, files, databases, funds, locations, and almost anything. In simple terms, authorisation determines your ability to access the system and to what extent.<br />In this Epic you will focus on the first. You will use two libraries called <a href=\"http://www.passportjs.org/\">Passport</a> and <a href=\"https://jwt.io/\">JWT</a> (JSON Web Token). They will help you to securely authenticate users by passing tokens to them which are then passed to the server with each request.</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"ec34f9a0-20c3-466b-adec-a58c47f91808\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <strong>Task 1: Create a Login component</strong></p><p>Key points and subtasks:</p><ul><li><p>Acts as a parent view for internal elements</p></li><li><p>Router should be able to route here</p></li><li><p>Add link in global nav if it doesn&rsquo;t already exist</p></li></ul><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"309a5ed4-cefe-48ae-a7c0-07cf1c177af9\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <strong>Task 2: Create Form Elements</strong></p><p>Key points and subtasks:</p><ul><li><p>Same steps as build create new account</p></li><li><p>Minor validation to ensure both fields have input</p></li></ul><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"a33608d8-bc14-4658-aade-8aeb02fccdb2\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  <strong>Task 3: Install passport and JWT</strong></p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"f1d62c92-5b46-4f45-9887-d9a3f4e33a65\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[npm i passport passport-jwt jsonwebtoken]]></ac:plain-text-body></ac:structured-macro><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"616b2525-b948-4ec8-ae87-57ef47795cfd\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  <strong><ac:inline-comment-marker ac:ref=\"018db4ea-3153-4b02-b436-9aff83275319\">Task 4: Create a login POST route in your user route</ac:inline-comment-marker></strong></p><p><strong>Step 1:</strong> Go to your config file and under the mongoURI key add a new one similar to this: </p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"3a4228ca-2fe3-46ed-8b01-1ad39fa60a9f\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[secretOrKey: \"secret\"]]></ac:plain-text-body></ac:structured-macro><p>This is a secret key that JWT will use to encrypt the token (it doesn&rsquo;t have to be called secret, then name is up to you). When you receive a JWT from the client, you can verify that JWT with this that secret key.</p><p><strong>Step 2:</strong></p><ul><li><p>import your secret key <code>const key = require(&quot;&lt;path to your config file&gt;&quot;);</code></p></li><li><p>import the jwt module: <code>const&nbsp;jwt&nbsp;=&nbsp;require(&quot;jsonwebtoken&quot;);</code></p></li><li><p>create POST login route</p></li><li><p>provide error if email does not correspond with email of one user in the database</p></li><li><p>if user exists, compare passwords with bycript <code>compare</code> function</p></li><li><p>if password corresponds, create JWT payload, sign token and send it back like so:</p></li></ul><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"32a32d9c-d9e4-449d-9097-cc393ad8f346\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[const payload = {\n            id: user.id,\n            username: user.username,\n            avatarPicture: user.avatarPicture\n};\nconst options = {expiresIn: 2592000};\njwt.sign(\n  payload,\n  key.secretOrKey,\n  options,\n  (err, token) => {\n    if(err){\n      res.json({\n        success: false,\n        token: \"There was an error\"\n      });\n    }else {\n      res.json({\n        success: true,\n        token: token\n      });\n    }\n  }\n);]]></ac:plain-text-body></ac:structured-macro><p>The sign method takes four parameters: </p><ul><li><p>payload: is a series of informations that will be used to create the token (therefore you can decode this token afterwards and access these values)</p></li><li><p>the secret key (explained above)</p></li><li><p>options: expiration time is seconds</p></li><li><p>function: if there is not an error you can send the token to the front-end.</p></li></ul><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"4da0d0bd-5ddb-4637-b402-71d31b837abd\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <strong>Task 5:</strong> <strong>Test it with Postman</strong></p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"977\" ac:original-width=\"1913\"><ri:attachment ri:filename=\"login.jpg\" ri:version-at-save=\"2\" /></ac:image><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"7f0d4dc5-3e25-4d22-982d-21ae19ebbb30\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> <strong>Task 6: Initialise Passport</strong></p><p><strong>Step 1:</strong> Create a file called passport.js: here is where you will declare you passport strategies. Leave it empty for now.</p><p><strong>Step 2:</strong> Go to your server.js file and import passport. </p><p><strong>Step 3:</strong> Set <ac:inline-comment-marker ac:ref=\"f45a5185-617e-4510-b726-fbb1f23aa60d\">up and configure passport middleware</ac:inline-comment-marker>:</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"da608cb4-8e84-4ca8-88dc-f76806fa73e4\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[//passport middleware\napp.use(passport.initialize());\n//passport configuration\nrequire(\"<path to your passport.js file>\");]]></ac:plain-text-body></ac:structured-macro><p>N.B: it is normal that your server will throw an error if you run the code before you have written a passport strategy</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"c276b1fb-1161-4b71-ab02-e6a9d72b043a\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> <strong>Task 7: Write a passport strategy</strong></p><p>Passport has a lot of different modules that help authenticate users in different ways and they are called strategies. Here, you will use a strategy that will allow you to authenticate users by using a JWT.</p><p><strong>Step 1: </strong>Go to the passport.js file and import your secret key and some other modules:</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"812ee536-6504-4f33-b800-6725f3ac8b90\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[const JwtStrategy = require(\"passport-jwt\").Strategy;\nconst ExtractJwt = require(\"passport-jwt\").ExtractJwt;\nconst mongoose = require(\"mongoose\");\nconst User = mongoose.model(\"user\");\nconst key = require(\"<path to your config file>\");]]></ac:plain-text-body></ac:structured-macro><p>The JwtStrategy needs two parameters: the first is an object literal containing options to control how the token is extracted from the request or verified and the second is a function.</p><p>Let&rsquo;s c<ac:inline-comment-marker ac:ref=\"7e79f295-b808-40a1-b464-85e1692f0a6e\">reate the options obj</ac:inline-comment-marker>ect:</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"df83b3fd-fee4-45af-90a4-e2cfd54d65fc\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[const opts = {};\nopts.jwtFromRequest = ExtractJwt.fromAuthHeaderAsBearerToken();\nopts.secretOrKey= key.secretOrKey;]]></ac:plain-text-body></ac:structured-macro><p>And now the JWT strategy:</p><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"f75e5590-5dba-4141-a501-920cf36d89ea\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[module.exports = passport.use(\n    new JwtStrategy(opts, (jwt_payload, done) => {\n        User.findById(jwt_payload.id)\n        .then(user => {\n          if (user) {\n            return done(null, user);\n          }\n          return done(null, false);\n        })\n        .catch(err => console.log(err));\n    })\n  );\n]]></ac:plain-text-body></ac:structured-macro><p>When you create a JWT for a user, the encrypted string contains all of the information about this user. Therefore if we decode the token, we are able to access the user id. Accessing the decoded token, we can now check if there is a user in your database with the same id. If there is, return that user.</p><p>Therefore, if now you create a GET or POST request that needs authentication, you can use the passport JWT Strategy. Let&rsquo;s write a test get route that will check if you are logged in before sending back the information about your profile:</p><p /><ac:structured-macro ac:name=\"code\" ac:schema-version=\"1\" ac:macro-id=\"a7f0f881-9337-4d4a-8309-4cefb6de5a2c\"><ac:parameter ac:name=\"language\">js</ac:parameter><ac:plain-text-body><![CDATA[router.get(\n  \"/\",\n  passport.authenticate(\"jwt\", { session: false }),\n  (req, res) => {\n    userModel\n      .findOne({ _id: req.user.id })\n      .then(user => {\n        res.json(user);\n      })\n      .catch(err => res.status(404).json({ error: \"User does not exist!\" }));\n  }\n);]]></ac:plain-text-body></ac:structured-macro><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"5289ca49-32bf-4167-9ebe-8da16a61c892\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <strong>Task 8: Test it with Postman</strong></p><p>In order to test this, go to Postman and make a get request like so:</p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"981\" ac:original-width=\"1917\"><ri:attachment ri:filename=\"current user.jpg\" ri:version-at-save=\"4\" /></ac:image><p>It is important that you take the token from the previous login test and put it in the Header with &ldquo;bearer&ldquo; in front.</p></ac:rich-text-body></ac:structured-macro><h2> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"8cce01ac-749b-4ee2-890a-4897d0fba0b8\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"ebf19d05-bdd9-440a-bdce-ed2896484df3\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> Epic 3: Add login with Google</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"c896c1ed-a0dc-4ccf-ba37-295e7cc1b383\"><ac:rich-text-body><p>In this epic you will add the possibility for the user to login with an external provider, in this case Google. You will use an other passport strategy for that.</p><p><a href=\"https://docs.google.com/presentation/d/1gmGs5Do--rVs00FS0kPbi2lVmg-4mTgcnTQei-gOUCw/edit#slide=id.p\">Here</a> you can find a simple schema of the process you&rsquo;ll have to go through.</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"0f4d5bfb-8c97-46f3-9dd8-745d8b3e21b4\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro> <strong>Task 1: Create a button pointing to a custom route - point 1 of the schema</strong></p><p>N.B: this is not an Ajax request, but a simple link to a route.</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"ac88dc8b-e3c5-4047-a77c-610564f35838\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> <strong>Task 2: Create that custom route (it will be a GET request) - point 2 of the schema</strong></p><p>Don&rsquo;t worry about the code inside for now.</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"349803e9-fb8d-4478-81d7-799898a823a6\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> <strong>Task 3: Create redirected custom route (GET) - point 4 of the schema</strong></p><p>Don&rsquo;t worry about the code inside for now.</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"2d185114-c39f-45a5-9afa-0e393d833649\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> <strong>Task 4: Create a project on the Google Cloud Platform</strong></p><p>After you have created a new project go to the OAuth Consent Screen (it&rsquo;s easier if you type it in the search bar), and give a name to your application.</p><p>Afterwards, go to the Credential tab and click on Create Credentials. Select ID client OAuth. Select type of application (remember it&rsquo;s a PWA- progressive web app). </p><p>Under the Allowed JavaScript origins you should put from which URI you will connect with Google (the route you have created in step 2) and under the Authorised redirected URI you should put the one that you want to redirect to after the Google consent screen (point 4 of the schema).</p><p>Once the credentials are created, save them in your config file (remember that you don&rsquo;t want to push them on GitHub!)</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"285d6d4a-5183-4df6-92c1-733e7bab302c\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  <strong>Task 5: Write a google passport strategy</strong></p><p><strong>Step 1: </strong><code>npm i passport-google-oauth20</code></p><p><strong>Step 2:  </strong>Follow the instruction in <a href=\"http://www.passportjs.org/packages/passport-google-oauth20/\">this document</a> to create your google strategy under the JwtStrategy.</p><p>Remember to check if the user exists in the same way you did for the previous strategy.</p><p>If it doesn&rsquo;t exists, create an entry in the database and return it in the <code>done</code> function (point 5 and 6 of the schema).</p><p><strong><span style=\"color: rgb(255,86,48);\">N.B: When a user registers using google, there is no password required. Think about how to solve this in your user model.</span></strong></p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"3b1ec1cb-450e-4beb-9deb-eb2261de00ad\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> <strong>Task 6: Write code for the user routes</strong></p><p><strong>Step 1:</strong> Write the code for the route which you will hit once the user clicks on the Google+ button (follow the passport document).</p><p><strong>Step 2:</strong> Write the code for the redirected route.</p><p><strong><span style=\"color: rgb(255,86,48);\">TIP</span></strong>: Here is where you want to create the JWT (point 6 of the schema).</p><p><strong><span style=\"color: rgb(255,86,48);\">TIP</span></strong>: Since the google passport strategy has to redirect you back to a page in the front-end, think about a way to send the token to the client through the URL.</p></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"cff448be-c847-484d-ae33-a315ad5b7c9b\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"d50ff127-1cf4-4ab2-936e-c78b824db361\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> Epic 4: Store the token and use it for authorised routes</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"710f699a-77cf-45ad-bfa8-c666f038162d\"><ac:rich-text-body><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"f9d6f964-2033-47e7-856d-6fa6aefc584f\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <strong>Task 1: Create register action and reducer</strong></p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"3ee53387-59fa-4125-8166-78931795533c\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro> <strong>Task 2:</strong> <strong>Create login action and reducer to and store your token</strong></p><p>Key points:</p><ul><li><p>store token in the local storage</p></li><li><p>when refreshing pages, check if the token exists</p></li><li><p>use the decoded token to show avatar picture and/or username of the logged-in user (<code>npm i jwt-decode</code>) and use redux to store it in central store</p></li></ul><p><strong><span style=\"color: rgb(255,86,48);\">TIP</span></strong>: If you are using a node package for fetch or axios you could think about a way to include the token in the header for every request if the a user is logged in.</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"7d16c92e-69d0-4b1d-9f9b-eb3fb676219a\"><ac:parameter ac:name=\"title\">FONT END</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <strong>Task 3: Create logout action and reducer</strong></p><p><strong><span style=\"color: rgb(255,86,48);\">TIP: </span></strong>To logout, you need to clean the local storage and the user object in the central store</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"42695cd3-0bdf-466c-8a9a-3ba830e33c75\"><ac:parameter ac:name=\"title\">nice to have</ac:parameter><ac:parameter ac:name=\"colour\">Purple</ac:parameter></ac:structured-macro>  <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"9444c871-3f19-490b-b7a7-5bd97cc9d254\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> <strong>Task 4: Implement logout route </strong></p><p>This process should logout a user from both client and server side. This is simple on the client side, while on the server side it's a bit more complicated (<a href=\"https://medium.com/devgorilla/how-to-log-out-when-using-jwt-a8c7823e8a6\">you can read why here</a>). However, differently from the article, you could think about storing in the user collection a parameter that it is true or false depending on whether or not the user is logged in, and when checking for the JWT, you could check for this parameter as well.</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"df793bfa-8793-48d9-bb6c-3ca2f7b15b98\"><ac:parameter ac:name=\"title\">back END</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  <strong>Task 5: Lock all the POST routes that you have to allow only logged-in users to use them</strong></p></ac:rich-text-body></ac:structured-macro><h2>Extra: Trello Board</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"a242b282-e3d1-4635-8cf2-02b31c8b073e\"><ac:rich-text-body><ac:structured-macro ac:name=\"trello-board\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"f5583de8-5390-46b4-8b4d-763f35a22b14\"><ac:parameter ac:name=\"url\">https://trello.com/b/BYBChZNv/mern-v2-project-sprint-4</ac:parameter></ac:structured-macro></ac:rich-text-body></ac:structured-macro>",
    "conflPageId": "324403201",
    "conflChildrenId": [

    ]
  },
  {
    "title": "JAVA Course",
    "content": "<p />",
    "conflPageId": "344064019",
    "conflChildrenId": [
      "260931585",
      "282263572",
      "524352"
    ]
  },
  {
    "title": "External Side Projects",
    "content": "<p />",
    "conflPageId": "344162305",
    "conflChildrenId": [
      "312246281"
    ]
  },
  {
    "title": "V2 MERN Sprint 5",
    "content": "<p>In this sprint you will have to manage users' favourite itineraries and comments.</p><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"c37d901d-77b6-4b94-97dd-09e5a08192f6\"><ac:parameter ac:name=\"title\">back end</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"8a59f96c-2dfb-496e-852b-7ed1b0983aed\"><ac:parameter ac:name=\"title\">front end</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro> Epic 1: Save itineraries as favourites</h2><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"d44ed6bc-e4b8-4ee4-a3f6-bb6ee93bb5bc\"><ac:rich-text-body><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"50fbebc3-2f65-4957-b950-a54b4dece78b\"><ac:parameter ac:name=\"title\">back end</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro>  <strong>Task 1: Update your back-end to support users favourites.</strong></p><p>You will need to update your user model and add a get and post route for the favourites.</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"d531fc3c-da7f-437e-bb08-9f046c80944d\"><ac:parameter ac:name=\"title\">front end</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <strong>Task 2: Update your front-end to allow users to like itineraries.</strong></p><p>Create a button that changes colour when the itinerary has been liked by the user (like on Instagram).</p><p><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"76b8a72f-59e3-4bc3-8976-b81bfbca9791\"><ac:parameter ac:name=\"title\">front end</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro>  <strong>Task 3: Create logic for favourites itineraries</strong></p><p>You need to think that by clicking the favourite button you will add this itinerary to the user&rsquo;s favourites. As a consequence the button will change colour. Once you refresh the page, the button still has to show the correct colour (eg: red if liked, white if not liked). When a liked itinerary gets clicked again, this should delete the itinerary from the user&rsquo;s favourites and the button should return to its original state.</p></ac:rich-text-body></ac:structured-macro><h2><ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"8048def3-22e1-4ba5-8a55-7013e2977aa7\"><ac:parameter ac:name=\"title\">back end</ac:parameter><ac:parameter ac:name=\"colour\">Blue</ac:parameter></ac:structured-macro> <ac:structured-macro ac:name=\"status\" ac:schema-version=\"1\" ac:macro-id=\"0d0260bb-6496-4b0d-a91e-2f49957c7b22\"><ac:parameter ac:name=\"title\">front end</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter></ac:structured-macro> Epic 2: Allow users to create, read, update and delete comments on itineraries</h2><p>In this epic you will focus on the CRUD operations. Create and read is something you have used before. Beside them, now you will have to use the other two as well.</p><ac:structured-macro ac:name=\"expand\" ac:schema-version=\"1\" data-layout=\"default\" ac:macro-id=\"bce73fea-f588-4f12-a919-451883c82046\"><ac:rich-text-body><p><strong>Task 1: Update both front-end and back-end to allow users to write and read comments.</strong></p><p><strong>Task 2: Once the Create and Read operations are working, investigate the Update and Delete actions and implement them in your project.</strong></p></ac:rich-text-body></ac:structured-macro><p />",
    "conflPageId": "346816530",
    "conflChildrenId": [

    ]
  },
  {
    "title": "Hello World",
    "content": "<ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"2045\" ac:original-width=\"6000\" ac:width=\"442\"><ri:attachment ri:filename=\"ubiqum.png\" ri:version-at-save=\"2\" /></ac:image><p /><h2 style=\"text-align: center;\">On behalf of the<span style=\"color: rgb(255,86,48);\"> Ubiqum</span> team, we welcome you to the world of web development.</h2><p /><p style=\"text-align: center;\"><ac:emoticon ac:name=\"blue-star\" ac:emoji-shortname=\":compass:\" ac:emoji-id=\"1f9ed\" ac:emoji-fallback=\"🧭\" /> </p><p style=\"text-align: center;\">During the next 3 months if you have chosen our <strong><span style=\"color: rgb(255,86,48);\">MERN</span></strong> course and 5 months if you have picked <strong><span style=\"color: rgb(255,86,48);\">JAVA</span></strong>, we will guide you through the journey into becoming a developer.</p><p style=\"text-align: center;\">This won&rsquo;t be an easy task but through commitment and dedication to the work we ensure you that our immersive courses will give you all the tools necessary to find your first developer job.</p><p style=\"text-align: center;\"><ac:emoticon ac:name=\"blue-star\" ac:emoji-shortname=\":books:\" ac:emoji-id=\"1f4da\" ac:emoji-fallback=\"📚\" /> </p><p style=\"text-align: center;\">The <strong><span style=\"color: rgb(255,86,48);\">Confluence </span></strong>platform will guide you through the different tasks that are expected from you in the different projects. It will not  however provide you the solutions to your problems.</p><p style=\"text-align: center;\">Indeed, our story centered methodology is a project-based, <strong><span style=\"color: rgb(255,86,48);\">learn-by-doing</span></strong> approach. This means you will have to research on your own solutions to each problem by your own means. </p><p style=\"text-align: center;\">This might seem scary at first but is necessary in obtaining the <strong><span style=\"color: rgb(255,86,48);\">coding logic </span></strong>that is fundamental to become a developer.</p><p style=\"text-align: center;\"><ac:emoticon ac:name=\"blue-star\" ac:emoji-shortname=\":busts_in_silhouette:\" ac:emoji-id=\"1f465\" ac:emoji-fallback=\"👥\" /> </p><p style=\"text-align: center;\">It can however happen that you are not able to find the answers you need. </p><p style=\"text-align: center;\">You will then have the possibility to book an appointment with one of your <strong><span style=\"color: rgb(255,86,48);\">mentor </span></strong>whom will guide you through materials and solutions to explore. </p><p style=\"text-align: center;\">To do so you will use the platform <strong><span style=\"color: rgb(255,86,48);\">Calendlys </span></strong>where it is important that you explain your issue and how you tried to solve it. (find mentors Calendly&rsquo;s <a href=\"https://ubiqum.atlassian.net/wiki/spaces/STUDENTS/pages/226328603/Calendlys\">here</a>)</p><p style=\"text-align: center;\"><ac:emoticon ac:name=\"blue-star\" ac:emoji-shortname=\":chart_with_upwards_trend:\" ac:emoji-id=\"1f4c8\" ac:emoji-fallback=\"📈\" /> </p><p style=\"text-align: center;\">Each of the project development structure is adapted from the widely used Agile Scrum methodology, today present in most IT companies.</p><p style=\"text-align: center;\">Hence, you will work on different features in small increments of 5 days called <strong><span style=\"color: rgb(255,86,48);\">sprints</span></strong><span style=\"color: rgb(255,86,48);\">. </span>Project are between 1 and 8 sprints.</p><p style=\"text-align: center;\">You will use <strong><span style=\"color: rgb(255,86,48);\">Trello </span></strong>management tool to track a backlog of features in development.</p><p style=\"text-align: center;\"><ac:emoticon ac:name=\"blue-star\" ac:emoji-shortname=\":calendar_spiral:\" ac:emoji-id=\"1f5d3\" ac:emoji-fallback=\"🗓\" /> </p><p style=\"text-align: center;\">Your day will start with a daily 10 min <strong><span style=\"color: rgb(255,86,48);\">stand up meeting</span></strong> where each students will talk about his work from the previous day with mentors and identify potential blockers that were encountered before briefly explaining the plan of action for the day.</p><p style=\"text-align: center;\">Every now and then, you will also have <strong><span style=\"color: rgb(255,86,48);\">spikes. </span></strong>These are<strong><span style=\"color: rgb(255,86,48);\"> </span></strong>short and dynamic presentations led by mentors to clarify known difficulties or blockers identified during stand ups.</p><p style=\"text-align: center;\"><ac:emoticon ac:name=\"blue-star\" ac:emoji-shortname=\":man_office_worker:\" ac:emoji-id=\"1f468-200d-1f4bc\" ac:emoji-fallback=\"👨&zwj;💼\" /> </p><p style=\"text-align: center;\">At the end of every <strong><span style=\"color: rgb(255,86,48);\">project</span></strong>, you will present in front of the group your project as if it were a presentation for a client.</p><p style=\"text-align: center;\">Then mentors will give you feedback and <strong><span style=\"color: rgb(255,86,48);\">code review.</span></strong></p><p style=\"text-align: center;\"><ac:emoticon ac:name=\"blue-star\" ac:emoji-shortname=\":office:\" ac:emoji-id=\"1f3e2\" ac:emoji-fallback=\"🏢\" /> </p><p style=\"text-align: center;\">Some of the projects are accompanied by fictional characters acting as your colleagues and simulate a real <strong><span style=\"color: rgb(255,86,48);\">work environment</span></strong>. </p><p style=\"text-align: center;\">This role playing can give you a good idea of what the life of developers can be.</p><p style=\"text-align: center;\">The content from the emails can also be found in confluence.</p><p style=\"text-align: center;\"><ac:emoticon ac:name=\"blue-star\" ac:emoji-shortname=\":curly_loop:\" ac:emoji-id=\"27b0\" ac:emoji-fallback=\"➰\" /> </p><p style=\"text-align: center;\"><strong><span style=\"color: rgb(255,86,48);\">Ubiqum </span></strong>staff is here for you, so come to us for any issue you might encounter</p><ac:image ac:align=\"center\" ac:layout=\"center\" ac:original-height=\"400\" ac:original-width=\"400\" ac:width=\"102\"><ri:attachment ri:filename=\"logo-ubiqum-round-color-white.jpg\" ri:version-at-save=\"2\" /></ac:image><p /><h1 style=\"text-align: center;\"><span style=\"color: rgb(255,86,48);\">Happy Coding</span></h1>",
    "conflPageId": "354844755",
    "conflChildrenId": [
      "226328603",
      "221413398",
      "228524142",
      "238125072",
      "320045084",
      "344064019",
      "298090497",
      "294354945",
      "344162305"
    ]
  }
]